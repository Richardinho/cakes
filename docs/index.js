/*! For license information please see index.js.LICENSE.txt */
(()=>{var e={798:(e,n,t)=>{"use strict";t.d(n,{Z:()=>l});var r=t(15),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,"._25L5RNZdfLj6luvRe5cg4- {\n  min-height: 100vh;\n  width: 100%;\n  padding: 20px;\n  width: 100%;\n}\n._2Wfh3d5rSmYYghu3PrmEHF {\n  display: inline-block;\n  vertical-align: middle;\n}\n._36pDYvawf5b4iYiGGe7YHj {\n  border: solid 2px white;\n  padding: 20px;\n}\n._2Wfh3d5rSmYYghu3PrmEHF img {\n  width: 100px;\n  height: 100px;\n  margin-right: 2px;\n}\n._16lV1hmxTCtKUT2pqfT-Li {\n  display: inline-block;\n  width: 200px;\n  height: 200px;\n  background: grey;\n  vertical-align: middle;\n  margin-left: 10px;\n}\n._16lV1hmxTCtKUT2pqfT-Li img {\n  width: 100%;\n  height: 100%;\n}\n._2xqAEzvVpYlHqk1ZMteEyQ {\n  padding: 10px 0;\n}\n._2xqAEzvVpYlHqk1ZMteEyQ button {\n  margin-right: 10px;\n}\n._2YnQwKDfC8TpqmNOTPyk2x {\n  vertical-align: top;\n  margin-right: 10px;\n}\n._3kFugbmP1jc_vAFWRdh2u8 {\n  vertical-align: top;\n}\n._3c-vZSvppY9iDeyZjpSmsn {\n  padding: 10px 0;\n}\n","",{version:3,sources:["webpack://src/add-cake.component.css"],names:[],mappings:"AAAA;EACE,iBAAiB;EACjB,WAAW;EACX,aAAa;EACb,WAAW;AACb;AACA;EACE,qBAAqB;EACrB,sBAAsB;AACxB;AACA;EACE,uBAAuB;EACvB,aAAa;AACf;AACA;EACE,YAAY;EACZ,aAAa;EACb,iBAAiB;AACnB;AACA;EACE,qBAAqB;EACrB,YAAY;EACZ,aAAa;EACb,gBAAgB;EAChB,sBAAsB;EACtB,iBAAiB;AACnB;AACA;EACE,WAAW;EACX,YAAY;AACd;AACA;EACE,eAAe;AACjB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,mBAAmB;EACnB,kBAAkB;AACpB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,eAAe;AACjB",sourcesContent:[".container {\n  min-height: 100vh;\n  width: 100%;\n  padding: 20px;\n  width: 100%;\n}\n.imageContainer {\n  display: inline-block;\n  vertical-align: middle;\n}\n.images {\n  border: solid 2px white;\n  padding: 20px;\n}\n.imageContainer img {\n  width: 100px;\n  height: 100px;\n  margin-right: 2px;\n}\n.chosenImage {\n  display: inline-block;\n  width: 200px;\n  height: 200px;\n  background: grey;\n  vertical-align: middle;\n  margin-left: 10px;\n}\n.chosenImage img {\n  width: 100%;\n  height: 100%;\n}\n.buttonContainer {\n  padding: 10px 0;\n}\n.buttonContainer button {\n  margin-right: 10px;\n}\n.label {\n  vertical-align: top;\n  margin-right: 10px;\n}\n.input {\n  vertical-align: top;\n}\n.yumFactorContainer {\n  padding: 10px 0;\n}\n"],sourceRoot:""}]),i.locals={container:"_25L5RNZdfLj6luvRe5cg4-",imageContainer:"_2Wfh3d5rSmYYghu3PrmEHF",images:"_36pDYvawf5b4iYiGGe7YHj",chosenImage:"_16lV1hmxTCtKUT2pqfT-Li",buttonContainer:"_2xqAEzvVpYlHqk1ZMteEyQ",label:"_2YnQwKDfC8TpqmNOTPyk2x",input:"_3kFugbmP1jc_vAFWRdh2u8",yumFactorContainer:"_3c-vZSvppY9iDeyZjpSmsn"};const l=i},460:(e,n,t)=>{"use strict";t.d(n,{Z:()=>l});var r=t(15),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,"body {\n  background: peachpuff;\n  font-family: helvetica;\n}\n\nbutton {\n  font-family: 'Great Vibes', cursive;\n  background: deeppink;\n  border: none;\n  border-radius: 4px;\n  padding: .5em .7em;\n  color: white;\n  font-size: 2em;\n}\n\n._11CoE8XCEBOgR6S4bxeaEK {\n  position: relative;\n  width: 100%;\n}\n","",{version:3,sources:["webpack://src/app.component.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,sBAAsB;AACxB;;AAEA;EACE,mCAAmC;EACnC,oBAAoB;EACpB,YAAY;EACZ,kBAAkB;EAClB,kBAAkB;EAClB,YAAY;EACZ,cAAc;AAChB;;AAEA;EACE,kBAAkB;EAClB,WAAW;AACb",sourcesContent:[":global(body) {\n  background: peachpuff;\n  font-family: helvetica;\n}\n\nbutton {\n  font-family: 'Great Vibes', cursive;\n  background: deeppink;\n  border: none;\n  border-radius: 4px;\n  padding: .5em .7em;\n  color: white;\n  font-size: 2em;\n}\n\n.container {\n  position: relative;\n  width: 100%;\n}\n"],sourceRoot:""}]),i.locals={container:"_11CoE8XCEBOgR6S4bxeaEK"};const l=i},263:(e,n,t)=>{"use strict";t.d(n,{Z:()=>l});var r=t(15),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,".example-enter {\n  opacity: 0.01;\n}\n\n.example-enter.example-enter-active {\n  opacity: 1;\n  transition: opacity 500ms ease-in;\n}\n\n.example-leave {\n  opacity: 1;\n}\n\n.example-leave.example-leave-active {\n  opacity: 0.01;\n  transition: opacity 300ms ease-in;\n}\n.fade-enter {\n  opacity: 0;\n  z-index: 1;\n}\n\n.fade-enter.fade-enter-active {\n  opacity: 1;\n  transition: opacity 250ms ease-in;\n}\n\n\n.page-enter {\n  position: absolute;\n  top: 0;\n  opacity: 0;\n}\n\n.page-enter-done {\n  opacity: 1;\n}\n\n.page-enter.page-enter-active {\n  opacity: 1;\n  transition: opacity 400ms linear;\n}\n\n.page-exit {\n  position: absolute;\n  top: 0;\n  opacity: 1;\n}\n\n.page-exit.page-exit-active {\n  transition: opacity 400ms linear;\n  opacity: 0;\n}\n\n.listitem-enter{\n  opacity: 0;\n  transform: translateY(-10vh);\n}\n.listitem-enter-active {\n  opacity: 1;\n  transform: translateY(0);\n  transition: all 400ms linear;\n}\n\n","",{version:3,sources:["webpack://src/app.css"],names:[],mappings:"AAAA;EACE,aAAa;AACf;;AAEA;EACE,UAAU;EACV,iCAAiC;AACnC;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,iCAAiC;AACnC;AACA;EACE,UAAU;EACV,UAAU;AACZ;;AAEA;EACE,UAAU;EACV,iCAAiC;AACnC;;;AAGA;EACE,kBAAkB;EAClB,MAAM;EACN,UAAU;AACZ;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,UAAU;EACV,gCAAgC;AAClC;;AAEA;EACE,kBAAkB;EAClB,MAAM;EACN,UAAU;AACZ;;AAEA;EACE,gCAAgC;EAChC,UAAU;AACZ;;AAEA;EACE,UAAU;EACV,4BAA4B;AAC9B;AACA;EACE,UAAU;EACV,wBAAwB;EACxB,4BAA4B;AAC9B",sourcesContent:[":global(.example-enter) {\n  opacity: 0.01;\n}\n\n:global(.example-enter.example-enter-active) {\n  opacity: 1;\n  transition: opacity 500ms ease-in;\n}\n\n:global(.example-leave) {\n  opacity: 1;\n}\n\n:global(.example-leave.example-leave-active) {\n  opacity: 0.01;\n  transition: opacity 300ms ease-in;\n}\n:global(.fade-enter) {\n  opacity: 0;\n  z-index: 1;\n}\n\n:global(.fade-enter.fade-enter-active) {\n  opacity: 1;\n  transition: opacity 250ms ease-in;\n}\n\n\n:global(.page-enter) {\n  position: absolute;\n  top: 0;\n  opacity: 0;\n}\n\n:global(.page-enter-done) {\n  opacity: 1;\n}\n\n:global(.page-enter.page-enter-active) {\n  opacity: 1;\n  transition: opacity 400ms linear;\n}\n\n:global(.page-exit) {\n  position: absolute;\n  top: 0;\n  opacity: 1;\n}\n\n:global(.page-exit.page-exit-active) {\n  transition: opacity 400ms linear;\n  opacity: 0;\n}\n\n:global(.listitem-enter){\n  opacity: 0;\n  transform: translateY(-10vh);\n}\n:global(.listitem-enter-active) {\n  opacity: 1;\n  transform: translateY(0);\n  transition: all 400ms linear;\n}\n\n"],sourceRoot:""}]);const l=i},21:(e,n,t)=>{"use strict";t.d(n,{Z:()=>l});var r=t(15),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,"._3eB1zclGj-md0ClZBLmD65 {\n  background: bisque;\n  min-height: 100vh;\n  width: 100%;\n  padding: 20px;\n}\n._2_QhjMbZVHFJfQ9Y-FRWwS {\n  font-size: 2em;\n  padding: 10px 0;\n  font-family: 'Great Vibes', cursive;\n}\n.qgbcY_bOi_3MZ70Y0RjI1 {\n  font-size: 16px;\n  padding: 20px 0;\n}\n._34wBB9NHBeaF98u9iasnta {\n  width: 50%;\n}\n","",{version:3,sources:["webpack://src/cake-detail.component.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,iBAAiB;EACjB,WAAW;EACX,aAAa;AACf;AACA;EACE,cAAc;EACd,eAAe;EACf,mCAAmC;AACrC;AACA;EACE,eAAe;EACf,eAAe;AACjB;AACA;EACE,UAAU;AACZ",sourcesContent:[".container {\n  background: bisque;\n  min-height: 100vh;\n  width: 100%;\n  padding: 20px;\n}\n.header {\n  font-size: 2em;\n  padding: 10px 0;\n  font-family: 'Great Vibes', cursive;\n}\n.comment {\n  font-size: 16px;\n  padding: 20px 0;\n}\n.image {\n  width: 50%;\n}\n"],sourceRoot:""}]),i.locals={container:"_3eB1zclGj-md0ClZBLmD65",header:"_2_QhjMbZVHFJfQ9Y-FRWwS",comment:"qgbcY_bOi_3MZ70Y0RjI1",image:"_34wBB9NHBeaF98u9iasnta"};const l=i},306:(e,n,t)=>{"use strict";t.d(n,{Z:()=>l});var r=t(15),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,".L9FL9Yb2bIvcVyk4lWceE {\n  background: bisque;\n  min-height: 100vh;\n  width: 100%;\n  padding: 20px;\n}\n\n._28MZ6IQv8iNR_A7fe7Z1FZ {\n  padding: 20px 0;\n}\n\n._2SVwgvvr7eg53z87WREAXW {\n  border: solid 2px pink;\n  padding: 20px;\n  display: flex;\n}\n\n._2oqA414q4XQ5_zHfKOydrw {\n  width: 100%;\n  display: flex;\n  flex-wrap: wrap;\n}\n\n._2B45HW97Rg4dUGpP8qVF3X {\n  background: white;\n  padding: 10px;\n  width: 24.1%;\n  margin: 5px;\n  border: solid 2px deeppink;\n}\n\n.hx5mVyirWY_SHtEBs_JhU {\n  font-weight: bold;\n  padding: 10px 0;\n}\n\n._1SLJ-a1BABILZLyYQll7yL {\n  padding: 10px 0;\n  font-size: 14px;\n}\n\n._2ItiFuKl_8rRxOmno8ljYF {\n  padding-top: 80%;\n  position: relative;\n  overflow: hidden;\n}\n\n._3LL6xVpR2MWStQww_K0ZDb {\n  position: absolute;\n  width: 100%;\n  left: 0;\n  top: 0;\n  right: 0;\n  min-height: 100%;\n  background: grey;\n}\n","",{version:3,sources:["webpack://src/cake-list.component.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,iBAAiB;EACjB,WAAW;EACX,aAAa;AACf;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,sBAAsB;EACtB,aAAa;EACb,aAAa;AACf;;AAEA;EACE,WAAW;EACX,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,YAAY;EACZ,WAAW;EACX,0BAA0B;AAC5B;;AAEA;EACE,iBAAiB;EACjB,eAAe;AACjB;;AAEA;EACE,eAAe;EACf,eAAe;AACjB;;AAEA;EACE,gBAAgB;EAChB,kBAAkB;EAClB,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,OAAO;EACP,MAAM;EACN,QAAQ;EACR,gBAAgB;EAChB,gBAAgB;AAClB",sourcesContent:[".container {\n  background: bisque;\n  min-height: 100vh;\n  width: 100%;\n  padding: 20px;\n}\n\n.header {\n  padding: 20px 0;\n}\n\n.listContainer {\n  border: solid 2px pink;\n  padding: 20px;\n  display: flex;\n}\n\n.items {\n  width: 100%;\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.card {\n  background: white;\n  padding: 10px;\n  width: 24.1%;\n  margin: 5px;\n  border: solid 2px deeppink;\n}\n\n.name {\n  font-weight: bold;\n  padding: 10px 0;\n}\n\n.comment {\n  padding: 10px 0;\n  font-size: 14px;\n}\n\n.imageContainer {\n  padding-top: 80%;\n  position: relative;\n  overflow: hidden;\n}\n\n.image {\n  position: absolute;\n  width: 100%;\n  left: 0;\n  top: 0;\n  right: 0;\n  min-height: 100%;\n  background: grey;\n}\n"],sourceRoot:""}]),i.locals={container:"L9FL9Yb2bIvcVyk4lWceE",header:"_28MZ6IQv8iNR_A7fe7Z1FZ",listContainer:"_2SVwgvvr7eg53z87WREAXW",items:"_2oqA414q4XQ5_zHfKOydrw",card:"_2B45HW97Rg4dUGpP8qVF3X",name:"hx5mVyirWY_SHtEBs_JhU",comment:"_1SLJ-a1BABILZLyYQll7yL",imageContainer:"_2ItiFuKl_8rRxOmno8ljYF",image:"_3LL6xVpR2MWStQww_K0ZDb"};const l=i},335:(e,n,t)=>{"use strict";t.d(n,{Z:()=>l});var r=t(15),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,"._1p9iH1-0Tf06onP-vdCn5q {\n  background: pink;\n  color: white;\n  min-height: 100vh;\n  width: 100%;\n  display: flex;\n  \n}\n._22NppNAAqvFdthesZ47ouq {\n  margin: auto;\n}\n._3kvUwxL2ZzgFJJv2KTE0gy {\n  color: white;\n  font-size: 3em;\n  font-family: 'Great Vibes', cursive;\n  font-weight: bold;\n  text-decoration: none;\n}\n._3kvUwxL2ZzgFJJv2KTE0gy:hover,\n._3kvUwxL2ZzgFJJv2KTE0gy:active {\n  text-decoration: underline;\n}\n","",{version:3,sources:["webpack://src/home.component.css"],names:[],mappings:"AAAA;EACE,gBAAgB;EAChB,YAAY;EACZ,iBAAiB;EACjB,WAAW;EACX,aAAa;;AAEf;AACA;EACE,YAAY;AACd;AACA;EACE,YAAY;EACZ,cAAc;EACd,mCAAmC;EACnC,iBAAiB;EACjB,qBAAqB;AACvB;AACA;;EAEE,0BAA0B;AAC5B",sourcesContent:[".container {\n  background: pink;\n  color: white;\n  min-height: 100vh;\n  width: 100%;\n  display: flex;\n  \n}\n.innerContainer {\n  margin: auto;\n}\n.link {\n  color: white;\n  font-size: 3em;\n  font-family: 'Great Vibes', cursive;\n  font-weight: bold;\n  text-decoration: none;\n}\n.link:hover,\n.link:active {\n  text-decoration: underline;\n}\n"],sourceRoot:""}]),i.locals={container:"_1p9iH1-0Tf06onP-vdCn5q",innerContainer:"_22NppNAAqvFdthesZ47ouq",link:"_3kvUwxL2ZzgFJJv2KTE0gy"};const l=i},466:(e,n,t)=>{"use strict";t.d(n,{Z:()=>l});var r=t(15),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\nhtml {\n  box-sizing: border-box;\n}\n*, *:before, *:after {\n  box-sizing: inherit;\n}\n","",{version:3,sources:["webpack://src/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,mBAAmB;AACrB",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\nhtml {\n  box-sizing: border-box;\n}\n*, *:before, *:after {\n  box-sizing: inherit;\n}\n"],sourceRoot:""}]);const l=i},668:(e,n,t)=>{"use strict";t.d(n,{Z:()=>l});var r=t(15),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,"/* Master Styles */\n","",{version:3,sources:["webpack://src/style.css"],names:[],mappings:"AAAA,kBAAkB",sourcesContent:["/* Master Styles */\n"],sourceRoot:""}]);const l=i},995:(e,n,t)=>{"use strict";t.d(n,{Z:()=>l});var r=t(15),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,"._2yogD4cRL-Vw7Nnen94o1w {\n}\n","",{version:3,sources:["webpack://src/transition-route.css"],names:[],mappings:"AAAA;AACA",sourcesContent:[".container {\n}\n"],sourceRoot:""}]),i.locals={container:"_2yogD4cRL-Vw7Nnen94o1w"};const l=i},82:(e,n,t)=>{"use strict";t.d(n,{Z:()=>l});var r=t(15),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,".KiVMpXvRzRwO6x-4r-ERH {\n  display: inline-block;\n}\n._8Aig9I12mp6fi7edBjVdo {\n  display: inline-block;\n  width: 2em;\n  height: 2em;\n  font-size: 0.8em;\n  position: relative;\n  vertical-align: middle;\n}\n._2dVX1CIX1JCVDp9HCFpmBg {\n  vertical-align: middle;\n}\n._2okJxv-jYY9MhZ5iCxO1im {\n  background-color: deeppink;\n  display: inline-block;\n  height: 1em;\n  margin: 0;\n  position: absolute;\n  left: .5em;\n  top: .6em;\n  transform: rotate(-45deg);\n  transform-origin:50% 50%;\n  \n  width: 1em;\n}\n\n._2okJxv-jYY9MhZ5iCxO1im:before,\n._2okJxv-jYY9MhZ5iCxO1im:after {\n  content:'';\n  background-color: deeppink;\n  border-radius: 50%;\n  height: 1em;\n  position: absolute;\n  width: 1em;\n}\n\n._2okJxv-jYY9MhZ5iCxO1im:before {\n  top: -.5em;\n  left: 0;\n}\n\n._2okJxv-jYY9MhZ5iCxO1im:after {\n  left: .5em;\n  top: 0;\n}\n","",{version:3,sources:["webpack://src/yum-rating.component.css"],names:[],mappings:"AAAA;EACE,qBAAqB;AACvB;AACA;EACE,qBAAqB;EACrB,UAAU;EACV,WAAW;EACX,gBAAgB;EAChB,kBAAkB;EAClB,sBAAsB;AACxB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,0BAA0B;EAC1B,qBAAqB;EACrB,WAAW;EACX,SAAS;EACT,kBAAkB;EAClB,UAAU;EACV,SAAS;EACT,yBAAyB;EACzB,wBAAwB;;EAExB,UAAU;AACZ;;AAEA;;EAEE,UAAU;EACV,0BAA0B;EAC1B,kBAAkB;EAClB,WAAW;EACX,kBAAkB;EAClB,UAAU;AACZ;;AAEA;EACE,UAAU;EACV,OAAO;AACT;;AAEA;EACE,UAAU;EACV,MAAM;AACR",sourcesContent:[".container {\n  display: inline-block;\n}\n.heartContainer {\n  display: inline-block;\n  width: 2em;\n  height: 2em;\n  font-size: 0.8em;\n  position: relative;\n  vertical-align: middle;\n}\n.rating {\n  vertical-align: middle;\n}\n.heart {\n  background-color: deeppink;\n  display: inline-block;\n  height: 1em;\n  margin: 0;\n  position: absolute;\n  left: .5em;\n  top: .6em;\n  transform: rotate(-45deg);\n  transform-origin:50% 50%;\n  \n  width: 1em;\n}\n\n.heart:before,\n.heart:after {\n  content:'';\n  background-color: deeppink;\n  border-radius: 50%;\n  height: 1em;\n  position: absolute;\n  width: 1em;\n}\n\n.heart:before {\n  top: -.5em;\n  left: 0;\n}\n\n.heart:after {\n  left: .5em;\n  top: 0;\n}\n"],sourceRoot:""}]),i.locals={container:"KiVMpXvRzRwO6x-4r-ERH",heartContainer:"_8Aig9I12mp6fi7edBjVdo",rating:"_2dVX1CIX1JCVDp9HCFpmBg",heart:"_2okJxv-jYY9MhZ5iCxO1im"};const l=i},645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);r&&o[u[0]]||(t&&(u[2]?u[2]="".concat(t," and ").concat(u[2]):u[2]=t),n.push(u))}},n}},15:e=>{"use strict";function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}e.exports=function(e){var t,r,o=(r=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var t=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(t.push(i.value),!n||t.length!==n);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return t}}(t,r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if("function"==typeof btoa){var l=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),s="/*# ".concat(u," */"),c=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[a].concat(c).concat([s]).join("\n")}return[a].join("\n")}},679:(e,n,t)=>{"use strict";var r=t(864),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(n,t,r){if("string"!=typeof t){if(h){var o=p(t);o&&o!==h&&e(n,o,r)}var i=c(t);f&&(i=i.concat(f(t)));for(var l=u(n),m=u(t),y=0;y<i.length;++y){var v=i[y];if(!(a[v]||r&&r[v]||m&&m[v]||l&&l[v])){var g=d(t,v);try{s(n,v,g)}catch(e){}}}}return n}},418:e=>{"use strict";var n=Object.getOwnPropertySymbols,t=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var n={},t=0;t<10;t++)n["_"+String.fromCharCode(t)]=t;if("0123456789"!==Object.getOwnPropertyNames(n).map((function(e){return n[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var i,l,u=o(e),s=1;s<arguments.length;s++){for(var c in i=Object(arguments[s]))t.call(i,c)&&(u[c]=i[c]);if(n){l=n(i);for(var f=0;f<l.length;f++)r.call(i,l[f])&&(u[l[f]]=i[l[f]])}}return u}},779:(e,n,t)=>{var r=t(173);e.exports=function e(n,t,o){return r(t)||(o=t||o,t=[]),o=o||{},n instanceof RegExp?function(e,n){var t=e.source.match(/\((?!\?)/g);if(t)for(var r=0;r<t.length;r++)n.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,n)}(n,t):r(n)?function(n,t,r){for(var o=[],a=0;a<n.length;a++)o.push(e(n[a],t,r).source);return c(new RegExp("(?:"+o.join("|")+")",f(r)),t)}(n,t,o):function(e,n,t){return d(a(e,t),n,t)}(n,t,o)},e.exports.parse=a,e.exports.compile=function(e,n){return l(a(e,n),n)},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,n){for(var t,r=[],a=0,i=0,l="",c=n&&n.delimiter||"/";null!=(t=o.exec(e));){var f=t[0],d=t[1],p=t.index;if(l+=e.slice(i,p),i=p+f.length,d)l+=d[1];else{var h=e[i],m=t[2],y=t[3],v=t[4],g=t[5],b=t[6],A=t[7];l&&(r.push(l),l="");var E=null!=m&&null!=h&&h!==m,w="+"===b||"*"===b,k="?"===b||"*"===b,C=t[2]||c,x=v||g;r.push({name:y||a++,prefix:m||"",delimiter:C,optional:k,repeat:w,partial:E,asterisk:!!A,pattern:x?s(x):A?".*":"[^"+u(C)+"]+?"})}}return i<e.length&&(l+=e.substr(i)),l&&r.push(l),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function l(e,n){for(var t=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(t[o]=new RegExp("^(?:"+e[o].pattern+")$",f(n)));return function(n,o){for(var a="",l=n||{},u=(o||{}).pretty?i:encodeURIComponent,s=0;s<e.length;s++){var c=e[s];if("string"!=typeof c){var f,d=l[c.name];if(null==d){if(c.optional){c.partial&&(a+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(d)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=u(d[p]),!t[s].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");a+=(0===p?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):u(d),!t[s].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');a+=c.prefix+f}}else a+=c}return a}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,n){return e.keys=n,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,n,t){r(n)||(t=n||t,n=[]);for(var o=(t=t||{}).strict,a=!1!==t.end,i="",l=0;l<e.length;l++){var s=e[l];if("string"==typeof s)i+=u(s);else{var d=u(s.prefix),p="(?:"+s.pattern+")";n.push(s),s.repeat&&(p+="(?:"+d+p+")*"),i+=p=s.optional?s.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=u(t.delimiter||"/"),m=i.slice(-h.length)===h;return o||(i=(m?i.slice(0,-h.length):i)+"(?:"+h+"(?=$))?"),i+=a?"$":o&&m?"":"(?="+h+"|$)",c(new RegExp("^"+i,f(t)),n)}},173:e=>{e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},703:(e,n,t)=>{"use strict";var r=t(414);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,n,t,o,a,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function n(){return e}e.isRequired=e;var t={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:n,element:e,elementType:e,instanceOf:n,node:e,objectOf:n,oneOf:n,oneOfType:n,shape:n,exact:n,checkPropTypes:a,resetWarningCache:o};return t.PropTypes=t,t}},697:(e,n,t)=>{e.exports=t(703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},448:(e,n,t)=>{"use strict";var r=t(294),o=t(418),a=t(840);function i(e){for(var n="https://reactjs.org/docs/error-decoder.html?invariant="+e,t=1;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t]);return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var l=new Set,u={};function s(e,n){c(e,n),c(e+"Capture",n)}function c(e,n){for(u[e]=n,e=0;e<n.length;e++)l.add(n[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function y(e,n,t,r,o,a,i){this.acceptsBooleans=2===n||3===n||4===n,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=t,this.propertyName=e,this.type=n,this.sanitizeURL=a,this.removeEmptyString=i}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new y(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var n=e[0];v[n]=new y(n,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new y(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new y(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new y(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new y(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new y(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new y(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new y(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function A(e,n,t,r){var o=v.hasOwnProperty(n)?v[n]:null;(null!==o?0===o.type:!r&&2<n.length&&("o"===n[0]||"O"===n[0])&&("n"===n[1]||"N"===n[1]))||(function(e,n,t,r){if(null==n||function(e,n,t,r){if(null!==t&&0===t.type)return!1;switch(typeof n){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==t?!t.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,n,t,r))return!0;if(r)return!1;if(null!==t)switch(t.type){case 3:return!n;case 4:return!1===n;case 5:return isNaN(n);case 6:return isNaN(n)||1>n}return!1}(n,t,o,r)&&(t=null),r||null===o?function(e){return!!p.call(m,e)||!p.call(h,e)&&(d.test(e)?m[e]=!0:(h[e]=!0,!1))}(n)&&(null===t?e.removeAttribute(n):e.setAttribute(n,""+t)):o.mustUseProperty?e[o.propertyName]=null===t?3!==o.type&&"":t:(n=o.attributeName,r=o.attributeNamespace,null===t?e.removeAttribute(n):(t=3===(o=o.type)||4===o&&!0===t?"":""+t,r?e.setAttributeNS(r,n,t):e.setAttribute(n,t))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var n=e.replace(g,b);v[n]=new y(n,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var n=e.replace(g,b);v[n]=new y(n,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var n=e.replace(g,b);v[n]=new y(n,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new y(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new y("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new y(e,1,!1,e.toLowerCase(),null,!0,!0)}));var E=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=60103,k=60106,C=60107,x=60108,S=60114,_=60109,O=60110,P=60112,N=60113,T=60120,B=60115,R=60116,L=60121,z=60128,j=60129,M=60130,U=60131;if("function"==typeof Symbol&&Symbol.for){var D=Symbol.for;w=D("react.element"),k=D("react.portal"),C=D("react.fragment"),x=D("react.strict_mode"),S=D("react.profiler"),_=D("react.provider"),O=D("react.context"),P=D("react.forward_ref"),N=D("react.suspense"),T=D("react.suspense_list"),B=D("react.memo"),R=D("react.lazy"),L=D("react.block"),D("react.scope"),z=D("react.opaque.id"),j=D("react.debug_trace_mode"),M=D("react.offscreen"),U=D("react.legacy_hidden")}var F,I="function"==typeof Symbol&&Symbol.iterator;function V(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=I&&e[I]||e["@@iterator"])?e:null}function W(e){if(void 0===F)try{throw Error()}catch(e){var n=e.stack.trim().match(/\n( *(at )?)/);F=n&&n[1]||""}return"\n"+F+e}var $=!1;function H(e,n){if(!e||$)return"";$=!0;var t=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(n)if(n=function(){throw Error()},Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l])return"\n"+o[i].replace(" at new "," at ")}while(1<=i&&0<=l);break}}}finally{$=!1,Error.prepareStackTrace=t}return(e=e?e.displayName||e.name:"")?W(e):""}function q(e){switch(e.tag){case 5:return W(e.type);case 16:return W("Lazy");case 13:return W("Suspense");case 19:return W("SuspenseList");case 0:case 2:case 15:return H(e.type,!1);case 11:return H(e.type.render,!1);case 22:return H(e.type._render,!1);case 1:return H(e.type,!0);default:return""}}function Y(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case C:return"Fragment";case k:return"Portal";case S:return"Profiler";case x:return"StrictMode";case N:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case O:return(e.displayName||"Context")+".Consumer";case _:return(e._context.displayName||"Context")+".Provider";case P:var n=e.render;return n=n.displayName||n.name||"",e.displayName||(""!==n?"ForwardRef("+n+")":"ForwardRef");case B:return Y(e.type);case L:return Y(e._render);case R:n=e._payload,e=e._init;try{return Y(e(n))}catch(e){}}return null}function Z(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Q(e){var n=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===n||"radio"===n)}function K(e){e._valueTracker||(e._valueTracker=function(e){var n=Q(e)?"checked":"value",t=Object.getOwnPropertyDescriptor(e.constructor.prototype,n),r=""+e[n];if(!e.hasOwnProperty(n)&&void 0!==t&&"function"==typeof t.get&&"function"==typeof t.set){var o=t.get,a=t.set;return Object.defineProperty(e,n,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,n,{enumerable:t.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[n]}}}}(e))}function X(e){if(!e)return!1;var n=e._valueTracker;if(!n)return!0;var t=n.getValue(),r="";return e&&(r=Q(e)?e.checked?"true":"false":e.value),(e=r)!==t&&(n.setValue(e),!0)}function J(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(n){return e.body}}function G(e,n){var t=n.checked;return o({},n,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=t?t:e._wrapperState.initialChecked})}function ee(e,n){var t=null==n.defaultValue?"":n.defaultValue,r=null!=n.checked?n.checked:n.defaultChecked;t=Z(null!=n.value?n.value:t),e._wrapperState={initialChecked:r,initialValue:t,controlled:"checkbox"===n.type||"radio"===n.type?null!=n.checked:null!=n.value}}function ne(e,n){null!=(n=n.checked)&&A(e,"checked",n,!1)}function te(e,n){ne(e,n);var t=Z(n.value),r=n.type;if(null!=t)"number"===r?(0===t&&""===e.value||e.value!=t)&&(e.value=""+t):e.value!==""+t&&(e.value=""+t);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");n.hasOwnProperty("value")?oe(e,n.type,t):n.hasOwnProperty("defaultValue")&&oe(e,n.type,Z(n.defaultValue)),null==n.checked&&null!=n.defaultChecked&&(e.defaultChecked=!!n.defaultChecked)}function re(e,n,t){if(n.hasOwnProperty("value")||n.hasOwnProperty("defaultValue")){var r=n.type;if(!("submit"!==r&&"reset"!==r||void 0!==n.value&&null!==n.value))return;n=""+e._wrapperState.initialValue,t||n===e.value||(e.value=n),e.defaultValue=n}""!==(t=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==t&&(e.name=t)}function oe(e,n,t){"number"===n&&J(e.ownerDocument)===e||(null==t?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+t&&(e.defaultValue=""+t))}function ae(e,n){return e=o({children:void 0},n),(n=function(e){var n="";return r.Children.forEach(e,(function(e){null!=e&&(n+=e)})),n}(n.children))&&(e.children=n),e}function ie(e,n,t,r){if(e=e.options,n){n={};for(var o=0;o<t.length;o++)n["$"+t[o]]=!0;for(t=0;t<e.length;t++)o=n.hasOwnProperty("$"+e[t].value),e[t].selected!==o&&(e[t].selected=o),o&&r&&(e[t].defaultSelected=!0)}else{for(t=""+Z(t),n=null,o=0;o<e.length;o++){if(e[o].value===t)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==n||e[o].disabled||(n=e[o])}null!==n&&(n.selected=!0)}}function le(e,n){if(null!=n.dangerouslySetInnerHTML)throw Error(i(91));return o({},n,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,n){var t=n.value;if(null==t){if(t=n.children,n=n.defaultValue,null!=t){if(null!=n)throw Error(i(92));if(Array.isArray(t)){if(!(1>=t.length))throw Error(i(93));t=t[0]}n=t}null==n&&(n=""),t=n}e._wrapperState={initialValue:Z(t)}}function se(e,n){var t=Z(n.value),r=Z(n.defaultValue);null!=t&&((t=""+t)!==e.value&&(e.value=t),null==n.defaultValue&&e.defaultValue!==t&&(e.defaultValue=t)),null!=r&&(e.defaultValue=""+r)}function ce(e){var n=e.textContent;n===e._wrapperState.initialValue&&""!==n&&null!==n&&(e.value=n)}var fe="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,n){return null==e||"http://www.w3.org/1999/xhtml"===e?de(n):"http://www.w3.org/2000/svg"===e&&"foreignObject"===n?"http://www.w3.org/1999/xhtml":e}var he,me,ye=(me=function(e,n){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=n;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+n.valueOf().toString()+"</svg>",n=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;n.firstChild;)e.appendChild(n.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,n,t,r){MSApp.execUnsafeLocalFunction((function(){return me(e,n)}))}:me);function ve(e,n){if(n){var t=e.firstChild;if(t&&t===e.lastChild&&3===t.nodeType)return void(t.nodeValue=n)}e.textContent=n}var ge={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function Ae(e,n,t){return null==n||"boolean"==typeof n||""===n?"":t||"number"!=typeof n||0===n||ge.hasOwnProperty(e)&&ge[e]?(""+n).trim():n+"px"}function Ee(e,n){for(var t in e=e.style,n)if(n.hasOwnProperty(t)){var r=0===t.indexOf("--"),o=Ae(t,n[t],r);"float"===t&&(t="cssFloat"),r?e.setProperty(t,o):e[t]=o}}Object.keys(ge).forEach((function(e){be.forEach((function(n){n=n+e.charAt(0).toUpperCase()+e.substring(1),ge[n]=ge[e]}))}));var we=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ke(e,n){if(n){if(we[e]&&(null!=n.children||null!=n.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=n.dangerouslySetInnerHTML){if(null!=n.children)throw Error(i(60));if("object"!=typeof n.dangerouslySetInnerHTML||!("__html"in n.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=n.style&&"object"!=typeof n.style)throw Error(i(62))}}function Ce(e,n){if(-1===e.indexOf("-"))return"string"==typeof n.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function xe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Se=null,_e=null,Oe=null;function Pe(e){if(e=Gr(e)){if("function"!=typeof Se)throw Error(i(280));var n=e.stateNode;n&&(n=no(n),Se(e.stateNode,e.type,n))}}function Ne(e){_e?Oe?Oe.push(e):Oe=[e]:_e=e}function Te(){if(_e){var e=_e,n=Oe;if(Oe=_e=null,Pe(e),n)for(e=0;e<n.length;e++)Pe(n[e])}}function Be(e,n){return e(n)}function Re(e,n,t,r,o){return e(n,t,r,o)}function Le(){}var ze=Be,je=!1,Me=!1;function Ue(){null===_e&&null===Oe||(Le(),Te())}function De(e,n){var t=e.stateNode;if(null===t)return null;var r=no(t);if(null===r)return null;t=r[n];e:switch(n){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(t&&"function"!=typeof t)throw Error(i(231,n,typeof t));return t}var Fe=!1;if(f)try{var Ie={};Object.defineProperty(Ie,"passive",{get:function(){Fe=!0}}),window.addEventListener("test",Ie,Ie),window.removeEventListener("test",Ie,Ie)}catch(me){Fe=!1}function Ve(e,n,t,r,o,a,i,l,u){var s=Array.prototype.slice.call(arguments,3);try{n.apply(t,s)}catch(e){this.onError(e)}}var We=!1,$e=null,He=!1,qe=null,Ye={onError:function(e){We=!0,$e=e}};function Ze(e,n,t,r,o,a,i,l,u){We=!1,$e=null,Ve.apply(Ye,arguments)}function Qe(e){var n=e,t=e;if(e.alternate)for(;n.return;)n=n.return;else{e=n;do{0!=(1026&(n=e).flags)&&(t=n.return),e=n.return}while(e)}return 3===n.tag?t:null}function Ke(e){if(13===e.tag){var n=e.memoizedState;if(null===n&&null!==(e=e.alternate)&&(n=e.memoizedState),null!==n)return n.dehydrated}return null}function Xe(e){if(Qe(e)!==e)throw Error(i(188))}function Je(e){if(!(e=function(e){var n=e.alternate;if(!n){if(null===(n=Qe(e)))throw Error(i(188));return n!==e?null:e}for(var t=e,r=n;;){var o=t.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){t=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===t)return Xe(o),e;if(a===r)return Xe(o),n;a=a.sibling}throw Error(i(188))}if(t.return!==r.return)t=o,r=a;else{for(var l=!1,u=o.child;u;){if(u===t){l=!0,t=o,r=a;break}if(u===r){l=!0,r=o,t=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===t){l=!0,t=a,r=o;break}if(u===r){l=!0,r=a,t=o;break}u=u.sibling}if(!l)throw Error(i(189))}}if(t.alternate!==r)throw Error(i(190))}if(3!==t.tag)throw Error(i(188));return t.stateNode.current===t?e:n}(e)))return null;for(var n=e;;){if(5===n.tag||6===n.tag)return n;if(n.child)n.child.return=n,n=n.child;else{if(n===e)break;for(;!n.sibling;){if(!n.return||n.return===e)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}}return null}function Ge(e,n){for(var t=e.alternate;null!==n;){if(n===e||n===t)return!0;n=n.return}return!1}var en,nn,tn,rn,on=!1,an=[],ln=null,un=null,sn=null,cn=new Map,fn=new Map,dn=[],pn="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function hn(e,n,t,r,o){return{blockedOn:e,domEventName:n,eventSystemFlags:16|t,nativeEvent:o,targetContainers:[r]}}function mn(e,n){switch(e){case"focusin":case"focusout":ln=null;break;case"dragenter":case"dragleave":un=null;break;case"mouseover":case"mouseout":sn=null;break;case"pointerover":case"pointerout":cn.delete(n.pointerId);break;case"gotpointercapture":case"lostpointercapture":fn.delete(n.pointerId)}}function yn(e,n,t,r,o,a){return null===e||e.nativeEvent!==a?(e=hn(n,t,r,o,a),null!==n&&null!==(n=Gr(n))&&nn(n),e):(e.eventSystemFlags|=r,n=e.targetContainers,null!==o&&-1===n.indexOf(o)&&n.push(o),e)}function vn(e){var n=Jr(e.target);if(null!==n){var t=Qe(n);if(null!==t)if(13===(n=t.tag)){if(null!==(n=Ke(t)))return e.blockedOn=n,void rn(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){tn(t)}))}))}else if(3===n&&t.stateNode.hydrate)return void(e.blockedOn=3===t.tag?t.stateNode.containerInfo:null)}e.blockedOn=null}function gn(e){if(null!==e.blockedOn)return!1;for(var n=e.targetContainers;0<n.length;){var t=Gn(e.domEventName,e.eventSystemFlags,n[0],e.nativeEvent);if(null!==t)return null!==(n=Gr(t))&&nn(n),e.blockedOn=t,!1;n.shift()}return!0}function bn(e,n,t){gn(e)&&t.delete(n)}function An(){for(on=!1;0<an.length;){var e=an[0];if(null!==e.blockedOn){null!==(e=Gr(e.blockedOn))&&en(e);break}for(var n=e.targetContainers;0<n.length;){var t=Gn(e.domEventName,e.eventSystemFlags,n[0],e.nativeEvent);if(null!==t){e.blockedOn=t;break}n.shift()}null===e.blockedOn&&an.shift()}null!==ln&&gn(ln)&&(ln=null),null!==un&&gn(un)&&(un=null),null!==sn&&gn(sn)&&(sn=null),cn.forEach(bn),fn.forEach(bn)}function En(e,n){e.blockedOn===n&&(e.blockedOn=null,on||(on=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,An)))}function wn(e){function n(n){return En(n,e)}if(0<an.length){En(an[0],e);for(var t=1;t<an.length;t++){var r=an[t];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==ln&&En(ln,e),null!==un&&En(un,e),null!==sn&&En(sn,e),cn.forEach(n),fn.forEach(n),t=0;t<dn.length;t++)(r=dn[t]).blockedOn===e&&(r.blockedOn=null);for(;0<dn.length&&null===(t=dn[0]).blockedOn;)vn(t),null===t.blockedOn&&dn.shift()}function kn(e,n){var t={};return t[e.toLowerCase()]=n.toLowerCase(),t["Webkit"+e]="webkit"+n,t["Moz"+e]="moz"+n,t}var Cn={animationend:kn("Animation","AnimationEnd"),animationiteration:kn("Animation","AnimationIteration"),animationstart:kn("Animation","AnimationStart"),transitionend:kn("Transition","TransitionEnd")},xn={},Sn={};function _n(e){if(xn[e])return xn[e];if(!Cn[e])return e;var n,t=Cn[e];for(n in t)if(t.hasOwnProperty(n)&&n in Sn)return xn[e]=t[n];return e}f&&(Sn=document.createElement("div").style,"AnimationEvent"in window||(delete Cn.animationend.animation,delete Cn.animationiteration.animation,delete Cn.animationstart.animation),"TransitionEvent"in window||delete Cn.transitionend.transition);var On=_n("animationend"),Pn=_n("animationiteration"),Nn=_n("animationstart"),Tn=_n("transitionend"),Bn=new Map,Rn=new Map,Ln=["abort","abort",On,"animationEnd",Pn,"animationIteration",Nn,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Tn,"transitionEnd","waiting","waiting"];function zn(e,n){for(var t=0;t<e.length;t+=2){var r=e[t],o=e[t+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Rn.set(r,n),Bn.set(r,o),s(o,[r])}}(0,a.unstable_now)();var jn=8;function Mn(e){if(0!=(1&e))return jn=15,1;if(0!=(2&e))return jn=14,2;if(0!=(4&e))return jn=13,4;var n=24&e;return 0!==n?(jn=12,n):0!=(32&e)?(jn=11,32):0!=(n=192&e)?(jn=10,n):0!=(256&e)?(jn=9,256):0!=(n=3584&e)?(jn=8,n):0!=(4096&e)?(jn=7,4096):0!=(n=4186112&e)?(jn=6,n):0!=(n=62914560&e)?(jn=5,n):67108864&e?(jn=4,67108864):0!=(134217728&e)?(jn=3,134217728):0!=(n=805306368&e)?(jn=2,n):0!=(1073741824&e)?(jn=1,1073741824):(jn=8,e)}function Un(e,n){var t=e.pendingLanes;if(0===t)return jn=0;var r=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,l=e.pingedLanes;if(0!==a)r=a,o=jn=15;else if(0!=(a=134217727&t)){var u=a&~i;0!==u?(r=Mn(u),o=jn):0!=(l&=a)&&(r=Mn(l),o=jn)}else 0!=(a=t&~i)?(r=Mn(a),o=jn):0!==l&&(r=Mn(l),o=jn);if(0===r)return 0;if(r=t&((0>(r=31-$n(r))?0:1<<r)<<1)-1,0!==n&&n!==r&&0==(n&i)){if(Mn(n),o<=jn)return n;jn=o}if(0!==(n=e.entangledLanes))for(e=e.entanglements,n&=r;0<n;)o=1<<(t=31-$n(n)),r|=e[t],n&=~o;return r}function Dn(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Fn(e,n){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=In(24&~n))?Fn(10,n):e;case 10:return 0===(e=In(192&~n))?Fn(8,n):e;case 8:return 0===(e=In(3584&~n))&&0===(e=In(4186112&~n))&&(e=512),e;case 2:return 0===(n=In(805306368&~n))&&(n=268435456),n}throw Error(i(358,e))}function In(e){return e&-e}function Vn(e){for(var n=[],t=0;31>t;t++)n.push(e);return n}function Wn(e,n,t){e.pendingLanes|=n;var r=n-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[n=31-$n(n)]=t}var $n=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Hn(e)/qn|0)|0},Hn=Math.log,qn=Math.LN2,Yn=a.unstable_UserBlockingPriority,Zn=a.unstable_runWithPriority,Qn=!0;function Kn(e,n,t,r){je||Le();var o=Jn,a=je;je=!0;try{Re(o,e,n,t,r)}finally{(je=a)||Ue()}}function Xn(e,n,t,r){Zn(Yn,Jn.bind(null,e,n,t,r))}function Jn(e,n,t,r){var o;if(Qn)if((o=0==(4&n))&&0<an.length&&-1<pn.indexOf(e))e=hn(null,e,n,t,r),an.push(e);else{var a=Gn(e,n,t,r);if(null===a)o&&mn(e,r);else{if(o){if(-1<pn.indexOf(e))return e=hn(a,e,n,t,r),void an.push(e);if(function(e,n,t,r,o){switch(n){case"focusin":return ln=yn(ln,e,n,t,r,o),!0;case"dragenter":return un=yn(un,e,n,t,r,o),!0;case"mouseover":return sn=yn(sn,e,n,t,r,o),!0;case"pointerover":var a=o.pointerId;return cn.set(a,yn(cn.get(a)||null,e,n,t,r,o)),!0;case"gotpointercapture":return a=o.pointerId,fn.set(a,yn(fn.get(a)||null,e,n,t,r,o)),!0}return!1}(a,e,n,t,r))return;mn(e,r)}Tr(e,n,r,null,t)}}}function Gn(e,n,t,r){var o=xe(r);if(null!==(o=Jr(o))){var a=Qe(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Ke(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return Tr(e,n,r,o,t),null}var et=null,nt=null,tt=null;function rt(){if(tt)return tt;var e,n,t=nt,r=t.length,o="value"in et?et.value:et.textContent,a=o.length;for(e=0;e<r&&t[e]===o[e];e++);var i=r-e;for(n=1;n<=i&&t[r-n]===o[a-n];n++);return tt=o.slice(e,1<n?1-n:void 0)}function ot(e){var n=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===n&&(e=13):e=n,10===e&&(e=13),32<=e||13===e?e:0}function at(){return!0}function it(){return!1}function lt(e){function n(n,t,r,o,a){for(var i in this._reactName=n,this._targetInst=r,this.type=t,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(n=e[i],this[i]=n?n(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?at:it,this.isPropagationStopped=it,this}return o(n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=at)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=at)},persist:function(){},isPersistent:at}),n}var ut,st,ct,ft={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dt=lt(ft),pt=o({},ft,{view:0,detail:0}),ht=lt(pt),mt=o({},pt,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:St,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ct&&(ct&&"mousemove"===e.type?(ut=e.screenX-ct.screenX,st=e.screenY-ct.screenY):st=ut=0,ct=e),ut)},movementY:function(e){return"movementY"in e?e.movementY:st}}),yt=lt(mt),vt=lt(o({},mt,{dataTransfer:0})),gt=lt(o({},pt,{relatedTarget:0})),bt=lt(o({},ft,{animationName:0,elapsedTime:0,pseudoElement:0})),At=lt(o({},ft,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),Et=lt(o({},ft,{data:0})),wt={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kt={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Ct={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function xt(e){var n=this.nativeEvent;return n.getModifierState?n.getModifierState(e):!!(e=Ct[e])&&!!n[e]}function St(){return xt}var _t=lt(o({},pt,{key:function(e){if(e.key){var n=wt[e.key]||e.key;if("Unidentified"!==n)return n}return"keypress"===e.type?13===(e=ot(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kt[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:St,charCode:function(e){return"keypress"===e.type?ot(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?ot(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Ot=lt(o({},mt,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Pt=lt(o({},pt,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:St})),Nt=lt(o({},ft,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tt=lt(o({},mt,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Bt=[9,13,27,32],Rt=f&&"CompositionEvent"in window,Lt=null;f&&"documentMode"in document&&(Lt=document.documentMode);var zt=f&&"TextEvent"in window&&!Lt,jt=f&&(!Rt||Lt&&8<Lt&&11>=Lt),Mt=String.fromCharCode(32),Ut=!1;function Dt(e,n){switch(e){case"keyup":return-1!==Bt.indexOf(n.keyCode);case"keydown":return 229!==n.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Ft(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var It=!1,Vt={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wt(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===n?!!Vt[e.type]:"textarea"===n}function $t(e,n,t,r){Ne(r),0<(n=Rr(n,"onChange")).length&&(t=new dt("onChange","change",null,t,r),e.push({event:t,listeners:n}))}var Ht=null,qt=null;function Yt(e){xr(e,0)}function Zt(e){if(X(eo(e)))return e}function Qt(e,n){if("change"===e)return n}var Kt=!1;if(f){var Xt;if(f){var Jt="oninput"in document;if(!Jt){var Gt=document.createElement("div");Gt.setAttribute("oninput","return;"),Jt="function"==typeof Gt.oninput}Xt=Jt}else Xt=!1;Kt=Xt&&(!document.documentMode||9<document.documentMode)}function er(){Ht&&(Ht.detachEvent("onpropertychange",nr),qt=Ht=null)}function nr(e){if("value"===e.propertyName&&Zt(qt)){var n=[];if($t(n,qt,e,xe(e)),e=Yt,je)e(n);else{je=!0;try{Be(e,n)}finally{je=!1,Ue()}}}}function tr(e,n,t){"focusin"===e?(er(),qt=t,(Ht=n).attachEvent("onpropertychange",nr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Zt(qt)}function or(e,n){if("click"===e)return Zt(n)}function ar(e,n){if("input"===e||"change"===e)return Zt(n)}var ir="function"==typeof Object.is?Object.is:function(e,n){return e===n&&(0!==e||1/e==1/n)||e!=e&&n!=n},lr=Object.prototype.hasOwnProperty;function ur(e,n){if(ir(e,n))return!0;if("object"!=typeof e||null===e||"object"!=typeof n||null===n)return!1;var t=Object.keys(e),r=Object.keys(n);if(t.length!==r.length)return!1;for(r=0;r<t.length;r++)if(!lr.call(n,t[r])||!ir(e[t[r]],n[t[r]]))return!1;return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,n){var t,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(t=e+r.textContent.length,e<=n&&t>=n)return{node:r,offset:n-e};e=t}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(e,n){return!(!e||!n)&&(e===n||(!e||3!==e.nodeType)&&(n&&3===n.nodeType?fr(e,n.parentNode):"contains"in e?e.contains(n):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(n))))}function dr(){for(var e=window,n=J();n instanceof e.HTMLIFrameElement;){try{var t="string"==typeof n.contentWindow.location.href}catch(e){t=!1}if(!t)break;n=J((e=n.contentWindow).document)}return n}function pr(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return n&&("input"===n&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===n||"true"===e.contentEditable)}var hr=f&&"documentMode"in document&&11>=document.documentMode,mr=null,yr=null,vr=null,gr=!1;function br(e,n,t){var r=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;gr||null==mr||mr!==J(r)||(r="selectionStart"in(r=mr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&ur(vr,r)||(vr=r,0<(r=Rr(yr,"onSelect")).length&&(n=new dt("onSelect","select",null,n,t),e.push({event:n,listeners:r}),n.target=mr)))}zn("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),zn("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),zn(Ln,2);for(var Ar="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Er=0;Er<Ar.length;Er++)Rn.set(Ar[Er],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var wr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),kr=new Set("cancel close invalid load scroll toggle".split(" ").concat(wr));function Cr(e,n,t){var r=e.type||"unknown-event";e.currentTarget=t,function(e,n,t,r,o,a,l,u,s){if(Ze.apply(this,arguments),We){if(!We)throw Error(i(198));var c=$e;We=!1,$e=null,He||(He=!0,qe=c)}}(r,n,void 0,e),e.currentTarget=null}function xr(e,n){n=0!=(4&n);for(var t=0;t<e.length;t++){var r=e[t],o=r.event;r=r.listeners;e:{var a=void 0;if(n)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==a&&o.isPropagationStopped())break e;Cr(o,l,s),a=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,s=l.currentTarget,l=l.listener,u!==a&&o.isPropagationStopped())break e;Cr(o,l,s),a=u}}}if(He)throw e=qe,He=!1,qe=null,e}function Sr(e,n){var t=to(n),r=e+"__bubble";t.has(r)||(Nr(n,e,2,!1),t.add(r))}var _r="_reactListening"+Math.random().toString(36).slice(2);function Or(e){e[_r]||(e[_r]=!0,l.forEach((function(n){kr.has(n)||Pr(n,!1,e,null),Pr(n,!0,e,null)})))}function Pr(e,n,t,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=t;if("selectionchange"===e&&9!==t.nodeType&&(a=t.ownerDocument),null!==r&&!n&&kr.has(e)){if("scroll"!==e)return;o|=2,a=r}var i=to(a),l=e+"__"+(n?"capture":"bubble");i.has(l)||(n&&(o|=4),Nr(a,e,o,n),i.add(l))}function Nr(e,n,t,r){var o=Rn.get(n);switch(void 0===o?2:o){case 0:o=Kn;break;case 1:o=Xn;break;default:o=Jn}t=o.bind(null,n,t,e),o=void 0,!Fe||"touchstart"!==n&&"touchmove"!==n&&"wheel"!==n||(o=!0),r?void 0!==o?e.addEventListener(n,t,{capture:!0,passive:o}):e.addEventListener(n,t,!0):void 0!==o?e.addEventListener(n,t,{passive:o}):e.addEventListener(n,t,!1)}function Tr(e,n,t,r,o){var a=r;if(0==(1&n)&&0==(2&n)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=Jr(l)))return;if(5===(u=i.tag)||6===u){r=a=i;continue e}l=l.parentNode}}r=r.return}!function(e,n,t){if(Me)return e();Me=!0;try{ze(e,n,t)}finally{Me=!1,Ue()}}((function(){var r=a,o=xe(t),i=[];e:{var l=Bn.get(e);if(void 0!==l){var u=dt,s=e;switch(e){case"keypress":if(0===ot(t))break e;case"keydown":case"keyup":u=_t;break;case"focusin":s="focus",u=gt;break;case"focusout":s="blur",u=gt;break;case"beforeblur":case"afterblur":u=gt;break;case"click":if(2===t.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=yt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=vt;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Pt;break;case On:case Pn:case Nn:u=bt;break;case Tn:u=Nt;break;case"scroll":u=ht;break;case"wheel":u=Tt;break;case"copy":case"cut":case"paste":u=At;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Ot}var c=0!=(4&n),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=De(h,d))&&c.push(Br(h,m,p))),f)break;h=h.return}0<c.length&&(l=new u(l,s,null,t,o),i.push({event:l,listeners:c}))}}if(0==(7&n)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&n)||!(s=t.relatedTarget||t.fromElement)||!Jr(s)&&!s[Kr])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=t.relatedTarget||t.toElement)?Jr(s):null)&&(s!==(f=Qe(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=yt,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Ot,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:eo(u),p=null==s?l:eo(s),(l=new c(m,h+"leave",u,t,o)).target=f,l.relatedTarget=p,m=null,Jr(o)===r&&((c=new c(d,h+"enter",s,t,o)).target=p,c.relatedTarget=f,m=c),f=m,u&&s)e:{for(d=s,h=0,p=c=u;p;p=Lr(p))h++;for(p=0,m=d;m;m=Lr(m))p++;for(;0<h-p;)c=Lr(c),h--;for(;0<p-h;)d=Lr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Lr(c),d=Lr(d)}c=null}else c=null;null!==u&&zr(i,l,u,c,!1),null!==s&&null!==f&&zr(i,f,s,c,!0)}if("select"===(u=(l=r?eo(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var y=Qt;else if(Wt(l))if(Kt)y=ar;else{y=rr;var v=tr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(y=or);switch(y&&(y=y(e,r))?$t(i,y,t,o):(v&&v(e,l,r),"focusout"===e&&(v=l._wrapperState)&&v.controlled&&"number"===l.type&&oe(l,"number",l.value)),v=r?eo(r):window,e){case"focusin":(Wt(v)||"true"===v.contentEditable)&&(mr=v,yr=r,vr=null);break;case"focusout":vr=yr=mr=null;break;case"mousedown":gr=!0;break;case"contextmenu":case"mouseup":case"dragend":gr=!1,br(i,t,o);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":br(i,t,o)}var g;if(Rt)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else It?Dt(e,t)&&(b="onCompositionEnd"):"keydown"===e&&229===t.keyCode&&(b="onCompositionStart");b&&(jt&&"ko"!==t.locale&&(It||"onCompositionStart"!==b?"onCompositionEnd"===b&&It&&(g=rt()):(nt="value"in(et=o)?et.value:et.textContent,It=!0)),0<(v=Rr(r,b)).length&&(b=new Et(b,e,null,t,o),i.push({event:b,listeners:v}),(g||null!==(g=Ft(t)))&&(b.data=g))),(g=zt?function(e,n){switch(e){case"compositionend":return Ft(n);case"keypress":return 32!==n.which?null:(Ut=!0,Mt);case"textInput":return(e=n.data)===Mt&&Ut?null:e;default:return null}}(e,t):function(e,n){if(It)return"compositionend"===e||!Rt&&Dt(e,n)?(e=rt(),tt=nt=et=null,It=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(n.ctrlKey||n.altKey||n.metaKey)||n.ctrlKey&&n.altKey){if(n.char&&1<n.char.length)return n.char;if(n.which)return String.fromCharCode(n.which)}return null;case"compositionend":return jt&&"ko"!==n.locale?null:n.data;default:return null}}(e,t))&&0<(r=Rr(r,"onBeforeInput")).length&&(o=new Et("onBeforeInput","beforeinput",null,t,o),i.push({event:o,listeners:r}),o.data=g)}xr(i,n)}))}function Br(e,n,t){return{instance:e,listener:n,currentTarget:t}}function Rr(e,n){for(var t=n+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=De(e,t))&&r.unshift(Br(e,a,o)),null!=(a=De(e,n))&&r.push(Br(e,a,o))),e=e.return}return r}function Lr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function zr(e,n,t,r,o){for(var a=n._reactName,i=[];null!==t&&t!==r;){var l=t,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,o?null!=(u=De(t,a))&&i.unshift(Br(t,u,l)):o||null!=(u=De(t,a))&&i.push(Br(t,u,l))),t=t.return}0!==i.length&&e.push({event:n,listeners:i})}function jr(){}var Mr=null,Ur=null;function Dr(e,n){switch(e){case"button":case"input":case"select":case"textarea":return!!n.autoFocus}return!1}function Fr(e,n){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof n.children||"number"==typeof n.children||"object"==typeof n.dangerouslySetInnerHTML&&null!==n.dangerouslySetInnerHTML&&null!=n.dangerouslySetInnerHTML.__html}var Ir="function"==typeof setTimeout?setTimeout:void 0,Vr="function"==typeof clearTimeout?clearTimeout:void 0;function Wr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function $r(e){for(;null!=e;e=e.nextSibling){var n=e.nodeType;if(1===n||3===n)break}return e}function Hr(e){e=e.previousSibling;for(var n=0;e;){if(8===e.nodeType){var t=e.data;if("$"===t||"$!"===t||"$?"===t){if(0===n)return e;n--}else"/$"===t&&n++}e=e.previousSibling}return null}var qr=0,Yr=Math.random().toString(36).slice(2),Zr="__reactFiber$"+Yr,Qr="__reactProps$"+Yr,Kr="__reactContainer$"+Yr,Xr="__reactEvents$"+Yr;function Jr(e){var n=e[Zr];if(n)return n;for(var t=e.parentNode;t;){if(n=t[Kr]||t[Zr]){if(t=n.alternate,null!==n.child||null!==t&&null!==t.child)for(e=Hr(e);null!==e;){if(t=e[Zr])return t;e=Hr(e)}return n}t=(e=t).parentNode}return null}function Gr(e){return!(e=e[Zr]||e[Kr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function eo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function no(e){return e[Qr]||null}function to(e){var n=e[Xr];return void 0===n&&(n=e[Xr]=new Set),n}var ro=[],oo=-1;function ao(e){return{current:e}}function io(e){0>oo||(e.current=ro[oo],ro[oo]=null,oo--)}function lo(e,n){oo++,ro[oo]=e.current,e.current=n}var uo={},so=ao(uo),co=ao(!1),fo=uo;function po(e,n){var t=e.type.contextTypes;if(!t)return uo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===n)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in t)a[o]=n[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=n,e.__reactInternalMemoizedMaskedChildContext=a),a}function ho(e){return null!=e.childContextTypes}function mo(){io(co),io(so)}function yo(e,n,t){if(so.current!==uo)throw Error(i(168));lo(so,n),lo(co,t)}function vo(e,n,t){var r=e.stateNode;if(e=n.childContextTypes,"function"!=typeof r.getChildContext)return t;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,Y(n)||"Unknown",a));return o({},t,r)}function go(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||uo,fo=so.current,lo(so,e),lo(co,co.current),!0}function bo(e,n,t){var r=e.stateNode;if(!r)throw Error(i(169));t?(e=vo(e,n,fo),r.__reactInternalMemoizedMergedChildContext=e,io(co),io(so),lo(so,e)):io(co),lo(co,t)}var Ao=null,Eo=null,wo=a.unstable_runWithPriority,ko=a.unstable_scheduleCallback,Co=a.unstable_cancelCallback,xo=a.unstable_shouldYield,So=a.unstable_requestPaint,_o=a.unstable_now,Oo=a.unstable_getCurrentPriorityLevel,Po=a.unstable_ImmediatePriority,No=a.unstable_UserBlockingPriority,To=a.unstable_NormalPriority,Bo=a.unstable_LowPriority,Ro=a.unstable_IdlePriority,Lo={},zo=void 0!==So?So:function(){},jo=null,Mo=null,Uo=!1,Do=_o(),Fo=1e4>Do?_o:function(){return _o()-Do};function Io(){switch(Oo()){case Po:return 99;case No:return 98;case To:return 97;case Bo:return 96;case Ro:return 95;default:throw Error(i(332))}}function Vo(e){switch(e){case 99:return Po;case 98:return No;case 97:return To;case 96:return Bo;case 95:return Ro;default:throw Error(i(332))}}function Wo(e,n){return e=Vo(e),wo(e,n)}function $o(e,n,t){return e=Vo(e),ko(e,n,t)}function Ho(){if(null!==Mo){var e=Mo;Mo=null,Co(e)}qo()}function qo(){if(!Uo&&null!==jo){Uo=!0;var e=0;try{var n=jo;Wo(99,(function(){for(;e<n.length;e++){var t=n[e];do{t=t(!0)}while(null!==t)}})),jo=null}catch(n){throw null!==jo&&(jo=jo.slice(e+1)),ko(Po,Ho),n}finally{Uo=!1}}}var Yo=E.ReactCurrentBatchConfig;function Zo(e,n){if(e&&e.defaultProps){for(var t in n=o({},n),e=e.defaultProps)void 0===n[t]&&(n[t]=e[t]);return n}return n}var Qo=ao(null),Ko=null,Xo=null,Jo=null;function Go(){Jo=Xo=Ko=null}function ea(e){var n=Qo.current;io(Qo),e.type._context._currentValue=n}function na(e,n){for(;null!==e;){var t=e.alternate;if((e.childLanes&n)===n){if(null===t||(t.childLanes&n)===n)break;t.childLanes|=n}else e.childLanes|=n,null!==t&&(t.childLanes|=n);e=e.return}}function ta(e,n){Ko=e,Jo=Xo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&n)&&(Ri=!0),e.firstContext=null)}function ra(e,n){if(Jo!==e&&!1!==n&&0!==n)if("number"==typeof n&&1073741823!==n||(Jo=e,n=1073741823),n={context:e,observedBits:n,next:null},null===Xo){if(null===Ko)throw Error(i(308));Xo=n,Ko.dependencies={lanes:0,firstContext:n,responders:null}}else Xo=Xo.next=n;return e._currentValue}var oa=!1;function aa(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ia(e,n){e=e.updateQueue,n.updateQueue===e&&(n.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function la(e,n){return{eventTime:e,lane:n,tag:0,payload:null,callback:null,next:null}}function ua(e,n){if(null!==(e=e.updateQueue)){var t=(e=e.shared).pending;null===t?n.next=n:(n.next=t.next,t.next=n),e.pending=n}}function sa(e,n){var t=e.updateQueue,r=e.alternate;if(null!==r&&t===(r=r.updateQueue)){var o=null,a=null;if(null!==(t=t.firstBaseUpdate)){do{var i={eventTime:t.eventTime,lane:t.lane,tag:t.tag,payload:t.payload,callback:t.callback,next:null};null===a?o=a=i:a=a.next=i,t=t.next}while(null!==t);null===a?o=a=n:a=a.next=n}else o=a=n;return t={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=t)}null===(e=t.lastBaseUpdate)?t.firstBaseUpdate=n:e.next=n,t.lastBaseUpdate=n}function ca(e,n,t,r){var a=e.updateQueue;oa=!1;var i=a.firstBaseUpdate,l=a.lastBaseUpdate,u=a.shared.pending;if(null!==u){a.shared.pending=null;var s=u,c=s.next;s.next=null,null===l?i=c:l.next=c,l=s;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==l&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=s)}}if(null!==i){for(d=a.baseState,l=0,f=c=s=null;;){u=i.lane;var p=i.eventTime;if((r&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,m=i;switch(u=n,p=t,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,u);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(u="function"==typeof(h=m.payload)?h.call(p,d,u):h))break e;d=o({},d,u);break e;case 2:oa=!0}}null!==i.callback&&(e.flags|=32,null===(u=a.effects)?a.effects=[i]:u.push(i))}else p={eventTime:p,lane:u,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===f?(c=f=p,s=d):f=f.next=p,l|=u;if(null===(i=i.next)){if(null===(u=a.shared.pending))break;i=u.next,u.next=null,a.lastBaseUpdate=u,a.shared.pending=null}}null===f&&(s=d),a.baseState=s,a.firstBaseUpdate=c,a.lastBaseUpdate=f,zl|=l,e.lanes=l,e.memoizedState=d}}function fa(e,n,t){if(e=n.effects,n.effects=null,null!==e)for(n=0;n<e.length;n++){var r=e[n],o=r.callback;if(null!==o){if(r.callback=null,r=t,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var da=(new r.Component).refs;function pa(e,n,t,r){t=null==(t=t(r,n=e.memoizedState))?n:o({},n,t),e.memoizedState=t,0===e.lanes&&(e.updateQueue.baseState=t)}var ha={isMounted:function(e){return!!(e=e._reactInternals)&&Qe(e)===e},enqueueSetState:function(e,n,t){e=e._reactInternals;var r=iu(),o=lu(e),a=la(r,o);a.payload=n,null!=t&&(a.callback=t),ua(e,a),uu(e,o,r)},enqueueReplaceState:function(e,n,t){e=e._reactInternals;var r=iu(),o=lu(e),a=la(r,o);a.tag=1,a.payload=n,null!=t&&(a.callback=t),ua(e,a),uu(e,o,r)},enqueueForceUpdate:function(e,n){e=e._reactInternals;var t=iu(),r=lu(e),o=la(t,r);o.tag=2,null!=n&&(o.callback=n),ua(e,o),uu(e,r,t)}};function ma(e,n,t,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(n.prototype&&n.prototype.isPureReactComponent&&ur(t,r)&&ur(o,a))}function ya(e,n,t){var r=!1,o=uo,a=n.contextType;return"object"==typeof a&&null!==a?a=ra(a):(o=ho(n)?fo:so.current,a=(r=null!=(r=n.contextTypes))?po(e,o):uo),n=new n(t,a),e.memoizedState=null!==n.state&&void 0!==n.state?n.state:null,n.updater=ha,e.stateNode=n,n._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),n}function va(e,n,t,r){e=n.state,"function"==typeof n.componentWillReceiveProps&&n.componentWillReceiveProps(t,r),"function"==typeof n.UNSAFE_componentWillReceiveProps&&n.UNSAFE_componentWillReceiveProps(t,r),n.state!==e&&ha.enqueueReplaceState(n,n.state,null)}function ga(e,n,t,r){var o=e.stateNode;o.props=t,o.state=e.memoizedState,o.refs=da,aa(e);var a=n.contextType;"object"==typeof a&&null!==a?o.context=ra(a):(a=ho(n)?fo:so.current,o.context=po(e,a)),ca(e,t,o,r),o.state=e.memoizedState,"function"==typeof(a=n.getDerivedStateFromProps)&&(pa(e,n,a,t),o.state=e.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(n=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),n!==o.state&&ha.enqueueReplaceState(o,o.state,null),ca(e,t,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var ba=Array.isArray;function Aa(e,n,t){if(null!==(e=t.ref)&&"function"!=typeof e&&"object"!=typeof e){if(t._owner){if(t=t._owner){if(1!==t.tag)throw Error(i(309));var r=t.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==n&&null!==n.ref&&"function"==typeof n.ref&&n.ref._stringRef===o?n.ref:((n=function(e){var n=r.refs;n===da&&(n=r.refs={}),null===e?delete n[o]:n[o]=e})._stringRef=o,n)}if("string"!=typeof e)throw Error(i(284));if(!t._owner)throw Error(i(290,e))}return e}function Ea(e,n){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(n)?"object with keys {"+Object.keys(n).join(", ")+"}":n))}function wa(e){function n(n,t){if(e){var r=n.lastEffect;null!==r?(r.nextEffect=t,n.lastEffect=t):n.firstEffect=n.lastEffect=t,t.nextEffect=null,t.flags=8}}function t(t,r){if(!e)return null;for(;null!==r;)n(t,r),r=r.sibling;return null}function r(e,n){for(e=new Map;null!==n;)null!==n.key?e.set(n.key,n):e.set(n.index,n),n=n.sibling;return e}function o(e,n){return(e=Uu(e,n)).index=0,e.sibling=null,e}function a(n,t,r){return n.index=r,e?null!==(r=n.alternate)?(r=r.index)<t?(n.flags=2,t):r:(n.flags=2,t):t}function l(n){return e&&null===n.alternate&&(n.flags=2),n}function u(e,n,t,r){return null===n||6!==n.tag?((n=Vu(t,e.mode,r)).return=e,n):((n=o(n,t)).return=e,n)}function s(e,n,t,r){return null!==n&&n.elementType===t.type?((r=o(n,t.props)).ref=Aa(e,n,t),r.return=e,r):((r=Du(t.type,t.key,t.props,null,e.mode,r)).ref=Aa(e,n,t),r.return=e,r)}function c(e,n,t,r){return null===n||4!==n.tag||n.stateNode.containerInfo!==t.containerInfo||n.stateNode.implementation!==t.implementation?((n=Wu(t,e.mode,r)).return=e,n):((n=o(n,t.children||[])).return=e,n)}function f(e,n,t,r,a){return null===n||7!==n.tag?((n=Fu(t,e.mode,r,a)).return=e,n):((n=o(n,t)).return=e,n)}function d(e,n,t){if("string"==typeof n||"number"==typeof n)return(n=Vu(""+n,e.mode,t)).return=e,n;if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return(t=Du(n.type,n.key,n.props,null,e.mode,t)).ref=Aa(e,null,n),t.return=e,t;case k:return(n=Wu(n,e.mode,t)).return=e,n}if(ba(n)||V(n))return(n=Fu(n,e.mode,t,null)).return=e,n;Ea(e,n)}return null}function p(e,n,t,r){var o=null!==n?n.key:null;if("string"==typeof t||"number"==typeof t)return null!==o?null:u(e,n,""+t,r);if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return t.key===o?t.type===C?f(e,n,t.props.children,r,o):s(e,n,t,r):null;case k:return t.key===o?c(e,n,t,r):null}if(ba(t)||V(t))return null!==o?null:f(e,n,t,r,null);Ea(e,t)}return null}function h(e,n,t,r,o){if("string"==typeof r||"number"==typeof r)return u(n,e=e.get(t)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return e=e.get(null===r.key?t:r.key)||null,r.type===C?f(n,e,r.props.children,o,r.key):s(n,e,r,o);case k:return c(n,e=e.get(null===r.key?t:r.key)||null,r,o)}if(ba(r)||V(r))return f(n,e=e.get(t)||null,r,o,null);Ea(n,r)}return null}function m(o,i,l,u){for(var s=null,c=null,f=i,m=i=0,y=null;null!==f&&m<l.length;m++){f.index>m?(y=f,f=null):y=f.sibling;var v=p(o,f,l[m],u);if(null===v){null===f&&(f=y);break}e&&f&&null===v.alternate&&n(o,f),i=a(v,i,m),null===c?s=v:c.sibling=v,c=v,f=y}if(m===l.length)return t(o,f),s;if(null===f){for(;m<l.length;m++)null!==(f=d(o,l[m],u))&&(i=a(f,i,m),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);m<l.length;m++)null!==(y=h(f,o,m,l[m],u))&&(e&&null!==y.alternate&&f.delete(null===y.key?m:y.key),i=a(y,i,m),null===c?s=y:c.sibling=y,c=y);return e&&f.forEach((function(e){return n(o,e)})),s}function y(o,l,u,s){var c=V(u);if("function"!=typeof c)throw Error(i(150));if(null==(u=c.call(u)))throw Error(i(151));for(var f=c=null,m=l,y=l=0,v=null,g=u.next();null!==m&&!g.done;y++,g=u.next()){m.index>y?(v=m,m=null):v=m.sibling;var b=p(o,m,g.value,s);if(null===b){null===m&&(m=v);break}e&&m&&null===b.alternate&&n(o,m),l=a(b,l,y),null===f?c=b:f.sibling=b,f=b,m=v}if(g.done)return t(o,m),c;if(null===m){for(;!g.done;y++,g=u.next())null!==(g=d(o,g.value,s))&&(l=a(g,l,y),null===f?c=g:f.sibling=g,f=g);return c}for(m=r(o,m);!g.done;y++,g=u.next())null!==(g=h(m,o,y,g.value,s))&&(e&&null!==g.alternate&&m.delete(null===g.key?y:g.key),l=a(g,l,y),null===f?c=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return n(o,e)})),c}return function(e,r,a,u){var s="object"==typeof a&&null!==a&&a.type===C&&null===a.key;s&&(a=a.props.children);var c="object"==typeof a&&null!==a;if(c)switch(a.$$typeof){case w:e:{for(c=a.key,s=r;null!==s;){if(s.key===c){switch(s.tag){case 7:if(a.type===C){t(e,s.sibling),(r=o(s,a.props.children)).return=e,e=r;break e}break;default:if(s.elementType===a.type){t(e,s.sibling),(r=o(s,a.props)).ref=Aa(e,s,a),r.return=e,e=r;break e}}t(e,s);break}n(e,s),s=s.sibling}a.type===C?((r=Fu(a.props.children,e.mode,u,a.key)).return=e,e=r):((u=Du(a.type,a.key,a.props,null,e.mode,u)).ref=Aa(e,r,a),u.return=e,e=u)}return l(e);case k:e:{for(s=a.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){t(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}t(e,r);break}n(e,r),r=r.sibling}(r=Wu(a,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(t(e,r.sibling),(r=o(r,a)).return=e,e=r):(t(e,r),(r=Vu(a,e.mode,u)).return=e,e=r),l(e);if(ba(a))return m(e,r,a,u);if(V(a))return y(e,r,a,u);if(c&&Ea(e,a),void 0===a&&!s)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,Y(e.type)||"Component"))}return t(e,r)}}var ka=wa(!0),Ca=wa(!1),xa={},Sa=ao(xa),_a=ao(xa),Oa=ao(xa);function Pa(e){if(e===xa)throw Error(i(174));return e}function Na(e,n){switch(lo(Oa,n),lo(_a,e),lo(Sa,xa),e=n.nodeType){case 9:case 11:n=(n=n.documentElement)?n.namespaceURI:pe(null,"");break;default:n=pe(n=(e=8===e?n.parentNode:n).namespaceURI||null,e=e.tagName)}io(Sa),lo(Sa,n)}function Ta(){io(Sa),io(_a),io(Oa)}function Ba(e){Pa(Oa.current);var n=Pa(Sa.current),t=pe(n,e.type);n!==t&&(lo(_a,e),lo(Sa,t))}function Ra(e){_a.current===e&&(io(Sa),io(_a))}var La=ao(0);function za(e){for(var n=e;null!==n;){if(13===n.tag){var t=n.memoizedState;if(null!==t&&(null===(t=t.dehydrated)||"$?"===t.data||"$!"===t.data))return n}else if(19===n.tag&&void 0!==n.memoizedProps.revealOrder){if(0!=(64&n.flags))return n}else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}return null}var ja=null,Ma=null,Ua=!1;function Da(e,n){var t=ju(5,null,null,0);t.elementType="DELETED",t.type="DELETED",t.stateNode=n,t.return=e,t.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=t,e.lastEffect=t):e.firstEffect=e.lastEffect=t}function Fa(e,n){switch(e.tag){case 5:var t=e.type;return null!==(n=1!==n.nodeType||t.toLowerCase()!==n.nodeName.toLowerCase()?null:n)&&(e.stateNode=n,!0);case 6:return null!==(n=""===e.pendingProps||3!==n.nodeType?null:n)&&(e.stateNode=n,!0);case 13:default:return!1}}function Ia(e){if(Ua){var n=Ma;if(n){var t=n;if(!Fa(e,n)){if(!(n=$r(t.nextSibling))||!Fa(e,n))return e.flags=-1025&e.flags|2,Ua=!1,void(ja=e);Da(ja,t)}ja=e,Ma=$r(n.firstChild)}else e.flags=-1025&e.flags|2,Ua=!1,ja=e}}function Va(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ja=e}function Wa(e){if(e!==ja)return!1;if(!Ua)return Va(e),Ua=!0,!1;var n=e.type;if(5!==e.tag||"head"!==n&&"body"!==n&&!Fr(n,e.memoizedProps))for(n=Ma;n;)Da(e,n),n=$r(n.nextSibling);if(Va(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType){var t=e.data;if("/$"===t){if(0===n){Ma=$r(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++}e=e.nextSibling}Ma=null}}else Ma=ja?$r(e.stateNode.nextSibling):null;return!0}function $a(){Ma=ja=null,Ua=!1}var Ha=[];function qa(){for(var e=0;e<Ha.length;e++)Ha[e]._workInProgressVersionPrimary=null;Ha.length=0}var Ya=E.ReactCurrentDispatcher,Za=E.ReactCurrentBatchConfig,Qa=0,Ka=null,Xa=null,Ja=null,Ga=!1,ei=!1;function ni(){throw Error(i(321))}function ti(e,n){if(null===n)return!1;for(var t=0;t<n.length&&t<e.length;t++)if(!ir(e[t],n[t]))return!1;return!0}function ri(e,n,t,r,o,a){if(Qa=a,Ka=n,n.memoizedState=null,n.updateQueue=null,n.lanes=0,Ya.current=null===e||null===e.memoizedState?Pi:Ni,e=t(r,o),ei){a=0;do{if(ei=!1,!(25>a))throw Error(i(301));a+=1,Ja=Xa=null,n.updateQueue=null,Ya.current=Ti,e=t(r,o)}while(ei)}if(Ya.current=Oi,n=null!==Xa&&null!==Xa.next,Qa=0,Ja=Xa=Ka=null,Ga=!1,n)throw Error(i(300));return e}function oi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Ja?Ka.memoizedState=Ja=e:Ja=Ja.next=e,Ja}function ai(){if(null===Xa){var e=Ka.alternate;e=null!==e?e.memoizedState:null}else e=Xa.next;var n=null===Ja?Ka.memoizedState:Ja.next;if(null!==n)Ja=n,Xa=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Xa=e).memoizedState,baseState:Xa.baseState,baseQueue:Xa.baseQueue,queue:Xa.queue,next:null},null===Ja?Ka.memoizedState=Ja=e:Ja=Ja.next=e}return Ja}function ii(e,n){return"function"==typeof n?n(e):n}function li(e){var n=ai(),t=n.queue;if(null===t)throw Error(i(311));t.lastRenderedReducer=e;var r=Xa,o=r.baseQueue,a=t.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}r.baseQueue=o=a,t.pending=null}if(null!==o){o=o.next,r=r.baseState;var u=l=a=null,s=o;do{var c=s.lane;if((Qa&c)===c)null!==u&&(u=u.next={lane:0,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),r=s.eagerReducer===e?s.eagerState:e(r,s.action);else{var f={lane:c,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===u?(l=u=f,a=r):u=u.next=f,Ka.lanes|=c,zl|=c}s=s.next}while(null!==s&&s!==o);null===u?a=r:u.next=l,ir(r,n.memoizedState)||(Ri=!0),n.memoizedState=r,n.baseState=a,n.baseQueue=u,t.lastRenderedState=r}return[n.memoizedState,t.dispatch]}function ui(e){var n=ai(),t=n.queue;if(null===t)throw Error(i(311));t.lastRenderedReducer=e;var r=t.dispatch,o=t.pending,a=n.memoizedState;if(null!==o){t.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);ir(a,n.memoizedState)||(Ri=!0),n.memoizedState=a,null===n.baseQueue&&(n.baseState=a),t.lastRenderedState=a}return[a,r]}function si(e,n,t){var r=n._getVersion;r=r(n._source);var o=n._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Qa&e)===e)&&(n._workInProgressVersionPrimary=r,Ha.push(n))),e)return t(n._source);throw Ha.push(n),Error(i(350))}function ci(e,n,t,r){var o=_l;if(null===o)throw Error(i(349));var a=n._getVersion,l=a(n._source),u=Ya.current,s=u.useState((function(){return si(o,n,t)})),c=s[1],f=s[0];s=Ja;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,m=d.source;d=d.subscribe;var y=Ka;return e.memoizedState={refs:p,source:n,subscribe:r},u.useEffect((function(){p.getSnapshot=t,p.setSnapshot=c;var e=a(n._source);if(!ir(l,e)){e=t(n._source),ir(f,e)||(c(e),e=lu(y),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,i=e;0<i;){var u=31-$n(i),s=1<<u;r[u]|=e,i&=~s}}}),[t,n,r]),u.useEffect((function(){return r(n._source,(function(){var e=p.getSnapshot,t=p.setSnapshot;try{t(e(n._source));var r=lu(y);o.mutableReadLanes|=r&o.pendingLanes}catch(e){t((function(){throw e}))}}))}),[n,r]),ir(h,t)&&ir(m,n)&&ir(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ii,lastRenderedState:f}).dispatch=c=_i.bind(null,Ka,e),s.queue=e,s.baseQueue=null,f=si(o,n,t),s.memoizedState=s.baseState=f),f}function fi(e,n,t){return ci(ai(),e,n,t)}function di(e){var n=oi();return"function"==typeof e&&(e=e()),n.memoizedState=n.baseState=e,e=(e=n.queue={pending:null,dispatch:null,lastRenderedReducer:ii,lastRenderedState:e}).dispatch=_i.bind(null,Ka,e),[n.memoizedState,e]}function pi(e,n,t,r){return e={tag:e,create:n,destroy:t,deps:r,next:null},null===(n=Ka.updateQueue)?(n={lastEffect:null},Ka.updateQueue=n,n.lastEffect=e.next=e):null===(t=n.lastEffect)?n.lastEffect=e.next=e:(r=t.next,t.next=e,e.next=r,n.lastEffect=e),e}function hi(e){return e={current:e},oi().memoizedState=e}function mi(){return ai().memoizedState}function yi(e,n,t,r){var o=oi();Ka.flags|=e,o.memoizedState=pi(1|n,t,void 0,void 0===r?null:r)}function vi(e,n,t,r){var o=ai();r=void 0===r?null:r;var a=void 0;if(null!==Xa){var i=Xa.memoizedState;if(a=i.destroy,null!==r&&ti(r,i.deps))return void pi(n,t,a,r)}Ka.flags|=e,o.memoizedState=pi(1|n,t,a,r)}function gi(e,n){return yi(516,4,e,n)}function bi(e,n){return vi(516,4,e,n)}function Ai(e,n){return vi(4,2,e,n)}function Ei(e,n){return"function"==typeof n?(e=e(),n(e),function(){n(null)}):null!=n?(e=e(),n.current=e,function(){n.current=null}):void 0}function wi(e,n,t){return t=null!=t?t.concat([e]):null,vi(4,2,Ei.bind(null,n,e),t)}function ki(){}function Ci(e,n){var t=ai();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&ti(n,r[1])?r[0]:(t.memoizedState=[e,n],e)}function xi(e,n){var t=ai();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&ti(n,r[1])?r[0]:(e=e(),t.memoizedState=[e,n],e)}function Si(e,n){var t=Io();Wo(98>t?98:t,(function(){e(!0)})),Wo(97<t?97:t,(function(){var t=Za.transition;Za.transition=1;try{e(!1),n()}finally{Za.transition=t}}))}function _i(e,n,t){var r=iu(),o=lu(e),a={lane:o,action:t,eagerReducer:null,eagerState:null,next:null},i=n.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),n.pending=a,i=e.alternate,e===Ka||null!==i&&i===Ka)ei=Ga=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=n.lastRenderedReducer))try{var l=n.lastRenderedState,u=i(l,t);if(a.eagerReducer=i,a.eagerState=u,ir(u,l))return}catch(e){}uu(e,o,r)}}var Oi={readContext:ra,useCallback:ni,useContext:ni,useEffect:ni,useImperativeHandle:ni,useLayoutEffect:ni,useMemo:ni,useReducer:ni,useRef:ni,useState:ni,useDebugValue:ni,useDeferredValue:ni,useTransition:ni,useMutableSource:ni,useOpaqueIdentifier:ni,unstable_isNewReconciler:!1},Pi={readContext:ra,useCallback:function(e,n){return oi().memoizedState=[e,void 0===n?null:n],e},useContext:ra,useEffect:gi,useImperativeHandle:function(e,n,t){return t=null!=t?t.concat([e]):null,yi(4,2,Ei.bind(null,n,e),t)},useLayoutEffect:function(e,n){return yi(4,2,e,n)},useMemo:function(e,n){var t=oi();return n=void 0===n?null:n,e=e(),t.memoizedState=[e,n],e},useReducer:function(e,n,t){var r=oi();return n=void 0!==t?t(n):n,r.memoizedState=r.baseState=n,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:n}).dispatch=_i.bind(null,Ka,e),[r.memoizedState,e]},useRef:hi,useState:di,useDebugValue:ki,useDeferredValue:function(e){var n=di(e),t=n[0],r=n[1];return gi((function(){var n=Za.transition;Za.transition=1;try{r(e)}finally{Za.transition=n}}),[e]),t},useTransition:function(){var e=di(!1),n=e[0];return hi(e=Si.bind(null,e[1])),[e,n]},useMutableSource:function(e,n,t){var r=oi();return r.memoizedState={refs:{getSnapshot:n,setSnapshot:null},source:e,subscribe:t},ci(r,e,n,t)},useOpaqueIdentifier:function(){if(Ua){var e=!1,n=function(e){return{$$typeof:z,toString:e,valueOf:e}}((function(){throw e||(e=!0,t("r:"+(qr++).toString(36))),Error(i(355))})),t=di(n)[1];return 0==(2&Ka.mode)&&(Ka.flags|=516,pi(5,(function(){t("r:"+(qr++).toString(36))}),void 0,null)),n}return di(n="r:"+(qr++).toString(36)),n},unstable_isNewReconciler:!1},Ni={readContext:ra,useCallback:Ci,useContext:ra,useEffect:bi,useImperativeHandle:wi,useLayoutEffect:Ai,useMemo:xi,useReducer:li,useRef:mi,useState:function(){return li(ii)},useDebugValue:ki,useDeferredValue:function(e){var n=li(ii),t=n[0],r=n[1];return bi((function(){var n=Za.transition;Za.transition=1;try{r(e)}finally{Za.transition=n}}),[e]),t},useTransition:function(){var e=li(ii)[0];return[mi().current,e]},useMutableSource:fi,useOpaqueIdentifier:function(){return li(ii)[0]},unstable_isNewReconciler:!1},Ti={readContext:ra,useCallback:Ci,useContext:ra,useEffect:bi,useImperativeHandle:wi,useLayoutEffect:Ai,useMemo:xi,useReducer:ui,useRef:mi,useState:function(){return ui(ii)},useDebugValue:ki,useDeferredValue:function(e){var n=ui(ii),t=n[0],r=n[1];return bi((function(){var n=Za.transition;Za.transition=1;try{r(e)}finally{Za.transition=n}}),[e]),t},useTransition:function(){var e=ui(ii)[0];return[mi().current,e]},useMutableSource:fi,useOpaqueIdentifier:function(){return ui(ii)[0]},unstable_isNewReconciler:!1},Bi=E.ReactCurrentOwner,Ri=!1;function Li(e,n,t,r){n.child=null===e?Ca(n,null,t,r):ka(n,e.child,t,r)}function zi(e,n,t,r,o){t=t.render;var a=n.ref;return ta(n,o),r=ri(e,n,t,r,a,o),null===e||Ri?(n.flags|=1,Li(e,n,r,o),n.child):(n.updateQueue=e.updateQueue,n.flags&=-517,e.lanes&=~o,Gi(e,n,o))}function ji(e,n,t,r,o,a){if(null===e){var i=t.type;return"function"!=typeof i||Mu(i)||void 0!==i.defaultProps||null!==t.compare||void 0!==t.defaultProps?((e=Du(t.type,null,r,n,n.mode,a)).ref=n.ref,e.return=n,n.child=e):(n.tag=15,n.type=i,Mi(e,n,i,r,o,a))}return i=e.child,0==(o&a)&&(o=i.memoizedProps,(t=null!==(t=t.compare)?t:ur)(o,r)&&e.ref===n.ref)?Gi(e,n,a):(n.flags|=1,(e=Uu(i,r)).ref=n.ref,e.return=n,n.child=e)}function Mi(e,n,t,r,o,a){if(null!==e&&ur(e.memoizedProps,r)&&e.ref===n.ref){if(Ri=!1,0==(a&o))return n.lanes=e.lanes,Gi(e,n,a);0!=(16384&e.flags)&&(Ri=!0)}return Fi(e,n,t,r,a)}function Ui(e,n,t){var r=n.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&n.mode))n.memoizedState={baseLanes:0},hu(0,t);else{if(0==(1073741824&t))return e=null!==a?a.baseLanes|t:t,n.lanes=n.childLanes=1073741824,n.memoizedState={baseLanes:e},hu(0,e),null;n.memoizedState={baseLanes:0},hu(0,null!==a?a.baseLanes:t)}else null!==a?(r=a.baseLanes|t,n.memoizedState=null):r=t,hu(0,r);return Li(e,n,o,t),n.child}function Di(e,n){var t=n.ref;(null===e&&null!==t||null!==e&&e.ref!==t)&&(n.flags|=128)}function Fi(e,n,t,r,o){var a=ho(t)?fo:so.current;return a=po(n,a),ta(n,o),t=ri(e,n,t,r,a,o),null===e||Ri?(n.flags|=1,Li(e,n,t,o),n.child):(n.updateQueue=e.updateQueue,n.flags&=-517,e.lanes&=~o,Gi(e,n,o))}function Ii(e,n,t,r,o){if(ho(t)){var a=!0;go(n)}else a=!1;if(ta(n,o),null===n.stateNode)null!==e&&(e.alternate=null,n.alternate=null,n.flags|=2),ya(n,t,r),ga(n,t,r,o),r=!0;else if(null===e){var i=n.stateNode,l=n.memoizedProps;i.props=l;var u=i.context,s=t.contextType;s="object"==typeof s&&null!==s?ra(s):po(n,s=ho(t)?fo:so.current);var c=t.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&va(n,i,r,s),oa=!1;var d=n.memoizedState;i.state=d,ca(n,r,i,o),u=n.memoizedState,l!==r||d!==u||co.current||oa?("function"==typeof c&&(pa(n,t,c,r),u=n.memoizedState),(l=oa||ma(n,t,l,r,d,u,s))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(n.flags|=4)):("function"==typeof i.componentDidMount&&(n.flags|=4),n.memoizedProps=r,n.memoizedState=u),i.props=r,i.state=u,i.context=s,r=l):("function"==typeof i.componentDidMount&&(n.flags|=4),r=!1)}else{i=n.stateNode,ia(e,n),l=n.memoizedProps,s=n.type===n.elementType?l:Zo(n.type,l),i.props=s,f=n.pendingProps,d=i.context,u="object"==typeof(u=t.contextType)&&null!==u?ra(u):po(n,u=ho(t)?fo:so.current);var p=t.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||d!==u)&&va(n,i,r,u),oa=!1,d=n.memoizedState,i.state=d,ca(n,r,i,o);var h=n.memoizedState;l!==f||d!==h||co.current||oa?("function"==typeof p&&(pa(n,t,p,r),h=n.memoizedState),(s=oa||ma(n,t,s,r,d,h,u))?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof i.componentDidUpdate&&(n.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(n.flags|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(n.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(n.flags|=256),n.memoizedProps=r,n.memoizedState=h),i.props=r,i.state=h,i.context=u,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(n.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(n.flags|=256),r=!1)}return Vi(e,n,t,r,a,o)}function Vi(e,n,t,r,o,a){Di(e,n);var i=0!=(64&n.flags);if(!r&&!i)return o&&bo(n,t,!1),Gi(e,n,a);r=n.stateNode,Bi.current=n;var l=i&&"function"!=typeof t.getDerivedStateFromError?null:r.render();return n.flags|=1,null!==e&&i?(n.child=ka(n,e.child,null,a),n.child=ka(n,null,l,a)):Li(e,n,l,a),n.memoizedState=r.state,o&&bo(n,t,!0),n.child}function Wi(e){var n=e.stateNode;n.pendingContext?yo(0,n.pendingContext,n.pendingContext!==n.context):n.context&&yo(0,n.context,!1),Na(e,n.containerInfo)}var $i,Hi,qi,Yi={dehydrated:null,retryLane:0};function Zi(e,n,t){var r,o=n.pendingProps,a=La.current,i=!1;return(r=0!=(64&n.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(i=!0,n.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),lo(La,1&a),null===e?(void 0!==o.fallback&&Ia(n),e=o.children,a=o.fallback,i?(e=Qi(n,e,a,t),n.child.memoizedState={baseLanes:t},n.memoizedState=Yi,e):"number"==typeof o.unstable_expectedLoadTime?(e=Qi(n,e,a,t),n.child.memoizedState={baseLanes:t},n.memoizedState=Yi,n.lanes=33554432,e):((t=Iu({mode:"visible",children:e},n.mode,t,null)).return=n,n.child=t)):(e.memoizedState,i?(o=function(e,n,t,r,o){var a=n.mode,i=e.child;e=i.sibling;var l={mode:"hidden",children:t};return 0==(2&a)&&n.child!==i?((t=n.child).childLanes=0,t.pendingProps=l,null!==(i=t.lastEffect)?(n.firstEffect=t.firstEffect,n.lastEffect=i,i.nextEffect=null):n.firstEffect=n.lastEffect=null):t=Uu(i,l),null!==e?r=Uu(e,r):(r=Fu(r,a,o,null)).flags|=2,r.return=n,t.return=n,t.sibling=r,n.child=t,r}(e,n,o.children,o.fallback,t),i=n.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:t}:{baseLanes:a.baseLanes|t},i.childLanes=e.childLanes&~t,n.memoizedState=Yi,o):(t=function(e,n,t,r){var o=e.child;return e=o.sibling,t=Uu(o,{mode:"visible",children:t}),0==(2&n.mode)&&(t.lanes=r),t.return=n,t.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,n.firstEffect=n.lastEffect=e),n.child=t}(e,n,o.children,t),n.memoizedState=null,t))}function Qi(e,n,t,r){var o=e.mode,a=e.child;return n={mode:"hidden",children:n},0==(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=n):a=Iu(n,o,0,null),t=Fu(t,o,r,null),a.return=e,t.return=e,a.sibling=t,e.child=a,t}function Ki(e,n){e.lanes|=n;var t=e.alternate;null!==t&&(t.lanes|=n),na(e.return,n)}function Xi(e,n,t,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:n,rendering:null,renderingStartTime:0,last:r,tail:t,tailMode:o,lastEffect:a}:(i.isBackwards=n,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=t,i.tailMode=o,i.lastEffect=a)}function Ji(e,n,t){var r=n.pendingProps,o=r.revealOrder,a=r.tail;if(Li(e,n,r.children,t),0!=(2&(r=La.current)))r=1&r|2,n.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=n.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ki(e,t);else if(19===e.tag)Ki(e,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(lo(La,r),0==(2&n.mode))n.memoizedState=null;else switch(o){case"forwards":for(t=n.child,o=null;null!==t;)null!==(e=t.alternate)&&null===za(e)&&(o=t),t=t.sibling;null===(t=o)?(o=n.child,n.child=null):(o=t.sibling,t.sibling=null),Xi(n,!1,o,t,a,n.lastEffect);break;case"backwards":for(t=null,o=n.child,n.child=null;null!==o;){if(null!==(e=o.alternate)&&null===za(e)){n.child=o;break}e=o.sibling,o.sibling=t,t=o,o=e}Xi(n,!0,t,null,a,n.lastEffect);break;case"together":Xi(n,!1,null,null,void 0,n.lastEffect);break;default:n.memoizedState=null}return n.child}function Gi(e,n,t){if(null!==e&&(n.dependencies=e.dependencies),zl|=n.lanes,0!=(t&n.childLanes)){if(null!==e&&n.child!==e.child)throw Error(i(153));if(null!==n.child){for(t=Uu(e=n.child,e.pendingProps),n.child=t,t.return=n;null!==e.sibling;)e=e.sibling,(t=t.sibling=Uu(e,e.pendingProps)).return=n;t.sibling=null}return n.child}return null}function el(e,n){if(!Ua)switch(e.tailMode){case"hidden":n=e.tail;for(var t=null;null!==n;)null!==n.alternate&&(t=n),n=n.sibling;null===t?e.tail=null:t.sibling=null;break;case"collapsed":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?n||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function nl(e,n,t){var r=n.pendingProps;switch(n.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return ho(n.type)&&mo(),null;case 3:return Ta(),io(co),io(so),qa(),(r=n.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Wa(n)?n.flags|=4:r.hydrate||(n.flags|=256)),null;case 5:Ra(n);var a=Pa(Oa.current);if(t=n.type,null!==e&&null!=n.stateNode)Hi(e,n,t,r),e.ref!==n.ref&&(n.flags|=128);else{if(!r){if(null===n.stateNode)throw Error(i(166));return null}if(e=Pa(Sa.current),Wa(n)){r=n.stateNode,t=n.type;var l=n.memoizedProps;switch(r[Zr]=n,r[Qr]=l,t){case"dialog":Sr("cancel",r),Sr("close",r);break;case"iframe":case"object":case"embed":Sr("load",r);break;case"video":case"audio":for(e=0;e<wr.length;e++)Sr(wr[e],r);break;case"source":Sr("error",r);break;case"img":case"image":case"link":Sr("error",r),Sr("load",r);break;case"details":Sr("toggle",r);break;case"input":ee(r,l),Sr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Sr("invalid",r);break;case"textarea":ue(r,l),Sr("invalid",r)}for(var s in ke(t,l),e=null,l)l.hasOwnProperty(s)&&(a=l[s],"children"===s?"string"==typeof a?r.textContent!==a&&(e=["children",a]):"number"==typeof a&&r.textContent!==""+a&&(e=["children",""+a]):u.hasOwnProperty(s)&&null!=a&&"onScroll"===s&&Sr("scroll",r));switch(t){case"input":K(r),re(r,l,!0);break;case"textarea":K(r),ce(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=jr)}r=e,n.updateQueue=r,null!==r&&(n.flags|=4)}else{switch(s=9===a.nodeType?a:a.ownerDocument,e===fe&&(e=de(t)),e===fe?"script"===t?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(t,{is:r.is}):(e=s.createElement(t),"select"===t&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,t),e[Zr]=n,e[Qr]=r,$i(e,n),n.stateNode=e,s=Ce(t,r),t){case"dialog":Sr("cancel",e),Sr("close",e),a=r;break;case"iframe":case"object":case"embed":Sr("load",e),a=r;break;case"video":case"audio":for(a=0;a<wr.length;a++)Sr(wr[a],e);a=r;break;case"source":Sr("error",e),a=r;break;case"img":case"image":case"link":Sr("error",e),Sr("load",e),a=r;break;case"details":Sr("toggle",e),a=r;break;case"input":ee(e,r),a=G(e,r),Sr("invalid",e);break;case"option":a=ae(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=o({},r,{value:void 0}),Sr("invalid",e);break;case"textarea":ue(e,r),a=le(e,r),Sr("invalid",e);break;default:a=r}ke(t,a);var c=a;for(l in c)if(c.hasOwnProperty(l)){var f=c[l];"style"===l?Ee(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&ye(e,f):"children"===l?"string"==typeof f?("textarea"!==t||""!==f)&&ve(e,f):"number"==typeof f&&ve(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(u.hasOwnProperty(l)?null!=f&&"onScroll"===l&&Sr("scroll",e):null!=f&&A(e,l,f,s))}switch(t){case"input":K(e),re(e,r,!1);break;case"textarea":K(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+Z(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ie(e,!!r.multiple,l,!1):null!=r.defaultValue&&ie(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=jr)}Dr(t,r)&&(n.flags|=4)}null!==n.ref&&(n.flags|=128)}return null;case 6:if(e&&null!=n.stateNode)qi(0,n,e.memoizedProps,r);else{if("string"!=typeof r&&null===n.stateNode)throw Error(i(166));t=Pa(Oa.current),Pa(Sa.current),Wa(n)?(r=n.stateNode,t=n.memoizedProps,r[Zr]=n,r.nodeValue!==t&&(n.flags|=4)):((r=(9===t.nodeType?t:t.ownerDocument).createTextNode(r))[Zr]=n,n.stateNode=r)}return null;case 13:return io(La),r=n.memoizedState,0!=(64&n.flags)?(n.lanes=t,n):(r=null!==r,t=!1,null===e?void 0!==n.memoizedProps.fallback&&Wa(n):t=null!==e.memoizedState,r&&!t&&0!=(2&n.mode)&&(null===e&&!0!==n.memoizedProps.unstable_avoidThisFallback||0!=(1&La.current)?0===Bl&&(Bl=3):(0!==Bl&&3!==Bl||(Bl=4),null===_l||0==(134217727&zl)&&0==(134217727&jl)||du(_l,Pl))),(r||t)&&(n.flags|=4),null);case 4:return Ta(),null===e&&Or(n.stateNode.containerInfo),null;case 10:return ea(n),null;case 17:return ho(n.type)&&mo(),null;case 19:if(io(La),null===(r=n.memoizedState))return null;if(l=0!=(64&n.flags),null===(s=r.rendering))if(l)el(r,!1);else{if(0!==Bl||null!==e&&0!=(64&e.flags))for(e=n.child;null!==e;){if(null!==(s=za(e))){for(n.flags|=64,el(r,!1),null!==(l=s.updateQueue)&&(n.updateQueue=l,n.flags|=4),null===r.lastEffect&&(n.firstEffect=null),n.lastEffect=r.lastEffect,r=t,t=n.child;null!==t;)e=r,(l=t).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(s=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=s.childLanes,l.lanes=s.lanes,l.child=s.child,l.memoizedProps=s.memoizedProps,l.memoizedState=s.memoizedState,l.updateQueue=s.updateQueue,l.type=s.type,e=s.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),t=t.sibling;return lo(La,1&La.current|2),n.child}e=e.sibling}null!==r.tail&&Fo()>Fl&&(n.flags|=64,l=!0,el(r,!1),n.lanes=33554432)}else{if(!l)if(null!==(e=za(s))){if(n.flags|=64,l=!0,null!==(t=e.updateQueue)&&(n.updateQueue=t,n.flags|=4),el(r,!0),null===r.tail&&"hidden"===r.tailMode&&!s.alternate&&!Ua)return null!==(n=n.lastEffect=r.lastEffect)&&(n.nextEffect=null),null}else 2*Fo()-r.renderingStartTime>Fl&&1073741824!==t&&(n.flags|=64,l=!0,el(r,!1),n.lanes=33554432);r.isBackwards?(s.sibling=n.child,n.child=s):(null!==(t=r.last)?t.sibling=s:n.child=s,r.last=s)}return null!==r.tail?(t=r.tail,r.rendering=t,r.tail=t.sibling,r.lastEffect=n.lastEffect,r.renderingStartTime=Fo(),t.sibling=null,n=La.current,lo(La,l?1&n|2:1&n),t):null;case 23:case 24:return mu(),null!==e&&null!==e.memoizedState!=(null!==n.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(n.flags|=4),null}throw Error(i(156,n.tag))}function tl(e){switch(e.tag){case 1:ho(e.type)&&mo();var n=e.flags;return 4096&n?(e.flags=-4097&n|64,e):null;case 3:if(Ta(),io(co),io(so),qa(),0!=(64&(n=e.flags)))throw Error(i(285));return e.flags=-4097&n|64,e;case 5:return Ra(e),null;case 13:return io(La),4096&(n=e.flags)?(e.flags=-4097&n|64,e):null;case 19:return io(La),null;case 4:return Ta(),null;case 10:return ea(e),null;case 23:case 24:return mu(),null;default:return null}}function rl(e,n){try{var t="",r=n;do{t+=q(r),r=r.return}while(r);var o=t}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:n,stack:o}}function ol(e,n){try{console.error(n.value)}catch(e){setTimeout((function(){throw e}))}}$i=function(e,n){for(var t=n.child;null!==t;){if(5===t.tag||6===t.tag)e.appendChild(t.stateNode);else if(4!==t.tag&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===n)break;for(;null===t.sibling;){if(null===t.return||t.return===n)return;t=t.return}t.sibling.return=t.return,t=t.sibling}},Hi=function(e,n,t,r){var a=e.memoizedProps;if(a!==r){e=n.stateNode,Pa(Sa.current);var i,l=null;switch(t){case"input":a=G(e,a),r=G(e,r),l=[];break;case"option":a=ae(e,a),r=ae(e,r),l=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),l=[];break;case"textarea":a=le(e,a),r=le(e,r),l=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=jr)}for(f in ke(t,r),t=null,a)if(!r.hasOwnProperty(f)&&a.hasOwnProperty(f)&&null!=a[f])if("style"===f){var s=a[f];for(i in s)s.hasOwnProperty(i)&&(t||(t={}),t[i]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(u.hasOwnProperty(f)?l||(l=[]):(l=l||[]).push(f,null));for(f in r){var c=r[f];if(s=null!=a?a[f]:void 0,r.hasOwnProperty(f)&&c!==s&&(null!=c||null!=s))if("style"===f)if(s){for(i in s)!s.hasOwnProperty(i)||c&&c.hasOwnProperty(i)||(t||(t={}),t[i]="");for(i in c)c.hasOwnProperty(i)&&s[i]!==c[i]&&(t||(t={}),t[i]=c[i])}else t||(l||(l=[]),l.push(f,t)),t=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(l=l||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(u.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&Sr("scroll",e),l||s===c||(l=[])):"object"==typeof c&&null!==c&&c.$$typeof===z?c.toString():(l=l||[]).push(f,c))}t&&(l=l||[]).push("style",t);var f=l;(n.updateQueue=f)&&(n.flags|=4)}},qi=function(e,n,t,r){t!==r&&(n.flags|=4)};var al="function"==typeof WeakMap?WeakMap:Map;function il(e,n,t){(t=la(-1,t)).tag=3,t.payload={element:null};var r=n.value;return t.callback=function(){$l||($l=!0,Hl=r),ol(0,n)},t}function ll(e,n,t){(t=la(-1,t)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=n.value;t.payload=function(){return ol(0,n),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(t.callback=function(){"function"!=typeof r&&(null===ql?ql=new Set([this]):ql.add(this),ol(0,n));var e=n.stack;this.componentDidCatch(n.value,{componentStack:null!==e?e:""})}),t}var ul="function"==typeof WeakSet?WeakSet:Set;function sl(e){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Bu(e,n)}else n.current=null}function cl(e,n){switch(n.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&n.flags&&null!==e){var t=e.memoizedProps,r=e.memoizedState;n=(e=n.stateNode).getSnapshotBeforeUpdate(n.elementType===n.type?t:Zo(n.type,t),r),e.__reactInternalSnapshotBeforeUpdate=n}return;case 3:return void(256&n.flags&&Wr(n.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(i(163))}function fl(e,n,t){switch(t.tag){case 0:case 11:case 15:case 22:if(null!==(n=null!==(n=t.updateQueue)?n.lastEffect:null)){e=n=n.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==n)}if(null!==(n=null!==(n=t.updateQueue)?n.lastEffect:null)){e=n=n.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Pu(t,e),Ou(t,e)),e=r}while(e!==n)}return;case 1:return e=t.stateNode,4&t.flags&&(null===n?e.componentDidMount():(r=t.elementType===t.type?n.memoizedProps:Zo(t.type,n.memoizedProps),e.componentDidUpdate(r,n.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(n=t.updateQueue)&&fa(t,n,e));case 3:if(null!==(n=t.updateQueue)){if(e=null,null!==t.child)switch(t.child.tag){case 5:e=t.child.stateNode;break;case 1:e=t.child.stateNode}fa(t,n,e)}return;case 5:return e=t.stateNode,void(null===n&&4&t.flags&&Dr(t.type,t.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===t.memoizedState&&(t=t.alternate,null!==t&&(t=t.memoizedState,null!==t&&(t=t.dehydrated,null!==t&&wn(t)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(i(163))}function dl(e,n){for(var t=e;;){if(5===t.tag){var r=t.stateNode;if(n)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=t.stateNode;var o=t.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=Ae("display",o)}}else if(6===t.tag)t.stateNode.nodeValue=n?"":t.memoizedProps;else if((23!==t.tag&&24!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}}function pl(e,n){if(Eo&&"function"==typeof Eo.onCommitFiberUnmount)try{Eo.onCommitFiberUnmount(Ao,n)}catch(e){}switch(n.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=n.updateQueue)&&null!==(e=e.lastEffect)){var t=e=e.next;do{var r=t,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Pu(n,t);else{r=n;try{o()}catch(e){Bu(r,e)}}t=t.next}while(t!==e)}break;case 1:if(sl(n),"function"==typeof(e=n.stateNode).componentWillUnmount)try{e.props=n.memoizedProps,e.state=n.memoizedState,e.componentWillUnmount()}catch(e){Bu(n,e)}break;case 5:sl(n);break;case 4:bl(e,n)}}function hl(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function ml(e){return 5===e.tag||3===e.tag||4===e.tag}function yl(e){e:{for(var n=e.return;null!==n;){if(ml(n))break e;n=n.return}throw Error(i(160))}var t=n;switch(n=t.stateNode,t.tag){case 5:var r=!1;break;case 3:case 4:n=n.containerInfo,r=!0;break;default:throw Error(i(161))}16&t.flags&&(ve(n,""),t.flags&=-17);e:n:for(t=e;;){for(;null===t.sibling;){if(null===t.return||ml(t.return)){t=null;break e}t=t.return}for(t.sibling.return=t.return,t=t.sibling;5!==t.tag&&6!==t.tag&&18!==t.tag;){if(2&t.flags)continue n;if(null===t.child||4===t.tag)continue n;t.child.return=t,t=t.child}if(!(2&t.flags)){t=t.stateNode;break e}}r?vl(e,t,n):gl(e,t,n)}function vl(e,n,t){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,n?8===t.nodeType?t.parentNode.insertBefore(e,n):t.insertBefore(e,n):(8===t.nodeType?(n=t.parentNode).insertBefore(e,t):(n=t).appendChild(e),null!=(t=t._reactRootContainer)||null!==n.onclick||(n.onclick=jr));else if(4!==r&&null!==(e=e.child))for(vl(e,n,t),e=e.sibling;null!==e;)vl(e,n,t),e=e.sibling}function gl(e,n,t){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,n?t.insertBefore(e,n):t.appendChild(e);else if(4!==r&&null!==(e=e.child))for(gl(e,n,t),e=e.sibling;null!==e;)gl(e,n,t),e=e.sibling}function bl(e,n){for(var t,r,o=n,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(t=a.stateNode,a.tag){case 5:r=!1;break e;case 3:case 4:t=t.containerInfo,r=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var l=e,u=o,s=u;;)if(pl(l,s),null!==s.child&&4!==s.tag)s.child.return=s,s=s.child;else{if(s===u)break e;for(;null===s.sibling;){if(null===s.return||s.return===u)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}r?(l=t,u=o.stateNode,8===l.nodeType?l.parentNode.removeChild(u):l.removeChild(u)):t.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){t=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(pl(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===n)break;for(;null===o.sibling;){if(null===o.return||o.return===n)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function Al(e,n){switch(n.tag){case 0:case 11:case 14:case 15:case 22:var t=n.updateQueue;if(null!==(t=null!==t?t.lastEffect:null)){var r=t=t.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==t)}return;case 1:return;case 5:if(null!=(t=n.stateNode)){r=n.memoizedProps;var o=null!==e?e.memoizedProps:r;e=n.type;var a=n.updateQueue;if(n.updateQueue=null,null!==a){for(t[Qr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&ne(t,r),Ce(e,o),n=Ce(e,r),o=0;o<a.length;o+=2){var l=a[o],u=a[o+1];"style"===l?Ee(t,u):"dangerouslySetInnerHTML"===l?ye(t,u):"children"===l?ve(t,u):A(t,l,u,n)}switch(e){case"input":te(t,r);break;case"textarea":se(t,r);break;case"select":e=t._wrapperState.wasMultiple,t._wrapperState.wasMultiple=!!r.multiple,null!=(a=r.value)?ie(t,!!r.multiple,a,!1):e!==!!r.multiple&&(null!=r.defaultValue?ie(t,!!r.multiple,r.defaultValue,!0):ie(t,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===n.stateNode)throw Error(i(162));return void(n.stateNode.nodeValue=n.memoizedProps);case 3:return void((t=n.stateNode).hydrate&&(t.hydrate=!1,wn(t.containerInfo)));case 12:return;case 13:return null!==n.memoizedState&&(Dl=Fo(),dl(n.child,!0)),void El(n);case 19:return void El(n);case 17:return;case 23:case 24:return void dl(n,null!==n.memoizedState)}throw Error(i(163))}function El(e){var n=e.updateQueue;if(null!==n){e.updateQueue=null;var t=e.stateNode;null===t&&(t=e.stateNode=new ul),n.forEach((function(n){var r=Lu.bind(null,e,n);t.has(n)||(t.add(n),n.then(r,r))}))}}function wl(e,n){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(n=n.memoizedState)&&null===n.dehydrated}var kl=Math.ceil,Cl=E.ReactCurrentDispatcher,xl=E.ReactCurrentOwner,Sl=0,_l=null,Ol=null,Pl=0,Nl=0,Tl=ao(0),Bl=0,Rl=null,Ll=0,zl=0,jl=0,Ml=0,Ul=null,Dl=0,Fl=1/0;function Il(){Fl=Fo()+500}var Vl,Wl=null,$l=!1,Hl=null,ql=null,Yl=!1,Zl=null,Ql=90,Kl=[],Xl=[],Jl=null,Gl=0,eu=null,nu=-1,tu=0,ru=0,ou=null,au=!1;function iu(){return 0!=(48&Sl)?Fo():-1!==nu?nu:nu=Fo()}function lu(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Io()?1:2;if(0===tu&&(tu=Ll),0!==Yo.transition){0!==ru&&(ru=null!==Ul?Ul.pendingLanes:0),e=tu;var n=4186112&~ru;return 0==(n&=-n)&&0==(n=(e=4186112&~e)&-e)&&(n=8192),n}return e=Io(),e=Fn(0!=(4&Sl)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),tu)}function uu(e,n,t){if(50<Gl)throw Gl=0,eu=null,Error(i(185));if(null===(e=su(e,n)))return null;Wn(e,n,t),e===_l&&(jl|=n,4===Bl&&du(e,Pl));var r=Io();1===n?0!=(8&Sl)&&0==(48&Sl)?pu(e):(cu(e,t),0===Sl&&(Il(),Ho())):(0==(4&Sl)||98!==r&&99!==r||(null===Jl?Jl=new Set([e]):Jl.add(e)),cu(e,t)),Ul=e}function su(e,n){e.lanes|=n;var t=e.alternate;for(null!==t&&(t.lanes|=n),t=e,e=e.return;null!==e;)e.childLanes|=n,null!==(t=e.alternate)&&(t.childLanes|=n),t=e,e=e.return;return 3===t.tag?t.stateNode:null}function cu(e,n){for(var t=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,l=e.pendingLanes;0<l;){var u=31-$n(l),s=1<<u,c=a[u];if(-1===c){if(0==(s&r)||0!=(s&o)){c=n,Mn(s);var f=jn;a[u]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=n&&(e.expiredLanes|=s);l&=~s}if(r=Un(e,e===_l?Pl:0),n=jn,0===r)null!==t&&(t!==Lo&&Co(t),e.callbackNode=null,e.callbackPriority=0);else{if(null!==t){if(e.callbackPriority===n)return;t!==Lo&&Co(t)}15===n?(t=pu.bind(null,e),null===jo?(jo=[t],Mo=ko(Po,qo)):jo.push(t),t=Lo):t=14===n?$o(99,pu.bind(null,e)):$o(t=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(n),fu.bind(null,e)),e.callbackPriority=n,e.callbackNode=t}}function fu(e){if(nu=-1,ru=tu=0,0!=(48&Sl))throw Error(i(327));var n=e.callbackNode;if(_u()&&e.callbackNode!==n)return null;var t=Un(e,e===_l?Pl:0);if(0===t)return null;var r=t,o=Sl;Sl|=16;var a=gu();for(_l===e&&Pl===r||(Il(),yu(e,r));;)try{Eu();break}catch(n){vu(e,n)}if(Go(),Cl.current=a,Sl=o,null!==Ol?r=0:(_l=null,Pl=0,r=Bl),0!=(Ll&jl))yu(e,0);else if(0!==r){if(2===r&&(Sl|=64,e.hydrate&&(e.hydrate=!1,Wr(e.containerInfo)),0!==(t=Dn(e))&&(r=bu(e,t))),1===r)throw n=Rl,yu(e,0),du(e,t),cu(e,Fo()),n;switch(e.finishedWork=e.current.alternate,e.finishedLanes=t,r){case 0:case 1:throw Error(i(345));case 2:Cu(e);break;case 3:if(du(e,t),(62914560&t)===t&&10<(r=Dl+500-Fo())){if(0!==Un(e,0))break;if(((o=e.suspendedLanes)&t)!==t){iu(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Ir(Cu.bind(null,e),r);break}Cu(e);break;case 4:if(du(e,t),(4186112&t)===t)break;for(r=e.eventTimes,o=-1;0<t;){var l=31-$n(t);a=1<<l,(l=r[l])>o&&(o=l),t&=~a}if(t=o,10<(t=(120>(t=Fo()-t)?120:480>t?480:1080>t?1080:1920>t?1920:3e3>t?3e3:4320>t?4320:1960*kl(t/1960))-t)){e.timeoutHandle=Ir(Cu.bind(null,e),t);break}Cu(e);break;case 5:Cu(e);break;default:throw Error(i(329))}}return cu(e,Fo()),e.callbackNode===n?fu.bind(null,e):null}function du(e,n){for(n&=~Ml,n&=~jl,e.suspendedLanes|=n,e.pingedLanes&=~n,e=e.expirationTimes;0<n;){var t=31-$n(n),r=1<<t;e[t]=-1,n&=~r}}function pu(e){if(0!=(48&Sl))throw Error(i(327));if(_u(),e===_l&&0!=(e.expiredLanes&Pl)){var n=Pl,t=bu(e,n);0!=(Ll&jl)&&(t=bu(e,n=Un(e,n)))}else t=bu(e,n=Un(e,0));if(0!==e.tag&&2===t&&(Sl|=64,e.hydrate&&(e.hydrate=!1,Wr(e.containerInfo)),0!==(n=Dn(e))&&(t=bu(e,n))),1===t)throw t=Rl,yu(e,0),du(e,n),cu(e,Fo()),t;return e.finishedWork=e.current.alternate,e.finishedLanes=n,Cu(e),cu(e,Fo()),null}function hu(e,n){lo(Tl,Nl),Nl|=n,Ll|=n}function mu(){Nl=Tl.current,io(Tl)}function yu(e,n){e.finishedWork=null,e.finishedLanes=0;var t=e.timeoutHandle;if(-1!==t&&(e.timeoutHandle=-1,Vr(t)),null!==Ol)for(t=Ol.return;null!==t;){var r=t;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&mo();break;case 3:Ta(),io(co),io(so),qa();break;case 5:Ra(r);break;case 4:Ta();break;case 13:case 19:io(La);break;case 10:ea(r);break;case 23:case 24:mu()}t=t.return}_l=e,Ol=Uu(e.current,null),Pl=Nl=Ll=n,Bl=0,Rl=null,Ml=jl=zl=0}function vu(e,n){for(;;){var t=Ol;try{if(Go(),Ya.current=Oi,Ga){for(var r=Ka.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}Ga=!1}if(Qa=0,Ja=Xa=Ka=null,ei=!1,xl.current=null,null===t||null===t.return){Bl=1,Rl=n,Ol=null;break}e:{var a=e,i=t.return,l=t,u=n;if(n=Pl,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var s=u;if(0==(2&l.mode)){var c=l.alternate;c?(l.updateQueue=c.updateQueue,l.memoizedState=c.memoizedState,l.lanes=c.lanes):(l.updateQueue=null,l.memoizedState=null)}var f=0!=(1&La.current),d=i;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=d.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!f)}}if(p){var y=d.updateQueue;if(null===y){var v=new Set;v.add(s),d.updateQueue=v}else y.add(s);if(0==(2&d.mode)){if(d.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var g=la(-1,1);g.tag=2,ua(l,g)}l.lanes|=1;break e}u=void 0,l=n;var b=a.pingCache;if(null===b?(b=a.pingCache=new al,u=new Set,b.set(s,u)):void 0===(u=b.get(s))&&(u=new Set,b.set(s,u)),!u.has(l)){u.add(l);var A=Ru.bind(null,a,s,l);s.then(A,A)}d.flags|=4096,d.lanes=n;break e}d=d.return}while(null!==d);u=Error((Y(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Bl&&(Bl=2),u=rl(u,l),d=i;do{switch(d.tag){case 3:a=u,d.flags|=4096,n&=-n,d.lanes|=n,sa(d,il(0,a,n));break e;case 1:a=u;var E=d.type,w=d.stateNode;if(0==(64&d.flags)&&("function"==typeof E.getDerivedStateFromError||null!==w&&"function"==typeof w.componentDidCatch&&(null===ql||!ql.has(w)))){d.flags|=4096,n&=-n,d.lanes|=n,sa(d,ll(d,a,n));break e}}d=d.return}while(null!==d)}ku(t)}catch(e){n=e,Ol===t&&null!==t&&(Ol=t=t.return);continue}break}}function gu(){var e=Cl.current;return Cl.current=Oi,null===e?Oi:e}function bu(e,n){var t=Sl;Sl|=16;var r=gu();for(_l===e&&Pl===n||yu(e,n);;)try{Au();break}catch(n){vu(e,n)}if(Go(),Sl=t,Cl.current=r,null!==Ol)throw Error(i(261));return _l=null,Pl=0,Bl}function Au(){for(;null!==Ol;)wu(Ol)}function Eu(){for(;null!==Ol&&!xo();)wu(Ol)}function wu(e){var n=Vl(e.alternate,e,Nl);e.memoizedProps=e.pendingProps,null===n?ku(e):Ol=n,xl.current=null}function ku(e){var n=e;do{var t=n.alternate;if(e=n.return,0==(2048&n.flags)){if(null!==(t=nl(t,n,Nl)))return void(Ol=t);if(24!==(t=n).tag&&23!==t.tag||null===t.memoizedState||0!=(1073741824&Nl)||0==(4&t.mode)){for(var r=0,o=t.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;t.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=n.firstEffect),null!==n.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=n.firstEffect),e.lastEffect=n.lastEffect),1<n.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=n:e.firstEffect=n,e.lastEffect=n))}else{if(null!==(t=tl(n)))return t.flags&=2047,void(Ol=t);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(n=n.sibling))return void(Ol=n);Ol=n=e}while(null!==n);0===Bl&&(Bl=5)}function Cu(e){var n=Io();return Wo(99,xu.bind(null,e,n)),null}function xu(e,n){do{_u()}while(null!==Zl);if(0!=(48&Sl))throw Error(i(327));var t=e.finishedWork;if(null===t)return null;if(e.finishedWork=null,e.finishedLanes=0,t===e.current)throw Error(i(177));e.callbackNode=null;var r=t.lanes|t.childLanes,o=r,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var l=e.eventTimes,u=e.expirationTimes;0<a;){var s=31-$n(a),c=1<<s;o[s]=0,l[s]=-1,u[s]=-1,a&=~c}if(null!==Jl&&0==(24&r)&&Jl.has(e)&&Jl.delete(e),e===_l&&(Ol=_l=null,Pl=0),1<t.flags?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,null!==r){if(o=Sl,Sl|=32,xl.current=null,Mr=Qn,pr(l=dr())){if("selectionStart"in l)u={start:l.selectionStart,end:l.selectionEnd};else e:if(u=(u=l.ownerDocument)&&u.defaultView||window,(c=u.getSelection&&u.getSelection())&&0!==c.rangeCount){u=c.anchorNode,a=c.anchorOffset,s=c.focusNode,c=c.focusOffset;try{u.nodeType,s.nodeType}catch(e){u=null;break e}var f=0,d=-1,p=-1,h=0,m=0,y=l,v=null;n:for(;;){for(var g;y!==u||0!==a&&3!==y.nodeType||(d=f+a),y!==s||0!==c&&3!==y.nodeType||(p=f+c),3===y.nodeType&&(f+=y.nodeValue.length),null!==(g=y.firstChild);)v=y,y=g;for(;;){if(y===l)break n;if(v===u&&++h===a&&(d=f),v===s&&++m===c&&(p=f),null!==(g=y.nextSibling))break;v=(y=v).parentNode}y=g}u=-1===d||-1===p?null:{start:d,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;Ur={focusedElem:l,selectionRange:u},Qn=!1,ou=null,au=!1,Wl=r;do{try{Su()}catch(e){if(null===Wl)throw Error(i(330));Bu(Wl,e),Wl=Wl.nextEffect}}while(null!==Wl);ou=null,Wl=r;do{try{for(l=e;null!==Wl;){var b=Wl.flags;if(16&b&&ve(Wl.stateNode,""),128&b){var A=Wl.alternate;if(null!==A){var E=A.ref;null!==E&&("function"==typeof E?E(null):E.current=null)}}switch(1038&b){case 2:yl(Wl),Wl.flags&=-3;break;case 6:yl(Wl),Wl.flags&=-3,Al(Wl.alternate,Wl);break;case 1024:Wl.flags&=-1025;break;case 1028:Wl.flags&=-1025,Al(Wl.alternate,Wl);break;case 4:Al(Wl.alternate,Wl);break;case 8:bl(l,u=Wl);var w=u.alternate;hl(u),null!==w&&hl(w)}Wl=Wl.nextEffect}}catch(e){if(null===Wl)throw Error(i(330));Bu(Wl,e),Wl=Wl.nextEffect}}while(null!==Wl);if(E=Ur,A=dr(),b=E.focusedElem,l=E.selectionRange,A!==b&&b&&b.ownerDocument&&fr(b.ownerDocument.documentElement,b)){null!==l&&pr(b)&&(A=l.start,void 0===(E=l.end)&&(E=A),"selectionStart"in b?(b.selectionStart=A,b.selectionEnd=Math.min(E,b.value.length)):(E=(A=b.ownerDocument||document)&&A.defaultView||window).getSelection&&(E=E.getSelection(),u=b.textContent.length,w=Math.min(l.start,u),l=void 0===l.end?w:Math.min(l.end,u),!E.extend&&w>l&&(u=l,l=w,w=u),u=cr(b,w),a=cr(b,l),u&&a&&(1!==E.rangeCount||E.anchorNode!==u.node||E.anchorOffset!==u.offset||E.focusNode!==a.node||E.focusOffset!==a.offset)&&((A=A.createRange()).setStart(u.node,u.offset),E.removeAllRanges(),w>l?(E.addRange(A),E.extend(a.node,a.offset)):(A.setEnd(a.node,a.offset),E.addRange(A))))),A=[];for(E=b;E=E.parentNode;)1===E.nodeType&&A.push({element:E,left:E.scrollLeft,top:E.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<A.length;b++)(E=A[b]).element.scrollLeft=E.left,E.element.scrollTop=E.top}Qn=!!Mr,Ur=Mr=null,e.current=t,Wl=r;do{try{for(b=e;null!==Wl;){var k=Wl.flags;if(36&k&&fl(b,Wl.alternate,Wl),128&k){A=void 0;var C=Wl.ref;if(null!==C){var x=Wl.stateNode;switch(Wl.tag){case 5:A=x;break;default:A=x}"function"==typeof C?C(A):C.current=A}}Wl=Wl.nextEffect}}catch(e){if(null===Wl)throw Error(i(330));Bu(Wl,e),Wl=Wl.nextEffect}}while(null!==Wl);Wl=null,zo(),Sl=o}else e.current=t;if(Yl)Yl=!1,Zl=e,Ql=n;else for(Wl=r;null!==Wl;)n=Wl.nextEffect,Wl.nextEffect=null,8&Wl.flags&&((k=Wl).sibling=null,k.stateNode=null),Wl=n;if(0===(r=e.pendingLanes)&&(ql=null),1===r?e===eu?Gl++:(Gl=0,eu=e):Gl=0,t=t.stateNode,Eo&&"function"==typeof Eo.onCommitFiberRoot)try{Eo.onCommitFiberRoot(Ao,t,void 0,64==(64&t.current.flags))}catch(e){}if(cu(e,Fo()),$l)throw $l=!1,e=Hl,Hl=null,e;return 0!=(8&Sl)||Ho(),null}function Su(){for(;null!==Wl;){var e=Wl.alternate;au||null===ou||(0!=(8&Wl.flags)?Ge(Wl,ou)&&(au=!0):13===Wl.tag&&wl(e,Wl)&&Ge(Wl,ou)&&(au=!0));var n=Wl.flags;0!=(256&n)&&cl(e,Wl),0==(512&n)||Yl||(Yl=!0,$o(97,(function(){return _u(),null}))),Wl=Wl.nextEffect}}function _u(){if(90!==Ql){var e=97<Ql?97:Ql;return Ql=90,Wo(e,Nu)}return!1}function Ou(e,n){Kl.push(n,e),Yl||(Yl=!0,$o(97,(function(){return _u(),null})))}function Pu(e,n){Xl.push(n,e),Yl||(Yl=!0,$o(97,(function(){return _u(),null})))}function Nu(){if(null===Zl)return!1;var e=Zl;if(Zl=null,0!=(48&Sl))throw Error(i(331));var n=Sl;Sl|=32;var t=Xl;Xl=[];for(var r=0;r<t.length;r+=2){var o=t[r],a=t[r+1],l=o.destroy;if(o.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===a)throw Error(i(330));Bu(a,e)}}for(t=Kl,Kl=[],r=0;r<t.length;r+=2){o=t[r],a=t[r+1];try{var u=o.create;o.destroy=u()}catch(e){if(null===a)throw Error(i(330));Bu(a,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return Sl=n,Ho(),!0}function Tu(e,n,t){ua(e,n=il(0,n=rl(t,n),1)),n=iu(),null!==(e=su(e,1))&&(Wn(e,1,n),cu(e,n))}function Bu(e,n){if(3===e.tag)Tu(e,e,n);else for(var t=e.return;null!==t;){if(3===t.tag){Tu(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===ql||!ql.has(r))){var o=ll(t,e=rl(n,e),1);if(ua(t,o),o=iu(),null!==(t=su(t,1)))Wn(t,1,o),cu(t,o);else if("function"==typeof r.componentDidCatch&&(null===ql||!ql.has(r)))try{r.componentDidCatch(n,e)}catch(e){}break}}t=t.return}}function Ru(e,n,t){var r=e.pingCache;null!==r&&r.delete(n),n=iu(),e.pingedLanes|=e.suspendedLanes&t,_l===e&&(Pl&t)===t&&(4===Bl||3===Bl&&(62914560&Pl)===Pl&&500>Fo()-Dl?yu(e,0):Ml|=t),cu(e,n)}function Lu(e,n){var t=e.stateNode;null!==t&&t.delete(n),0==(n=0)&&(0==(2&(n=e.mode))?n=1:0==(4&n)?n=99===Io()?1:2:(0===tu&&(tu=Ll),0===(n=In(62914560&~tu))&&(n=4194304))),t=iu(),null!==(e=su(e,n))&&(Wn(e,n,t),cu(e,t))}function zu(e,n,t,r){this.tag=e,this.key=t,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=n,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function ju(e,n,t,r){return new zu(e,n,t,r)}function Mu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Uu(e,n){var t=e.alternate;return null===t?((t=ju(e.tag,n,e.key,e.mode)).elementType=e.elementType,t.type=e.type,t.stateNode=e.stateNode,t.alternate=e,e.alternate=t):(t.pendingProps=n,t.type=e.type,t.flags=0,t.nextEffect=null,t.firstEffect=null,t.lastEffect=null),t.childLanes=e.childLanes,t.lanes=e.lanes,t.child=e.child,t.memoizedProps=e.memoizedProps,t.memoizedState=e.memoizedState,t.updateQueue=e.updateQueue,n=e.dependencies,t.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext},t.sibling=e.sibling,t.index=e.index,t.ref=e.ref,t}function Du(e,n,t,r,o,a){var l=2;if(r=e,"function"==typeof e)Mu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case C:return Fu(t.children,o,a,n);case j:l=8,o|=16;break;case x:l=8,o|=1;break;case S:return(e=ju(12,t,n,8|o)).elementType=S,e.type=S,e.lanes=a,e;case N:return(e=ju(13,t,n,o)).type=N,e.elementType=N,e.lanes=a,e;case T:return(e=ju(19,t,n,o)).elementType=T,e.lanes=a,e;case M:return Iu(t,o,a,n);case U:return(e=ju(24,t,n,o)).elementType=U,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case _:l=10;break e;case O:l=9;break e;case P:l=11;break e;case B:l=14;break e;case R:l=16,r=null;break e;case L:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(n=ju(l,t,n,o)).elementType=e,n.type=r,n.lanes=a,n}function Fu(e,n,t,r){return(e=ju(7,e,r,n)).lanes=t,e}function Iu(e,n,t,r){return(e=ju(23,e,r,n)).elementType=M,e.lanes=t,e}function Vu(e,n,t){return(e=ju(6,e,null,n)).lanes=t,e}function Wu(e,n,t){return(n=ju(4,null!==e.children?e.children:[],e.key,n)).lanes=t,n.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},n}function $u(e,n,t){this.tag=n,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=t,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Vn(0),this.expirationTimes=Vn(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Vn(0),this.mutableSourceEagerHydrationData=null}function Hu(e,n,t,r){var o=n.current,a=iu(),l=lu(o);e:if(t){n:{if(Qe(t=t._reactInternals)!==t||1!==t.tag)throw Error(i(170));var u=t;do{switch(u.tag){case 3:u=u.stateNode.context;break n;case 1:if(ho(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break n}}u=u.return}while(null!==u);throw Error(i(171))}if(1===t.tag){var s=t.type;if(ho(s)){t=vo(t,s,u);break e}}t=u}else t=uo;return null===n.context?n.context=t:n.pendingContext=t,(n=la(a,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(n.callback=r),ua(o,n),uu(o,l,a),l}function qu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Yu(e,n){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var t=e.retryLane;e.retryLane=0!==t&&t<n?t:n}}function Zu(e,n){Yu(e,n),(e=e.alternate)&&Yu(e,n)}function Qu(e,n,t){var r=null!=t&&null!=t.hydrationOptions&&t.hydrationOptions.mutableSources||null;if(t=new $u(e,n,null!=t&&!0===t.hydrate),n=ju(3,null,null,2===n?7:1===n?3:0),t.current=n,n.stateNode=t,aa(n),e[Kr]=t.current,Or(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(n=r[e])._getVersion;o=o(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o)}this._internalRoot=t}function Ku(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Xu(e,n,t,r,o){var a=t._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=qu(i);l.call(e)}}Hu(n,i,e,o)}else{if(a=t._reactRootContainer=function(e,n){if(n||(n=!(!(n=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==n.nodeType||!n.hasAttribute("data-reactroot"))),!n)for(var t;t=e.lastChild;)e.removeChild(t);return new Qu(e,0,n?{hydrate:!0}:void 0)}(t,r),i=a._internalRoot,"function"==typeof o){var u=o;o=function(){var e=qu(i);u.call(e)}}!function(e,n){var t=Sl;Sl&=-2,Sl|=8;try{e(n)}finally{0===(Sl=t)&&(Il(),Ho())}}((function(){Hu(n,i,e,o)}))}return qu(i)}Vl=function(e,n,t){var r=n.lanes;if(null!==e)if(e.memoizedProps!==n.pendingProps||co.current)Ri=!0;else{if(0==(t&r)){switch(Ri=!1,n.tag){case 3:Wi(n),$a();break;case 5:Ba(n);break;case 1:ho(n.type)&&go(n);break;case 4:Na(n,n.stateNode.containerInfo);break;case 10:r=n.memoizedProps.value;var o=n.type._context;lo(Qo,o._currentValue),o._currentValue=r;break;case 13:if(null!==n.memoizedState)return 0!=(t&n.child.childLanes)?Zi(e,n,t):(lo(La,1&La.current),null!==(n=Gi(e,n,t))?n.sibling:null);lo(La,1&La.current);break;case 19:if(r=0!=(t&n.childLanes),0!=(64&e.flags)){if(r)return Ji(e,n,t);n.flags|=64}if(null!==(o=n.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),lo(La,La.current),r)break;return null;case 23:case 24:return n.lanes=0,Ui(e,n,t)}return Gi(e,n,t)}Ri=0!=(16384&e.flags)}else Ri=!1;switch(n.lanes=0,n.tag){case 2:if(r=n.type,null!==e&&(e.alternate=null,n.alternate=null,n.flags|=2),e=n.pendingProps,o=po(n,so.current),ta(n,t),o=ri(null,n,r,e,o,t),n.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(n.tag=1,n.memoizedState=null,n.updateQueue=null,ho(r)){var a=!0;go(n)}else a=!1;n.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,aa(n);var l=r.getDerivedStateFromProps;"function"==typeof l&&pa(n,r,l,e),o.updater=ha,n.stateNode=o,o._reactInternals=n,ga(n,r,e,t),n=Vi(null,n,r,!0,a,t)}else n.tag=0,Li(null,n,o,t),n=n.child;return n;case 16:o=n.elementType;e:{switch(null!==e&&(e.alternate=null,n.alternate=null,n.flags|=2),e=n.pendingProps,o=(a=o._init)(o._payload),n.type=o,a=n.tag=function(e){if("function"==typeof e)return Mu(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===B)return 14}return 2}(o),e=Zo(o,e),a){case 0:n=Fi(null,n,o,e,t);break e;case 1:n=Ii(null,n,o,e,t);break e;case 11:n=zi(null,n,o,e,t);break e;case 14:n=ji(null,n,o,Zo(o.type,e),r,t);break e}throw Error(i(306,o,""))}return n;case 0:return r=n.type,o=n.pendingProps,Fi(e,n,r,o=n.elementType===r?o:Zo(r,o),t);case 1:return r=n.type,o=n.pendingProps,Ii(e,n,r,o=n.elementType===r?o:Zo(r,o),t);case 3:if(Wi(n),r=n.updateQueue,null===e||null===r)throw Error(i(282));if(r=n.pendingProps,o=null!==(o=n.memoizedState)?o.element:null,ia(e,n),ca(n,r,null,t),(r=n.memoizedState.element)===o)$a(),n=Gi(e,n,t);else{if((a=(o=n.stateNode).hydrate)&&(Ma=$r(n.stateNode.containerInfo.firstChild),ja=n,a=Ua=!0),a){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(a=e[o])._workInProgressVersionPrimary=e[o+1],Ha.push(a);for(t=Ca(n,null,r,t),n.child=t;t;)t.flags=-3&t.flags|1024,t=t.sibling}else Li(e,n,r,t),$a();n=n.child}return n;case 5:return Ba(n),null===e&&Ia(n),r=n.type,o=n.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,Fr(r,o)?l=null:null!==a&&Fr(r,a)&&(n.flags|=16),Di(e,n),Li(e,n,l,t),n.child;case 6:return null===e&&Ia(n),null;case 13:return Zi(e,n,t);case 4:return Na(n,n.stateNode.containerInfo),r=n.pendingProps,null===e?n.child=ka(n,null,r,t):Li(e,n,r,t),n.child;case 11:return r=n.type,o=n.pendingProps,zi(e,n,r,o=n.elementType===r?o:Zo(r,o),t);case 7:return Li(e,n,n.pendingProps,t),n.child;case 8:case 12:return Li(e,n,n.pendingProps.children,t),n.child;case 10:e:{r=n.type._context,o=n.pendingProps,l=n.memoizedProps,a=o.value;var u=n.type._context;if(lo(Qo,u._currentValue),u._currentValue=a,null!==l)if(u=l.value,0==(a=ir(u,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,a):1073741823))){if(l.children===o.children&&!co.current){n=Gi(e,n,t);break e}}else for(null!==(u=n.child)&&(u.return=n);null!==u;){var s=u.dependencies;if(null!==s){l=u.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&a)){1===u.tag&&((c=la(-1,t&-t)).tag=2,ua(u,c)),u.lanes|=t,null!==(c=u.alternate)&&(c.lanes|=t),na(u.return,t),s.lanes|=t;break}c=c.next}}else l=10===u.tag&&u.type===n.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===n){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}Li(e,n,o.children,t),n=n.child}return n;case 9:return o=n.type,r=(a=n.pendingProps).children,ta(n,t),r=r(o=ra(o,a.unstable_observedBits)),n.flags|=1,Li(e,n,r,t),n.child;case 14:return a=Zo(o=n.type,n.pendingProps),ji(e,n,o,a=Zo(o.type,a),r,t);case 15:return Mi(e,n,n.type,n.pendingProps,r,t);case 17:return r=n.type,o=n.pendingProps,o=n.elementType===r?o:Zo(r,o),null!==e&&(e.alternate=null,n.alternate=null,n.flags|=2),n.tag=1,ho(r)?(e=!0,go(n)):e=!1,ta(n,t),ya(n,r,o),ga(n,r,o,t),Vi(null,n,r,!0,e,t);case 19:return Ji(e,n,t);case 23:case 24:return Ui(e,n,t)}throw Error(i(156,n.tag))},Qu.prototype.render=function(e){Hu(e,this._internalRoot,null,null)},Qu.prototype.unmount=function(){var e=this._internalRoot,n=e.containerInfo;Hu(null,e,null,(function(){n[Kr]=null}))},en=function(e){13===e.tag&&(uu(e,4,iu()),Zu(e,4))},nn=function(e){13===e.tag&&(uu(e,67108864,iu()),Zu(e,67108864))},tn=function(e){if(13===e.tag){var n=iu(),t=lu(e);uu(e,t,n),Zu(e,t)}},rn=function(e,n){return n()},Se=function(e,n,t){switch(n){case"input":if(te(e,t),n=t.name,"radio"===t.type&&null!=n){for(t=e;t.parentNode;)t=t.parentNode;for(t=t.querySelectorAll("input[name="+JSON.stringify(""+n)+'][type="radio"]'),n=0;n<t.length;n++){var r=t[n];if(r!==e&&r.form===e.form){var o=no(r);if(!o)throw Error(i(90));X(r),te(r,o)}}}break;case"textarea":se(e,t);break;case"select":null!=(n=t.value)&&ie(e,!!t.multiple,n,!1)}},Be=function(e,n){var t=Sl;Sl|=1;try{return e(n)}finally{0===(Sl=t)&&(Il(),Ho())}},Re=function(e,n,t,r,o){var a=Sl;Sl|=4;try{return Wo(98,e.bind(null,n,t,r,o))}finally{0===(Sl=a)&&(Il(),Ho())}},Le=function(){0==(49&Sl)&&(function(){if(null!==Jl){var e=Jl;Jl=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,cu(e,Fo())}))}Ho()}(),_u())},ze=function(e,n){var t=Sl;Sl|=2;try{return e(n)}finally{0===(Sl=t)&&(Il(),Ho())}};var Ju={findFiberByHostInstance:Jr,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},Gu={bundleType:Ju.bundleType,version:Ju.version,rendererPackageName:Ju.rendererPackageName,rendererConfig:Ju.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:E.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Je(e))?null:e.stateNode},findFiberByHostInstance:Ju.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var es=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!es.isDisabled&&es.supportsFiber)try{Ao=es.inject(Gu),Eo=es}catch(me){}}n.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var n=e._reactInternals;if(void 0===n){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return null===(e=Je(n))?null:e.stateNode},n.render=function(e,n,t){if(!Ku(n))throw Error(i(200));return Xu(null,e,n,!1,t)}},935:(e,n,t)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=t(448)},921:(e,n)=>{"use strict";var t="function"==typeof Symbol&&Symbol.for,r=t?Symbol.for("react.element"):60103,o=t?Symbol.for("react.portal"):60106,a=t?Symbol.for("react.fragment"):60107,i=t?Symbol.for("react.strict_mode"):60108,l=t?Symbol.for("react.profiler"):60114,u=t?Symbol.for("react.provider"):60109,s=t?Symbol.for("react.context"):60110,c=t?Symbol.for("react.async_mode"):60111,f=t?Symbol.for("react.concurrent_mode"):60111,d=t?Symbol.for("react.forward_ref"):60112,p=t?Symbol.for("react.suspense"):60113,h=t?Symbol.for("react.suspense_list"):60120,m=t?Symbol.for("react.memo"):60115,y=t?Symbol.for("react.lazy"):60116,v=t?Symbol.for("react.block"):60121,g=t?Symbol.for("react.fundamental"):60117,b=t?Symbol.for("react.responder"):60118,A=t?Symbol.for("react.scope"):60119;function E(e){if("object"==typeof e&&null!==e){var n=e.$$typeof;switch(n){case r:switch(e=e.type){case c:case f:case a:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case s:case d:case y:case m:case u:return e;default:return n}}case o:return n}}}function w(e){return E(e)===f}n.AsyncMode=c,n.ConcurrentMode=f,n.ContextConsumer=s,n.ContextProvider=u,n.Element=r,n.ForwardRef=d,n.Fragment=a,n.Lazy=y,n.Memo=m,n.Portal=o,n.Profiler=l,n.StrictMode=i,n.Suspense=p,n.isAsyncMode=function(e){return w(e)||E(e)===c},n.isConcurrentMode=w,n.isContextConsumer=function(e){return E(e)===s},n.isContextProvider=function(e){return E(e)===u},n.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},n.isForwardRef=function(e){return E(e)===d},n.isFragment=function(e){return E(e)===a},n.isLazy=function(e){return E(e)===y},n.isMemo=function(e){return E(e)===m},n.isPortal=function(e){return E(e)===o},n.isProfiler=function(e){return E(e)===l},n.isStrictMode=function(e){return E(e)===i},n.isSuspense=function(e){return E(e)===p},n.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===f||e===l||e===i||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===m||e.$$typeof===u||e.$$typeof===s||e.$$typeof===d||e.$$typeof===g||e.$$typeof===b||e.$$typeof===A||e.$$typeof===v)},n.typeOf=E},864:(e,n,t)=>{"use strict";e.exports=t(921)},408:(e,n,t)=>{"use strict";var r=t(418),o=60103,a=60106;n.Fragment=60107,n.StrictMode=60108,n.Profiler=60114;var i=60109,l=60110,u=60112;n.Suspense=60113;var s=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),a=f("react.portal"),n.Fragment=f("react.fragment"),n.StrictMode=f("react.strict_mode"),n.Profiler=f("react.profiler"),i=f("react.provider"),l=f("react.context"),u=f("react.forward_ref"),n.Suspense=f("react.suspense"),s=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var n="https://reactjs.org/docs/error-decoder.html?invariant="+e,t=1;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t]);return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function y(e,n,t){this.props=e,this.context=n,this.refs=m,this.updater=t||h}function v(){}function g(e,n,t){this.props=e,this.context=n,this.refs=m,this.updater=t||h}y.prototype.isReactComponent={},y.prototype.setState=function(e,n){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,n,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=y.prototype;var b=g.prototype=new v;b.constructor=g,r(b,y.prototype),b.isPureReactComponent=!0;var A={current:null},E=Object.prototype.hasOwnProperty,w={key:!0,ref:!0,__self:!0,__source:!0};function k(e,n,t){var r,a={},i=null,l=null;if(null!=n)for(r in void 0!==n.ref&&(l=n.ref),void 0!==n.key&&(i=""+n.key),n)E.call(n,r)&&!w.hasOwnProperty(r)&&(a[r]=n[r]);var u=arguments.length-2;if(1===u)a.children=t;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];a.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===a[r]&&(a[r]=u[r]);return{$$typeof:o,type:e,key:i,ref:l,props:a,_owner:A.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var x=/\/+/g;function S(e,n){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var n={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return n[e]}))}(""+e.key):n.toString(36)}function _(e,n,t,r,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case o:case a:u=!0}}if(u)return i=i(u=e),e=""===r?"."+S(u,0):r,Array.isArray(i)?(t="",null!=e&&(t=e.replace(x,"$&/")+"/"),_(i,n,t,"",(function(e){return e}))):null!=i&&(C(i)&&(i=function(e,n){return{$$typeof:o,type:e.type,key:n,ref:e.ref,props:e.props,_owner:e._owner}}(i,t+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(x,"$&/")+"/")+e)),n.push(i)),1;if(u=0,r=""===r?".":r+":",Array.isArray(e))for(var s=0;s<e.length;s++){var c=r+S(l=e[s],s);u+=_(l,n,t,c,i)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),s=0;!(l=e.next()).done;)u+=_(l=l.value,n,t,c=r+S(l,s++),i);else if("object"===l)throw n=""+e,Error(p(31,"[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n));return u}function O(e,n,t){if(null==e)return e;var r=[],o=0;return _(e,r,"","",(function(e){return n.call(t,e,o++)})),r}function P(e){if(-1===e._status){var n=e._result;n=n(),e._status=0,e._result=n,n.then((function(n){0===e._status&&(n=n.default,e._status=1,e._result=n)}),(function(n){0===e._status&&(e._status=2,e._result=n)}))}if(1===e._status)return e._result;throw e._result}var N={current:null};function T(){var e=N.current;if(null===e)throw Error(p(321));return e}var B={ReactCurrentDispatcher:N,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:A,IsSomeRendererActing:{current:!1},assign:r};n.Children={map:O,forEach:function(e,n,t){O(e,(function(){n.apply(this,arguments)}),t)},count:function(e){var n=0;return O(e,(function(){n++})),n},toArray:function(e){return O(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error(p(143));return e}},n.Component=y,n.PureComponent=g,n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=B,n.cloneElement=function(e,n,t){if(null==e)throw Error(p(267,e));var a=r({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=n){if(void 0!==n.ref&&(l=n.ref,u=A.current),void 0!==n.key&&(i=""+n.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in n)E.call(n,c)&&!w.hasOwnProperty(c)&&(a[c]=void 0===n[c]&&void 0!==s?s[c]:n[c])}var c=arguments.length-2;if(1===c)a.children=t;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];a.children=s}return{$$typeof:o,type:e.type,key:i,ref:l,props:a,_owner:u}},n.createContext=function(e,n){return void 0===n&&(n=null),(e={$$typeof:l,_calculateChangedBits:n,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},n.createElement=k,n.createFactory=function(e){var n=k.bind(null,e);return n.type=e,n},n.createRef=function(){return{current:null}},n.forwardRef=function(e){return{$$typeof:u,render:e}},n.isValidElement=C,n.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:P}},n.memo=function(e,n){return{$$typeof:s,type:e,compare:void 0===n?null:n}},n.useCallback=function(e,n){return T().useCallback(e,n)},n.useContext=function(e,n){return T().useContext(e,n)},n.useDebugValue=function(){},n.useEffect=function(e,n){return T().useEffect(e,n)},n.useImperativeHandle=function(e,n,t){return T().useImperativeHandle(e,n,t)},n.useLayoutEffect=function(e,n){return T().useLayoutEffect(e,n)},n.useMemo=function(e,n){return T().useMemo(e,n)},n.useReducer=function(e,n,t){return T().useReducer(e,n,t)},n.useRef=function(e){return T().useRef(e)},n.useState=function(e){return T().useState(e)},n.version="17.0.1"},294:(e,n,t)=>{"use strict";e.exports=t(408)},53:(e,n)=>{"use strict";var t,r,o,a;if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;n.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();n.unstable_now=function(){return l.now()-u}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,c=null,f=function(){if(null!==s)try{var e=n.unstable_now();s(!0,e),s=null}catch(e){throw setTimeout(f,0),e}};t=function(e){null!==s?setTimeout(t,0,e):(s=e,setTimeout(f,0))},r=function(e,n){c=setTimeout(e,n)},o=function(){clearTimeout(c)},n.unstable_shouldYield=function(){return!1},a=n.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,y=null,v=-1,g=5,b=0;n.unstable_shouldYield=function(){return n.unstable_now()>=b},a=function(){},n.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):g=0<e?Math.floor(1e3/e):5};var A=new MessageChannel,E=A.port2;A.port1.onmessage=function(){if(null!==y){var e=n.unstable_now();b=e+g;try{y(!0,e)?E.postMessage(null):(m=!1,y=null)}catch(e){throw E.postMessage(null),e}}else m=!1},t=function(e){y=e,m||(m=!0,E.postMessage(null))},r=function(e,t){v=d((function(){e(n.unstable_now())}),t)},o=function(){p(v),v=-1}}function w(e,n){var t=e.length;e.push(n);e:for(;;){var r=t-1>>>1,o=e[r];if(!(void 0!==o&&0<x(o,n)))break e;e[r]=n,e[t]=o,t=r}}function k(e){return void 0===(e=e[0])?null:e}function C(e){var n=e[0];if(void 0!==n){var t=e.pop();if(t!==n){e[0]=t;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],l=a+1,u=e[l];if(void 0!==i&&0>x(i,t))void 0!==u&&0>x(u,i)?(e[r]=u,e[l]=t,r=l):(e[r]=i,e[a]=t,r=a);else{if(!(void 0!==u&&0>x(u,t)))break e;e[r]=u,e[l]=t,r=l}}}return n}return null}function x(e,n){var t=e.sortIndex-n.sortIndex;return 0!==t?t:e.id-n.id}var S=[],_=[],O=1,P=null,N=3,T=!1,B=!1,R=!1;function L(e){for(var n=k(_);null!==n;){if(null===n.callback)C(_);else{if(!(n.startTime<=e))break;C(_),n.sortIndex=n.expirationTime,w(S,n)}n=k(_)}}function z(e){if(R=!1,L(e),!B)if(null!==k(S))B=!0,t(j);else{var n=k(_);null!==n&&r(z,n.startTime-e)}}function j(e,t){B=!1,R&&(R=!1,o()),T=!0;var a=N;try{for(L(t),P=k(S);null!==P&&(!(P.expirationTime>t)||e&&!n.unstable_shouldYield());){var i=P.callback;if("function"==typeof i){P.callback=null,N=P.priorityLevel;var l=i(P.expirationTime<=t);t=n.unstable_now(),"function"==typeof l?P.callback=l:P===k(S)&&C(S),L(t)}else C(S);P=k(S)}if(null!==P)var u=!0;else{var s=k(_);null!==s&&r(z,s.startTime-t),u=!1}return u}finally{P=null,N=a,T=!1}}var M=a;n.unstable_IdlePriority=5,n.unstable_ImmediatePriority=1,n.unstable_LowPriority=4,n.unstable_NormalPriority=3,n.unstable_Profiling=null,n.unstable_UserBlockingPriority=2,n.unstable_cancelCallback=function(e){e.callback=null},n.unstable_continueExecution=function(){B||T||(B=!0,t(j))},n.unstable_getCurrentPriorityLevel=function(){return N},n.unstable_getFirstCallbackNode=function(){return k(S)},n.unstable_next=function(e){switch(N){case 1:case 2:case 3:var n=3;break;default:n=N}var t=N;N=n;try{return e()}finally{N=t}},n.unstable_pauseExecution=function(){},n.unstable_requestPaint=M,n.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var t=N;N=e;try{return n()}finally{N=t}},n.unstable_scheduleCallback=function(e,a,i){var l=n.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?l+i:l,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:O++,callback:a,priorityLevel:e,startTime:i,expirationTime:u=i+u,sortIndex:-1},i>l?(e.sortIndex=i,w(_,e),null===k(S)&&e===k(_)&&(R?o():R=!0,r(z,i-l))):(e.sortIndex=u,w(S,e),B||T||(B=!0,t(j))),e},n.unstable_wrapCallback=function(e){var n=N;return function(){var t=N;N=n;try{return e.apply(this,arguments)}finally{N=t}}}},840:(e,n,t)=>{"use strict";e.exports=t(53)},379:(e,n,t)=>{"use strict";var r,o=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),a=[];function i(e){for(var n=-1,t=0;t<a.length;t++)if(a[t].identifier===e){n=t;break}return n}function l(e,n){for(var t={},r=[],o=0;o<e.length;o++){var l=e[o],u=n.base?l[0]+n.base:l[0],s=t[u]||0,c="".concat(u," ").concat(s);t[u]=s+1;var f=i(c),d={css:l[1],media:l[2],sourceMap:l[3]};-1!==f?(a[f].references++,a[f].updater(d)):a.push({identifier:c,updater:m(d,n),references:1}),r.push(c)}return r}function u(e){var n=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var a=t.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(e){n.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(n);else{var i=o(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}return n}var s,c=(s=[],function(e,n){return s[e]=n,s.filter(Boolean).join("\n")});function f(e,n,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=c(n,o);else{var a=document.createTextNode(o),i=e.childNodes;i[n]&&e.removeChild(i[n]),i.length?e.insertBefore(a,i[n]):e.appendChild(a)}}function d(e,n,t){var r=t.css,o=t.media,a=t.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,h=0;function m(e,n){var t,r,o;if(n.singleton){var a=h++;t=p||(p=u(n)),r=f.bind(null,t,a,!1),o=f.bind(null,t,a,!0)}else t=u(n),r=d.bind(null,t,n),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else o()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=l(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<t.length;r++){var o=i(t[r]);a[o].references--}for(var u=l(e,n),s=0;s<t.length;s++){var c=i(t[s]);0===a[c].references&&(a[c].updater(),a.splice(c,1))}t=u}}}}},n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{"use strict";var e=t(294),n=t(935),r=t(379),o=t.n(r),a=t(466);function i(e,n){e.prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n}o()(a.Z,{insert:"head",singleton:!1}),a.Z.locals;var l=t(697),u=t.n(l);function s(){return(s=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function c(e){return"/"===e.charAt(0)}function f(e,n){for(var t=n,r=t+1,o=e.length;r<o;t+=1,r+=1)e[t]=e[r];e.pop()}const d=function(e,n){if(!e)throw new Error("Invariant failed")};function p(e){return"/"===e.charAt(0)?e:"/"+e}function h(e,n){return function(e,n){return 0===e.toLowerCase().indexOf(n.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(n.length))}(e,n)?e.substr(n.length):e}function m(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function y(e){var n=e.pathname,t=e.search,r=e.hash,o=n||"/";return t&&"?"!==t&&(o+="?"===t.charAt(0)?t:"?"+t),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function v(e,n,t,r){var o;"string"==typeof e?(o=function(e){var n=e||"/",t="",r="",o=n.indexOf("#");-1!==o&&(r=n.substr(o),n=n.substr(0,o));var a=n.indexOf("?");return-1!==a&&(t=n.substr(a),n=n.substr(0,a)),{pathname:n,search:"?"===t?"":t,hash:"#"===r?"":r}}(e)).state=n:(void 0===(o=s({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==n&&void 0===o.state&&(o.state=n));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return t&&(o.key=t),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=function(e,n){void 0===n&&(n="");var t,r=e&&e.split("/")||[],o=n&&n.split("/")||[],a=e&&c(e),i=n&&c(n),l=a||i;if(e&&c(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var u=o[o.length-1];t="."===u||".."===u||""===u}else t=!1;for(var s=0,d=o.length;d>=0;d--){var p=o[d];"."===p?f(o,d):".."===p?(f(o,d),s++):s&&(f(o,d),s--)}if(!l)for(;s--;s)o.unshift("..");!l||""===o[0]||o[0]&&c(o[0])||o.unshift("");var h=o.join("/");return t&&"/"!==h.substr(-1)&&(h+="/"),h}(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function g(){var e=null,n=[];return{setPrompt:function(n){return e=n,function(){e===n&&(e=null)}},confirmTransitionTo:function(n,t,r,o){if(null!=e){var a="function"==typeof e?e(n,t):e;"string"==typeof a?"function"==typeof r?r(a,o):o(!0):o(!1!==a)}else o(!0)},appendListener:function(e){var t=!0;function r(){t&&e.apply(void 0,arguments)}return n.push(r),function(){t=!1,n=n.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];n.forEach((function(e){return e.apply(void 0,t)}))}}}var b=!("undefined"==typeof window||!window.document||!window.document.createElement);function A(e,n){n(window.confirm(e))}var E="popstate",w="hashchange";function k(){try{return window.history.state||{}}catch(e){return{}}}function C(e){void 0===e&&(e={}),b||d(!1);var n,t=window.history,r=(-1===(n=window.navigator.userAgent).indexOf("Android 2.")&&-1===n.indexOf("Android 4.0")||-1===n.indexOf("Mobile Safari")||-1!==n.indexOf("Chrome")||-1!==n.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),a=e,i=a.forceRefresh,l=void 0!==i&&i,u=a.getUserConfirmation,c=void 0===u?A:u,f=a.keyLength,C=void 0===f?6:f,x=e.basename?m(p(e.basename)):"";function S(e){var n=e||{},t=n.key,r=n.state,o=window.location,a=o.pathname+o.search+o.hash;return x&&(a=h(a,x)),v(a,r,t)}function _(){return Math.random().toString(36).substr(2,C)}var O=g();function P(e){s(I,e),I.length=t.length,O.notifyListeners(I.location,I.action)}function N(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||R(S(e.state))}function T(){R(S(k()))}var B=!1;function R(e){B?(B=!1,P()):O.confirmTransitionTo(e,"POP",c,(function(n){n?P({action:"POP",location:e}):function(e){var n=I.location,t=z.indexOf(n.key);-1===t&&(t=0);var r=z.indexOf(e.key);-1===r&&(r=0);var o=t-r;o&&(B=!0,M(o))}(e)}))}var L=S(k()),z=[L.key];function j(e){return x+y(e)}function M(e){t.go(e)}var U=0;function D(e){1===(U+=e)&&1===e?(window.addEventListener(E,N),o&&window.addEventListener(w,T)):0===U&&(window.removeEventListener(E,N),o&&window.removeEventListener(w,T))}var F=!1,I={length:t.length,action:"POP",location:L,createHref:j,push:function(e,n){var o="PUSH",a=v(e,n,_(),I.location);O.confirmTransitionTo(a,o,c,(function(e){if(e){var n=j(a),i=a.key,u=a.state;if(r)if(t.pushState({key:i,state:u},null,n),l)window.location.href=n;else{var s=z.indexOf(I.location.key),c=z.slice(0,s+1);c.push(a.key),z=c,P({action:o,location:a})}else window.location.href=n}}))},replace:function(e,n){var o="REPLACE",a=v(e,n,_(),I.location);O.confirmTransitionTo(a,o,c,(function(e){if(e){var n=j(a),i=a.key,u=a.state;if(r)if(t.replaceState({key:i,state:u},null,n),l)window.location.replace(n);else{var s=z.indexOf(I.location.key);-1!==s&&(z[s]=a.key),P({action:o,location:a})}else window.location.replace(n)}}))},go:M,goBack:function(){M(-1)},goForward:function(){M(1)},block:function(e){void 0===e&&(e=!1);var n=O.setPrompt(e);return F||(D(1),F=!0),function(){return F&&(F=!1,D(-1)),n()}},listen:function(e){var n=O.appendListener(e);return D(1),function(){D(-1),n()}}};return I}var x=1073741823,S="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==t.g?t.g:{};function _(e){var n=[];return{on:function(e){n.push(e)},off:function(e){n=n.filter((function(n){return n!==e}))},get:function(){return e},set:function(t,r){e=t,n.forEach((function(n){return n(e,r)}))}}}const O=e.createContext||function(n,t){var r,o,a,l="__create-react-context-"+((S[a="__global_unique_id__"]=(S[a]||0)+1)+"__"),s=function(e){function n(){var n;return(n=e.apply(this,arguments)||this).emitter=_(n.props.value),n}i(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[l]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((a=r)===(i=o)?0!==a||1/a==1/i:a!=a&&i!=i)?n=0:(n="function"==typeof t?t(r,o):x,0!=(n|=0)&&this.emitter.set(e.value,n))}var a,i},r.render=function(){return this.props.children},n}(e.Component);s.childContextTypes=((r={})[l]=u().object.isRequired,r);var c=function(e){function t(){var n;return(n=e.apply(this,arguments)||this).state={value:n.getValue()},n.onUpdate=function(e,t){0!=((0|n.observedBits)&t)&&n.setState({value:n.getValue()})},n}i(t,e);var r=t.prototype;return r.componentWillReceiveProps=function(e){var n=e.observedBits;this.observedBits=null==n?x:n},r.componentDidMount=function(){this.context[l]&&this.context[l].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?x:e},r.componentWillUnmount=function(){this.context[l]&&this.context[l].off(this.onUpdate)},r.getValue=function(){return this.context[l]?this.context[l].get():n},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},t}(e.Component);return c.contextTypes=((o={})[l]=u().object,o),{Provider:s,Consumer:c}};var P=t(779),N=t.n(P);function T(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}t(864),t(679);var B=function(e){var n=O();return n.displayName="Router-History",n}(),R=function(e){var n=O();return n.displayName="Router",n}(),L=function(n){function t(e){var t;return(t=n.call(this,e)||this).state={location:e.history.location},t._isMounted=!1,t._pendingLocation=null,e.staticContext||(t.unlisten=e.history.listen((function(e){t._isMounted?t.setState({location:e}):t._pendingLocation=e}))),t}i(t,n),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var r=t.prototype;return r.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},r.componentWillUnmount=function(){this.unlisten&&this.unlisten()},r.render=function(){return e.createElement(R.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},e.createElement(B.Provider,{children:this.props.children||null,value:this.props.history}))},t}(e.Component);e.Component,e.Component;var z={},j=0;function M(e,n){void 0===n&&(n={}),("string"==typeof n||Array.isArray(n))&&(n={path:n});var t=n,r=t.path,o=t.exact,a=void 0!==o&&o,i=t.strict,l=void 0!==i&&i,u=t.sensitive,s=void 0!==u&&u;return[].concat(r).reduce((function(n,t){if(!t&&""!==t)return null;if(n)return n;var r=function(e,n){var t=""+n.end+n.strict+n.sensitive,r=z[t]||(z[t]={});if(r[e])return r[e];var o=[],a={regexp:N()(e,o,n),keys:o};return j<1e4&&(r[e]=a,j++),a}(t,{end:a,strict:l,sensitive:s}),o=r.regexp,i=r.keys,u=o.exec(e);if(!u)return null;var c=u[0],f=u.slice(1),d=e===c;return a&&!d?null:{path:t,url:"/"===t&&""===c?"/":c,isExact:d,params:i.reduce((function(e,n,t){return e[n.name]=f[t],e}),{})}}),null)}var U=function(n){function t(){return n.apply(this,arguments)||this}return i(t,n),t.prototype.render=function(){var n=this;return e.createElement(R.Consumer,null,(function(t){t||d(!1);var r=n.props.location||t.location,o=s({},t,{location:r,match:n.props.computedMatch?n.props.computedMatch:n.props.path?M(r.pathname,n.props):t.match}),a=n.props,i=a.children,l=a.component,u=a.render;return Array.isArray(i)&&0===i.length&&(i=null),e.createElement(R.Provider,{value:o},o.match?i?"function"==typeof i?i(o):i:l?e.createElement(l,o):u?u(o):null:"function"==typeof i?i(o):null)}))},t}(e.Component);e.Component,e.Component,e.useContext;var D=function(n){function t(){for(var e,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return(e=n.call.apply(n,[this].concat(r))||this).history=C(e.props),e}return i(t,n),t.prototype.render=function(){return e.createElement(L,{history:this.history,children:this.props.children})},t}(e.Component);e.Component;var F=function(e,n){return"function"==typeof e?e(n):e},I=function(e,n){return"string"==typeof e?v(e,null,null,n):e},V=function(e){return e},W=e.forwardRef;void 0===W&&(W=V);var $=W((function(n,t){var r=n.innerRef,o=n.navigate,a=n.onClick,i=T(n,["innerRef","navigate","onClick"]),l=i.target,u=s({},i,{onClick:function(e){try{a&&a(e)}catch(n){throw e.preventDefault(),n}e.defaultPrevented||0!==e.button||l&&"_self"!==l||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),o())}});return u.ref=V!==W&&t||r,e.createElement("a",u)})),H=W((function(n,t){var r=n.component,o=void 0===r?$:r,a=n.replace,i=n.to,l=n.innerRef,u=T(n,["component","replace","to","innerRef"]);return e.createElement(R.Consumer,null,(function(n){n||d(!1);var r=n.history,c=I(F(i,n.location),n.location),f=c?r.createHref(c):"",p=s({},u,{href:f,navigate:function(){var e=F(i,n.location);(a?r.replace:r.push)(e)}});return V!==W?p.ref=t||l:p.innerRef=l,e.createElement(o,p)}))})),q=function(e){return e},Y=e.forwardRef;void 0===Y&&(Y=q);var Z=Y((function(n,t){var r=n["aria-current"],o=void 0===r?"page":r,a=n.activeClassName,i=void 0===a?"active":a,l=n.activeStyle,u=n.className,c=n.exact,f=n.isActive,p=n.location,h=n.sensitive,m=n.strict,y=n.style,v=n.to,g=n.innerRef,b=T(n,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return e.createElement(R.Consumer,null,(function(n){n||d(!1);var r=p||n.location,a=I(F(v,r),r),A=a.pathname,E=A&&A.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),w=E?M(r.pathname,{path:E,exact:c,sensitive:h,strict:m}):null,k=!!(f?f(w,r):w),C=k?function(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];return n.filter((function(e){return e})).join(" ")}(u,i):u,x=k?s({},y,{},l):y,S=s({"aria-current":k&&o||null,className:C,style:x,to:a},b);return q!==Y?S.ref=t||g:S.innerRef=g,e.createElement(H,S)}))}));const Q=e.createContext(null);function K(n,t){var r=Object.create(null);return n&&e.Children.map(n,(function(e){return e})).forEach((function(n){r[n.key]=function(n){return t&&(0,e.isValidElement)(n)?t(n):n}(n)})),r}function X(e,n,t){return null!=t[n]?t[n]:e.props[n]}function J(n,t,r){var o=K(n.children),a=function(e,n){function t(t){return t in n?n[t]:e[t]}e=e||{},n=n||{};var r,o=Object.create(null),a=[];for(var i in e)i in n?a.length&&(o[i]=a,a=[]):a.push(i);var l={};for(var u in n){if(o[u])for(r=0;r<o[u].length;r++){var s=o[u][r];l[o[u][r]]=t(s)}l[u]=t(u)}for(r=0;r<a.length;r++)l[a[r]]=t(a[r]);return l}(t,o);return Object.keys(a).forEach((function(i){var l=a[i];if((0,e.isValidElement)(l)){var u=i in t,s=i in o,c=t[i],f=(0,e.isValidElement)(c)&&!c.props.in;!s||u&&!f?s||!u||f?s&&u&&(0,e.isValidElement)(c)&&(a[i]=(0,e.cloneElement)(l,{onExited:r.bind(null,l),in:c.props.in,exit:X(l,"exit",n),enter:X(l,"enter",n)})):a[i]=(0,e.cloneElement)(l,{in:!1}):a[i]=(0,e.cloneElement)(l,{onExited:r.bind(null,l),in:!0,exit:X(l,"exit",n),enter:X(l,"enter",n)})}})),a}var G=Object.values||function(e){return Object.keys(e).map((function(n){return e[n]}))},ee=function(n){function t(e,t){var r,o=(r=n.call(this,e,t)||this).handleExited.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(r));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}i(t,n);var r=t.prototype;return r.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},r.componentWillUnmount=function(){this.mounted=!1},t.getDerivedStateFromProps=function(n,t){var r,o,a=t.children,i=t.handleExited;return{children:t.firstRender?(r=n,o=i,K(r.children,(function(n){return(0,e.cloneElement)(n,{onExited:o.bind(null,n),in:!0,appear:X(n,"appear",r),enter:X(n,"enter",r),exit:X(n,"exit",r)})}))):J(n,a,i),firstRender:!1}},r.handleExited=function(e,n){var t=K(this.props.children);e.key in t||(e.props.onExited&&e.props.onExited(n),this.mounted&&this.setState((function(n){var t=s({},n.children);return delete t[e.key],{children:t}})))},r.render=function(){var n=this.props,t=n.component,r=n.childFactory,o=T(n,["component","childFactory"]),a=this.state.contextValue,i=G(this.state.children).map(r);return delete o.appear,delete o.enter,delete o.exit,null===t?e.createElement(Q.Provider,{value:a},i):e.createElement(Q.Provider,{value:a},e.createElement(t,o,i))},t}(e.Component);ee.propTypes={},ee.defaultProps={component:"div",childFactory:function(e){return e}};const ne=ee;function te(e,n){return e.replace(new RegExp("(^|\\s)"+n+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}var re="unmounted",oe="exited",ae="entering",ie="entered",le="exiting",ue=function(t){function r(e,n){var r;r=t.call(this,e,n)||this;var o,a=n&&!n.isMounting?e.enter:e.appear;return r.appearStatus=null,e.in?a?(o=oe,r.appearStatus=ae):o=ie:o=e.unmountOnExit||e.mountOnEnter?re:oe,r.state={status:o},r.nextCallback=null,r}i(r,t),r.getDerivedStateFromProps=function(e,n){return e.in&&n.status===re?{status:oe}:null};var o=r.prototype;return o.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},o.componentDidUpdate=function(e){var n=null;if(e!==this.props){var t=this.state.status;this.props.in?t!==ae&&t!==ie&&(n=ae):t!==ae&&t!==ie||(n=le)}this.updateStatus(!1,n)},o.componentWillUnmount=function(){this.cancelNextCallback()},o.getTimeouts=function(){var e,n,t,r=this.props.timeout;return e=n=t=r,null!=r&&"number"!=typeof r&&(e=r.exit,n=r.enter,t=void 0!==r.appear?r.appear:n),{exit:e,enter:n,appear:t}},o.updateStatus=function(e,n){void 0===e&&(e=!1),null!==n?(this.cancelNextCallback(),n===ae?this.performEnter(e):this.performExit()):this.props.unmountOnExit&&this.state.status===oe&&this.setState({status:re})},o.performEnter=function(e){var t=this,r=this.props.enter,o=this.context?this.context.isMounting:e,a=this.props.nodeRef?[o]:[n.findDOMNode(this),o],i=a[0],l=a[1],u=this.getTimeouts(),s=o?u.appear:u.enter;e||r?(this.props.onEnter(i,l),this.safeSetState({status:ae},(function(){t.props.onEntering(i,l),t.onTransitionEnd(s,(function(){t.safeSetState({status:ie},(function(){t.props.onEntered(i,l)}))}))}))):this.safeSetState({status:ie},(function(){t.props.onEntered(i)}))},o.performExit=function(){var e=this,t=this.props.exit,r=this.getTimeouts(),o=this.props.nodeRef?void 0:n.findDOMNode(this);t?(this.props.onExit(o),this.safeSetState({status:le},(function(){e.props.onExiting(o),e.onTransitionEnd(r.exit,(function(){e.safeSetState({status:oe},(function(){e.props.onExited(o)}))}))}))):this.safeSetState({status:oe},(function(){e.props.onExited(o)}))},o.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},o.safeSetState=function(e,n){n=this.setNextCallback(n),this.setState(e,n)},o.setNextCallback=function(e){var n=this,t=!0;return this.nextCallback=function(r){t&&(t=!1,n.nextCallback=null,e(r))},this.nextCallback.cancel=function(){t=!1},this.nextCallback},o.onTransitionEnd=function(e,t){this.setNextCallback(t);var r=this.props.nodeRef?this.props.nodeRef.current:n.findDOMNode(this),o=null==e&&!this.props.addEndListener;if(r&&!o){if(this.props.addEndListener){var a=this.props.nodeRef?[this.nextCallback]:[r,this.nextCallback],i=a[0],l=a[1];this.props.addEndListener(i,l)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},o.render=function(){var n=this.state.status;if(n===re)return null;var t=this.props,r=t.children,o=(t.in,t.mountOnEnter,t.unmountOnExit,t.appear,t.enter,t.exit,t.timeout,t.addEndListener,t.onEnter,t.onEntering,t.onEntered,t.onExit,t.onExiting,t.onExited,t.nodeRef,T(t,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return e.createElement(Q.Provider,{value:null},"function"==typeof r?r(n,o):e.cloneElement(e.Children.only(r),o))},r}(e.Component);function se(){}ue.contextType=Q,ue.propTypes={},ue.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:se,onEntering:se,onEntered:se,onExit:se,onExiting:se,onExited:se},ue.UNMOUNTED=re,ue.EXITED=oe,ue.ENTERING=ae,ue.ENTERED=ie,ue.EXITING=le;const ce=ue;var fe=function(e,n){return e&&n&&n.split(" ").forEach((function(n){return r=n,void((t=e).classList?t.classList.remove(r):"string"==typeof t.className?t.className=te(t.className,r):t.setAttribute("class",te(t.className&&t.className.baseVal||"",r)));var t,r}))},de=function(n){function t(){for(var e,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return(e=n.call.apply(n,[this].concat(r))||this).appliedClasses={appear:{},enter:{},exit:{}},e.onEnter=function(n,t){var r=e.resolveArguments(n,t),o=r[0],a=r[1];e.removeClasses(o,"exit"),e.addClass(o,a?"appear":"enter","base"),e.props.onEnter&&e.props.onEnter(n,t)},e.onEntering=function(n,t){var r=e.resolveArguments(n,t),o=r[0],a=r[1]?"appear":"enter";e.addClass(o,a,"active"),e.props.onEntering&&e.props.onEntering(n,t)},e.onEntered=function(n,t){var r=e.resolveArguments(n,t),o=r[0],a=r[1]?"appear":"enter";e.removeClasses(o,a),e.addClass(o,a,"done"),e.props.onEntered&&e.props.onEntered(n,t)},e.onExit=function(n){var t=e.resolveArguments(n)[0];e.removeClasses(t,"appear"),e.removeClasses(t,"enter"),e.addClass(t,"exit","base"),e.props.onExit&&e.props.onExit(n)},e.onExiting=function(n){var t=e.resolveArguments(n)[0];e.addClass(t,"exit","active"),e.props.onExiting&&e.props.onExiting(n)},e.onExited=function(n){var t=e.resolveArguments(n)[0];e.removeClasses(t,"exit"),e.addClass(t,"exit","done"),e.props.onExited&&e.props.onExited(n)},e.resolveArguments=function(n,t){return e.props.nodeRef?[e.props.nodeRef.current,n]:[n,t]},e.getClassNames=function(n){var t=e.props.classNames,r="string"==typeof t,o=r?(r&&t?t+"-":"")+n:t[n];return{baseClassName:o,activeClassName:r?o+"-active":t[n+"Active"],doneClassName:r?o+"-done":t[n+"Done"]}},e}i(t,n);var r=t.prototype;return r.addClass=function(e,n,t){var r=this.getClassNames(n)[t+"ClassName"],o=this.getClassNames("enter").doneClassName;"appear"===n&&"done"===t&&o&&(r+=" "+o),"active"===t&&e&&e.scrollTop,r&&(this.appliedClasses[n][t]=r,function(e,n){e&&n&&n.split(" ").forEach((function(n){return r=n,void((t=e).classList?t.classList.add(r):function(e,n){return e.classList?!!n&&e.classList.contains(n):-1!==(" "+(e.className.baseVal||e.className)+" ").indexOf(" "+n+" ")}(t,r)||("string"==typeof t.className?t.className=t.className+" "+r:t.setAttribute("class",(t.className&&t.className.baseVal||"")+" "+r)));var t,r}))}(e,r))},r.removeClasses=function(e,n){var t=this.appliedClasses[n],r=t.base,o=t.active,a=t.done;this.appliedClasses[n]={},r&&fe(e,r),o&&fe(e,o),a&&fe(e,a)},r.render=function(){var n=this.props,t=(n.classNames,T(n,["classNames"]));return e.createElement(ce,s({},t,{onEnter:this.onEnter,onEntered:this.onEntered,onEntering:this.onEntering,onExit:this.onExit,onExiting:this.onExiting,onExited:this.onExited}))},t}(e.Component);de.defaultProps={classNames:""},de.propTypes={};const pe=de;var he=t(995);o()(he.Z,{insert:"head",singleton:!1});const me=he.Z.locals||{};function ye(e){return(ye="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ve(){return(ve=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function ge(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function be(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ae(e,n){return(Ae=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}function Ee(e,n){return!n||"object"!==ye(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function we(e){return(we=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ke=function(n){return e.Children.toArray(n.children)[0]||null},Ce=function(n){!function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&Ae(e,n)}(l,n);var t,r,o,a,i=(o=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=we(o);if(a){var t=we(this).constructor;e=Reflect.construct(n,arguments,t)}else e=n.apply(this,arguments);return Ee(this,e)});function l(){return ge(this,l),i.apply(this,arguments)}return t=l,(r=[{key:"render",value:function(){var n=this,t=this.props.component;return e.createElement(U,{path:this.props.path,exact:this.props.exact,children:function(r){return e.createElement(ne,{className:me.container,component:ke},r.match&&e.createElement(pe,{classNames:"page",timeout:400},e.createElement(t,ve({},n.props,r))))}})}}])&&be(t.prototype,r),l}(e.Component),xe=t(668);o()(xe.Z,{insert:"head",singleton:!1}),xe.Z.locals;var Se=t(263);o()(Se.Z,{insert:"head",singleton:!1}),Se.Z.locals;var _e=function(e,n){return(_e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])})(e,n)};function Oe(e,n){function t(){this.constructor=e}_e(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}function Pe(e){return"function"==typeof e}var Ne=!1,Te={Promise:void 0,set useDeprecatedSynchronousErrorHandling(e){e&&(new Error).stack,Ne=e},get useDeprecatedSynchronousErrorHandling(){return Ne}};function Be(e){setTimeout((function(){throw e}),0)}var Re={closed:!0,next:function(e){},error:function(e){if(Te.useDeprecatedSynchronousErrorHandling)throw e;Be(e)},complete:function(){}},Le=function(){return Array.isArray||function(e){return e&&"number"==typeof e.length}}();function ze(e){return null!==e&&"object"==typeof e}var je=function(){function e(e){return Error.call(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(e,n){return n+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e,this}return e.prototype=Object.create(Error.prototype),e}(),Me=function(){function e(e){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,e&&(this._ctorUnsubscribe=!0,this._unsubscribe=e)}return e.prototype.unsubscribe=function(){var n;if(!this.closed){var t=this,r=t._parentOrParents,o=t._ctorUnsubscribe,a=t._unsubscribe,i=t._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,r instanceof e)r.remove(this);else if(null!==r)for(var l=0;l<r.length;++l)r[l].remove(this);if(Pe(a)){o&&(this._unsubscribe=void 0);try{a.call(this)}catch(e){n=e instanceof je?Ue(e.errors):[e]}}if(Le(i)){l=-1;for(var u=i.length;++l<u;){var s=i[l];if(ze(s))try{s.unsubscribe()}catch(e){n=n||[],e instanceof je?n=n.concat(Ue(e.errors)):n.push(e)}}}if(n)throw new je(n)}},e.prototype.add=function(n){var t=n;if(!n)return e.EMPTY;switch(typeof n){case"function":t=new e(n);case"object":if(t===this||t.closed||"function"!=typeof t.unsubscribe)return t;if(this.closed)return t.unsubscribe(),t;if(!(t instanceof e)){var r=t;(t=new e)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+n+" added to Subscription.")}var o=t._parentOrParents;if(null===o)t._parentOrParents=this;else if(o instanceof e){if(o===this)return t;t._parentOrParents=[o,this]}else{if(-1!==o.indexOf(this))return t;o.push(this)}var a=this._subscriptions;return null===a?this._subscriptions=[t]:a.push(t),t},e.prototype.remove=function(e){var n=this._subscriptions;if(n){var t=n.indexOf(e);-1!==t&&n.splice(t,1)}},e.EMPTY=function(e){return e.closed=!0,e}(new e),e}();function Ue(e){return e.reduce((function(e,n){return e.concat(n instanceof je?n.errors:n)}),[])}var De=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}(),Fe=function(e){function n(t,r,o){var a=e.call(this)||this;switch(a.syncErrorValue=null,a.syncErrorThrown=!1,a.syncErrorThrowable=!1,a.isStopped=!1,arguments.length){case 0:a.destination=Re;break;case 1:if(!t){a.destination=Re;break}if("object"==typeof t){t instanceof n?(a.syncErrorThrowable=t.syncErrorThrowable,a.destination=t,t.add(a)):(a.syncErrorThrowable=!0,a.destination=new Ie(a,t));break}default:a.syncErrorThrowable=!0,a.destination=new Ie(a,t,r,o)}return a}return Oe(n,e),n.prototype[De]=function(){return this},n.create=function(e,t,r){var o=new n(e,t,r);return o.syncErrorThrowable=!1,o},n.prototype.next=function(e){this.isStopped||this._next(e)},n.prototype.error=function(e){this.isStopped||(this.isStopped=!0,this._error(e))},n.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this))},n.prototype._next=function(e){this.destination.next(e)},n.prototype._error=function(e){this.destination.error(e),this.unsubscribe()},n.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},n.prototype._unsubscribeAndRecycle=function(){var e=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=e,this},n}(Me),Ie=function(e){function n(n,t,r,o){var a,i=e.call(this)||this;i._parentSubscriber=n;var l=i;return Pe(t)?a=t:t&&(a=t.next,r=t.error,o=t.complete,t!==Re&&(Pe((l=Object.create(t)).unsubscribe)&&i.add(l.unsubscribe.bind(l)),l.unsubscribe=i.unsubscribe.bind(i))),i._context=l,i._next=a,i._error=r,i._complete=o,i}return Oe(n,e),n.prototype.next=function(e){if(!this.isStopped&&this._next){var n=this._parentSubscriber;Te.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?this.__tryOrSetError(n,this._next,e)&&this.unsubscribe():this.__tryOrUnsub(this._next,e)}},n.prototype.error=function(e){if(!this.isStopped){var n=this._parentSubscriber,t=Te.useDeprecatedSynchronousErrorHandling;if(this._error)t&&n.syncErrorThrowable?(this.__tryOrSetError(n,this._error,e),this.unsubscribe()):(this.__tryOrUnsub(this._error,e),this.unsubscribe());else if(n.syncErrorThrowable)t?(n.syncErrorValue=e,n.syncErrorThrown=!0):Be(e),this.unsubscribe();else{if(this.unsubscribe(),t)throw e;Be(e)}}},n.prototype.complete=function(){var e=this;if(!this.isStopped){var n=this._parentSubscriber;if(this._complete){var t=function(){return e._complete.call(e._context)};Te.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?(this.__tryOrSetError(n,t),this.unsubscribe()):(this.__tryOrUnsub(t),this.unsubscribe())}else this.unsubscribe()}},n.prototype.__tryOrUnsub=function(e,n){try{e.call(this._context,n)}catch(e){if(this.unsubscribe(),Te.useDeprecatedSynchronousErrorHandling)throw e;Be(e)}},n.prototype.__tryOrSetError=function(e,n,t){if(!Te.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{n.call(this._context,t)}catch(n){return Te.useDeprecatedSynchronousErrorHandling?(e.syncErrorValue=n,e.syncErrorThrown=!0,!0):(Be(n),!0)}return!1},n.prototype._unsubscribe=function(){var e=this._parentSubscriber;this._context=null,this._parentSubscriber=null,e.unsubscribe()},n}(Fe),Ve=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}();function We(e){return e}function $e(e){return 0===e.length?We:1===e.length?e[0]:function(n){return e.reduce((function(e,n){return n(e)}),n)}}var He=function(){function e(e){this._isScalar=!1,e&&(this._subscribe=e)}return e.prototype.lift=function(n){var t=new e;return t.source=this,t.operator=n,t},e.prototype.subscribe=function(e,n,t){var r=this.operator,o=function(e,n,t){if(e){if(e instanceof Fe)return e;if(e[De])return e[De]()}return e||n||t?new Fe(e,n,t):new Fe(Re)}(e,n,t);if(r?o.add(r.call(o,this.source)):o.add(this.source||Te.useDeprecatedSynchronousErrorHandling&&!o.syncErrorThrowable?this._subscribe(o):this._trySubscribe(o)),Te.useDeprecatedSynchronousErrorHandling&&o.syncErrorThrowable&&(o.syncErrorThrowable=!1,o.syncErrorThrown))throw o.syncErrorValue;return o},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(n){Te.useDeprecatedSynchronousErrorHandling&&(e.syncErrorThrown=!0,e.syncErrorValue=n),function(e){for(;e;){var n=e,t=n.closed,r=n.destination,o=n.isStopped;if(t||o)return!1;e=r&&r instanceof Fe?r:null}return!0}(e)?e.error(n):console.warn(n)}},e.prototype.forEach=function(e,n){var t=this;return new(n=qe(n))((function(n,r){var o;o=t.subscribe((function(n){try{e(n)}catch(e){r(e),o&&o.unsubscribe()}}),r,n)}))},e.prototype._subscribe=function(e){var n=this.source;return n&&n.subscribe(e)},e.prototype[Ve]=function(){return this},e.prototype.pipe=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return 0===e.length?this:$e(e)(this)},e.prototype.toPromise=function(e){var n=this;return new(e=qe(e))((function(e,t){var r;n.subscribe((function(e){return r=e}),(function(e){return t(e)}),(function(){return e(r)}))}))},e.create=function(n){return new e(n)},e}();function qe(e){if(e||(e=Te.Promise||Promise),!e)throw new Error("no Promise impl found");return e}function Ye(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}var Ze=Ye(),Qe=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function Ke(e){return!!e&&"function"!=typeof e.subscribe&&"function"==typeof e.then}function Xe(e,n){return n?function(e,n){if(null!=e){if(function(e){return e&&"function"==typeof e[Ve]}(e))return function(e,n){return new He((function(t){var r=new Me;return r.add(n.schedule((function(){var o=e[Ve]();r.add(o.subscribe({next:function(e){r.add(n.schedule((function(){return t.next(e)})))},error:function(e){r.add(n.schedule((function(){return t.error(e)})))},complete:function(){r.add(n.schedule((function(){return t.complete()})))}}))}))),r}))}(e,n);if(Ke(e))return function(e,n){return new He((function(t){var r=new Me;return r.add(n.schedule((function(){return e.then((function(e){r.add(n.schedule((function(){t.next(e),r.add(n.schedule((function(){return t.complete()})))})))}),(function(e){r.add(n.schedule((function(){return t.error(e)})))}))}))),r}))}(e,n);if(Qe(e))return function(e,n){return new He((function(t){var r=new Me,o=0;return r.add(n.schedule((function(){o!==e.length?(t.next(e[o++]),t.closed||r.add(this.schedule())):t.complete()}))),r}))}(e,n);if(function(e){return e&&"function"==typeof e[Ze]}(e)||"string"==typeof e)return function(e,n){if(!e)throw new Error("Iterable cannot be null");return new He((function(t){var r,o=new Me;return o.add((function(){r&&"function"==typeof r.return&&r.return()})),o.add(n.schedule((function(){r=e[Ze](),o.add(n.schedule((function(){if(!t.closed){var e,n;try{var o=r.next();e=o.value,n=o.done}catch(e){return void t.error(e)}n?t.complete():(t.next(e),this.schedule())}})))}))),o}))}(e,n)}throw new TypeError((null!==e&&typeof e||e)+" is not observable")}(e,n):e instanceof He?e:new He(function(e){if(e&&"function"==typeof e[Ve])return o=e,function(e){var n=o[Ve]();if("function"!=typeof n.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return n.subscribe(e)};if(Qe(e))return r=e,function(e){for(var n=0,t=r.length;n<t&&!e.closed;n++)e.next(r[n]);e.complete()};if(Ke(e))return t=e,function(e){return t.then((function(n){e.closed||(e.next(n),e.complete())}),(function(n){return e.error(n)})).then(null,Be),e};if(e&&"function"==typeof e[Ze])return n=e,function(e){for(var t=n[Ze]();;){var r=void 0;try{r=t.next()}catch(n){return e.error(n),e}if(r.done){e.complete();break}if(e.next(r.value),e.closed)break}return"function"==typeof t.return&&e.add((function(){t.return&&t.return()})),e};var n,t,r,o,a=ze(e)?"an invalid object":"'"+e+"'";throw new TypeError("You provided "+a+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")}(e))}var Je=t(306);o()(Je.Z,{insert:"head",singleton:!1});const Ge=Je.Z.locals||{};var en=t(82);o()(en.Z,{insert:"head",singleton:!1});const nn=en.Z.locals||{};var tn=function(n,t){return e.createElement("div",{key:t,className:nn.heartContainer},e.createElement("div",{className:nn.heart}))};const rn=function(n){for(var t=n.rating,r=n.fontSize,o=[],a=0;a<t;a++)o[a]=!0;return e.createElement("div",{style:{fontSize:r},className:nn.container},e.createElement("span",{className:nn.rating},"Yum Rating:"),o.map(tn))};function on(e){return(on="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function an(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ln(e,n){return(ln=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}function un(e,n){return!n||"object"!==on(n)&&"function"!=typeof n?sn(e):n}function sn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function cn(e){return(cn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var fn=function(e){return e.name&&e.comment&&e.imageUrl},dn=function(n){!function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&ln(e,n)}(l,n);var t,r,o,a,i=(o=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=cn(o);if(a){var t=cn(this).constructor;e=Reflect.construct(n,arguments,t)}else e=n.apply(this,arguments);return un(this,e)});function l(e){var n;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,l),(n=i.call(this,e)).state={cakes:[],loaded:!1},n.addCake=n.addCake.bind(sn(n)),n.handleImageClick=n.handleImageClick.bind(sn(n)),n}return t=l,(r=[{key:"componentDidMount",value:function(){var e=this;this.subscription=Xe(this.props.cakesService.getCakeList()).subscribe((function(n){e.setState({cakes:n.filter(fn),loaded:!0})}))}},{key:"componentWillUnmount",value:function(){this.subscription.unsubscribe()}},{key:"addCake",value:function(){this.props.history.push("/add-your-own-cake")}},{key:"handleImageClick",value:function(e){e.preventDefault();var n=e.currentTarget.getAttribute("href");this.props.history.push(n)}},{key:"render",value:function(){var n=this;return e.createElement("div",{className:Ge.container},e.createElement("div",{className:Ge.header},e.createElement("button",{onClick:this.addCake},"Add your own favourite cake")),e.createElement("div",{className:Ge.listContainer},!this.state.loaded&&e.createElement("div",{className:Ge.loadingMessage},e.createElement("h2",null,"Please wait as we prepare your delicious cakes!")),e.createElement(ne,{component:"div",className:Ge.items},this.state.cakes.map((function(t,r){return e.createElement(pe,{timeout:400,key:t.id,classNames:"listitem"},e.createElement("div",{className:Ge.card},e.createElement("div",{className:Ge.name},t.name),e.createElement("div",{className:Ge.imageContainer},e.createElement("a",{onClick:n.handleImageClick,href:"/cakes/".concat(t.id)},e.createElement("img",{className:Ge.image,src:t.imageUrl}))),e.createElement("div",{className:Ge.comment},t.comment),e.createElement(rn,{fontSize:"12px",rating:t.yumFactor})))})))))}}])&&an(t.prototype,r),l}(e.Component),pn=t(335);o()(pn.Z,{insert:"head",singleton:!1});const hn=pn.Z.locals||{};function mn(e){return(mn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function yn(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function vn(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function gn(e,n){return(gn=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}function bn(e,n){return!n||"object"!==mn(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function An(e){return(An=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var En=function(n){!function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&gn(e,n)}(l,n);var t,r,o,a,i=(o=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=An(o);if(a){var t=An(this).constructor;e=Reflect.construct(n,arguments,t)}else e=n.apply(this,arguments);return bn(this,e)});function l(){return yn(this,l),i.apply(this,arguments)}return t=l,(r=[{key:"render",value:function(){return e.createElement("div",{className:hn.container},e.createElement("div",{className:hn.innerContainer},e.createElement(Z,{className:hn.link,to:"/cakes-list",activeClassName:"active"},"Click here to see some delicious cakes!")))}}])&&vn(t.prototype,r),l}(e.Component),wn=t(798);o()(wn.Z,{insert:"head",singleton:!1});const kn=wn.Z.locals||{};function Cn(e){return(Cn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function xn(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Sn(e,n){return(Sn=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}function _n(e,n){return!n||"object"!==Cn(n)&&"function"!=typeof n?On(e):n}function On(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Pn(e){return(Pn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Nn=0,Tn=["cake-1.jpg","cake-2.jpg","cake-3.jpg","cake-4.jpg","cake-5.jpg"],Bn=function(n){!function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&Sn(e,n)}(l,n);var t,r,o,a,i=(o=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=Pn(o);if(a){var t=Pn(this).constructor;e=Reflect.construct(n,arguments,t)}else e=n.apply(this,arguments);return _n(this,e)});function l(e){var n;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,l),(n=i.call(this,e)).state={name:"",comment:"",yumFactor:"3",imageUrl:""},n.handleNameChange=n.handleNameChange.bind(On(n)),n.handleCommentChange=n.handleCommentChange.bind(On(n)),n.handleOptionChange=n.handleOptionChange.bind(On(n)),n.onSubmit=n.onSubmit.bind(On(n)),n.cancel=n.cancel.bind(On(n)),n}return t=l,(r=[{key:"handleNameChange",value:function(e){this.setState({name:e.target.value})}},{key:"handleCommentChange",value:function(e){this.setState({comment:e.target.value})}},{key:"handleOptionChange",value:function(e){this.setState({yumFactor:e.target.value})}},{key:"handleImageClick",value:function(e){this.setState({imageUrl:e})}},{key:"onSubmit",value:function(){var e=Object.assign({},this.state);e.id=Nn++,this.props.cakesService.addCake(e),this.props.history.push("/cakes-list")}},{key:"cancel",value:function(){this.props.history.push("/cakes-list")}},{key:"render",value:function(){var n=this;return e.createElement("div",{className:kn.container},e.createElement("label",{className:kn.label},"name:",e.createElement("input",{className:kn.input,onChange:this.handleNameChange,value:this.state.name})),e.createElement("label",{className:kn.label},"comment:",e.createElement("textarea",{onChange:this.handleCommentChange,value:this.state.comment})),e.createElement("div",null,"Yum factor:"),e.createElement("div",{className:kn.yumFactorContainer},e.createElement("label",null,e.createElement("input",{onChange:this.handleOptionChange,type:"radio",value:"1",checked:"1"===this.state.yumFactor}),"1"),e.createElement("label",null,e.createElement("input",{onChange:this.handleOptionChange,type:"radio",value:"2",checked:"2"===this.state.yumFactor}),"2"),e.createElement("label",null,e.createElement("input",{onChange:this.handleOptionChange,type:"radio",value:"3",checked:"3"===this.state.yumFactor}),"3"),e.createElement("label",null,e.createElement("input",{onChange:this.handleOptionChange,type:"radio",value:"4",checked:"4"===this.state.yumFactor}),"4"),e.createElement("label",null,e.createElement("input",{onChange:this.handleOptionChange,type:"radio",value:"5",checked:"5"===this.state.yumFactor}),"5")),e.createElement("div",{className:kn.images},e.createElement("h2",null,"Choose an Image"),Tn.map((function(t,r){var o="http://richardhunter.co.uk/cake-images";return e.createElement("div",{className:kn.imageContainer,key:r},e.createElement("img",{onClick:n.handleImageClick.bind(n,"".concat(o,"/").concat(t)),src:"".concat(o,"/").concat(t)}))})),e.createElement("div",{className:kn.chosenImage},this.state.imageUrl&&e.createElement("img",{src:this.state.imageUrl}))),e.createElement("div",{className:kn.buttonContainer},e.createElement("button",{onClick:this.onSubmit},"Submit (and see your cake in the list of cakes)"),e.createElement("button",{onClick:this.cancel},"Cancel (and go back to list of cakes)")))}}])&&xn(t.prototype,r),l}(e.Component),Rn=t(21);o()(Rn.Z,{insert:"head",singleton:!1});const Ln=Rn.Z.locals||{};function zn(e){return(zn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function jn(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Mn(e,n){return(Mn=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}function Un(e,n){return!n||"object"!==zn(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function Dn(e){return(Dn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Fn=function(n){!function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&Mn(e,n)}(l,n);var t,r,o,a,i=(o=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=Dn(o);if(a){var t=Dn(this).constructor;e=Reflect.construct(n,arguments,t)}else e=n.apply(this,arguments);return Un(this,e)});function l(e){var n;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,l),(n=i.call(this,e)).state={cake:{},loaded:!1},n}return t=l,(r=[{key:"componentDidMount",value:function(){var e=this,n=this.props.match.params.id;this.subscription=Xe(this.props.cakesService.getCakeDetail(n)).subscribe((function(n){e.setState({cake:n,loaded:!0})}))}},{key:"componentWillUnmount",value:function(){this.subscription.unsubscribe()}},{key:"render",value:function(){return e.createElement("div",{className:Ln.container},e.createElement("h2",{className:Ln.header},this.state.cake.name),e.createElement("img",{className:Ln.image,src:this.state.cake.imageUrl}),e.createElement("div",{className:Ln.comment},this.state.cake.comment),e.createElement(rn,{fontSize:"18px",rating:this.state.cake.yumFactor}))}}])&&jn(t.prototype,r),l}(e.Component),In=t(460);o()(In.Z,{insert:"head",singleton:!1});const Vn=In.Z.locals||{};function Wn(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function $n(e){return($n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Hn(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function qn(e,n){return(qn=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}function Yn(e,n){return!n||"object"!==$n(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function Zn(e){return(Zn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Qn,Kn=new(function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e)}var n,t;return n=e,(t=[{key:"getCakeList",value:function(){return fetch("/api/get-all-cakes").then((function(e){return e.json()}))}},{key:"getCakeDetail",value:function(e){return fetch("/api/get-cake/"+e,{method:"GET"}).then((function(e){return e.json()}))}},{key:"addCake",value:function(e){return console.log("add cake",e),fetch("/api/put-cake/"+e.id,{method:"PUT",body:JSON.stringify(e)}).then((function(e){console.log("response",e)}))}}])&&Wn(n.prototype,t),e}()),Xn=function(n){!function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&qn(e,n)}(l,n);var t,r,o,a,i=(o=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=Zn(o);if(a){var t=Zn(this).constructor;e=Reflect.construct(n,arguments,t)}else e=n.apply(this,arguments);return Yn(this,e)});function l(){var e;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,l),(e=i.call(this)).state={},e}return t=l,(r=[{key:"render",value:function(){return e.createElement("div",null,e.createElement(D,{basename:"/cakes"},e.createElement("div",null,e.createElement("div",{className:Vn.container},e.createElement("div",null,e.createElement(Ce,{cakesService:Kn,component:Bn,path:"/add-your-own-cake"}),e.createElement(Ce,{component:En,exact:!0,path:"/"}),e.createElement(Ce,{cakesService:Kn,component:dn,exact:!0,path:"/cakes-list"}),e.createElement(Ce,{cakesService:Kn,component:Fn,path:"/cakes/:id"}))))))}}])&&Hn(t.prototype,r),l}(e.Component);"serviceWorker"in navigator&&window.addEventListener("load",(function(){navigator.serviceWorker.register("./sw.js").then((function(e){console.log("SW registered: ",e)})).catch((function(e){console.log("SW registration failed: ",e)}))})),Qn=Xn,n.render(e.createElement(Qn,null),document.getElementById("app"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9zcmMvYWRkLWNha2UuY29tcG9uZW50LmNzcyIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9zcmMvYXBwLmNvbXBvbmVudC5jc3MiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vc3JjL2FwcC5jc3MiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vc3JjL2Nha2UtZGV0YWlsLmNvbXBvbmVudC5jc3MiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vc3JjL2Nha2UtbGlzdC5jb21wb25lbnQuY3NzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL3NyYy9ob21lLmNvbXBvbmVudC5jc3MiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vc3JjL3Jlc2V0LmNzcyIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9zcmMvc3R5bGUuY3NzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL3NyYy90cmFuc2l0aW9uLXJvdXRlLmNzcyIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9zcmMveXVtLXJhdGluZy5jb21wb25lbnQuY3NzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL25vZGVfbW9kdWxlcy9wYXRoLXRvLXJlZ2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9ub2RlX21vZHVsZXMvcGF0aC10by1yZWdleHAvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL3NyYy9yZXNldC5jc3M/MzhhNSIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9lc20vcmVzb2x2ZS1wYXRobmFtZS5qcyIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9ub2RlX21vZHVsZXMvdGlueS1pbnZhcmlhbnQvZGlzdC90aW55LWludmFyaWFudC5lc20uanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXNtL2hpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vbm9kZV9tb2R1bGVzL21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQvZGlzdC9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lc20vcmVhY3Qtcm91dGVyLmpzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzbS9yZWFjdC1yb3V0ZXItZG9tLmpzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uR3JvdXBDb250ZXh0LmpzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS91dGlscy9DaGlsZE1hcHBpbmcuanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL1RyYW5zaXRpb25Hcm91cC5qcyIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9lc20vcmVtb3ZlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL1RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL0NTU1RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2VzbS9hZGRDbGFzcy5qcyIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXNtL2hhc0NsYXNzLmpzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL3NyYy90cmFuc2l0aW9uLXJvdXRlLmNzcz9lYWEwIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL3NyYy90cmFuc2l0aW9uLXJvdXRlLmpzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL3NyYy9zdHlsZS5jc3M/NTNlMyIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9zcmMvYXBwLmNzcz81NmI3Iiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2hvc3RSZXBvcnRFcnJvci5qcyIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9PYnNlcnZlci5qcyIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2lzQXJyYXkuanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3IuanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3N5bWJvbC9yeFN1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zeW1ib2wvb2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2lkZW50aXR5LmpzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvcGlwZS5qcyIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9PYnNlcnZhYmxlLmpzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvdG9TdWJzY3JpYmVyLmpzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvY2FuUmVwb3J0RXJyb3IuanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaXNBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc1Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tLmpzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZWQuanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc0ludGVyb3BPYnNlcnZhYmxlLmpzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZU9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVBcnJheS5qcyIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2lzSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9zdWJzY3JpYmVUby5qcyIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL3N1YnNjcmliZVRvT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL3N1YnNjcmliZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9zdWJzY3JpYmVUb1Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9zdWJzY3JpYmVUb0l0ZXJhYmxlLmpzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL3NyYy9jYWtlLWxpc3QuY29tcG9uZW50LmNzcz8xZTgzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL3NyYy95dW0tcmF0aW5nLmNvbXBvbmVudC5jc3M/MTlkNiIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9zcmMveXVtLXJhdGluZy5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vc3JjL2Nha2UtbGlzdC5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vc3JjL2hvbWUuY29tcG9uZW50LmNzcz85NDlkIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL3NyYy9ob21lLmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9zcmMvYWRkLWNha2UuY29tcG9uZW50LmNzcz9hZGQyIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL3NyYy9hZGQtY2FrZS5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vd2FyYWNsZS10ZXN0Ly4vc3JjL2Nha2UtZGV0YWlsLmNvbXBvbmVudC5jc3M/ODU5OCIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9zcmMvY2FrZS1kZXRhaWwuY29tcG9uZW50LmpzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL3NyYy9hcHAuY29tcG9uZW50LmNzcz8zNzgzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL3NyYy9hcHAuY29tcG9uZW50LmpzIiwid2VicGFjazovL3dhcmFjbGUtdGVzdC8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly93YXJhY2xlLXRlc3QvLi9zcmMvY2FrZXMuc2VydmljZS5qcyJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImxvY2FscyIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY29uY2F0Iiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsZW5ndGgiLCJfaSIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyIiwibGVuIiwiYXJyMiIsIkFycmF5IiwiX2l0ZW0iLCJpc0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJPYmplY3QiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwidW5kZWZpbmVkIiwiX3MiLCJuZXh0IiwiZG9uZSIsInZhbHVlIiwiZXJyIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwibyIsIm1pbkxlbiIsIm4iLCJwcm90b3R5cGUiLCJjYWxsIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJmcm9tIiwidGVzdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIlR5cGVFcnJvciIsIl9ub25JdGVyYWJsZVJlc3QiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwicmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlIiwiY29udGV4dFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiZGlzcGxheU5hbWUiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJ0eXBlIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyZ3VtZW50cyIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwiTWVtbyIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJrZXlzIiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJrZXkiLCJkZXNjcmlwdG9yIiwiZSIsImhhc093blByb3BlcnR5IiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJ2YWwiLCJhc3NpZ24iLCJ0ZXN0MSIsIlN0cmluZyIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwidGVzdDMiLCJzcGxpdCIsImZvckVhY2giLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJ0YXJnZXQiLCJzeW1ib2xzIiwidG8iLCJzIiwiaXNhcnJheSIsInBhdGhUb1JlZ2V4cCIsInBhdGgiLCJvcHRpb25zIiwiUmVnRXhwIiwiZ3JvdXBzIiwibWF0Y2giLCJwcmVmaXgiLCJkZWxpbWl0ZXIiLCJvcHRpb25hbCIsInJlcGVhdCIsInBhcnRpYWwiLCJhc3RlcmlzayIsInBhdHRlcm4iLCJhdHRhY2hLZXlzIiwicmVnZXhwVG9SZWdleHAiLCJwYXJ0cyIsImZsYWdzIiwiYXJyYXlUb1JlZ2V4cCIsInRva2Vuc1RvUmVnRXhwIiwicGFyc2UiLCJzdHJpbmdUb1JlZ2V4cCIsImNvbXBpbGUiLCJzdHIiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwiUEFUSF9SRUdFWFAiLCJyZXMiLCJ0b2tlbnMiLCJpbmRleCIsImRlZmF1bHREZWxpbWl0ZXIiLCJleGVjIiwibSIsImVzY2FwZWQiLCJvZmZzZXQiLCJjYXB0dXJlIiwiZ3JvdXAiLCJtb2RpZmllciIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwic3Vic3RyIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwicmVwbGFjZSIsImMiLCJjaGFyQ29kZUF0IiwidG9VcHBlckNhc2UiLCJtYXRjaGVzIiwib2JqIiwib3B0cyIsImVuY29kZSIsInByZXR0eSIsInRva2VuIiwic2VnbWVudCIsImoiLCJyZSIsInNlbnNpdGl2ZSIsInN0cmljdCIsImVuZCIsInJvdXRlIiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwicHJvcHMiLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJsb2NhdGlvbiIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsIkVycm9yIiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImFycmF5IiwiYm9vbCIsImZ1bmMiLCJudW1iZXIiLCJvYmplY3QiLCJzdHJpbmciLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiZWxlbWVudCIsImVsZW1lbnRUeXBlIiwiaW5zdGFuY2VPZiIsIm5vZGUiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYWEiLCJyIiwieSIsImEiLCJiIiwiYmEiLCJTZXQiLCJjYSIsImRhIiwiZWEiLCJhZGQiLCJmYSIsIndpbmRvdyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImhhIiwiaWEiLCJqYSIsImthIiwiQiIsImQiLCJmIiwiZyIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwiRCIsInRvTG93ZXJDYXNlIiwib2EiLCJwYSIsInFhIiwibWEiLCJpc05hTiIsIm5hIiwibGEiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInhsaW5rSHJlZiIsInJhIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJzYSIsInRhIiwidWEiLCJ3YSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiZm9yIiwiRSIsIk1hIiwiS2EiLCJMYSIsIk5hIiwic3RhY2siLCJ0cmltIiwiT2EiLCJQYSIsInByZXBhcmVTdGFja1RyYWNlIiwic2V0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImsiLCJoIiwiUWEiLCJ0YWciLCJfcmVuZGVyIiwiUmEiLCIkJHR5cGVvZiIsIl9jb250ZXh0IiwiX3BheWxvYWQiLCJfaW5pdCIsIlNhIiwiVGEiLCJub2RlTmFtZSIsIlZhIiwiX3ZhbHVlVHJhY2tlciIsImdldCIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiVWEiLCJXYSIsImNoZWNrZWQiLCJYYSIsImFjdGl2ZUVsZW1lbnQiLCJib2R5IiwiWWEiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIlphIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIiRhIiwiYWIiLCJiYiIsImNiIiwib3duZXJEb2N1bWVudCIsImViIiwiY2hpbGRyZW4iLCJDaGlsZHJlbiIsImRiIiwiZmIiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsImRpc2FibGVkIiwiZ2IiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImhiIiwiaWIiLCJqYiIsInRleHRDb250ZW50Iiwia2IiLCJsYiIsIm1iIiwibmIiLCJvYiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInZhbHVlT2YiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJwYiIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwicWIiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsInJiIiwic2IiLCJ0YiIsInN0eWxlIiwiaW5kZXhPZiIsInNldFByb3BlcnR5IiwiY2hhckF0Iiwic3Vic3RyaW5nIiwidWIiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJ2YiIsIndiIiwiaXMiLCJ4YiIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInBhcmVudE5vZGUiLCJ5YiIsInpiIiwiQWIiLCJCYiIsIkNiIiwic3RhdGVOb2RlIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJPYiIsIlBiIiwiUWIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIlJiIiwibCIsImFwcGx5Iiwib25FcnJvciIsIlNiIiwiVGIiLCJVYiIsIlZiIiwiV2IiLCJYYiIsIlpiIiwiYWx0ZXJuYXRlIiwicmV0dXJuIiwiJGIiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsImFjIiwiY2MiLCJjaGlsZCIsInNpYmxpbmciLCJjdXJyZW50IiwiYmMiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJtYyIsIm5jIiwiTWFwIiwib2MiLCJwYyIsInFjIiwicmMiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwibmF0aXZlRXZlbnQiLCJ0YXJnZXRDb250YWluZXJzIiwic2MiLCJkZWxldGUiLCJwb2ludGVySWQiLCJ0YyIsInZjIiwid2MiLCJsYW5lUHJpb3JpdHkiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJwcmlvcml0eSIsImh5ZHJhdGUiLCJjb250YWluZXJJbmZvIiwieGMiLCJ5YyIsInNoaWZ0IiwiemMiLCJBYyIsIkJjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiQ2MiLCJEYyIsIkVjIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiRmMiLCJHYyIsIkhjIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsIkljIiwiSmMiLCJLYyIsIkxjIiwiTWMiLCJOYyIsIk9jIiwiUGMiLCJRYyIsInVuc3RhYmxlX25vdyIsIkYiLCJSYyIsIlVjIiwicGVuZGluZ0xhbmVzIiwiZXhwaXJlZExhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsIlZjIiwiZW50YW5nbGVkTGFuZXMiLCJlbnRhbmdsZW1lbnRzIiwiV2MiLCJYYyIsIlljIiwiWmMiLCIkYyIsImV2ZW50VGltZXMiLCJNYXRoIiwiY2x6MzIiLCJiZCIsImNkIiwibG9nIiwiTE4yIiwiZGQiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsImVkIiwiZmQiLCJnZCIsImhkIiwiYmluZCIsInVjIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwia2V5Q29kZSIsImNoYXJDb2RlIiwicGQiLCJxZCIsInJkIiwiX3JlYWN0TmFtZSIsIl90YXJnZXRJbnN0IiwiY3VycmVudFRhcmdldCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50Iiwid2QiLCJ4ZCIsInlkIiwic2QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJEYXRlIiwibm93IiwiaXNUcnVzdGVkIiwidGQiLCJ1ZCIsInZpZXciLCJkZXRhaWwiLCJ2ZCIsIkFkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInpkIiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIkJkIiwiRGQiLCJkYXRhVHJhbnNmZXIiLCJGZCIsIkhkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIkpkIiwiY2xpcGJvYXJkRGF0YSIsIkxkIiwiTWQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwiTmQiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwiT2QiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGQiLCJSZCIsImNvZGUiLCJsb2NhbGUiLCJ3aGljaCIsIlRkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiVmQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiWGQiLCJaZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiJGQiLCJhZSIsImJlIiwiZG9jdW1lbnRNb2RlIiwiY2UiLCJkZSIsImVlIiwiZmUiLCJnZSIsImhlIiwiaWUiLCJsZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsInVybCIsIndlZWsiLCJtZSIsIm5lIiwib2UiLCJldmVudCIsImxpc3RlbmVycyIsInBlIiwicWUiLCJzZSIsInRlIiwidWUiLCJ2ZSIsIndlIiwieGUiLCJ5ZSIsInplIiwib25pbnB1dCIsIkFlIiwiZGV0YWNoRXZlbnQiLCJCZSIsIkNlIiwiYXR0YWNoRXZlbnQiLCJEZSIsIkVlIiwiRmUiLCJIZSIsIkllIiwiSmUiLCJLZSIsIkxlIiwibmV4dFNpYmxpbmciLCJNZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJOZSIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsImhyZWYiLCJPZSIsImNvbnRlbnRFZGl0YWJsZSIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsInN0YXJ0Iiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsIlZlIiwiV2UiLCJYZSIsIlllIiwiWmUiLCJZYiIsImluc3RhbmNlIiwibGlzdGVuZXIiLCJHIiwiJGUiLCJoYXMiLCJhZiIsImJmIiwicmFuZG9tIiwiY2YiLCJkZiIsInBhc3NpdmUiLCJOYiIsIngiLCJ3IiwieiIsInUiLCJxIiwidCIsInYiLCJlZiIsImZmIiwicGFyZW50V2luZG93IiwiZ2YiLCJoZiIsIkoiLCJLIiwiUSIsIkwiLCJqZSIsImNoYXIiLCJrZSIsInVuc2hpZnQiLCJqZiIsImtmIiwibGYiLCJtZiIsImF1dG9Gb2N1cyIsIm5mIiwiX19odG1sIiwib2YiLCJzZXRUaW1lb3V0IiwicGYiLCJjbGVhclRpbWVvdXQiLCJxZiIsInJmIiwic2YiLCJwcmV2aW91c1NpYmxpbmciLCJ0ZiIsInZmIiwid2YiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiSCIsIkkiLCJDZiIsIk0iLCJOIiwiRGYiLCJFZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIkZmIiwiR2YiLCJIZiIsIklmIiwiZ2V0Q2hpbGRDb250ZXh0IiwiSmYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIktmIiwiTGYiLCJNZiIsIk5mIiwiT2YiLCJQZiIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiUWYiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsIlJmIiwidW5zdGFibGVfcmVxdWVzdFBhaW50IiwiU2YiLCJUZiIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiVWYiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsIlZmIiwiV2YiLCJYZiIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwiWWYiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJPIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwiX2N1cnJlbnRWYWx1ZSIsInNnIiwiY2hpbGRMYW5lcyIsInRnIiwiZGVwZW5kZW5jaWVzIiwiZmlyc3RDb250ZXh0IiwibGFuZXMiLCJ1ZyIsInZnIiwiY29udGV4dCIsIm9ic2VydmVkQml0cyIsInJlc3BvbmRlcnMiLCJ3ZyIsInhnIiwidXBkYXRlUXVldWUiLCJiYXNlU3RhdGUiLCJmaXJzdEJhc2VVcGRhdGUiLCJsYXN0QmFzZVVwZGF0ZSIsInNoYXJlZCIsInBlbmRpbmciLCJlZmZlY3RzIiwieWciLCJ6ZyIsImV2ZW50VGltZSIsImxhbmUiLCJwYXlsb2FkIiwiY2FsbGJhY2siLCJBZyIsIkJnIiwiQ2ciLCJBIiwicCIsIkMiLCJEZyIsIkVnIiwiRmciLCJDb21wb25lbnQiLCJyZWZzIiwiR2ciLCJLZyIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFscyIsImVucXVldWVTZXRTdGF0ZSIsIkhnIiwiSWciLCJKZyIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJMZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiTWciLCJzdGF0ZSIsInVwZGF0ZXIiLCJOZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIk9nIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJQZyIsIlFnIiwicmVmIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsIlJnIiwiU2ciLCJsYXN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImZpcnN0RWZmZWN0IiwiVGciLCJVZyIsIm1vZGUiLCJWZyIsImltcGxlbWVudGF0aW9uIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImRoIiwiZWgiLCJkb2N1bWVudEVsZW1lbnQiLCJ0YWdOYW1lIiwiZmgiLCJnaCIsImhoIiwiUCIsImloIiwibWVtb2l6ZWRQcm9wcyIsInJldmVhbE9yZGVyIiwiamgiLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwicGVuZGluZ1Byb3BzIiwicGgiLCJxaCIsInJoIiwic2giLCJ0aCIsInVoIiwiX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnkiLCJ2aCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJ3aCIsInhoIiwiUiIsIlMiLCJUIiwieWgiLCJ6aCIsIkFoIiwiQmgiLCJDaCIsIkRoIiwiRWgiLCJGaCIsIkdoIiwiSGgiLCJiYXNlUXVldWUiLCJxdWV1ZSIsIkloIiwiSmgiLCJLaCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJhY3Rpb24iLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaCIsIkxoIiwiTWgiLCJfZ2V0VmVyc2lvbiIsIl9zb3VyY2UiLCJtdXRhYmxlUmVhZExhbmVzIiwiTmgiLCJVIiwidXNlU3RhdGUiLCJnZXRTbmFwc2hvdCIsInN1YnNjcmliZSIsInVzZUVmZmVjdCIsInNldFNuYXBzaG90IiwiT2giLCJQaCIsIlFoIiwiUmgiLCJjcmVhdGUiLCJkZXN0cm95IiwiZGVwcyIsIlNoIiwiVGgiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImRpIiwicmVhZENvbnRleHQiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJ1c2VNdXRhYmxlU291cmNlIiwidXNlT3BhcXVlSWRlbnRpZmllciIsInVuc3RhYmxlX2lzTmV3UmVjb25jaWxlciIsInVmIiwiZWkiLCJSZWFjdEN1cnJlbnRPd25lciIsImZpIiwiZ2kiLCJoaSIsImlpIiwiamkiLCJraSIsImxpIiwibWkiLCJiYXNlTGFuZXMiLCJuaSIsIm9pIiwicGkiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJxaSIsInJpIiwicGVuZGluZ0NvbnRleHQiLCJCaSIsIkRpIiwiRWkiLCJzaSIsInJldHJ5TGFuZSIsInRpIiwiZmFsbGJhY2siLCJ1bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjayIsInVpIiwidW5zdGFibGVfZXhwZWN0ZWRMb2FkVGltZSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsImxhc3QiLCJ0YWlsIiwidGFpbE1vZGUiLCJBaSIsIkZpIiwiR2kiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwib25DbGljayIsIm9uY2xpY2siLCJzaXplIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlVGV4dE5vZGUiLCJWIiwiSGkiLCJJaSIsIlciLCJKaSIsIktpIiwiTGkiLCJNaSIsIm1lc3NhZ2UiLCJOaSIsImNvbnNvbGUiLCJlcnJvciIsIk9pIiwiV2Vha01hcCIsIlBpIiwiUWkiLCJSaSIsIlNpIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJUaSIsImNvbXBvbmVudFN0YWNrIiwiVWkiLCJXZWFrU2V0IiwiVmkiLCJXaSIsIlhpIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJZaSIsIlppIiwiJGkiLCJmb2N1cyIsImFqIiwiZGlzcGxheSIsImJqIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImNqIiwiZGoiLCJlaiIsImZqIiwiZ2oiLCJoaiIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJpaiIsImpqIiwia2oiLCJsaiIsInRoZW4iLCJtaiIsIm5qIiwiY2VpbCIsIm9qIiwicGoiLCJYIiwiWSIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsIkluZmluaXR5Iiwid2oiLCJjayIsIloiLCJ4aiIsInlqIiwiemoiLCJBaiIsIkJqIiwiQ2oiLCJEaiIsIkVqIiwiRmoiLCJHaiIsIkhqIiwiSWoiLCJKaiIsIlNjIiwiS2oiLCJMaiIsIk1qIiwiY2FsbGJhY2tOb2RlIiwiZXhwaXJhdGlvblRpbWVzIiwiY2FsbGJhY2tQcmlvcml0eSIsIlRjIiwiTmoiLCJPaiIsIlBqIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZExhbmVzIiwiVWoiLCJ0aW1lb3V0SGFuZGxlIiwicGluZ0NhY2hlIiwiWWoiLCJaaiIsInZhIiwiYWsiLCJiayIsImRrIiwicmFuZ2VDb3VudCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJlayIsIm1pbiIsImV4dGVuZCIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwib25Db21taXRGaWJlclJvb3QiLCJmayIsImdrIiwiaWsiLCJpc1JlYWN0Q29tcG9uZW50IiwicGVuZGluZ0NoaWxkcmVuIiwiamsiLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwibGsiLCJtayIsIm5rIiwib2siLCJxayIsImh5ZHJhdGlvbk9wdGlvbnMiLCJtdXRhYmxlU291cmNlcyIsIl9pbnRlcm5hbFJvb3QiLCJyayIsInRrIiwiaGFzQXR0cmlidXRlIiwic2siLCJYaiIsImhrIiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwidW5tb3VudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwiVmoiLCJ3ayIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInZlcnNpb24iLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwieGsiLCJyZW5kZXJlckNvbmZpZyIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoIiwib3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoIiwib3ZlcnJpZGVQcm9wcyIsIm92ZXJyaWRlUHJvcHNEZWxldGVQYXRoIiwib3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGgiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsInlrIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJmaW5kRE9NTm9kZSIsImNoZWNrRENFIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiRnJhZ21lbnQiLCJMYXp5IiwiUG9ydGFsIiwiUHJvZmlsZXIiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNFbGVtZW50IiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJ0eXBlT2YiLCJzZXRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiX19zZWxmIiwiX19zb3VyY2UiLCJlc2NhcGUiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsImRlZmF1bHQiLCJJc1NvbWVSZW5kZXJlckFjdGluZyIsImNvdW50IiwidG9BcnJheSIsIm9ubHkiLCJQdXJlQ29tcG9uZW50IiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJmb3J3YXJkUmVmIiwiaXNWYWxpZEVsZW1lbnQiLCJsYXp5IiwibWVtbyIsInBlcmZvcm1hbmNlIiwiTWVzc2FnZUNoYW5uZWwiLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZmxvb3IiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJwb3AiLCJzb3J0SW5kZXgiLCJzdGFydFRpbWUiLCJleHBpcmF0aW9uVGltZSIsInByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJnZXRUYXJnZXQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsImF0dHJpYnV0ZXMiLCJub25jZSIsImluc2VydCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJCb29sZWFuIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNoaWxkTm9kZXMiLCJhcHBseVRvVGFnIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJuZXdPYmoiLCJhbGwiLCJhdG9iIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pbmRleCIsInNwbGljZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZGVmaW5pdGlvbiIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInByb3AiLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl9fcHJvdG9fXyIsImlzQWJzb2x1dGUiLCJwYXRobmFtZSIsInNwbGljZU9uZSIsImNvbmRpdGlvbiIsImFkZExlYWRpbmdTbGFzaCIsInN0cmlwQmFzZW5hbWUiLCJoYXNCYXNlbmFtZSIsInN0cmlwVHJhaWxpbmdTbGFzaCIsImNyZWF0ZVBhdGgiLCJoYXNoIiwiY3VycmVudExvY2F0aW9uIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJwYXJzZVBhdGgiLCJkZWNvZGVVUkkiLCJVUklFcnJvciIsImhhc1RyYWlsaW5nU2xhc2giLCJ0b1BhcnRzIiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJ1cCIsInBhcnQiLCJjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciIsInByb21wdCIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJjb25maXJtVHJhbnNpdGlvblRvIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImFwcGVuZExpc3RlbmVyIiwiZm4iLCJpc0FjdGl2ZSIsIm5vdGlmeUxpc3RlbmVycyIsIl9sZW4iLCJhcmdzIiwiX2tleSIsImNhblVzZURPTSIsImdldENvbmZpcm1hdGlvbiIsImNvbmZpcm0iLCJQb3BTdGF0ZUV2ZW50IiwiSGFzaENoYW5nZUV2ZW50IiwiZ2V0SGlzdG9yeVN0YXRlIiwiaGlzdG9yeSIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiZ2xvYmFsSGlzdG9yeSIsImNhblVzZUhpc3RvcnkiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciIsIl9wcm9wcyIsIl9wcm9wcyRmb3JjZVJlZnJlc2giLCJmb3JjZVJlZnJlc2giLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJfcHJvcHMka2V5TGVuZ3RoIiwia2V5TGVuZ3RoIiwiYmFzZW5hbWUiLCJnZXRET01Mb2NhdGlvbiIsImhpc3RvcnlTdGF0ZSIsIl9yZWYiLCJfd2luZG93JGxvY2F0aW9uIiwiY3JlYXRlS2V5IiwidHJhbnNpdGlvbk1hbmFnZXIiLCJuZXh0U3RhdGUiLCJoYW5kbGVQb3BTdGF0ZSIsImlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQiLCJoYW5kbGVQb3AiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZm9yY2VOZXh0UG9wIiwiZnJvbUxvY2F0aW9uIiwidG9Mb2NhdGlvbiIsInRvSW5kZXgiLCJhbGxLZXlzIiwiZnJvbUluZGV4IiwiZGVsdGEiLCJnbyIsInJldmVydFBvcCIsImluaXRpYWxMb2NhdGlvbiIsImNyZWF0ZUhyZWYiLCJsaXN0ZW5lckNvdW50IiwiY2hlY2tET01MaXN0ZW5lcnMiLCJpc0Jsb2NrZWQiLCJwdXNoU3RhdGUiLCJwcmV2SW5kZXgiLCJuZXh0S2V5cyIsInJlcGxhY2VTdGF0ZSIsImdvQmFjayIsImdvRm9yd2FyZCIsImJsb2NrIiwidW5ibG9jayIsImxpc3RlbiIsInVubGlzdGVuIiwiTUFYX1NJR05FRF8zMV9CSVRfSU5UIiwiY29tbW9uanNHbG9iYWwiLCJjcmVhdGVFdmVudEVtaXR0ZXIiLCJoYW5kbGVycyIsIm9uIiwiaGFuZGxlciIsIm9mZiIsIm5ld1ZhbHVlIiwiY2hhbmdlZEJpdHMiLCJjYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9Qcm92aWRlciRjaGlsZENvbnRleCIsIl9Db25zdW1lciRjb250ZXh0VHlwZSIsImNvbnRleHRQcm9wIiwiX0NvbXBvbmVudCIsIl90aGlzIiwiZW1pdHRlciIsIl9wcm90byIsIm5leHRQcm9wcyIsIm9sZFZhbHVlIiwiX0NvbXBvbmVudDIiLCJfdGhpczIiLCJvblVwZGF0ZSIsIl9wcm90bzIiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJoaXN0b3J5Q29udGV4dCIsImNyZWF0ZU5hbWVkQ29udGV4dCIsImNyZWF0ZU5hbWVkQ29udGV4dCQxIiwiUm91dGVyIiwiX1JlYWN0JENvbXBvbmVudCIsIl9pc01vdW50ZWQiLCJfcGVuZGluZ0xvY2F0aW9uIiwic3RhdGljQ29udGV4dCIsImNvbXB1dGVSb290TWF0Y2giLCJwYXJhbXMiLCJpc0V4YWN0IiwiY2FjaGUkMSIsImNhY2hlQ291bnQkMSIsIm1hdGNoUGF0aCIsIl9vcHRpb25zIiwiX29wdGlvbnMkZXhhY3QiLCJfb3B0aW9ucyRzdHJpY3QiLCJfb3B0aW9ucyRzZW5zaXRpdmUiLCJyZWR1Y2UiLCJtYXRjaGVkIiwiX2NvbXBpbGVQYXRoIiwiY2FjaGVLZXkiLCJwYXRoQ2FjaGUiLCJyZWdleHAiLCJjb21waWxlUGF0aCQxIiwidmFsdWVzIiwiUm91dGUiLCJjb250ZXh0JDEiLCJjb21wdXRlZE1hdGNoIiwiX3RoaXMkcHJvcHMiLCJCcm93c2VyUm91dGVyIiwicmVzb2x2ZVRvTG9jYXRpb24iLCJub3JtYWxpemVUb0xvY2F0aW9uIiwiZm9yd2FyZFJlZlNoaW0iLCJMaW5rQW5jaG9yIiwiZm9yd2FyZGVkUmVmIiwiaW5uZXJSZWYiLCJuYXZpZ2F0ZSIsIl9vbkNsaWNrIiwicmVzdCIsImV4IiwiaXNNb2RpZmllZEV2ZW50IiwiTGluayIsIl9yZWYyIiwiX3JlZjIkY29tcG9uZW50IiwiZm9yd2FyZFJlZlNoaW0kMSIsImZvcndhcmRSZWYkMSIsIk5hdkxpbmsiLCJfcmVmJGFyaWFDdXJyZW50IiwiYXJpYUN1cnJlbnQiLCJfcmVmJGFjdGl2ZUNsYXNzTmFtZSIsImFjdGl2ZUNsYXNzTmFtZSIsImFjdGl2ZVN0eWxlIiwiY2xhc3NOYW1lUHJvcCIsImNsYXNzTmFtZSIsImlzQWN0aXZlUHJvcCIsImxvY2F0aW9uUHJvcCIsInN0eWxlUHJvcCIsImVzY2FwZWRQYXRoIiwiY2xhc3NuYW1lcyIsImpvaW5DbGFzc25hbWVzIiwiZ2V0Q2hpbGRNYXBwaW5nIiwibWFwRm4iLCJtYXBwZXIiLCJnZXRQcm9wIiwiZ2V0TmV4dENoaWxkTWFwcGluZyIsInByZXZDaGlsZE1hcHBpbmciLCJvbkV4aXRlZCIsIm5leHRDaGlsZE1hcHBpbmciLCJwcmV2IiwiZ2V0VmFsdWVGb3JLZXkiLCJuZXh0S2V5c1BlbmRpbmciLCJwZW5kaW5nS2V5cyIsInByZXZLZXkiLCJjaGlsZE1hcHBpbmciLCJuZXh0S2V5IiwicGVuZGluZ05leHRLZXkiLCJtZXJnZUNoaWxkTWFwcGluZ3MiLCJoYXNQcmV2IiwiaGFzTmV4dCIsInByZXZDaGlsZCIsImlzTGVhdmluZyIsImluIiwiZXhpdCIsImVudGVyIiwiVHJhbnNpdGlvbkdyb3VwIiwiaGFuZGxlRXhpdGVkIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsImNvbnRleHRWYWx1ZSIsImlzTW91bnRpbmciLCJmaXJzdFJlbmRlciIsIm1vdW50ZWQiLCJhcHBlYXIiLCJjdXJyZW50Q2hpbGRNYXBwaW5nIiwiY2hpbGRGYWN0b3J5IiwiVHJhbnNpdGlvbkdyb3VwQ29udGV4dCIsInJlcGxhY2VDbGFzc05hbWUiLCJvcmlnQ2xhc3MiLCJjbGFzc1RvUmVtb3ZlIiwiVU5NT1VOVEVEIiwiRVhJVEVEIiwiRU5URVJJTkciLCJFTlRFUkVEIiwiRVhJVElORyIsIlRyYW5zaXRpb24iLCJpbml0aWFsU3RhdHVzIiwiYXBwZWFyU3RhdHVzIiwidW5tb3VudE9uRXhpdCIsIm1vdW50T25FbnRlciIsInN0YXR1cyIsIm5leHRDYWxsYmFjayIsInByZXZTdGF0ZSIsInVwZGF0ZVN0YXR1cyIsInByZXZQcm9wcyIsIm5leHRTdGF0dXMiLCJjYW5jZWxOZXh0Q2FsbGJhY2siLCJnZXRUaW1lb3V0cyIsInRpbWVvdXQiLCJtb3VudGluZyIsInBlcmZvcm1FbnRlciIsInBlcmZvcm1FeGl0IiwiYXBwZWFyaW5nIiwibm9kZVJlZiIsIm1heWJlTm9kZSIsIm1heWJlQXBwZWFyaW5nIiwidGltZW91dHMiLCJlbnRlclRpbWVvdXQiLCJvbkVudGVyIiwic2FmZVNldFN0YXRlIiwib25FbnRlcmluZyIsIm9uVHJhbnNpdGlvbkVuZCIsIm9uRW50ZXJlZCIsIl90aGlzMyIsIm9uRXhpdCIsIm9uRXhpdGluZyIsImNhbmNlbCIsInNldE5leHRDYWxsYmFjayIsIl90aGlzNCIsImFjdGl2ZSIsImRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIiLCJhZGRFbmRMaXN0ZW5lciIsIl9yZWYzIiwibWF5YmVOZXh0Q2FsbGJhY2siLCJjaGlsZFByb3BzIiwicmVtb3ZlQ2xhc3MiLCJjbGFzc2VzIiwiY2xhc3NMaXN0IiwiYmFzZVZhbCIsIkNTU1RyYW5zaXRpb24iLCJhcHBsaWVkQ2xhc3NlcyIsIl90aGlzJHJlc29sdmVBcmd1bWVudCIsInJlc29sdmVBcmd1bWVudHMiLCJyZW1vdmVDbGFzc2VzIiwiYWRkQ2xhc3MiLCJfdGhpcyRyZXNvbHZlQXJndW1lbnQyIiwiX3RoaXMkcmVzb2x2ZUFyZ3VtZW50MyIsImdldENsYXNzTmFtZXMiLCJjbGFzc05hbWVzIiwiaXNTdHJpbmdDbGFzc05hbWVzIiwiYmFzZUNsYXNzTmFtZSIsImRvbmVDbGFzc05hbWUiLCJwaGFzZSIsImhhc0NsYXNzIiwiX2FkZENsYXNzIiwiX3RoaXMkYXBwbGllZENsYXNzZXMkIiwiUmVhY3QiLCJUcmFuc2l0aW9uUm91dGUiLCJQYWdlQ29tcG9uZW50Iiwic3R5bGVzIiwiZXh0ZW5kU3RhdGljcyIsInNldFByb3RvdHlwZU9mIiwiX19leHRlbmRzIiwiX18iLCJpc0Z1bmN0aW9uIiwiX2VuYWJsZV9zdXBlcl9ncm9zc19tb2RlX3RoYXRfd2lsbF9jYXVzZV9iYWRfdGhpbmdzIiwiUHJvbWlzZSIsImhvc3RSZXBvcnRFcnJvciIsImVtcHR5IiwiY2xvc2VkIiwiY29tcGxldGUiLCJpc09iamVjdCIsIlVuc3Vic2NyaXB0aW9uRXJyb3IiLCJVbnN1YnNjcmlwdGlvbkVycm9ySW1wbCIsImVycm9ycyIsIlN1YnNjcmlwdGlvbiIsInVuc3Vic2NyaWJlIiwiX3BhcmVudE9yUGFyZW50cyIsIl9zdWJzY3JpcHRpb25zIiwiX2N0b3JVbnN1YnNjcmliZSIsIl91bnN1YnNjcmliZSIsIl9hIiwiZmxhdHRlblVuc3Vic2NyaXB0aW9uRXJyb3JzIiwic3ViIiwidGVhcmRvd24iLCJzdWJzY3JpcHRpb24iLCJFTVBUWSIsInRtcCIsInN1YnNjcmlwdGlvbnMiLCJzdWJzY3JpcHRpb25JbmRleCIsImVycnMiLCJyeFN1YnNjcmliZXIiLCJTdWJzY3JpYmVyIiwiX3N1cGVyIiwiZGVzdGluYXRpb25Pck5leHQiLCJzeW5jRXJyb3JWYWx1ZSIsInN5bmNFcnJvclRocm93biIsInN5bmNFcnJvclRocm93YWJsZSIsImlzU3RvcHBlZCIsImRlc3RpbmF0aW9uIiwiU2FmZVN1YnNjcmliZXIiLCJzdWJzY3JpYmVyIiwiX25leHQiLCJfZXJyb3IiLCJfY29tcGxldGUiLCJfdW5zdWJzY3JpYmVBbmRSZWN5Y2xlIiwiX3BhcmVudFN1YnNjcmliZXIiLCJvYnNlcnZlck9yTmV4dCIsIl9fdHJ5T3JTZXRFcnJvciIsIl9fdHJ5T3JVbnN1YiIsInVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmciLCJ3cmFwcGVkQ29tcGxldGUiLCJwYXJlbnQiLCJvYnNlcnZhYmxlIiwiaWRlbnRpdHkiLCJwaXBlRnJvbUFycmF5IiwiZm5zIiwiT2JzZXJ2YWJsZSIsIl9pc1NjYWxhciIsIl9zdWJzY3JpYmUiLCJsaWZ0Iiwib3BlcmF0b3IiLCJzaW5rIiwibmV4dE9yT2JzZXJ2ZXIiLCJ0b1N1YnNjcmliZXIiLCJfdHJ5U3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJjbG9zZWRfMSIsImNhblJlcG9ydEVycm9yIiwid2FybiIsInByb21pc2VDdG9yIiwiZ2V0UHJvbWlzZUN0b3IiLCJyZXNvbHZlIiwicmVqZWN0IiwicGlwZSIsIm9wZXJhdGlvbnMiLCJ0b1Byb21pc2UiLCJnZXRTeW1ib2xJdGVyYXRvciIsImlzQXJyYXlMaWtlIiwiaXNQcm9taXNlIiwic2NoZWR1bGVyIiwiaXNJbnRlcm9wT2JzZXJ2YWJsZSIsInNjaGVkdWxlIiwic2NoZWR1bGVPYnNlcnZhYmxlIiwic2NoZWR1bGVQcm9taXNlIiwic2NoZWR1bGVBcnJheSIsImlzSXRlcmFibGUiLCJzY2hlZHVsZUl0ZXJhYmxlIiwic2NoZWR1bGVkIiwib2JzIiwicHJvbWlzZSIsIml0ZXJhYmxlIiwic3Vic2NyaWJlVG8iLCJIZWFydCIsInJhdGluZyIsImZvbnRTaXplIiwiZ29vZERhdGEiLCJjYWtlIiwiY29tbWVudCIsImltYWdlVXJsIiwiQ2FrZUxpc3RDb21wb25lbnQiLCJjYWtlcyIsImxvYWRlZCIsImFkZENha2UiLCJoYW5kbGVJbWFnZUNsaWNrIiwiY2FrZXNTZXJ2aWNlIiwiZ2V0Q2FrZUxpc3QiLCJnZXRBdHRyaWJ1dGUiLCJzcmMiLCJ5dW1GYWN0b3IiLCJjdXJyZW50SWQiLCJpbWFnZXMiLCJBZGRDYWtlQ29tcG9uZW50IiwiaGFuZGxlTmFtZUNoYW5nZSIsImhhbmRsZUNvbW1lbnRDaGFuZ2UiLCJoYW5kbGVPcHRpb25DaGFuZ2UiLCJvblN1Ym1pdCIsIm9uQ2hhbmdlIiwiaW1hZ2UiLCJDYWtlRGV0YWlsQ29tcG9uZW50IiwiZ2V0Q2FrZURldGFpbCIsImZldGNoIiwicmVzcG9uc2UiLCJqc29uIiwibWV0aG9kIiwiQXBwIiwiSG9tZUNvbXBvbmVudCIsInNlcnZpY2VXb3JrZXIiLCJyZWdpc3RlciIsInJlZ2lzdHJhdGlvbiIsInJlZ2lzdHJhdGlvbkVycm9yIiwiUmVhY3RET00iLCJnZXRFbGVtZW50QnlJZCJdLCJtYXBwaW5ncyI6Ijt1RkFHSUEsRSxNQUEwQixHQUE0QixLQUUxREEsRUFBd0JDLEtBQUssQ0FBQ0MsRUFBT0MsR0FBSSxxM0JBQXMzQixHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyx3Q0FBd0MsTUFBUSxHQUFHLFNBQVcsbVpBQW1aLGVBQWlCLENBQUMsb3ZCQUFvdkIsV0FBYSxNQUU5cEVILEVBQXdCSSxPQUFTLENBQ2hDLFVBQWEsMEJBQ2IsZUFBa0IsMEJBQ2xCLE9BQVUsMEJBQ1YsWUFBZSwwQkFDZixnQkFBbUIsMEJBQ25CLE1BQVMsMEJBQ1QsTUFBUywwQkFDVCxtQkFBc0IsMkJBRXZCLFcsMEVDZElKLEUsTUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCQyxLQUFLLENBQUNDLEVBQU9DLEdBQUksOFRBQStULEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLG1DQUFtQyxNQUFRLEdBQUcsU0FBVyxzS0FBc0ssZUFBaUIsQ0FBQywwVEFBMFQsV0FBYSxNQUUzN0JILEVBQXdCSSxPQUFTLENBQ2hDLFVBQWEsMkJBRWQsVywwRUNQSUosRSxNQUEwQixHQUE0QixLQUUxREEsRUFBd0JDLEtBQUssQ0FBQ0MsRUFBT0MsR0FBSSx3N0JBQXk3QixHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyx5QkFBeUIsTUFBUSxHQUFHLFNBQVcsaWJBQWliLGVBQWlCLENBQUMsOGlDQUE4aUMsV0FBYSxNQUUxaUYsVyx5RUNKSUgsRSxNQUEwQixHQUE0QixLQUUxREEsRUFBd0JDLEtBQUssQ0FBQ0MsRUFBT0MsR0FBSSxrVkFBbVYsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMsMkNBQTJDLE1BQVEsR0FBRyxTQUFXLHdKQUF3SixlQUFpQixDQUFDLG9SQUFvUixXQUFhLE1BRW42QkgsRUFBd0JJLE9BQVMsQ0FDaEMsVUFBYSwwQkFDYixPQUFVLDBCQUNWLFFBQVcsd0JBQ1gsTUFBUywyQkFFVixXLDBFQ1ZJSixFLE1BQTBCLEdBQTRCLEtBRTFEQSxFQUF3QkMsS0FBSyxDQUFDQyxFQUFPQyxHQUFJLDgyQkFBKzJCLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLHlDQUF5QyxNQUFRLEdBQUcsU0FBVyx3YkFBd2IsZUFBaUIsQ0FBQyx1dUJBQXV1QixXQUFhLE1BRWhyRUgsRUFBd0JJLE9BQVMsQ0FDaEMsVUFBYSx3QkFDYixPQUFVLDBCQUNWLGNBQWlCLDBCQUNqQixNQUFTLDBCQUNULEtBQVEsMEJBQ1IsS0FBUSx3QkFDUixRQUFXLDBCQUNYLGVBQWtCLDBCQUNsQixNQUFTLDJCQUVWLFcsMEVDZklKLEUsTUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCQyxLQUFLLENBQUNDLEVBQU9DLEdBQUkscWJBQXNiLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLG9DQUFvQyxNQUFRLEdBQUcsU0FBVyxzTEFBc0wsZUFBaUIsQ0FBQyxzV0FBc1csV0FBYSxNQUUvbUNILEVBQXdCSSxPQUFTLENBQ2hDLFVBQWEsMEJBQ2IsZUFBa0IsMEJBQ2xCLEtBQVEsMkJBRVQsVywwRUNUSUosRSxNQUEwQixHQUE0QixLQUUxREEsRUFBd0JDLEtBQUssQ0FBQ0MsRUFBT0MsR0FBSSwrdENBQWd1QyxHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQywyQkFBMkIsTUFBUSxHQUFHLFNBQVcsc1RBQXNULGVBQWlCLENBQUMsZ3VDQUFndUMsV0FBYSxNQUUxNEYsVywwRUNKSUgsRSxNQUEwQixHQUE0QixLQUUxREEsRUFBd0JDLEtBQUssQ0FBQ0MsRUFBT0MsR0FBSSx3QkFBeUIsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMsMkJBQTJCLE1BQVEsR0FBRyxTQUFXLGNBQWMsZUFBaUIsQ0FBQyx5QkFBeUIsV0FBYSxNQUVwTixXLDBFQ0pJSCxFLE1BQTBCLEdBQTRCLEtBRTFEQSxFQUF3QkMsS0FBSyxDQUFDQyxFQUFPQyxHQUFJLGtDQUFtQyxHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyxzQ0FBc0MsTUFBUSxHQUFHLFNBQVcsWUFBWSxlQUFpQixDQUFDLHFCQUFxQixXQUFhLE1BRW5PSCxFQUF3QkksT0FBUyxDQUNoQyxVQUFhLDJCQUVkLFcseUVDUElKLEUsTUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCQyxLQUFLLENBQUNDLEVBQU9DLEdBQUksazFCQUFtMUIsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMsMENBQTBDLE1BQVEsR0FBRyxTQUFXLCtZQUErWSxlQUFpQixDQUFDLG90QkFBb3RCLFdBQWEsTUFFemxFSCxFQUF3QkksT0FBUyxDQUNoQyxVQUFhLHdCQUNiLGVBQWtCLHlCQUNsQixPQUFVLDBCQUNWLE1BQVMsMkJBRVYsVyxxQkNMQUYsRUFBT0csUUFBVSxTQUFVQyxHQUN6QixJQUFJQyxFQUFPLEdBdURYLE9BckRBQSxFQUFLQyxTQUFXLFdBQ2QsT0FBT0MsS0FBS0MsS0FBSSxTQUFVQyxHQUN4QixJQUFJQyxFQUFVTixFQUF1QkssR0FFckMsT0FBSUEsRUFBSyxHQUNBLFVBQVVFLE9BQU9GLEVBQUssR0FBSSxNQUFNRSxPQUFPRCxFQUFTLEtBR2xEQSxLQUNORSxLQUFLLEtBS1ZQLEVBQUtRLEVBQUksU0FBVUMsRUFBU0MsRUFBWUMsR0FDZixpQkFBWkYsSUFFVEEsRUFBVSxDQUFDLENBQUMsS0FBTUEsRUFBUyxNQUc3QixJQUFJRyxFQUF5QixHQUU3QixHQUFJRCxFQUNGLElBQUssSUFBSUgsRUFBSSxFQUFHQSxFQUFJTixLQUFLVyxPQUFRTCxJQUFLLENBRXBDLElBQUlaLEVBQUtNLEtBQUtNLEdBQUcsR0FFUCxNQUFOWixJQUNGZ0IsRUFBdUJoQixJQUFNLEdBS25DLElBQUssSUFBSWtCLEVBQUssRUFBR0EsRUFBS0wsRUFBUUksT0FBUUMsSUFBTSxDQUMxQyxJQUFJVixFQUFPLEdBQUdFLE9BQU9HLEVBQVFLLElBRXpCSCxHQUFVQyxFQUF1QlIsRUFBSyxNQUt0Q00sSUFDR04sRUFBSyxHQUdSQSxFQUFLLEdBQUssR0FBR0UsT0FBT0ksRUFBWSxTQUFTSixPQUFPRixFQUFLLElBRnJEQSxFQUFLLEdBQUtNLEdBTWRWLEVBQUtOLEtBQUtVLE1BSVBKLEksb0JDeERULFNBQVNlLEVBQWtCQyxFQUFLQyxJQUFrQixNQUFQQSxHQUFlQSxFQUFNRCxFQUFJSCxVQUFRSSxFQUFNRCxFQUFJSCxRQUFRLElBQUssSUFBSUwsRUFBSSxFQUFHVSxFQUFPLElBQUlDLE1BQU1GLEdBQU1ULEVBQUlTLEVBQUtULElBQU9VLEVBQUtWLEdBQUtRLEVBQUlSLEdBQU0sT0FBT1UsRUFNaEx2QixFQUFPRyxRQUFVLFNBQWdDTSxHQUMvQyxJQWJzQlksRUFBS1IsRUFhdkJZLEdBYnVCWixFQWFNLEVBSG5DLFNBQXlCUSxHQUFPLEdBQUlHLE1BQU1FLFFBQVFMLEdBQU0sT0FBT0EsRUFWdEJNLENBQWpCTixFQWFLWixJQUw3QixTQUErQlksRUFBS1IsR0FBSyxHQUFzQixvQkFBWGUsUUFBNEJBLE9BQU9DLFlBQVlDLE9BQU9ULEdBQWpFLENBQWdGLElBQUlVLEVBQU8sR0FBUUMsR0FBSyxFQUFVQyxHQUFLLEVBQVdDLE9BQUtDLEVBQVcsSUFBTSxJQUFLLElBQWlDQyxFQUE3QmpCLEVBQUtFLEVBQUlPLE9BQU9DLGNBQW1CRyxHQUFNSSxFQUFLakIsRUFBR2tCLFFBQVFDLFFBQW9CUCxFQUFLaEMsS0FBS3FDLEVBQUdHLFFBQVkxQixHQUFLa0IsRUFBS2IsU0FBV0wsR0FBM0RtQixHQUFLLElBQW9FLE1BQU9RLEdBQU9QLEdBQUssRUFBTUMsRUFBS00sRUFBTyxRQUFVLElBQVdSLEdBQXNCLE1BQWhCYixFQUFXLFFBQVdBLEVBQVcsU0FBTyxRQUFVLEdBQUljLEVBQUksTUFBTUMsR0FBUSxPQUFPSCxHQVJqYVUsQ0FBc0JwQixFQUFLUixJQUk1RixTQUFxQzZCLEVBQUdDLEdBQVUsR0FBS0QsRUFBTCxDQUFnQixHQUFpQixpQkFBTkEsRUFBZ0IsT0FBT3RCLEVBQWtCc0IsRUFBR0MsR0FBUyxJQUFJQyxFQUFJZCxPQUFPZSxVQUFVdkMsU0FBU3dDLEtBQUtKLEdBQUdLLE1BQU0sR0FBSSxHQUFpRSxNQUFuRCxXQUFOSCxHQUFrQkYsRUFBRU0sY0FBYUosRUFBSUYsRUFBRU0sWUFBWUMsTUFBZ0IsUUFBTkwsR0FBcUIsUUFBTkEsRUFBb0JwQixNQUFNMEIsS0FBS1IsR0FBYyxjQUFORSxHQUFxQiwyQ0FBMkNPLEtBQUtQLEdBQVd4QixFQUFrQnNCLEVBQUdDLFFBQXpHLEdBSjNNUyxDQUE0Qi9CLEVBQUtSLElBRW5JLFdBQThCLE1BQU0sSUFBSXdDLFVBQVUsNklBRnVGQyxJQWNuSTVDLEVBQVVlLEVBQU0sR0FDaEI4QixFQUFhOUIsRUFBTSxHQUV2QixHQUFvQixtQkFBVCtCLEtBQXFCLENBRTlCLElBQUlDLEVBQVNELEtBQUtFLFNBQVNDLG1CQUFtQkMsS0FBS0MsVUFBVU4sTUFDekRPLEVBQU8sK0RBQStEbkQsT0FBTzhDLEdBQzdFTSxFQUFnQixPQUFPcEQsT0FBT21ELEVBQU0sT0FDcENFLEVBQWFULEVBQVdVLFFBQVF6RCxLQUFJLFNBQVUwRCxHQUNoRCxNQUFPLGlCQUFpQnZELE9BQU80QyxFQUFXWSxZQUFjLElBQUl4RCxPQUFPdUQsRUFBUSxVQUU3RSxNQUFPLENBQUN4RCxHQUFTQyxPQUFPcUQsR0FBWXJELE9BQU8sQ0FBQ29ELElBQWdCbkQsS0FBSyxNQUduRSxNQUFPLENBQUNGLEdBQVNFLEtBQUssUSwyQkM1QnhCLElBQUl3RCxFQUFVLEVBQVEsS0FNbEJDLEVBQWdCLENBQ2xCQyxtQkFBbUIsRUFDbkJDLGFBQWEsRUFDYkMsY0FBYyxFQUNkQyxjQUFjLEVBQ2RDLGFBQWEsRUFDYkMsaUJBQWlCLEVBQ2pCQywwQkFBMEIsRUFDMUJDLDBCQUEwQixFQUMxQkMsUUFBUSxFQUNSQyxXQUFXLEVBQ1hDLE1BQU0sR0FFSkMsRUFBZ0IsQ0FDbEJoQyxNQUFNLEVBQ04vQixRQUFRLEVBQ1IyQixXQUFXLEVBQ1hxQyxRQUFRLEVBQ1JDLFFBQVEsRUFDUkMsV0FBVyxFQUNYQyxPQUFPLEdBU0xDLEVBQWUsQ0FDakIsVUFBWSxFQUNaQyxTQUFTLEVBQ1RkLGNBQWMsRUFDZEMsYUFBYSxFQUNiSyxXQUFXLEVBQ1hDLE1BQU0sR0FFSlEsRUFBZSxHQUluQixTQUFTQyxFQUFXQyxHQUVsQixPQUFJdEIsRUFBUXVCLE9BQU9ELEdBQ1ZKLEVBSUZFLEVBQWFFLEVBQW9CLFdBQU1yQixFQVZoRG1CLEVBQWFwQixFQUFRd0IsWUFoQkssQ0FDeEIsVUFBWSxFQUNaQyxRQUFRLEVBQ1JwQixjQUFjLEVBQ2RDLGFBQWEsRUFDYkssV0FBVyxHQVliUyxFQUFhcEIsRUFBUTBCLE1BQVFSLEVBWTdCLElBQUlTLEVBQWlCakUsT0FBT2lFLGVBQ3hCQyxFQUFzQmxFLE9BQU9rRSxvQkFDN0JDLEVBQXdCbkUsT0FBT21FLHNCQUMvQkMsRUFBMkJwRSxPQUFPb0UseUJBQ2xDQyxFQUFpQnJFLE9BQU9xRSxlQUN4QkMsRUFBa0J0RSxPQUFPZSxVQXNDN0I3QyxFQUFPRyxRQXJDUCxTQUFTa0csRUFBcUJDLEVBQWlCQyxFQUFpQkMsR0FDOUQsR0FBK0IsaUJBQXBCRCxFQUE4QixDQUV2QyxHQUFJSCxFQUFpQixDQUNuQixJQUFJSyxFQUFxQk4sRUFBZUksR0FFcENFLEdBQXNCQSxJQUF1QkwsR0FDL0NDLEVBQXFCQyxFQUFpQkcsRUFBb0JELEdBSTlELElBQUlFLEVBQU9WLEVBQW9CTyxHQUUzQk4sSUFDRlMsRUFBT0EsRUFBSy9GLE9BQU9zRixFQUFzQk0sS0FNM0MsSUFIQSxJQUFJSSxFQUFnQmxCLEVBQVdhLEdBQzNCTSxFQUFnQm5CLEVBQVdjLEdBRXRCMUYsRUFBSSxFQUFHQSxFQUFJNkYsRUFBS3hGLFNBQVVMLEVBQUcsQ0FDcEMsSUFBSWdHLEVBQU1ILEVBQUs3RixHQUVmLEtBQUtvRSxFQUFjNEIsSUFBVUwsR0FBYUEsRUFBVUssSUFBV0QsR0FBaUJBLEVBQWNDLElBQVdGLEdBQWlCQSxFQUFjRSxJQUFPLENBQzdJLElBQUlDLEVBQWFaLEVBQXlCSyxFQUFpQk0sR0FFM0QsSUFFRWQsRUFBZU8sRUFBaUJPLEVBQUtDLEdBQ3JDLE1BQU9DLE9BS2YsT0FBT1QsSSxxQkMzRlQsSUFBSUwsRUFBd0JuRSxPQUFPbUUsc0JBQy9CZSxFQUFpQmxGLE9BQU9lLFVBQVVtRSxlQUNsQ0MsRUFBbUJuRixPQUFPZSxVQUFVcUUscUJBRXhDLFNBQVNDLEVBQVNDLEdBQ2pCLEdBQUlBLFFBQ0gsTUFBTSxJQUFJL0QsVUFBVSx5REFHckIsT0FBT3ZCLE9BQU9zRixHQStDZnBILEVBQU9HLFFBNUNQLFdBQ0MsSUFDQyxJQUFLMkIsT0FBT3VGLE9BQ1gsT0FBTyxFQU1SLElBQUlDLEVBQVEsSUFBSUMsT0FBTyxPQUV2QixHQURBRCxFQUFNLEdBQUssS0FDa0MsTUFBekN4RixPQUFPa0Usb0JBQW9Cc0IsR0FBTyxHQUNyQyxPQUFPLEVBS1IsSUFEQSxJQUFJRSxFQUFRLEdBQ0gzRyxFQUFJLEVBQUdBLEVBQUksR0FBSUEsSUFDdkIyRyxFQUFNLElBQU1ELE9BQU9FLGFBQWE1RyxJQUFNQSxFQUt2QyxHQUF3QixlQUhYaUIsT0FBT2tFLG9CQUFvQndCLEdBQU9oSCxLQUFJLFNBQVVvQyxHQUM1RCxPQUFPNEUsRUFBTTVFLE1BRUhoQyxLQUFLLElBQ2YsT0FBTyxFQUlSLElBQUk4RyxFQUFRLEdBSVosTUFIQSx1QkFBdUJDLE1BQU0sSUFBSUMsU0FBUSxTQUFVQyxHQUNsREgsRUFBTUcsR0FBVUEsS0FHZix5QkFERS9GLE9BQU80RSxLQUFLNUUsT0FBT3VGLE9BQU8sR0FBSUssSUFBUTlHLEtBQUssSUFNOUMsTUFBTzRCLEdBRVIsT0FBTyxHQUlRc0YsR0FBb0JoRyxPQUFPdUYsT0FBUyxTQUFVVSxFQUFRN0QsR0FLdEUsSUFKQSxJQUFJaEIsRUFFQThFLEVBREFDLEVBQUtkLEVBQVNZLEdBR1RHLEVBQUksRUFBR0EsRUFBSTlDLFVBQVVsRSxPQUFRZ0gsSUFBSyxDQUcxQyxJQUFLLElBQUlyQixLQUZUM0QsRUFBT3BCLE9BQU9zRCxVQUFVOEMsSUFHbkJsQixFQUFlbEUsS0FBS0ksRUFBTTJELEtBQzdCb0IsRUFBR3BCLEdBQU8zRCxFQUFLMkQsSUFJakIsR0FBSVosRUFBdUIsQ0FDMUIrQixFQUFVL0IsRUFBc0IvQyxHQUNoQyxJQUFLLElBQUlyQyxFQUFJLEVBQUdBLEVBQUltSCxFQUFROUcsT0FBUUwsSUFDL0JvRyxFQUFpQm5FLEtBQUtJLEVBQU04RSxFQUFRbkgsTUFDdkNvSCxFQUFHRCxFQUFRbkgsSUFBTXFDLEVBQUs4RSxFQUFRbkgsTUFNbEMsT0FBT29ILEksY0N4RlIsSUFBSUUsRUFBVSxFQUFRLEtBS3RCbkksRUFBT0csUUFtWlAsU0FBU2lJLEVBQWNDLEVBQU0zQixFQUFNNEIsR0FRakMsT0FQS0gsRUFBUXpCLEtBQ1g0QixFQUFrQzVCLEdBQVE0QixFQUMxQzVCLEVBQU8sSUFHVDRCLEVBQVVBLEdBQVcsR0FFakJELGFBQWdCRSxPQWxKdEIsU0FBeUJGLEVBQU0zQixHQUU3QixJQUFJOEIsRUFBU0gsRUFBS25FLE9BQU91RSxNQUFNLGFBRS9CLEdBQUlELEVBQ0YsSUFBSyxJQUFJM0gsRUFBSSxFQUFHQSxFQUFJMkgsRUFBT3RILE9BQVFMLElBQ2pDNkYsRUFBSzNHLEtBQUssQ0FDUmtELEtBQU1wQyxFQUNONkgsT0FBUSxLQUNSQyxVQUFXLEtBQ1hDLFVBQVUsRUFDVkMsUUFBUSxFQUNSQyxTQUFTLEVBQ1RDLFVBQVUsRUFDVkMsUUFBUyxPQUtmLE9BQU9DLEVBQVdaLEVBQU0zQixHQWdJZndDLENBQWViLEVBQTRCLEdBR2hERixFQUFRRSxHQXhIZCxTQUF3QkEsRUFBTTNCLEVBQU00QixHQUdsQyxJQUZBLElBQUlhLEVBQVEsR0FFSHRJLEVBQUksRUFBR0EsRUFBSXdILEVBQUtuSCxPQUFRTCxJQUMvQnNJLEVBQU1wSixLQUFLcUksRUFBYUMsRUFBS3hILEdBQUk2RixFQUFNNEIsR0FBU3BFLFFBS2xELE9BQU8rRSxFQUZNLElBQUlWLE9BQU8sTUFBUVksRUFBTXZJLEtBQUssS0FBTyxJQUFLd0ksRUFBTWQsSUFFbkM1QixHQWdIakIyQyxDQUFvQyxFQUE4QixFQUFRZixHQXJHckYsU0FBeUJELEVBQU0zQixFQUFNNEIsR0FDbkMsT0FBT2dCLEVBQWVDLEVBQU1sQixFQUFNQyxHQUFVNUIsRUFBTTRCLEdBdUczQ2tCLENBQXFDLEVBQThCLEVBQVFsQixJQWxhcEZ0SSxFQUFPRyxRQUFRb0osTUFBUUEsRUFDdkJ2SixFQUFPRyxRQUFRc0osUUFzR2YsU0FBa0JDLEVBQUtwQixHQUNyQixPQUFPcUIsRUFBaUJKLEVBQU1HLEVBQUtwQixHQUFVQSxJQXRHL0N0SSxFQUFPRyxRQUFRd0osaUJBQW1CQSxFQUNsQzNKLEVBQU9HLFFBQVFtSixlQUFpQkEsRUFPaEMsSUFBSU0sRUFBYyxJQUFJckIsT0FBTyxDQUczQixVQU9BLDBHQUNBM0gsS0FBSyxLQUFNLEtBU2IsU0FBUzJJLEVBQU9HLEVBQUtwQixHQVFuQixJQVBBLElBS0l1QixFQUxBQyxFQUFTLEdBQ1RqRCxFQUFNLEVBQ05rRCxFQUFRLEVBQ1IxQixFQUFPLEdBQ1AyQixFQUFtQjFCLEdBQVdBLEVBQVFLLFdBQWEsSUFHZixPQUFoQ2tCLEVBQU1ELEVBQVlLLEtBQUtQLEtBQWUsQ0FDNUMsSUFBSVEsRUFBSUwsRUFBSSxHQUNSTSxFQUFVTixFQUFJLEdBQ2RPLEVBQVNQLEVBQUlFLE1BS2pCLEdBSkExQixHQUFRcUIsRUFBSTNHLE1BQU1nSCxFQUFPSyxHQUN6QkwsRUFBUUssRUFBU0YsRUFBRWhKLE9BR2ZpSixFQUNGOUIsR0FBUThCLEVBQVEsT0FEbEIsQ0FLQSxJQUFJOUgsRUFBT3FILEVBQUlLLEdBQ1hyQixFQUFTbUIsRUFBSSxHQUNiNUcsRUFBTzRHLEVBQUksR0FDWFEsRUFBVVIsRUFBSSxHQUNkUyxFQUFRVCxFQUFJLEdBQ1pVLEVBQVdWLEVBQUksR0FDZmQsRUFBV2MsRUFBSSxHQUdmeEIsSUFDRnlCLEVBQU8vSixLQUFLc0ksR0FDWkEsRUFBTyxJQUdULElBQUlTLEVBQW9CLE1BQVZKLEdBQTBCLE1BQVJyRyxHQUFnQkEsSUFBU3FHLEVBQ3JERyxFQUFzQixNQUFiMEIsR0FBaUMsTUFBYkEsRUFDN0IzQixFQUF3QixNQUFiMkIsR0FBaUMsTUFBYkEsRUFDL0I1QixFQUFZa0IsRUFBSSxJQUFNRyxFQUN0QmhCLEVBQVVxQixHQUFXQyxFQUV6QlIsRUFBTy9KLEtBQUssQ0FDVmtELEtBQU1BLEdBQVE0RCxJQUNkNkIsT0FBUUEsR0FBVSxHQUNsQkMsVUFBV0EsRUFDWEMsU0FBVUEsRUFDVkMsT0FBUUEsRUFDUkMsUUFBU0EsRUFDVEMsV0FBWUEsRUFDWkMsUUFBU0EsRUFBVXdCLEVBQVl4QixHQUFZRCxFQUFXLEtBQU8sS0FBTzBCLEVBQWE5QixHQUFhLFNBY2xHLE9BVElvQixFQUFRTCxFQUFJeEksU0FDZG1ILEdBQVFxQixFQUFJZ0IsT0FBT1gsSUFJakIxQixHQUNGeUIsRUFBTy9KLEtBQUtzSSxHQUdQeUIsRUFvQlQsU0FBU2EsRUFBMEJqQixHQUNqQyxPQUFPa0IsVUFBVWxCLEdBQUttQixRQUFRLFdBQVcsU0FBVUMsR0FDakQsTUFBTyxJQUFNQSxFQUFFQyxXQUFXLEdBQUd6SyxTQUFTLElBQUkwSyxpQkFtQjlDLFNBQVNyQixFQUFrQkcsRUFBUXhCLEdBS2pDLElBSEEsSUFBSTJDLEVBQVUsSUFBSXpKLE1BQU1zSSxFQUFPNUksUUFHdEJMLEVBQUksRUFBR0EsRUFBSWlKLEVBQU81SSxPQUFRTCxJQUNSLGlCQUFkaUosRUFBT2pKLEtBQ2hCb0ssRUFBUXBLLEdBQUssSUFBSTBILE9BQU8sT0FBU3VCLEVBQU9qSixHQUFHbUksUUFBVSxLQUFNSSxFQUFNZCxLQUlyRSxPQUFPLFNBQVU0QyxFQUFLQyxHQU1wQixJQUxBLElBQUk5QyxFQUFPLEdBQ1B2RSxFQUFPb0gsR0FBTyxHQUVkRSxHQURVRCxHQUFRLElBQ0RFLE9BQVNWLEVBQTJCaEgsbUJBRWhEOUMsRUFBSSxFQUFHQSxFQUFJaUosRUFBTzVJLE9BQVFMLElBQUssQ0FDdEMsSUFBSXlLLEVBQVF4QixFQUFPakosR0FFbkIsR0FBcUIsaUJBQVZ5SyxFQUFYLENBTUEsSUFDSUMsRUFEQWhKLEVBQVF1QixFQUFLd0gsRUFBTXJJLE1BR3ZCLEdBQWEsTUFBVFYsRUFBZSxDQUNqQixHQUFJK0ksRUFBTTFDLFNBQVUsQ0FFZDBDLEVBQU14QyxVQUNSVCxHQUFRaUQsRUFBTTVDLFFBR2hCLFNBRUEsTUFBTSxJQUFJckYsVUFBVSxhQUFlaUksRUFBTXJJLEtBQU8sbUJBSXBELEdBQUlrRixFQUFRNUYsR0FBWixDQUNFLElBQUsrSSxFQUFNekMsT0FDVCxNQUFNLElBQUl4RixVQUFVLGFBQWVpSSxFQUFNckksS0FBTyxrQ0FBb0NXLEtBQUtDLFVBQVV0QixHQUFTLEtBRzlHLEdBQXFCLElBQWpCQSxFQUFNckIsT0FBYyxDQUN0QixHQUFJb0ssRUFBTTFDLFNBQ1IsU0FFQSxNQUFNLElBQUl2RixVQUFVLGFBQWVpSSxFQUFNckksS0FBTyxxQkFJcEQsSUFBSyxJQUFJdUksRUFBSSxFQUFHQSxFQUFJakosRUFBTXJCLE9BQVFzSyxJQUFLLENBR3JDLEdBRkFELEVBQVVILEVBQU83SSxFQUFNaUosS0FFbEJQLEVBQVFwSyxHQUFHc0MsS0FBS29JLEdBQ25CLE1BQU0sSUFBSWxJLFVBQVUsaUJBQW1CaUksRUFBTXJJLEtBQU8sZUFBaUJxSSxFQUFNdEMsUUFBVSxvQkFBc0JwRixLQUFLQyxVQUFVMEgsR0FBVyxLQUd2SWxELElBQWUsSUFBTm1ELEVBQVVGLEVBQU01QyxPQUFTNEMsRUFBTTNDLFdBQWE0QyxPQXBCekQsQ0E0QkEsR0FGQUEsRUFBVUQsRUFBTXZDLFNBNUViNkIsVUE0RXVDckksR0E1RXhCc0ksUUFBUSxTQUFTLFNBQVVDLEdBQy9DLE1BQU8sSUFBTUEsRUFBRUMsV0FBVyxHQUFHekssU0FBUyxJQUFJMEssaUJBMkVXSSxFQUFPN0ksSUFFckQwSSxFQUFRcEssR0FBR3NDLEtBQUtvSSxHQUNuQixNQUFNLElBQUlsSSxVQUFVLGFBQWVpSSxFQUFNckksS0FBTyxlQUFpQnFJLEVBQU10QyxRQUFVLG9CQUFzQnVDLEVBQVUsS0FHbkhsRCxHQUFRaUQsRUFBTTVDLE9BQVM2QyxRQXJEckJsRCxHQUFRaUQsRUF3RFosT0FBT2pELEdBVVgsU0FBU29DLEVBQWNmLEdBQ3JCLE9BQU9BLEVBQUltQixRQUFRLDZCQUE4QixRQVNuRCxTQUFTTCxFQUFhRixHQUNwQixPQUFPQSxFQUFNTyxRQUFRLGdCQUFpQixRQVV4QyxTQUFTNUIsRUFBWXdDLEVBQUkvRSxHQUV2QixPQURBK0UsRUFBRy9FLEtBQU9BLEVBQ0grRSxFQVNULFNBQVNyQyxFQUFPZCxHQUNkLE9BQU9BLEdBQVdBLEVBQVFvRCxVQUFZLEdBQUssSUF3RTdDLFNBQVNwQyxFQUFnQlEsRUFBUXBELEVBQU00QixHQUNoQ0gsRUFBUXpCLEtBQ1g0QixFQUFrQzVCLEdBQVE0QixFQUMxQzVCLEVBQU8sSUFVVCxJQUxBLElBQUlpRixHQUZKckQsRUFBVUEsR0FBVyxJQUVBcUQsT0FDakJDLEdBQXNCLElBQWhCdEQsRUFBUXNELElBQ2RDLEVBQVEsR0FHSGhMLEVBQUksRUFBR0EsRUFBSWlKLEVBQU81SSxPQUFRTCxJQUFLLENBQ3RDLElBQUl5SyxFQUFReEIsRUFBT2pKLEdBRW5CLEdBQXFCLGlCQUFWeUssRUFDVE8sR0FBU3BCLEVBQWFhLE9BQ2pCLENBQ0wsSUFBSTVDLEVBQVMrQixFQUFhYSxFQUFNNUMsUUFDNUIyQixFQUFVLE1BQVFpQixFQUFNdEMsUUFBVSxJQUV0Q3RDLEVBQUszRyxLQUFLdUwsR0FFTkEsRUFBTXpDLFNBQ1J3QixHQUFXLE1BQVEzQixFQUFTMkIsRUFBVSxNQWF4Q3dCLEdBTkl4QixFQUpBaUIsRUFBTTFDLFNBQ0gwQyxFQUFNeEMsUUFHQ0osRUFBUyxJQUFNMkIsRUFBVSxLQUZ6QixNQUFRM0IsRUFBUyxJQUFNMkIsRUFBVSxNQUtuQzNCLEVBQVMsSUFBTTJCLEVBQVUsS0FPekMsSUFBSTFCLEVBQVk4QixFQUFhbkMsRUFBUUssV0FBYSxLQUM5Q21ELEVBQW9CRCxFQUFNOUksT0FBTzRGLEVBQVV6SCxVQUFZeUgsRUFrQjNELE9BWktnRCxJQUNIRSxHQUFTQyxFQUFvQkQsRUFBTTlJLE1BQU0sR0FBSTRGLEVBQVV6SCxRQUFVMkssR0FBUyxNQUFRbEQsRUFBWSxXQUk5RmtELEdBREVELEVBQ08sSUFJQUQsR0FBVUcsRUFBb0IsR0FBSyxNQUFRbkQsRUFBWSxNQUczRE0sRUFBVyxJQUFJVixPQUFPLElBQU1zRCxFQUFPekMsRUFBTWQsSUFBVzVCLEssUUN6WTdEMUcsRUFBT0csUUFBVXFCLE1BQU1FLFNBQVcsU0FBVUwsR0FDMUMsTUFBOEMsa0JBQXZDUyxPQUFPZSxVQUFVdkMsU0FBU3dDLEtBQUt6QixLLDJCQ1F4QyxJQUFJMEssRUFBdUIsRUFBUSxLQUVuQyxTQUFTQyxLQUNULFNBQVNDLEtBQ1RBLEVBQXVCQyxrQkFBb0JGLEVBRTNDaE0sRUFBT0csUUFBVSxXQUNmLFNBQVNnTSxFQUFLQyxFQUFPQyxFQUFVQyxFQUFlQyxFQUFVQyxFQUFjQyxHQUNwRSxHQUFJQSxJQUFXVixFQUFmLENBSUEsSUFBSXZKLEVBQU0sSUFBSWtLLE1BQ1osbUxBS0YsTUFEQWxLLEVBQUlTLEtBQU8sc0JBQ0xULEdBR1IsU0FBU21LLElBQ1AsT0FBT1IsRUFGVEEsRUFBS1MsV0FBYVQsRUFNbEIsSUFBSVUsRUFBaUIsQ0FDbkJDLE1BQU9YLEVBQ1BZLEtBQU1aLEVBQ05hLEtBQU1iLEVBQ05jLE9BQVFkLEVBQ1JlLE9BQVFmLEVBQ1JnQixPQUFRaEIsRUFDUmlCLE9BQVFqQixFQUVSa0IsSUFBS2xCLEVBQ0xtQixRQUFTWCxFQUNUWSxRQUFTcEIsRUFDVHFCLFlBQWFyQixFQUNic0IsV0FBWWQsRUFDWmUsS0FBTXZCLEVBQ053QixTQUFVaEIsRUFDVmlCLE1BQU9qQixFQUNQa0IsVUFBV2xCLEVBQ1htQixNQUFPbkIsRUFDUG9CLE1BQU9wQixFQUVQcUIsZUFBZ0IvQixFQUNoQkMsa0JBQW1CRixHQUtyQixPQUZBYSxFQUFlb0IsVUFBWXBCLEVBRXBCQSxJLGNDN0NQN00sRUFBT0csUUFBVSxFQUFRLElBQVIsSSxxQkNObkJILEVBQU9HLFFBRm9CLGdELCtCQ0VWK04sRUFBRyxFQUFRLEtBQVNoRSxFQUFFLEVBQVEsS0FBaUJpRSxFQUFFLEVBQVEsS0FBYSxTQUFTQyxFQUFFQyxHQUFHLElBQUksSUFBSUMsRUFBRSx5REFBeURELEVBQUV2RCxFQUFFLEVBQUVBLEVBQUUxRixVQUFVbEUsT0FBTzRKLElBQUl3RCxHQUFHLFdBQVczSyxtQkFBbUJ5QixVQUFVMEYsSUFBSSxNQUFNLHlCQUF5QnVELEVBQUUsV0FBV0MsRUFBRSxpSEFBaUgsSUFBSUosRUFBRyxNQUFNeEIsTUFBTTBCLEVBQUUsTUFBTSxJQUFJRyxFQUFHLElBQUlDLElBQUlDLEVBQUcsR0FBRyxTQUFTQyxFQUFHTCxFQUFFQyxHQUFHSyxFQUFHTixFQUFFQyxHQUFHSyxFQUFHTixFQUFFLFVBQVVDLEdBQzNlLFNBQVNLLEVBQUdOLEVBQUVDLEdBQVcsSUFBUkcsRUFBR0osR0FBR0MsRUFBTUQsRUFBRSxFQUFFQSxFQUFFQyxFQUFFcE4sT0FBT21OLElBQUlFLEVBQUdLLElBQUlOLEVBQUVELElBQ3pELElBQUlRLElBQUssb0JBQXFCQyxhQUFRLElBQXFCQSxPQUFPQyxlQUFVLElBQXFCRCxPQUFPQyxTQUFTQyxlQUFlQyxFQUFHLDhWQUE4VkMsRUFBR3BOLE9BQU9lLFVBQVVtRSxlQUNyZm1JLEVBQUcsR0FBR0MsRUFBRyxHQUMrTSxTQUFTQyxFQUFFaEIsRUFBRUMsRUFBRXhELEVBQUV3RSxFQUFFdkksRUFBRXdJLEVBQUVDLEdBQUdqUCxLQUFLa1AsZ0JBQWdCLElBQUluQixHQUFHLElBQUlBLEdBQUcsSUFBSUEsRUFBRS9OLEtBQUttUCxjQUFjSixFQUFFL08sS0FBS29QLG1CQUFtQjVJLEVBQUV4RyxLQUFLcVAsZ0JBQWdCOUUsRUFBRXZLLEtBQUtzUCxhQUFheEIsRUFBRTlOLEtBQUt5RSxLQUFLc0osRUFBRS9OLEtBQUt1UCxZQUFZUCxFQUFFaFAsS0FBS3dQLGtCQUFrQlAsRUFBRSxJQUFJUSxFQUFFLEdBQ25iLHVJQUF1SXJJLE1BQU0sS0FBS0MsU0FBUSxTQUFTeUcsR0FBRzJCLEVBQUUzQixHQUFHLElBQUlnQixFQUFFaEIsRUFBRSxHQUFFLEVBQUdBLEVBQUUsTUFBSyxHQUFHLE1BQU0sQ0FBQyxDQUFDLGdCQUFnQixrQkFBa0IsQ0FBQyxZQUFZLFNBQVMsQ0FBQyxVQUFVLE9BQU8sQ0FBQyxZQUFZLGVBQWV6RyxTQUFRLFNBQVN5RyxHQUFHLElBQUlDLEVBQUVELEVBQUUsR0FBRzJCLEVBQUUxQixHQUFHLElBQUllLEVBQUVmLEVBQUUsR0FBRSxFQUFHRCxFQUFFLEdBQUcsTUFBSyxHQUFHLE1BQU0sQ0FBQyxrQkFBa0IsWUFBWSxhQUFhLFNBQVN6RyxTQUFRLFNBQVN5RyxHQUFHMkIsRUFBRTNCLEdBQUcsSUFBSWdCLEVBQUVoQixFQUFFLEdBQUUsRUFBR0EsRUFBRTRCLGNBQWMsTUFBSyxHQUFHLE1BQ3ZlLENBQUMsY0FBYyw0QkFBNEIsWUFBWSxpQkFBaUJySSxTQUFRLFNBQVN5RyxHQUFHMkIsRUFBRTNCLEdBQUcsSUFBSWdCLEVBQUVoQixFQUFFLEdBQUUsRUFBR0EsRUFBRSxNQUFLLEdBQUcsTUFBTSw4T0FBOE8xRyxNQUFNLEtBQUtDLFNBQVEsU0FBU3lHLEdBQUcyQixFQUFFM0IsR0FBRyxJQUFJZ0IsRUFBRWhCLEVBQUUsR0FBRSxFQUFHQSxFQUFFNEIsY0FBYyxNQUFLLEdBQUcsTUFDcmIsQ0FBQyxVQUFVLFdBQVcsUUFBUSxZQUFZckksU0FBUSxTQUFTeUcsR0FBRzJCLEVBQUUzQixHQUFHLElBQUlnQixFQUFFaEIsRUFBRSxHQUFFLEVBQUdBLEVBQUUsTUFBSyxHQUFHLE1BQU0sQ0FBQyxVQUFVLFlBQVl6RyxTQUFRLFNBQVN5RyxHQUFHMkIsRUFBRTNCLEdBQUcsSUFBSWdCLEVBQUVoQixFQUFFLEdBQUUsRUFBR0EsRUFBRSxNQUFLLEdBQUcsTUFBTSxDQUFDLE9BQU8sT0FBTyxPQUFPLFFBQVF6RyxTQUFRLFNBQVN5RyxHQUFHMkIsRUFBRTNCLEdBQUcsSUFBSWdCLEVBQUVoQixFQUFFLEdBQUUsRUFBR0EsRUFBRSxNQUFLLEdBQUcsTUFBTSxDQUFDLFVBQVUsU0FBU3pHLFNBQVEsU0FBU3lHLEdBQUcyQixFQUFFM0IsR0FBRyxJQUFJZ0IsRUFBRWhCLEVBQUUsR0FBRSxFQUFHQSxFQUFFNEIsY0FBYyxNQUFLLEdBQUcsTUFBTSxJQUFJQyxFQUFHLGdCQUFnQixTQUFTQyxFQUFHOUIsR0FBRyxPQUFPQSxFQUFFLEdBQUdyRCxjQUkzWSxTQUFTb0YsRUFBRy9CLEVBQUVDLEVBQUV4RCxFQUFFd0UsR0FBRyxJQUFJdkksRUFBRWlKLEVBQUVoSixlQUFlc0gsR0FBRzBCLEVBQUUxQixHQUFHLE1BQVcsT0FBT3ZILEVBQUUsSUFBSUEsRUFBRS9CLE1BQUtzSyxHQUFPLEVBQUVoQixFQUFFcE4sU0FBUyxNQUFNb04sRUFBRSxJQUFJLE1BQU1BLEVBQUUsTUFBSSxNQUFNQSxFQUFFLElBQUksTUFBTUEsRUFBRSxPQVBuSixTQUFZRCxFQUFFQyxFQUFFeEQsRUFBRXdFLEdBQUcsR0FBRyxNQUFPaEIsR0FEZ0csU0FBWUQsRUFBRUMsRUFBRXhELEVBQUV3RSxHQUFHLEdBQUcsT0FBT3hFLEdBQUcsSUFBSUEsRUFBRTlGLEtBQUssT0FBTSxFQUFHLGNBQWNzSixHQUFHLElBQUssV0FBVyxJQUFLLFNBQVMsT0FBTSxFQUFHLElBQUssVUFBVSxPQUFHZ0IsSUFBYyxPQUFPeEUsR0FBU0EsRUFBRTJFLGdCQUFtRCxXQUFuQ3BCLEVBQUVBLEVBQUU0QixjQUFjbE4sTUFBTSxFQUFFLEtBQXNCLFVBQVVzTCxHQUFFLFFBQVEsT0FBTSxHQUMvVGdDLENBQUdoQyxFQUFFQyxFQUFFeEQsRUFBRXdFLEdBQUcsT0FBTSxFQUFHLEdBQUdBLEVBQUUsT0FBTSxFQUFHLEdBQUcsT0FBT3hFLEVBQUUsT0FBT0EsRUFBRTlGLE1BQU0sS0FBSyxFQUFFLE9BQU9zSixFQUFFLEtBQUssRUFBRSxPQUFNLElBQUtBLEVBQUUsS0FBSyxFQUFFLE9BQU9nQyxNQUFNaEMsR0FBRyxLQUFLLEVBQUUsT0FBT2dDLE1BQU1oQyxJQUFJLEVBQUVBLEVBQUUsT0FBTSxFQU9yRGlDLENBQUdqQyxFQUFFeEQsRUFBRS9ELEVBQUV1SSxLQUFLeEUsRUFBRSxNQUFNd0UsR0FBRyxPQUFPdkksRUFScEwsU0FBWXNILEdBQUcsUUFBR2EsRUFBR3BNLEtBQUtzTSxFQUFHZixLQUFlYSxFQUFHcE0sS0FBS3FNLEVBQUdkLEtBQWVZLEVBQUc5TCxLQUFLa0wsR0FBVWUsRUFBR2YsSUFBRyxHQUFHYyxFQUFHZCxJQUFHLEdBQVMsSUFRc0VtQyxDQUFHbEMsS0FBSyxPQUFPeEQsRUFBRXVELEVBQUVvQyxnQkFBZ0JuQyxHQUFHRCxFQUFFcUMsYUFBYXBDLEVBQUUsR0FBR3hELElBQUkvRCxFQUFFNkksZ0JBQWdCdkIsRUFBRXRILEVBQUU4SSxjQUFjLE9BQU8vRSxFQUFFLElBQUkvRCxFQUFFL0IsTUFBUSxHQUFHOEYsR0FBR3dELEVBQUV2SCxFQUFFMkksY0FBY0osRUFBRXZJLEVBQUU0SSxtQkFBbUIsT0FBTzdFLEVBQUV1RCxFQUFFb0MsZ0JBQWdCbkMsSUFBYXhELEVBQUUsS0FBWC9ELEVBQUVBLEVBQUUvQixPQUFjLElBQUkrQixJQUFHLElBQUsrRCxFQUFFLEdBQUcsR0FBR0EsRUFBRXdFLEVBQUVqQixFQUFFc0MsZUFBZXJCLEVBQUVoQixFQUFFeEQsR0FBR3VELEVBQUVxQyxhQUFhcEMsRUFBRXhELE1BSDVkLDBqQ0FBMGpDbkQsTUFBTSxLQUFLQyxTQUFRLFNBQVN5RyxHQUFHLElBQUlDLEVBQUVELEVBQUV4RCxRQUFRcUYsRUFDem1DQyxHQUFJSCxFQUFFMUIsR0FBRyxJQUFJZSxFQUFFZixFQUFFLEdBQUUsRUFBR0QsRUFBRSxNQUFLLEdBQUcsTUFBTSwyRUFBMkUxRyxNQUFNLEtBQUtDLFNBQVEsU0FBU3lHLEdBQUcsSUFBSUMsRUFBRUQsRUFBRXhELFFBQVFxRixFQUFHQyxHQUFJSCxFQUFFMUIsR0FBRyxJQUFJZSxFQUFFZixFQUFFLEdBQUUsRUFBR0QsRUFBRSxnQ0FBK0IsR0FBRyxNQUFNLENBQUMsV0FBVyxXQUFXLGFBQWF6RyxTQUFRLFNBQVN5RyxHQUFHLElBQUlDLEVBQUVELEVBQUV4RCxRQUFRcUYsRUFBR0MsR0FBSUgsRUFBRTFCLEdBQUcsSUFBSWUsRUFBRWYsRUFBRSxHQUFFLEVBQUdELEVBQUUsd0NBQXVDLEdBQUcsTUFBTSxDQUFDLFdBQVcsZUFBZXpHLFNBQVEsU0FBU3lHLEdBQUcyQixFQUFFM0IsR0FBRyxJQUFJZ0IsRUFBRWhCLEVBQUUsR0FBRSxFQUFHQSxFQUFFNEIsY0FBYyxNQUFLLEdBQUcsTUFDL2NELEVBQUVZLFVBQVUsSUFBSXZCLEVBQUUsWUFBWSxHQUFFLEVBQUcsYUFBYSxnQ0FBK0IsR0FBRyxHQUFJLENBQUMsTUFBTSxPQUFPLFNBQVMsY0FBY3pILFNBQVEsU0FBU3lHLEdBQUcyQixFQUFFM0IsR0FBRyxJQUFJZ0IsRUFBRWhCLEVBQUUsR0FBRSxFQUFHQSxFQUFFNEIsY0FBYyxNQUFLLEdBQUcsTUFFekwsSUFBSVksRUFBRzNDLEVBQUc0QyxtREFBbURDLEVBQUcsTUFBTUMsRUFBRyxNQUFNQyxFQUFHLE1BQU1DLEVBQUcsTUFBTUMsRUFBRyxNQUFNQyxFQUFHLE1BQU1DLEVBQUcsTUFBTUMsRUFBRyxNQUFNQyxFQUFHLE1BQU1DLEVBQUcsTUFBTUMsRUFBRyxNQUFNQyxFQUFHLE1BQU1DLEVBQUcsTUFBTUMsRUFBRyxNQUFNQyxFQUFHLE1BQU1DLEVBQUcsTUFBTUMsRUFBRyxNQUNoTixHQUFHLG1CQUFvQm5RLFFBQVFBLE9BQU9vUSxJQUFJLENBQUMsSUFBSUMsRUFBRXJRLE9BQU9vUSxJQUFJakIsRUFBR2tCLEVBQUUsaUJBQWlCakIsRUFBR2lCLEVBQUUsZ0JBQWdCaEIsRUFBR2dCLEVBQUUsa0JBQWtCZixFQUFHZSxFQUFFLHFCQUFxQmQsRUFBR2MsRUFBRSxrQkFBa0JiLEVBQUdhLEVBQUUsa0JBQWtCWixFQUFHWSxFQUFFLGlCQUFpQlgsRUFBR1csRUFBRSxxQkFBcUJWLEVBQUdVLEVBQUUsa0JBQWtCVCxFQUFHUyxFQUFFLHVCQUF1QlIsRUFBR1EsRUFBRSxjQUFjUCxFQUFHTyxFQUFFLGNBQWNOLEVBQUdNLEVBQUUsZUFBZUEsRUFBRSxlQUFlTCxFQUFHSyxFQUFFLG1CQUFtQkosRUFBR0ksRUFBRSwwQkFBMEJILEVBQUdHLEVBQUUsbUJBQW1CRixFQUFHRSxFQUFFLHVCQUN4YyxJQUFtTEMsRUFBL0tDLEVBQUcsbUJBQW9CdlEsUUFBUUEsT0FBT0MsU0FBUyxTQUFTdVEsRUFBRy9ELEdBQUcsT0FBRyxPQUFPQSxHQUFHLGlCQUFrQkEsRUFBUyxLQUF3QyxtQkFBbkNBLEVBQUU4RCxHQUFJOUQsRUFBRThELElBQUs5RCxFQUFFLGVBQTBDQSxFQUFFLEtBQVksU0FBU2dFLEVBQUdoRSxHQUFHLFFBQUcsSUFBUzZELEVBQUcsSUFBSSxNQUFNeEYsUUFBUyxNQUFNNUIsR0FBRyxJQUFJd0QsRUFBRXhELEVBQUV3SCxNQUFNQyxPQUFPOUosTUFBTSxnQkFBZ0J5SixFQUFHNUQsR0FBR0EsRUFBRSxJQUFJLEdBQUcsTUFBTSxLQUFLNEQsRUFBRzdELEVBQUUsSUFBSW1FLEdBQUcsRUFDalUsU0FBU0MsRUFBR3BFLEVBQUVDLEdBQUcsSUFBSUQsR0FBR21FLEVBQUcsTUFBTSxHQUFHQSxHQUFHLEVBQUcsSUFBSTFILEVBQUU0QixNQUFNZ0csa0JBQWtCaEcsTUFBTWdHLHVCQUFrQixFQUFPLElBQUksR0FBR3BFLEVBQUUsR0FBR0EsRUFBRSxXQUFXLE1BQU01QixTQUFVNUssT0FBT2lFLGVBQWV1SSxFQUFFekwsVUFBVSxRQUFRLENBQUM4UCxJQUFJLFdBQVcsTUFBTWpHLFdBQVksaUJBQWtCa0csU0FBU0EsUUFBUUMsVUFBVSxDQUFDLElBQUlELFFBQVFDLFVBQVV2RSxFQUFFLElBQUksTUFBTXdFLEdBQUcsSUFBSXhELEVBQUV3RCxFQUFFRixRQUFRQyxVQUFVeEUsRUFBRSxHQUFHQyxPQUFPLENBQUMsSUFBSUEsRUFBRXhMLE9BQU8sTUFBTWdRLEdBQUd4RCxFQUFFd0QsRUFBRXpFLEVBQUV2TCxLQUFLd0wsRUFBRXpMLGVBQWUsQ0FBQyxJQUFJLE1BQU02SixRQUFTLE1BQU1vRyxHQUFHeEQsRUFBRXdELEVBQUV6RSxLQUFLLE1BQU15RSxHQUFHLEdBQUdBLEdBQUd4RCxHQUFHLGlCQUFrQndELEVBQUVSLE1BQU0sQ0FBQyxJQUFJLElBQUl2TCxFQUFFK0wsRUFBRVIsTUFBTTNLLE1BQU0sTUFDbmY0SCxFQUFFRCxFQUFFZ0QsTUFBTTNLLE1BQU0sTUFBTTZILEVBQUV6SSxFQUFFN0YsT0FBTyxFQUFFNlIsRUFBRXhELEVBQUVyTyxPQUFPLEVBQUUsR0FBR3NPLEdBQUcsR0FBR3VELEdBQUdoTSxFQUFFeUksS0FBS0QsRUFBRXdELElBQUlBLElBQUksS0FBSyxHQUFHdkQsR0FBRyxHQUFHdUQsRUFBRXZELElBQUl1RCxJQUFJLEdBQUdoTSxFQUFFeUksS0FBS0QsRUFBRXdELEdBQUcsQ0FBQyxHQUFHLElBQUl2RCxHQUFHLElBQUl1RCxFQUFHLE1BQU12RCxJQUFRLElBQUp1RCxHQUFTaE0sRUFBRXlJLEtBQUtELEVBQUV3RCxHQUFHLE1BQU0sS0FBS2hNLEVBQUV5SSxHQUFHM0UsUUFBUSxXQUFXLGNBQWMsR0FBRzJFLEdBQUcsR0FBR3VELEdBQUcsUUFBUSxRQUFRUCxHQUFHLEVBQUc5RixNQUFNZ0csa0JBQWtCNUgsRUFBRSxPQUFPdUQsRUFBRUEsRUFBRUEsRUFBRTNKLGFBQWEySixFQUFFcEwsS0FBSyxJQUFJb1AsRUFBR2hFLEdBQUcsR0FDN1QsU0FBUzJFLEVBQUczRSxHQUFHLE9BQU9BLEVBQUU0RSxLQUFLLEtBQUssRUFBRSxPQUFPWixFQUFHaEUsRUFBRXJKLE1BQU0sS0FBSyxHQUFHLE9BQU9xTixFQUFHLFFBQVEsS0FBSyxHQUFHLE9BQU9BLEVBQUcsWUFBWSxLQUFLLEdBQUcsT0FBT0EsRUFBRyxnQkFBZ0IsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEdBQUcsT0FBU0ksRUFBR3BFLEVBQUVySixNQUFLLEdBQU0sS0FBSyxHQUFHLE9BQVN5TixFQUFHcEUsRUFBRXJKLEtBQUthLFFBQU8sR0FBTSxLQUFLLEdBQUcsT0FBUzRNLEVBQUdwRSxFQUFFckosS0FBS2tPLFNBQVEsR0FBTSxLQUFLLEVBQUUsT0FBU1QsRUFBR3BFLEVBQUVySixNQUFLLEdBQU0sUUFBUSxNQUFNLElBQzlULFNBQVNtTyxFQUFHOUUsR0FBRyxHQUFHLE1BQU1BLEVBQUUsT0FBTyxLQUFLLEdBQUcsbUJBQW9CQSxFQUFFLE9BQU9BLEVBQUUzSixhQUFhMkosRUFBRXBMLE1BQU0sS0FBSyxHQUFHLGlCQUFrQm9MLEVBQUUsT0FBT0EsRUFBRSxPQUFPQSxHQUFHLEtBQUs0QyxFQUFHLE1BQU0sV0FBVyxLQUFLRCxFQUFHLE1BQU0sU0FBUyxLQUFLRyxFQUFHLE1BQU0sV0FBVyxLQUFLRCxFQUFHLE1BQU0sYUFBYSxLQUFLSyxFQUFHLE1BQU0sV0FBVyxLQUFLQyxFQUFHLE1BQU0sZUFBZSxHQUFHLGlCQUFrQm5ELEVBQUUsT0FBT0EsRUFBRStFLFVBQVUsS0FBSy9CLEVBQUcsT0FBT2hELEVBQUUzSixhQUFhLFdBQVcsWUFBWSxLQUFLME0sRUFBRyxPQUFPL0MsRUFBRWdGLFNBQVMzTyxhQUFhLFdBQVcsWUFBWSxLQUFLNE0sRUFBRyxJQUFJaEQsRUFBRUQsRUFBRXhJLE9BQ25kLE9BRDBkeUksRUFBRUEsRUFBRTVKLGFBQWE0SixFQUFFckwsTUFBTSxHQUM1ZW9MLEVBQUUzSixjQUFjLEtBQUs0SixFQUFFLGNBQWNBLEVBQUUsSUFBSSxjQUFjLEtBQUttRCxFQUFHLE9BQU8wQixFQUFHOUUsRUFBRXJKLE1BQU0sS0FBSzJNLEVBQUcsT0FBT3dCLEVBQUc5RSxFQUFFNkUsU0FBUyxLQUFLeEIsRUFBR3BELEVBQUVELEVBQUVpRixTQUFTakYsRUFBRUEsRUFBRWtGLE1BQU0sSUFBSSxPQUFPSixFQUFHOUUsRUFBRUMsSUFBSSxNQUFNeEQsS0FBSyxPQUFPLEtBQUssU0FBUzBJLEVBQUduRixHQUFHLGNBQWNBLEdBQUcsSUFBSyxVQUFVLElBQUssU0FBUyxJQUFLLFNBQVMsSUFBSyxTQUFTLElBQUssWUFBWSxPQUFPQSxFQUFFLFFBQVEsTUFBTSxJQUFJLFNBQVNvRixFQUFHcEYsR0FBRyxJQUFJQyxFQUFFRCxFQUFFckosS0FBSyxPQUFPcUosRUFBRUEsRUFBRXFGLFdBQVcsVUFBVXJGLEVBQUU0QixnQkFBZ0IsYUFBYTNCLEdBQUcsVUFBVUEsR0FFMVosU0FBU3FGLEVBQUd0RixHQUFHQSxFQUFFdUYsZ0JBQWdCdkYsRUFBRXVGLGNBRHZELFNBQVl2RixHQUFHLElBQUlDLEVBQUVtRixFQUFHcEYsR0FBRyxVQUFVLFFBQVF2RCxFQUFFaEosT0FBT29FLHlCQUF5Qm1JLEVBQUVyTCxZQUFZSCxVQUFVeUwsR0FBR2dCLEVBQUUsR0FBR2pCLEVBQUVDLEdBQUcsSUFBSUQsRUFBRXJILGVBQWVzSCxTQUFJLElBQXFCeEQsR0FBRyxtQkFBb0JBLEVBQUUrSSxLQUFLLG1CQUFvQi9JLEVBQUU2SCxJQUFJLENBQUMsSUFBSTVMLEVBQUUrRCxFQUFFK0ksSUFBSXRFLEVBQUV6RSxFQUFFNkgsSUFBaUwsT0FBN0s3USxPQUFPaUUsZUFBZXNJLEVBQUVDLEVBQUUsQ0FBQ3dGLGNBQWEsRUFBR0QsSUFBSSxXQUFXLE9BQU85TSxFQUFFakUsS0FBS3ZDLE9BQU9vUyxJQUFJLFNBQVN0RSxHQUFHaUIsRUFBRSxHQUFHakIsRUFBRWtCLEVBQUV6TSxLQUFLdkMsS0FBSzhOLE1BQU12TSxPQUFPaUUsZUFBZXNJLEVBQUVDLEVBQUUsQ0FBQ3lGLFdBQVdqSixFQUFFaUosYUFBbUIsQ0FBQ0MsU0FBUyxXQUFXLE9BQU8xRSxHQUFHMkUsU0FBUyxTQUFTNUYsR0FBR2lCLEVBQUUsR0FBR2pCLEdBQUc2RixhQUFhLFdBQVc3RixFQUFFdUYsY0FDeGYsWUFBWXZGLEVBQUVDLE1BQXVENkYsQ0FBRzlGLElBQUksU0FBUytGLEVBQUcvRixHQUFHLElBQUlBLEVBQUUsT0FBTSxFQUFHLElBQUlDLEVBQUVELEVBQUV1RixjQUFjLElBQUl0RixFQUFFLE9BQU0sRUFBRyxJQUFJeEQsRUFBRXdELEVBQUUwRixXQUFlMUUsRUFBRSxHQUFxRCxPQUFsRGpCLElBQUlpQixFQUFFbUUsRUFBR3BGLEdBQUdBLEVBQUVnRyxRQUFRLE9BQU8sUUFBUWhHLEVBQUU5TCxRQUFPOEwsRUFBRWlCLEtBQWF4RSxJQUFHd0QsRUFBRTJGLFNBQVM1RixJQUFHLEdBQU8sU0FBU2lHLEVBQUdqRyxHQUF3RCxRQUFHLEtBQXhEQSxFQUFFQSxJQUFJLG9CQUFxQlUsU0FBU0EsY0FBUyxJQUFrQyxPQUFPLEtBQUssSUFBSSxPQUFPVixFQUFFa0csZUFBZWxHLEVBQUVtRyxLQUFLLE1BQU1sRyxHQUFHLE9BQU9ELEVBQUVtRyxNQUMvWixTQUFTQyxFQUFHcEcsRUFBRUMsR0FBRyxJQUFJeEQsRUFBRXdELEVBQUUrRixRQUFRLE9BQU9uSyxFQUFFLEdBQUdvRSxFQUFFLENBQUNvRyxvQkFBZSxFQUFPQyxrQkFBYSxFQUFPcFMsV0FBTSxFQUFPOFIsUUFBUSxNQUFNdkosRUFBRUEsRUFBRXVELEVBQUV1RyxjQUFjQyxpQkFBaUIsU0FBU0MsR0FBR3pHLEVBQUVDLEdBQUcsSUFBSXhELEVBQUUsTUFBTXdELEVBQUVxRyxhQUFhLEdBQUdyRyxFQUFFcUcsYUFBYXJGLEVBQUUsTUFBTWhCLEVBQUUrRixRQUFRL0YsRUFBRStGLFFBQVEvRixFQUFFb0csZUFBZTVKLEVBQUUwSSxFQUFHLE1BQU1sRixFQUFFL0wsTUFBTStMLEVBQUUvTCxNQUFNdUksR0FBR3VELEVBQUV1RyxjQUFjLENBQUNDLGVBQWV2RixFQUFFeUYsYUFBYWpLLEVBQUVrSyxXQUFXLGFBQWExRyxFQUFFdEosTUFBTSxVQUFVc0osRUFBRXRKLEtBQUssTUFBTXNKLEVBQUUrRixRQUFRLE1BQU0vRixFQUFFL0wsT0FBTyxTQUFTMFMsR0FBRzVHLEVBQUVDLEdBQWUsT0FBWkEsRUFBRUEsRUFBRStGLFVBQWlCakUsRUFBRy9CLEVBQUUsVUFBVUMsR0FBRSxHQUMzZCxTQUFTNEcsR0FBRzdHLEVBQUVDLEdBQUcyRyxHQUFHNUcsRUFBRUMsR0FBRyxJQUFJeEQsRUFBRTBJLEVBQUdsRixFQUFFL0wsT0FBTytNLEVBQUVoQixFQUFFdEosS0FBSyxHQUFHLE1BQU04RixFQUFLLFdBQVd3RSxHQUFNLElBQUl4RSxHQUFHLEtBQUt1RCxFQUFFOUwsT0FBTzhMLEVBQUU5TCxPQUFPdUksS0FBRXVELEVBQUU5TCxNQUFNLEdBQUd1SSxHQUFPdUQsRUFBRTlMLFFBQVEsR0FBR3VJLElBQUl1RCxFQUFFOUwsTUFBTSxHQUFHdUksUUFBUSxHQUFHLFdBQVd3RSxHQUFHLFVBQVVBLEVBQThCLFlBQTNCakIsRUFBRW9DLGdCQUFnQixTQUFnQm5DLEVBQUV0SCxlQUFlLFNBQVNtTyxHQUFHOUcsRUFBRUMsRUFBRXRKLEtBQUs4RixHQUFHd0QsRUFBRXRILGVBQWUsaUJBQWlCbU8sR0FBRzlHLEVBQUVDLEVBQUV0SixLQUFLd08sRUFBR2xGLEVBQUVxRyxlQUFlLE1BQU1yRyxFQUFFK0YsU0FBUyxNQUFNL0YsRUFBRW9HLGlCQUFpQnJHLEVBQUVxRyxpQkFBaUJwRyxFQUFFb0csZ0JBQ25aLFNBQVNVLEdBQUcvRyxFQUFFQyxFQUFFeEQsR0FBRyxHQUFHd0QsRUFBRXRILGVBQWUsVUFBVXNILEVBQUV0SCxlQUFlLGdCQUFnQixDQUFDLElBQUlzSSxFQUFFaEIsRUFBRXRKLEtBQUssS0FBSyxXQUFXc0ssR0FBRyxVQUFVQSxRQUFHLElBQVNoQixFQUFFL0wsT0FBTyxPQUFPK0wsRUFBRS9MLE9BQU8sT0FBTytMLEVBQUUsR0FBR0QsRUFBRXVHLGNBQWNHLGFBQWFqSyxHQUFHd0QsSUFBSUQsRUFBRTlMLFFBQVE4TCxFQUFFOUwsTUFBTStMLEdBQUdELEVBQUVzRyxhQUFhckcsRUFBVyxNQUFUeEQsRUFBRXVELEVBQUVwTCxRQUFjb0wsRUFBRXBMLEtBQUssSUFBSW9MLEVBQUVxRyxpQkFBaUJyRyxFQUFFdUcsY0FBY0MsZUFBZSxLQUFLL0osSUFBSXVELEVBQUVwTCxLQUFLNkgsR0FDdlYsU0FBU3FLLEdBQUc5RyxFQUFFQyxFQUFFeEQsR0FBTSxXQUFXd0QsR0FBR2dHLEVBQUdqRyxFQUFFZ0gsaUJBQWlCaEgsSUFBRSxNQUFNdkQsRUFBRXVELEVBQUVzRyxhQUFhLEdBQUd0RyxFQUFFdUcsY0FBY0csYUFBYTFHLEVBQUVzRyxlQUFlLEdBQUc3SixJQUFJdUQsRUFBRXNHLGFBQWEsR0FBRzdKLElBQXdGLFNBQVN3SyxHQUFHakgsRUFBRUMsR0FBNkQsT0FBMURELEVBQUVuRSxFQUFFLENBQUNxTCxjQUFTLEdBQVFqSCxJQUFNQSxFQUFsSSxTQUFZRCxHQUFHLElBQUlDLEVBQUUsR0FBdUQsT0FBcERKLEVBQUdzSCxTQUFTNU4sUUFBUXlHLEdBQUUsU0FBU0EsR0FBRyxNQUFNQSxJQUFJQyxHQUFHRCxNQUFZQyxFQUFpRG1ILENBQUduSCxFQUFFaUgsYUFBVWxILEVBQUVrSCxTQUFTakgsR0FBU0QsRUFDdlUsU0FBU3FILEdBQUdySCxFQUFFQyxFQUFFeEQsRUFBRXdFLEdBQWUsR0FBWmpCLEVBQUVBLEVBQUUvRixRQUFXZ0csRUFBRSxDQUFDQSxFQUFFLEdBQUcsSUFBSSxJQUFJdkgsRUFBRSxFQUFFQSxFQUFFK0QsRUFBRTVKLE9BQU82RixJQUFJdUgsRUFBRSxJQUFJeEQsRUFBRS9ELEtBQUksRUFBRyxJQUFJK0QsRUFBRSxFQUFFQSxFQUFFdUQsRUFBRW5OLE9BQU80SixJQUFJL0QsRUFBRXVILEVBQUV0SCxlQUFlLElBQUlxSCxFQUFFdkQsR0FBR3ZJLE9BQU84TCxFQUFFdkQsR0FBRzZLLFdBQVc1TyxJQUFJc0gsRUFBRXZELEdBQUc2SyxTQUFTNU8sR0FBR0EsR0FBR3VJLElBQUlqQixFQUFFdkQsR0FBRzhLLGlCQUFnQixPQUFRLENBQW1CLElBQWxCOUssRUFBRSxHQUFHMEksRUFBRzFJLEdBQUd3RCxFQUFFLEtBQVN2SCxFQUFFLEVBQUVBLEVBQUVzSCxFQUFFbk4sT0FBTzZGLElBQUksQ0FBQyxHQUFHc0gsRUFBRXRILEdBQUd4RSxRQUFRdUksRUFBaUQsT0FBOUN1RCxFQUFFdEgsR0FBRzRPLFVBQVMsT0FBR3JHLElBQUlqQixFQUFFdEgsR0FBRzZPLGlCQUFnQixJQUFXLE9BQU90SCxHQUFHRCxFQUFFdEgsR0FBRzhPLFdBQVd2SCxFQUFFRCxFQUFFdEgsSUFBSSxPQUFPdUgsSUFBSUEsRUFBRXFILFVBQVMsSUFDcFksU0FBU0csR0FBR3pILEVBQUVDLEdBQUcsR0FBRyxNQUFNQSxFQUFFeUgsd0JBQXdCLE1BQU1ySixNQUFNMEIsRUFBRSxLQUFLLE9BQU9sRSxFQUFFLEdBQUdvRSxFQUFFLENBQUMvTCxXQUFNLEVBQU9vUyxrQkFBYSxFQUFPWSxTQUFTLEdBQUdsSCxFQUFFdUcsY0FBY0csZUFBZSxTQUFTaUIsR0FBRzNILEVBQUVDLEdBQUcsSUFBSXhELEVBQUV3RCxFQUFFL0wsTUFBTSxHQUFHLE1BQU11SSxFQUFFLENBQStCLEdBQTlCQSxFQUFFd0QsRUFBRWlILFNBQVNqSCxFQUFFQSxFQUFFcUcsYUFBZ0IsTUFBTTdKLEVBQUUsQ0FBQyxHQUFHLE1BQU13RCxFQUFFLE1BQU01QixNQUFNMEIsRUFBRSxLQUFLLEdBQUc1TSxNQUFNRSxRQUFRb0osR0FBRyxDQUFDLEtBQUssR0FBR0EsRUFBRTVKLFFBQVEsTUFBTXdMLE1BQU0wQixFQUFFLEtBQUt0RCxFQUFFQSxFQUFFLEdBQUd3RCxFQUFFeEQsRUFBRSxNQUFNd0QsSUFBSUEsRUFBRSxJQUFJeEQsRUFBRXdELEVBQUVELEVBQUV1RyxjQUFjLENBQUNHLGFBQWF2QixFQUFHMUksSUFDL1ksU0FBU21MLEdBQUc1SCxFQUFFQyxHQUFHLElBQUl4RCxFQUFFMEksRUFBR2xGLEVBQUUvTCxPQUFPK00sRUFBRWtFLEVBQUdsRixFQUFFcUcsY0FBYyxNQUFNN0osS0FBSUEsRUFBRSxHQUFHQSxLQUFNdUQsRUFBRTlMLFFBQVE4TCxFQUFFOUwsTUFBTXVJLEdBQUcsTUFBTXdELEVBQUVxRyxjQUFjdEcsRUFBRXNHLGVBQWU3SixJQUFJdUQsRUFBRXNHLGFBQWE3SixJQUFJLE1BQU13RSxJQUFJakIsRUFBRXNHLGFBQWEsR0FBR3JGLEdBQUcsU0FBUzRHLEdBQUc3SCxHQUFHLElBQUlDLEVBQUVELEVBQUU4SCxZQUFZN0gsSUFBSUQsRUFBRXVHLGNBQWNHLGNBQWMsS0FBS3pHLEdBQUcsT0FBT0EsSUFBSUQsRUFBRTlMLE1BQU0rTCxHQUFHLElBQUk4SCxHQUFTLCtCQUMvUyxTQUFTQyxHQUFHaEksR0FBRyxPQUFPQSxHQUFHLElBQUssTUFBTSxNQUFNLDZCQUE2QixJQUFLLE9BQU8sTUFBTSxxQ0FBcUMsUUFBUSxNQUFNLGdDQUFnQyxTQUFTaUksR0FBR2pJLEVBQUVDLEdBQUcsT0FBTyxNQUFNRCxHQUFHLGlDQUFpQ0EsRUFBRWdJLEdBQUcvSCxHQUFHLCtCQUErQkQsR0FBRyxrQkFBa0JDLEVBQUUsK0JBQStCRCxFQUMzVSxJQUFJa0ksR0FBZWxJLEdBQVptSSxJQUFZbkksR0FBc0osU0FBU0EsRUFBRUMsR0FBRyxHQUZ1TSwrQkFFcE1ELEVBQUVvSSxjQUF1QixjQUFjcEksRUFBRUEsRUFBRXFJLFVBQVVwSSxNQUFNLENBQTJGLEtBQTFGaUksR0FBR0EsSUFBSXhILFNBQVNDLGNBQWMsUUFBVTBILFVBQVUsUUFBUXBJLEVBQUVxSSxVQUFVclcsV0FBVyxTQUFhZ08sRUFBRWlJLEdBQUdLLFdBQVd2SSxFQUFFdUksWUFBWXZJLEVBQUV3SSxZQUFZeEksRUFBRXVJLFlBQVksS0FBS3RJLEVBQUVzSSxZQUFZdkksRUFBRXlJLFlBQVl4SSxFQUFFc0ksY0FBclosb0JBQXFCRyxPQUFPQSxNQUFNQyx3QkFBd0IsU0FBUzFJLEVBQUV4RCxFQUFFd0UsRUFBRXZJLEdBQUdnUSxNQUFNQyx5QkFBd0IsV0FBVyxPQUFPM0ksR0FBRUMsRUFBRXhELE9BQVV1RCxJQUN0SyxTQUFTNEksR0FBRzVJLEVBQUVDLEdBQUcsR0FBR0EsRUFBRSxDQUFDLElBQUl4RCxFQUFFdUQsRUFBRXVJLFdBQVcsR0FBRzlMLEdBQUdBLElBQUl1RCxFQUFFNkksV0FBVyxJQUFJcE0sRUFBRXFNLFNBQXdCLFlBQWRyTSxFQUFFc00sVUFBVTlJLEdBQVVELEVBQUU4SCxZQUFZN0gsRUFDckgsSUFBSStJLEdBQUcsQ0FBQ0MseUJBQXdCLEVBQUdDLG1CQUFrQixFQUFHQyxrQkFBaUIsRUFBR0Msa0JBQWlCLEVBQUdDLFNBQVEsRUFBR0MsY0FBYSxFQUFHQyxpQkFBZ0IsRUFBR0MsYUFBWSxFQUFHQyxTQUFRLEVBQUdDLE1BQUssRUFBR0MsVUFBUyxFQUFHQyxjQUFhLEVBQUdDLFlBQVcsRUFBR0MsY0FBYSxFQUFHQyxXQUFVLEVBQUdDLFVBQVMsRUFBR0MsU0FBUSxFQUFHQyxZQUFXLEVBQUdDLGFBQVksRUFBR0MsY0FBYSxFQUFHQyxZQUFXLEVBQUdDLGVBQWMsRUFBR0MsZ0JBQWUsRUFBR0MsaUJBQWdCLEVBQUdDLFlBQVcsRUFBR0MsV0FBVSxFQUFHQyxZQUFXLEVBQUdDLFNBQVEsRUFBR0MsT0FBTSxFQUFHQyxTQUFRLEVBQUdDLFNBQVEsRUFBR0MsUUFBTyxFQUFHQyxRQUFPLEVBQUdDLE1BQUssRUFBR0MsYUFBWSxFQUMxZkMsY0FBYSxFQUFHQyxhQUFZLEVBQUdDLGlCQUFnQixFQUFHQyxrQkFBaUIsRUFBR0Msa0JBQWlCLEVBQUdDLGVBQWMsRUFBR0MsYUFBWSxHQUFJQyxHQUFHLENBQUMsU0FBUyxLQUFLLE1BQU0sS0FBNkgsU0FBU0MsR0FBRzVMLEVBQUVDLEVBQUV4RCxHQUFHLE9BQU8sTUFBTXdELEdBQUcsa0JBQW1CQSxHQUFHLEtBQUtBLEVBQUUsR0FBR3hELEdBQUcsaUJBQWtCd0QsR0FBRyxJQUFJQSxHQUFHK0ksR0FBR3JRLGVBQWVxSCxJQUFJZ0osR0FBR2hKLElBQUksR0FBR0MsR0FBR2lFLE9BQU9qRSxFQUFFLEtBQzlaLFNBQVM0TCxHQUFHN0wsRUFBRUMsR0FBYSxJQUFJLElBQUl4RCxLQUFsQnVELEVBQUVBLEVBQUU4TCxNQUFtQjdMLEVBQUUsR0FBR0EsRUFBRXRILGVBQWU4RCxHQUFHLENBQUMsSUFBSXdFLEVBQUUsSUFBSXhFLEVBQUVzUCxRQUFRLE1BQU1yVCxFQUFFa1QsR0FBR25QLEVBQUV3RCxFQUFFeEQsR0FBR3dFLEdBQUcsVUFBVXhFLElBQUlBLEVBQUUsWUFBWXdFLEVBQUVqQixFQUFFZ00sWUFBWXZQLEVBQUUvRCxHQUFHc0gsRUFBRXZELEdBQUcvRCxHQURUakYsT0FBTzRFLEtBQUsyUSxJQUFJelAsU0FBUSxTQUFTeUcsR0FBRzJMLEdBQUdwUyxTQUFRLFNBQVMwRyxHQUFHQSxFQUFFQSxFQUFFRCxFQUFFaU0sT0FBTyxHQUFHdFAsY0FBY3FELEVBQUVrTSxVQUFVLEdBQUdsRCxHQUFHL0ksR0FBRytJLEdBQUdoSixTQUNyRyxJQUFJbU0sR0FBR3RRLEVBQUUsQ0FBQ3VRLFVBQVMsR0FBSSxDQUFDQyxNQUFLLEVBQUdDLE1BQUssRUFBR0MsSUFBRyxFQUFHQyxLQUFJLEVBQUdDLE9BQU0sRUFBR0MsSUFBRyxFQUFHQyxLQUFJLEVBQUdDLE9BQU0sRUFBR0MsUUFBTyxFQUFHQyxNQUFLLEVBQUdDLE1BQUssRUFBR0MsT0FBTSxFQUFHblgsUUFBTyxFQUFHb1gsT0FBTSxFQUFHQyxLQUFJLElBQ2xULFNBQVNDLEdBQUduTixFQUFFQyxHQUFHLEdBQUdBLEVBQUUsQ0FBQyxHQUFHa00sR0FBR25NLEtBQUssTUFBTUMsRUFBRWlILFVBQVUsTUFBTWpILEVBQUV5SCx5QkFBeUIsTUFBTXJKLE1BQU0wQixFQUFFLElBQUlDLElBQUksR0FBRyxNQUFNQyxFQUFFeUgsd0JBQXdCLENBQUMsR0FBRyxNQUFNekgsRUFBRWlILFNBQVMsTUFBTTdJLE1BQU0wQixFQUFFLEtBQUssR0FBSyxpQkFBa0JFLEVBQUV5SCwyQkFBeUIsV0FBV3pILEVBQUV5SCx5QkFBeUIsTUFBTXJKLE1BQU0wQixFQUFFLEtBQU0sR0FBRyxNQUFNRSxFQUFFNkwsT0FBTyxpQkFBa0I3TCxFQUFFNkwsTUFBTSxNQUFNek4sTUFBTTBCLEVBQUUsTUFDNVYsU0FBU3FOLEdBQUdwTixFQUFFQyxHQUFHLElBQUksSUFBSUQsRUFBRStMLFFBQVEsS0FBSyxNQUFNLGlCQUFrQjlMLEVBQUVvTixHQUFHLE9BQU9yTixHQUFHLElBQUssaUJBQWlCLElBQUssZ0JBQWdCLElBQUssWUFBWSxJQUFLLGdCQUFnQixJQUFLLGdCQUFnQixJQUFLLG1CQUFtQixJQUFLLGlCQUFpQixJQUFLLGdCQUFnQixPQUFNLEVBQUcsUUFBUSxPQUFNLEdBQUksU0FBU3NOLEdBQUd0TixHQUE2RixPQUExRkEsRUFBRUEsRUFBRXRHLFFBQVFzRyxFQUFFdU4sWUFBWTlNLFFBQVMrTSwwQkFBMEJ4TixFQUFFQSxFQUFFd04seUJBQWdDLElBQUl4TixFQUFFOEksU0FBUzlJLEVBQUV5TixXQUFXek4sRUFBRSxJQUFJME4sR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsS0FDeGIsU0FBU0MsR0FBRzdOLEdBQUcsR0FBR0EsRUFBRThOLEdBQUc5TixHQUFHLENBQUMsR0FBRyxtQkFBb0IwTixHQUFHLE1BQU1yUCxNQUFNMEIsRUFBRSxNQUFNLElBQUlFLEVBQUVELEVBQUUrTixVQUFVOU4sSUFBSUEsRUFBRStOLEdBQUcvTixHQUFHeU4sR0FBRzFOLEVBQUUrTixVQUFVL04sRUFBRXJKLEtBQUtzSixLQUFLLFNBQVNnTyxHQUFHak8sR0FBRzJOLEdBQUdDLEdBQUdBLEdBQUdsYyxLQUFLc08sR0FBRzROLEdBQUcsQ0FBQzVOLEdBQUcyTixHQUFHM04sRUFBRSxTQUFTa08sS0FBSyxHQUFHUCxHQUFHLENBQUMsSUFBSTNOLEVBQUUyTixHQUFHMU4sRUFBRTJOLEdBQW9CLEdBQWpCQSxHQUFHRCxHQUFHLEtBQUtFLEdBQUc3TixHQUFNQyxFQUFFLElBQUlELEVBQUUsRUFBRUEsRUFBRUMsRUFBRXBOLE9BQU9tTixJQUFJNk4sR0FBRzVOLEVBQUVELEtBQUssU0FBU21PLEdBQUduTyxFQUFFQyxHQUFHLE9BQU9ELEVBQUVDLEdBQUcsU0FBU21PLEdBQUdwTyxFQUFFQyxFQUFFeEQsRUFBRXdFLEVBQUV2SSxHQUFHLE9BQU9zSCxFQUFFQyxFQUFFeEQsRUFBRXdFLEVBQUV2SSxHQUFHLFNBQVMyVixNQUFNLElBQUlDLEdBQUdILEdBQUdJLElBQUcsRUFBR0MsSUFBRyxFQUFHLFNBQVNDLEtBQVEsT0FBT2QsSUFBSSxPQUFPQyxLQUFHUyxLQUFLSCxNQUU5WixTQUFTUSxHQUFHMU8sRUFBRUMsR0FBRyxJQUFJeEQsRUFBRXVELEVBQUUrTixVQUFVLEdBQUcsT0FBT3RSLEVBQUUsT0FBTyxLQUFLLElBQUl3RSxFQUFFK00sR0FBR3ZSLEdBQUcsR0FBRyxPQUFPd0UsRUFBRSxPQUFPLEtBQUt4RSxFQUFFd0UsRUFBRWhCLEdBQUdELEVBQUUsT0FBT0MsR0FBRyxJQUFLLFVBQVUsSUFBSyxpQkFBaUIsSUFBSyxnQkFBZ0IsSUFBSyx1QkFBdUIsSUFBSyxjQUFjLElBQUsscUJBQXFCLElBQUssY0FBYyxJQUFLLHFCQUFxQixJQUFLLFlBQVksSUFBSyxtQkFBbUIsSUFBSyxnQkFBZ0JnQixHQUFHQSxFQUFFdUcsWUFBcUJ2RyxJQUFJLFlBQWJqQixFQUFFQSxFQUFFckosT0FBdUIsVUFBVXFKLEdBQUcsV0FBV0EsR0FBRyxhQUFhQSxJQUFJQSxHQUFHaUIsRUFBRSxNQUFNakIsRUFBRSxRQUFRQSxHQUFFLEVBQUcsR0FBR0EsRUFBRSxPQUFPLEtBQUssR0FBR3ZELEdBQUcsbUJBQ2xlQSxFQUFFLE1BQU00QixNQUFNMEIsRUFBRSxJQUFJRSxTQUFTeEQsSUFBSSxPQUFPQSxFQUFFLElBQUlrUyxJQUFHLEVBQUcsR0FBR25PLEVBQUcsSUFBSSxJQUFJb08sR0FBRyxHQUFHbmIsT0FBT2lFLGVBQWVrWCxHQUFHLFVBQVUsQ0FBQ3BKLElBQUksV0FBV21KLElBQUcsS0FBTWxPLE9BQU9vTyxpQkFBaUIsT0FBT0QsR0FBR0EsSUFBSW5PLE9BQU9xTyxvQkFBb0IsT0FBT0YsR0FBR0EsSUFBSSxNQUFNNU8sSUFBRzJPLElBQUcsRUFBRyxTQUFTSSxHQUFHL08sRUFBRUMsRUFBRXhELEVBQUV3RSxFQUFFdkksRUFBRXdJLEVBQUVDLEVBQUV1RCxFQUFFRCxHQUFHLElBQUl1SyxFQUFFN2IsTUFBTXFCLFVBQVVFLE1BQU1ELEtBQUtzQyxVQUFVLEdBQUcsSUFBSWtKLEVBQUVnUCxNQUFNeFMsRUFBRXVTLEdBQUcsTUFBTXphLEdBQUdyQyxLQUFLZ2QsUUFBUTNhLElBQUksSUFBSTRhLElBQUcsRUFBR0MsR0FBRyxLQUFLQyxJQUFHLEVBQUdDLEdBQUcsS0FBS0MsR0FBRyxDQUFDTCxRQUFRLFNBQVNsUCxHQUFHbVAsSUFBRyxFQUFHQyxHQUFHcFAsSUFBSSxTQUFTd1AsR0FBR3hQLEVBQUVDLEVBQUV4RCxFQUFFd0UsRUFBRXZJLEVBQUV3SSxFQUFFQyxFQUFFdUQsRUFBRUQsR0FBRzBLLElBQUcsRUFBR0MsR0FBRyxLQUFLTCxHQUFHRSxNQUFNTSxHQUFHeFksV0FDdlYsU0FBUzBZLEdBQUd6UCxHQUFHLElBQUlDLEVBQUVELEVBQUV2RCxFQUFFdUQsRUFBRSxHQUFHQSxFQUFFMFAsVUFBVSxLQUFLelAsRUFBRTBQLFFBQVExUCxFQUFFQSxFQUFFMFAsV0FBVyxDQUFDM1AsRUFBRUMsRUFBRSxHQUFPLElBQWEsTUFBakJBLEVBQUVELEdBQVNqRixTQUFjMEIsRUFBRXdELEVBQUUwUCxRQUFRM1AsRUFBRUMsRUFBRTBQLGFBQWEzUCxHQUFHLE9BQU8sSUFBSUMsRUFBRTJFLElBQUluSSxFQUFFLEtBQUssU0FBU21ULEdBQUc1UCxHQUFHLEdBQUcsS0FBS0EsRUFBRTRFLElBQUksQ0FBQyxJQUFJM0UsRUFBRUQsRUFBRTZQLGNBQXNFLEdBQXhELE9BQU81UCxHQUFrQixRQUFkRCxFQUFFQSxFQUFFMFAsYUFBcUJ6UCxFQUFFRCxFQUFFNlAsZUFBbUIsT0FBTzVQLEVBQUUsT0FBT0EsRUFBRTZQLFdBQVcsT0FBTyxLQUFLLFNBQVNDLEdBQUcvUCxHQUFHLEdBQUd5UCxHQUFHelAsS0FBS0EsRUFBRSxNQUFNM0IsTUFBTTBCLEVBQUUsTUFFcFMsU0FBU2lRLEdBQUdoUSxHQUFXLEtBQVJBLEVBRHROLFNBQVlBLEdBQUcsSUFBSUMsRUFBRUQsRUFBRTBQLFVBQVUsSUFBSXpQLEVBQUUsQ0FBUyxHQUFHLFFBQVhBLEVBQUV3UCxHQUFHelAsSUFBZSxNQUFNM0IsTUFBTTBCLEVBQUUsTUFBTSxPQUFPRSxJQUFJRCxFQUFFLEtBQUtBLEVBQUUsSUFBSSxJQUFJdkQsRUFBRXVELEVBQUVpQixFQUFFaEIsSUFBSSxDQUFDLElBQUl2SCxFQUFFK0QsRUFBRWtULE9BQU8sR0FBRyxPQUFPalgsRUFBRSxNQUFNLElBQUl3SSxFQUFFeEksRUFBRWdYLFVBQVUsR0FBRyxPQUFPeE8sRUFBRSxDQUFZLEdBQUcsUUFBZEQsRUFBRXZJLEVBQUVpWCxRQUFtQixDQUFDbFQsRUFBRXdFLEVBQUUsU0FBUyxNQUFNLEdBQUd2SSxFQUFFdVgsUUFBUS9PLEVBQUUrTyxNQUFNLENBQUMsSUFBSS9PLEVBQUV4SSxFQUFFdVgsTUFBTS9PLEdBQUcsQ0FBQyxHQUFHQSxJQUFJekUsRUFBRSxPQUFPc1QsR0FBR3JYLEdBQUdzSCxFQUFFLEdBQUdrQixJQUFJRCxFQUFFLE9BQU84TyxHQUFHclgsR0FBR3VILEVBQUVpQixFQUFFQSxFQUFFZ1AsUUFBUSxNQUFNN1IsTUFBTTBCLEVBQUUsTUFBTyxHQUFHdEQsRUFBRWtULFNBQVMxTyxFQUFFME8sT0FBT2xULEVBQUUvRCxFQUFFdUksRUFBRUMsTUFBTSxDQUFDLElBQUksSUFBSUMsR0FBRSxFQUFHdUQsRUFBRWhNLEVBQUV1WCxNQUFNdkwsR0FBRyxDQUFDLEdBQUdBLElBQUlqSSxFQUFFLENBQUMwRSxHQUFFLEVBQUcxRSxFQUFFL0QsRUFBRXVJLEVBQUVDLEVBQUUsTUFBTSxHQUFHd0QsSUFBSXpELEVBQUUsQ0FBQ0UsR0FBRSxFQUFHRixFQUFFdkksRUFBRStELEVBQUV5RSxFQUFFLE1BQU13RCxFQUFFQSxFQUFFd0wsUUFBUSxJQUFJL08sRUFBRSxDQUFDLElBQUl1RCxFQUFFeEQsRUFBRStPLE1BQU12TCxHQUFHLENBQUMsR0FBR0EsSUFDNWZqSSxFQUFFLENBQUMwRSxHQUFFLEVBQUcxRSxFQUFFeUUsRUFBRUQsRUFBRXZJLEVBQUUsTUFBTSxHQUFHZ00sSUFBSXpELEVBQUUsQ0FBQ0UsR0FBRSxFQUFHRixFQUFFQyxFQUFFekUsRUFBRS9ELEVBQUUsTUFBTWdNLEVBQUVBLEVBQUV3TCxRQUFRLElBQUkvTyxFQUFFLE1BQU05QyxNQUFNMEIsRUFBRSxPQUFRLEdBQUd0RCxFQUFFaVQsWUFBWXpPLEVBQUUsTUFBTTVDLE1BQU0wQixFQUFFLE1BQU8sR0FBRyxJQUFJdEQsRUFBRW1JLElBQUksTUFBTXZHLE1BQU0wQixFQUFFLE1BQU0sT0FBT3RELEVBQUVzUixVQUFVb0MsVUFBVTFULEVBQUV1RCxFQUFFQyxFQUFtQm1RLENBQUdwUSxJQUFTLE9BQU8sS0FBSyxJQUFJLElBQUlDLEVBQUVELElBQUksQ0FBQyxHQUFHLElBQUlDLEVBQUUyRSxLQUFLLElBQUkzRSxFQUFFMkUsSUFBSSxPQUFPM0UsRUFBRSxHQUFHQSxFQUFFZ1EsTUFBTWhRLEVBQUVnUSxNQUFNTixPQUFPMVAsRUFBRUEsRUFBRUEsRUFBRWdRLFVBQVUsQ0FBQyxHQUFHaFEsSUFBSUQsRUFBRSxNQUFNLE1BQU1DLEVBQUVpUSxTQUFTLENBQUMsSUFBSWpRLEVBQUUwUCxRQUFRMVAsRUFBRTBQLFNBQVMzUCxFQUFFLE9BQU8sS0FBS0MsRUFBRUEsRUFBRTBQLE9BQU8xUCxFQUFFaVEsUUFBUVAsT0FBTzFQLEVBQUUwUCxPQUFPMVAsRUFBRUEsRUFBRWlRLFNBQVMsT0FBTyxLQUM1YyxTQUFTRyxHQUFHclEsRUFBRUMsR0FBRyxJQUFJLElBQUl4RCxFQUFFdUQsRUFBRTBQLFVBQVUsT0FBT3pQLEdBQUcsQ0FBQyxHQUFHQSxJQUFJRCxHQUFHQyxJQUFJeEQsRUFBRSxPQUFNLEVBQUd3RCxFQUFFQSxFQUFFMFAsT0FBTyxPQUFNLEVBQUcsSUFBSVcsR0FBR0MsR0FBR0MsR0FBR0MsR0FBR0MsSUFBRyxFQUFHQyxHQUFHLEdBQUdDLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsSUFBSUMsSUFBSUMsR0FBRyxJQUFJRCxJQUFJRSxHQUFHLEdBQUdDLEdBQUcsNlBBQTZQN1gsTUFBTSxLQUNyYixTQUFTOFgsR0FBR3BSLEVBQUVDLEVBQUV4RCxFQUFFd0UsRUFBRXZJLEdBQUcsTUFBTSxDQUFDMlksVUFBVXJSLEVBQUVzUixhQUFhclIsRUFBRXNSLGlCQUFtQixHQUFGOVUsRUFBSytVLFlBQVk5WSxFQUFFK1ksaUJBQWlCLENBQUN4USxJQUFJLFNBQVN5USxHQUFHMVIsRUFBRUMsR0FBRyxPQUFPRCxHQUFHLElBQUssVUFBVSxJQUFLLFdBQVc0USxHQUFHLEtBQUssTUFBTSxJQUFLLFlBQVksSUFBSyxZQUFZQyxHQUFHLEtBQUssTUFBTSxJQUFLLFlBQVksSUFBSyxXQUFXQyxHQUFHLEtBQUssTUFBTSxJQUFLLGNBQWMsSUFBSyxhQUFhQyxHQUFHWSxPQUFPMVIsRUFBRTJSLFdBQVcsTUFBTSxJQUFLLG9CQUFvQixJQUFLLHFCQUFxQlgsR0FBR1UsT0FBTzFSLEVBQUUyUixZQUMzWixTQUFTQyxHQUFHN1IsRUFBRUMsRUFBRXhELEVBQUV3RSxFQUFFdkksRUFBRXdJLEdBQUcsT0FBRyxPQUFPbEIsR0FBR0EsRUFBRXdSLGNBQWN0USxHQUFTbEIsRUFBRW9SLEdBQUduUixFQUFFeEQsRUFBRXdFLEVBQUV2SSxFQUFFd0ksR0FBRyxPQUFPakIsR0FBWSxRQUFSQSxFQUFFNk4sR0FBRzdOLEtBQWFzUSxHQUFHdFEsR0FBSUQsSUFBRUEsRUFBRXVSLGtCQUFrQnRRLEVBQUVoQixFQUFFRCxFQUFFeVIsaUJBQWlCLE9BQU8vWSxJQUFJLElBQUl1SCxFQUFFOEwsUUFBUXJULElBQUl1SCxFQUFFdk8sS0FBS2dILEdBQVVzSCxHQUU5TSxTQUFTOFIsR0FBRzlSLEdBQUcsSUFBSUMsRUFBRThSLEdBQUcvUixFQUFFdEcsUUFBUSxHQUFHLE9BQU91RyxFQUFFLENBQUMsSUFBSXhELEVBQUVnVCxHQUFHeFAsR0FBRyxHQUFHLE9BQU94RCxFQUFFLEdBQVcsTUFBUndELEVBQUV4RCxFQUFFbUksTUFBWSxHQUFXLFFBQVIzRSxFQUFFMlAsR0FBR25ULElBQW1ILE9BQXRHdUQsRUFBRXFSLFVBQVVwUixPQUFFd1EsR0FBR3pRLEVBQUVnUyxjQUFhLFdBQVdsUyxFQUFFbVMseUJBQXlCalMsRUFBRWtTLFVBQVMsV0FBVzFCLEdBQUcvVCxjQUFvQixHQUFHLElBQUl3RCxHQUFHeEQsRUFBRXNSLFVBQVVvRSxRQUE4RCxZQUFyRG5TLEVBQUVxUixVQUFVLElBQUk1VSxFQUFFbUksSUFBSW5JLEVBQUVzUixVQUFVcUUsY0FBYyxNQUFhcFMsRUFBRXFSLFVBQVUsS0FDMVUsU0FBU2dCLEdBQUdyUyxHQUFHLEdBQUcsT0FBT0EsRUFBRXFSLFVBQVUsT0FBTSxFQUFHLElBQUksSUFBSXBSLEVBQUVELEVBQUV5UixpQkFBaUIsRUFBRXhSLEVBQUVwTixRQUFRLENBQUMsSUFBSTRKLEVBQUU2VixHQUFHdFMsRUFBRXNSLGFBQWF0UixFQUFFdVIsaUJBQWlCdFIsRUFBRSxHQUFHRCxFQUFFd1IsYUFBYSxHQUFHLE9BQU8vVSxFQUFFLE9BQWUsUUFBUndELEVBQUU2TixHQUFHclIsS0FBYThULEdBQUd0USxHQUFHRCxFQUFFcVIsVUFBVTVVLEdBQUUsRUFBR3dELEVBQUVzUyxRQUFRLE9BQU0sRUFBRyxTQUFTQyxHQUFHeFMsRUFBRUMsRUFBRXhELEdBQUc0VixHQUFHclMsSUFBSXZELEVBQUVrVixPQUFPMVIsR0FDelEsU0FBU3dTLEtBQUssSUFBSS9CLElBQUcsRUFBRyxFQUFFQyxHQUFHOWQsUUFBUSxDQUFDLElBQUltTixFQUFFMlEsR0FBRyxHQUFHLEdBQUcsT0FBTzNRLEVBQUVxUixVQUFVLENBQW1CLFFBQWxCclIsRUFBRThOLEdBQUc5TixFQUFFcVIsYUFBcUJmLEdBQUd0USxHQUFHLE1BQU0sSUFBSSxJQUFJQyxFQUFFRCxFQUFFeVIsaUJBQWlCLEVBQUV4UixFQUFFcE4sUUFBUSxDQUFDLElBQUk0SixFQUFFNlYsR0FBR3RTLEVBQUVzUixhQUFhdFIsRUFBRXVSLGlCQUFpQnRSLEVBQUUsR0FBR0QsRUFBRXdSLGFBQWEsR0FBRyxPQUFPL1UsRUFBRSxDQUFDdUQsRUFBRXFSLFVBQVU1VSxFQUFFLE1BQU13RCxFQUFFc1MsUUFBUSxPQUFPdlMsRUFBRXFSLFdBQVdWLEdBQUc0QixRQUFRLE9BQU8zQixJQUFJeUIsR0FBR3pCLE1BQU1BLEdBQUcsTUFBTSxPQUFPQyxJQUFJd0IsR0FBR3hCLE1BQU1BLEdBQUcsTUFBTSxPQUFPQyxJQUFJdUIsR0FBR3ZCLE1BQU1BLEdBQUcsTUFBTUMsR0FBR3hYLFFBQVFpWixJQUFJdkIsR0FBRzFYLFFBQVFpWixJQUNyWixTQUFTRSxHQUFHMVMsRUFBRUMsR0FBR0QsRUFBRXFSLFlBQVlwUixJQUFJRCxFQUFFcVIsVUFBVSxLQUFLWCxLQUFLQSxJQUFHLEVBQUc1USxFQUFFNlMsMEJBQTBCN1MsRUFBRThTLHdCQUF3QkgsTUFDckgsU0FBU0ksR0FBRzdTLEdBQUcsU0FBU0MsRUFBRUEsR0FBRyxPQUFPeVMsR0FBR3pTLEVBQUVELEdBQUcsR0FBRyxFQUFFMlEsR0FBRzlkLE9BQU8sQ0FBQzZmLEdBQUcvQixHQUFHLEdBQUczUSxHQUFHLElBQUksSUFBSXZELEVBQUUsRUFBRUEsRUFBRWtVLEdBQUc5ZCxPQUFPNEosSUFBSSxDQUFDLElBQUl3RSxFQUFFMFAsR0FBR2xVLEdBQUd3RSxFQUFFb1EsWUFBWXJSLElBQUlpQixFQUFFb1EsVUFBVSxPQUErRixJQUF4RixPQUFPVCxJQUFJOEIsR0FBRzlCLEdBQUc1USxHQUFHLE9BQU82USxJQUFJNkIsR0FBRzdCLEdBQUc3USxHQUFHLE9BQU84USxJQUFJNEIsR0FBRzVCLEdBQUc5USxHQUFHK1EsR0FBR3hYLFFBQVEwRyxHQUFHZ1IsR0FBRzFYLFFBQVEwRyxHQUFPeEQsRUFBRSxFQUFFQSxFQUFFeVUsR0FBR3JlLE9BQU80SixLQUFJd0UsRUFBRWlRLEdBQUd6VSxJQUFLNFUsWUFBWXJSLElBQUlpQixFQUFFb1EsVUFBVSxNQUFNLEtBQUssRUFBRUgsR0FBR3JlLFFBQWlCLFFBQVI0SixFQUFFeVUsR0FBRyxJQUFZRyxXQUFZUyxHQUFHclYsR0FBRyxPQUFPQSxFQUFFNFUsV0FBV0gsR0FBR3FCLFFBQy9YLFNBQVNPLEdBQUc5UyxFQUFFQyxHQUFHLElBQUl4RCxFQUFFLEdBQWtGLE9BQS9FQSxFQUFFdUQsRUFBRTRCLGVBQWUzQixFQUFFMkIsY0FBY25GLEVBQUUsU0FBU3VELEdBQUcsU0FBU0MsRUFBRXhELEVBQUUsTUFBTXVELEdBQUcsTUFBTUMsRUFBU3hELEVBQUUsSUFBSXNXLEdBQUcsQ0FBQ0MsYUFBYUYsR0FBRyxZQUFZLGdCQUFnQkcsbUJBQW1CSCxHQUFHLFlBQVksc0JBQXNCSSxlQUFlSixHQUFHLFlBQVksa0JBQWtCSyxjQUFjTCxHQUFHLGFBQWEsa0JBQWtCTSxHQUFHLEdBQUdDLEdBQUcsR0FDbkYsU0FBU0MsR0FBR3RULEdBQUcsR0FBR29ULEdBQUdwVCxHQUFHLE9BQU9vVCxHQUFHcFQsR0FBRyxJQUFJK1MsR0FBRy9TLEdBQUcsT0FBT0EsRUFBRSxJQUFZdkQsRUFBUndELEVBQUU4UyxHQUFHL1MsR0FBSyxJQUFJdkQsS0FBS3dELEVBQUUsR0FBR0EsRUFBRXRILGVBQWU4RCxJQUFJQSxLQUFLNFcsR0FBRyxPQUFPRCxHQUFHcFQsR0FBR0MsRUFBRXhELEdBQUcsT0FBT3VELEVBQTlYUSxJQUFLNlMsR0FBRzNTLFNBQVNDLGNBQWMsT0FBT21MLE1BQU0sbUJBQW1CckwsZ0JBQWdCc1MsR0FBR0MsYUFBYU8saUJBQWlCUixHQUFHRSxtQkFBbUJNLGlCQUFpQlIsR0FBR0csZUFBZUssV0FBVyxvQkFBb0I5UyxlQUFlc1MsR0FBR0ksY0FBY0ssWUFDeE8sSUFBSUMsR0FBR0gsR0FBRyxnQkFBZ0JJLEdBQUdKLEdBQUcsc0JBQXNCSyxHQUFHTCxHQUFHLGtCQUFrQk0sR0FBR04sR0FBRyxpQkFBaUJPLEdBQUcsSUFBSTdDLElBQUk4QyxHQUFHLElBQUk5QyxJQUFJK0MsR0FBRyxDQUFDLFFBQVEsUUFBUU4sR0FBRyxlQUFlQyxHQUFHLHFCQUFxQkMsR0FBRyxpQkFBaUIsVUFBVSxVQUFVLGlCQUFpQixpQkFBaUIsaUJBQWlCLGlCQUFpQixVQUFVLFVBQVUsWUFBWSxZQUFZLFFBQVEsUUFBUSxRQUFRLFFBQVEsb0JBQW9CLG9CQUFvQixPQUFPLE9BQU8sYUFBYSxhQUFhLGlCQUFpQixpQkFBaUIsWUFBWSxZQUMvZSxxQkFBcUIscUJBQXFCLFVBQVUsVUFBVSxXQUFXLFdBQVcsVUFBVSxVQUFVLFVBQVUsVUFBVSxVQUFVLFVBQVUsYUFBYSxhQUFhQyxHQUFHLGdCQUFnQixVQUFVLFdBQVcsU0FBU0ksR0FBR2hVLEVBQUVDLEdBQUcsSUFBSSxJQUFJeEQsRUFBRSxFQUFFQSxFQUFFdUQsRUFBRW5OLE9BQU80SixHQUFHLEVBQUUsQ0FBQyxJQUFJd0UsRUFBRWpCLEVBQUV2RCxHQUFHL0QsRUFBRXNILEVBQUV2RCxFQUFFLEdBQUcvRCxFQUFFLE1BQU1BLEVBQUUsR0FBR2lFLGNBQWNqRSxFQUFFaEUsTUFBTSxJQUFJb2YsR0FBR3hQLElBQUlyRCxFQUFFaEIsR0FBRzRULEdBQUd2UCxJQUFJckQsRUFBRXZJLEdBQUcySCxFQUFHM0gsRUFBRSxDQUFDdUksTUFBMkJnVCxFQUFmblUsRUFBRW9VLGdCQUFrQixJQUFJQyxHQUFFLEVBQy9YLFNBQVNDLEdBQUdwVSxHQUFHLEdBQUcsSUFBSyxFQUFFQSxHQUFHLE9BQU9tVSxHQUFFLEdBQUcsRUFBRSxHQUFHLElBQUssRUFBRW5VLEdBQUcsT0FBT21VLEdBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSyxFQUFFblUsR0FBRyxPQUFPbVUsR0FBRSxHQUFHLEVBQUUsSUFBSWxVLEVBQUUsR0FBR0QsRUFBRSxPQUFHLElBQUlDLEdBQVNrVSxHQUFFLEdBQUdsVSxHQUFLLElBQU8sR0FBRkQsSUFBYW1VLEdBQUUsR0FBRyxJQUFjLElBQVhsVSxFQUFFLElBQUlELElBQWtCbVUsR0FBRSxHQUFHbFUsR0FBSyxJQUFPLElBQUZELElBQWNtVSxHQUFFLEVBQUUsS0FBZ0IsSUFBWmxVLEVBQUUsS0FBS0QsSUFBa0JtVSxHQUFFLEVBQUVsVSxHQUFLLElBQU8sS0FBRkQsSUFBZW1VLEdBQUUsRUFBRSxNQUFvQixJQUFmbFUsRUFBRSxRQUFRRCxJQUFrQm1VLEdBQUUsRUFBRWxVLEdBQWtCLElBQWhCQSxFQUFFLFNBQVNELElBQWtCbVUsR0FBRSxFQUFFbFUsR0FBTyxTQUFGRCxHQUFrQm1VLEdBQUUsRUFBRSxVQUFZLElBQU8sVUFBRm5VLElBQW9CbVUsR0FBRSxFQUFFLFdBQTJCLElBQWpCbFUsRUFBRSxVQUFVRCxJQUFrQm1VLEdBQUUsRUFBRWxVLEdBQUssSUFBSyxXQUFXRCxJQUFVbVUsR0FBRSxFQUFFLGFBQ2pmQSxHQUFFLEVBQVNuVSxHQUNYLFNBQVNxVSxHQUFHclUsRUFBRUMsR0FBRyxJQUFJeEQsRUFBRXVELEVBQUVzVSxhQUFhLEdBQUcsSUFBSTdYLEVBQUUsT0FBTzBYLEdBQUUsRUFBRSxJQUFJbFQsRUFBRSxFQUFFdkksRUFBRSxFQUFFd0ksRUFBRWxCLEVBQUV1VSxhQUFhcFQsRUFBRW5CLEVBQUV3VSxlQUFlOVAsRUFBRTFFLEVBQUV5VSxZQUFZLEdBQUcsSUFBSXZULEVBQUVELEVBQUVDLEVBQUV4SSxFQUFFeWIsR0FBRSxRQUFRLEdBQWlCLElBQWRqVCxFQUFJLFVBQUZ6RSxHQUFrQixDQUFDLElBQUlnSSxFQUFFdkQsR0FBR0MsRUFBRSxJQUFJc0QsR0FBR3hELEVBQUVtVCxHQUFHM1AsR0FBRy9MLEVBQUV5YixJQUFTLElBQUx6UCxHQUFHeEQsS0FBVUQsRUFBRW1ULEdBQUcxUCxHQUFHaE0sRUFBRXliLFNBQWdCLElBQVBqVCxFQUFFekUsR0FBRzBFLElBQVNGLEVBQUVtVCxHQUFHbFQsR0FBR3hJLEVBQUV5YixJQUFHLElBQUl6UCxJQUFJekQsRUFBRW1ULEdBQUcxUCxHQUFHaE0sRUFBRXliLElBQUcsR0FBRyxJQUFJbFQsRUFBRSxPQUFPLEVBQXFDLEdBQXhCQSxFQUFFeEUsSUFBSSxHQUFqQndFLEVBQUUsR0FBR3lULEdBQUd6VCxJQUFhLEVBQUUsR0FBR0EsSUFBSSxHQUFHLEVBQUssSUFBSWhCLEdBQUdBLElBQUlnQixHQUFHLElBQUtoQixFQUFFa0IsR0FBRyxDQUFPLEdBQU5pVCxHQUFHblUsR0FBTXZILEdBQUd5YixHQUFFLE9BQU9sVSxFQUFFa1UsR0FBRXpiLEVBQXFCLEdBQUcsS0FBdEJ1SCxFQUFFRCxFQUFFMlUsZ0JBQXdCLElBQUkzVSxFQUFFQSxFQUFFNFUsY0FBYzNVLEdBQUdnQixFQUFFLEVBQUVoQixHQUFjdkgsRUFBRSxJQUFiK0QsRUFBRSxHQUFHaVksR0FBR3pVLElBQVVnQixHQUFHakIsRUFBRXZELEdBQUd3RCxJQUFJdkgsRUFBRSxPQUFPdUksRUFDMWUsU0FBUzRULEdBQUc3VSxHQUFnQyxPQUFPLElBQXBDQSxHQUFrQixXQUFoQkEsRUFBRXNVLGNBQXNDdFUsRUFBSSxXQUFGQSxFQUFhLFdBQVcsRUFBRSxTQUFTOFUsR0FBRzlVLEVBQUVDLEdBQUcsT0FBT0QsR0FBRyxLQUFLLEdBQUcsT0FBTyxFQUFFLEtBQUssR0FBRyxPQUFPLEVBQUUsS0FBSyxHQUFHLE9BQW1CLEtBQVpBLEVBQUUrVSxHQUFHLElBQUk5VSxJQUFTNlUsR0FBRyxHQUFHN1UsR0FBR0QsRUFBRSxLQUFLLEdBQUcsT0FBb0IsS0FBYkEsRUFBRStVLEdBQUcsS0FBSzlVLElBQVM2VSxHQUFHLEVBQUU3VSxHQUFHRCxFQUFFLEtBQUssRUFBRSxPQUFxQixLQUFkQSxFQUFFK1UsR0FBRyxNQUFNOVUsS0FBNEIsS0FBakJELEVBQUUrVSxHQUFHLFNBQVM5VSxNQUFXRCxFQUFFLEtBQU1BLEVBQUUsS0FBSyxFQUFFLE9BQTBCLEtBQW5CQyxFQUFFOFUsR0FBRyxXQUFXOVUsTUFBV0EsRUFBRSxXQUFXQSxFQUFFLE1BQU01QixNQUFNMEIsRUFBRSxJQUFJQyxJQUFLLFNBQVMrVSxHQUFHL1UsR0FBRyxPQUFPQSxHQUFHQSxFQUFFLFNBQVNnVixHQUFHaFYsR0FBRyxJQUFJLElBQUlDLEVBQUUsR0FBR3hELEVBQUUsRUFBRSxHQUFHQSxFQUFFQSxJQUFJd0QsRUFBRXZPLEtBQUtzTyxHQUFHLE9BQU9DLEVBQ3JkLFNBQVNnVixHQUFHalYsRUFBRUMsRUFBRXhELEdBQUd1RCxFQUFFc1UsY0FBY3JVLEVBQUUsSUFBSWdCLEVBQUVoQixFQUFFLEVBQUVELEVBQUV3VSxnQkFBZ0J2VCxFQUFFakIsRUFBRXlVLGFBQWF4VCxHQUFFakIsRUFBRUEsRUFBRWtWLFlBQVdqVixFQUFFLEdBQUd5VSxHQUFHelUsSUFBUXhELEVBQUUsSUFBSWlZLEdBQUdTLEtBQUtDLE1BQU1ELEtBQUtDLE1BQWlDLFNBQVlwVixHQUFHLE9BQU8sSUFBSUEsRUFBRSxHQUFHLElBQUlxVixHQUFHclYsR0FBR3NWLEdBQUcsR0FBRyxHQUF2RUQsR0FBR0YsS0FBS0ksSUFBSUQsR0FBR0gsS0FBS0ssSUFBeURDLEdBQUczVixFQUFFNFYsOEJBQThCQyxHQUFHN1YsRUFBRW1TLHlCQUF5QjJELElBQUcsRUFBRyxTQUFTQyxHQUFHN1YsRUFBRUMsRUFBRXhELEVBQUV3RSxHQUFHc04sSUFBSUYsS0FBSyxJQUFJM1YsRUFBRW9kLEdBQUc1VSxFQUFFcU4sR0FBR0EsSUFBRyxFQUFHLElBQUlILEdBQUcxVixFQUFFc0gsRUFBRUMsRUFBRXhELEVBQUV3RSxHQUFHLFNBQVNzTixHQUFHck4sSUFBSXVOLE1BQU0sU0FBUzdjLEdBQUdvTyxFQUFFQyxFQUFFeEQsRUFBRXdFLEdBQUcwVSxHQUFHRixHQUFHSyxHQUFHQyxLQUFLLEtBQUsvVixFQUFFQyxFQUFFeEQsRUFBRXdFLElBQ2piLFNBQVM2VSxHQUFHOVYsRUFBRUMsRUFBRXhELEVBQUV3RSxHQUFVLElBQUl2SSxFQUFYLEdBQUdrZCxHQUFVLElBQUlsZCxFQUFFLElBQU8sRUFBRnVILEtBQU8sRUFBRTBRLEdBQUc5ZCxTQUFTLEVBQUVzZSxHQUFHcEYsUUFBUS9MLEdBQUdBLEVBQUVvUixHQUFHLEtBQUtwUixFQUFFQyxFQUFFeEQsRUFBRXdFLEdBQUcwUCxHQUFHamYsS0FBS3NPLE9BQU8sQ0FBQyxJQUFJa0IsRUFBRW9SLEdBQUd0UyxFQUFFQyxFQUFFeEQsRUFBRXdFLEdBQUcsR0FBRyxPQUFPQyxFQUFFeEksR0FBR2daLEdBQUcxUixFQUFFaUIsT0FBTyxDQUFDLEdBQUd2SSxFQUFFLENBQUMsSUFBSSxFQUFFeVksR0FBR3BGLFFBQVEvTCxHQUErQixPQUEzQkEsRUFBRW9SLEdBQUdsUSxFQUFFbEIsRUFBRUMsRUFBRXhELEVBQUV3RSxRQUFHMFAsR0FBR2pmLEtBQUtzTyxHQUFVLEdBZmhPLFNBQVlBLEVBQUVDLEVBQUV4RCxFQUFFd0UsRUFBRXZJLEdBQUcsT0FBT3VILEdBQUcsSUFBSyxVQUFVLE9BQU8yUSxHQUFHaUIsR0FBR2pCLEdBQUc1USxFQUFFQyxFQUFFeEQsRUFBRXdFLEVBQUV2SSxJQUFHLEVBQUcsSUFBSyxZQUFZLE9BQU9tWSxHQUFHZ0IsR0FBR2hCLEdBQUc3USxFQUFFQyxFQUFFeEQsRUFBRXdFLEVBQUV2SSxJQUFHLEVBQUcsSUFBSyxZQUFZLE9BQU9vWSxHQUFHZSxHQUFHZixHQUFHOVEsRUFBRUMsRUFBRXhELEVBQUV3RSxFQUFFdkksSUFBRyxFQUFHLElBQUssY0FBYyxJQUFJd0ksRUFBRXhJLEVBQUVrWixVQUFrRCxPQUF4Q2IsR0FBR3pNLElBQUlwRCxFQUFFMlEsR0FBR2QsR0FBR3ZMLElBQUl0RSxJQUFJLEtBQUtsQixFQUFFQyxFQUFFeEQsRUFBRXdFLEVBQUV2SSxLQUFVLEVBQUcsSUFBSyxvQkFBb0IsT0FBT3dJLEVBQUV4SSxFQUFFa1osVUFBVVgsR0FBRzNNLElBQUlwRCxFQUFFMlEsR0FBR1osR0FBR3pMLElBQUl0RSxJQUFJLEtBQUtsQixFQUFFQyxFQUFFeEQsRUFBRXdFLEVBQUV2SSxLQUFJLEVBQUcsT0FBTSxFQWU5SHNkLENBQUc5VSxFQUFFbEIsRUFBRUMsRUFBRXhELEVBQUV3RSxHQUFHLE9BQU95USxHQUFHMVIsRUFBRWlCLEdBQUdnVixHQUFHalcsRUFBRUMsRUFBRWdCLEVBQUUsS0FBS3hFLEtBQzlRLFNBQVM2VixHQUFHdFMsRUFBRUMsRUFBRXhELEVBQUV3RSxHQUFHLElBQUl2SSxFQUFFNFUsR0FBR3JNLEdBQVcsR0FBRyxRQUFYdkksRUFBRXFaLEdBQUdyWixJQUFlLENBQUMsSUFBSXdJLEVBQUV1TyxHQUFHL1csR0FBRyxHQUFHLE9BQU93SSxFQUFFeEksRUFBRSxTQUFTLENBQUMsSUFBSXlJLEVBQUVELEVBQUUwRCxJQUFJLEdBQUcsS0FBS3pELEVBQUUsQ0FBUyxHQUFHLFFBQVh6SSxFQUFFa1gsR0FBRzFPLElBQWUsT0FBT3hJLEVBQUVBLEVBQUUsVUFBVSxHQUFHLElBQUl5SSxFQUFFLENBQUMsR0FBR0QsRUFBRTZNLFVBQVVvRSxRQUFRLE9BQU8sSUFBSWpSLEVBQUUwRCxJQUFJMUQsRUFBRTZNLFVBQVVxRSxjQUFjLEtBQUsxWixFQUFFLFVBQVV3SSxJQUFJeEksSUFBSUEsRUFBRSxPQUFxQixPQUFkdWQsR0FBR2pXLEVBQUVDLEVBQUVnQixFQUFFdkksRUFBRStELEdBQVUsS0FBSyxJQUFJeVosR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsS0FDelQsU0FBU0MsS0FBSyxHQUFHRCxHQUFHLE9BQU9BLEdBQUcsSUFBSXBXLEVBQWtCaUIsRUFBaEJoQixFQUFFa1csR0FBRzFaLEVBQUV3RCxFQUFFcE4sT0FBUzZGLEVBQUUsVUFBVXdkLEdBQUdBLEdBQUdoaUIsTUFBTWdpQixHQUFHcE8sWUFBWTVHLEVBQUV4SSxFQUFFN0YsT0FBTyxJQUFJbU4sRUFBRSxFQUFFQSxFQUFFdkQsR0FBR3dELEVBQUVELEtBQUt0SCxFQUFFc0gsR0FBR0EsS0FBSyxJQUFJbUIsRUFBRTFFLEVBQUV1RCxFQUFFLElBQUlpQixFQUFFLEVBQUVBLEdBQUdFLEdBQUdsQixFQUFFeEQsRUFBRXdFLEtBQUt2SSxFQUFFd0ksRUFBRUQsR0FBR0EsS0FBSyxPQUFPbVYsR0FBRzFkLEVBQUVoRSxNQUFNc0wsRUFBRSxFQUFFaUIsRUFBRSxFQUFFQSxPQUFFLEdBQVEsU0FBU3FWLEdBQUd0VyxHQUFHLElBQUlDLEVBQUVELEVBQUV1VyxRQUErRSxNQUF2RSxhQUFhdlcsRUFBZ0IsS0FBYkEsRUFBRUEsRUFBRXdXLFdBQWdCLEtBQUt2VyxJQUFJRCxFQUFFLElBQUtBLEVBQUVDLEVBQUUsS0FBS0QsSUFBSUEsRUFBRSxJQUFXLElBQUlBLEdBQUcsS0FBS0EsRUFBRUEsRUFBRSxFQUFFLFNBQVN5VyxLQUFLLE9BQU0sRUFBRyxTQUFTQyxLQUFLLE9BQU0sRUFDalksU0FBU0MsR0FBRzNXLEdBQUcsU0FBU0MsRUFBRUEsRUFBRWdCLEVBQUV2SSxFQUFFd0ksRUFBRUMsR0FBNkcsSUFBSSxJQUFJMUUsS0FBbEh2SyxLQUFLMGtCLFdBQVczVyxFQUFFL04sS0FBSzJrQixZQUFZbmUsRUFBRXhHLEtBQUt5RSxLQUFLc0ssRUFBRS9PLEtBQUtzZixZQUFZdFEsRUFBRWhQLEtBQUt3SCxPQUFPeUgsRUFBRWpQLEtBQUs0a0IsY0FBYyxLQUFrQjlXLEVBQUVBLEVBQUVySCxlQUFlOEQsS0FBS3dELEVBQUVELEVBQUV2RCxHQUFHdkssS0FBS3VLLEdBQUd3RCxFQUFFQSxFQUFFaUIsR0FBR0EsRUFBRXpFLElBQWdJLE9BQTVIdkssS0FBSzZrQixvQkFBb0IsTUFBTTdWLEVBQUU4VixpQkFBaUI5VixFQUFFOFYsa0JBQWlCLElBQUs5VixFQUFFK1YsYUFBYVIsR0FBR0MsR0FBR3hrQixLQUFLZ2xCLHFCQUFxQlIsR0FBVXhrQixLQUMxRSxPQUQrRTJKLEVBQUVvRSxFQUFFekwsVUFBVSxDQUFDMmlCLGVBQWUsV0FBV2psQixLQUFLOGtCLGtCQUFpQixFQUFHLElBQUloWCxFQUFFOU4sS0FBS3NmLFlBQVl4UixJQUFJQSxFQUFFbVgsZUFBZW5YLEVBQUVtWCxpQkFBaUIsa0JBQW1CblgsRUFBRWlYLGNBQzdlalgsRUFBRWlYLGFBQVksR0FBSS9rQixLQUFLNmtCLG1CQUFtQk4sS0FBS1csZ0JBQWdCLFdBQVcsSUFBSXBYLEVBQUU5TixLQUFLc2YsWUFBWXhSLElBQUlBLEVBQUVvWCxnQkFBZ0JwWCxFQUFFb1gsa0JBQWtCLGtCQUFtQnBYLEVBQUVxWCxlQUFlclgsRUFBRXFYLGNBQWEsR0FBSW5sQixLQUFLZ2xCLHFCQUFxQlQsS0FBS2EsUUFBUSxhQUFhQyxhQUFhZCxLQUFZeFcsRUFDaFIsSUFBb0x1WCxHQUFHQyxHQUFHQyxHQUF0TEMsR0FBRyxDQUFDQyxXQUFXLEVBQUVDLFFBQVEsRUFBRUMsV0FBVyxFQUFFQyxVQUFVLFNBQVMvWCxHQUFHLE9BQU9BLEVBQUUrWCxXQUFXQyxLQUFLQyxPQUFPakIsaUJBQWlCLEVBQUVrQixVQUFVLEdBQUdDLEdBQUd4QixHQUFHZ0IsSUFBSVMsR0FBR3ZjLEVBQUUsR0FBRzhiLEdBQUcsQ0FBQ1UsS0FBSyxFQUFFQyxPQUFPLElBQUlDLEdBQUc1QixHQUFHeUIsSUFBYUksR0FBRzNjLEVBQUUsR0FBR3VjLEdBQUcsQ0FBQ0ssUUFBUSxFQUFFQyxRQUFRLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxTQUFTLEVBQUVDLE9BQU8sRUFBRUMsUUFBUSxFQUFFQyxpQkFBaUJDLEdBQUdDLE9BQU8sRUFBRUMsUUFBUSxFQUFFQyxjQUFjLFNBQVN2WixHQUFHLFlBQU8sSUFBU0EsRUFBRXVaLGNBQWN2WixFQUFFd1osY0FBY3haLEVBQUV1TixXQUFXdk4sRUFBRXlaLFVBQVV6WixFQUFFd1osWUFBWXhaLEVBQUV1WixlQUFlRyxVQUFVLFNBQVMxWixHQUFHLE1BQUcsY0FDM2VBLEVBQVNBLEVBQUUwWixXQUFVMVosSUFBSTBYLEtBQUtBLElBQUksY0FBYzFYLEVBQUVySixNQUFNNmdCLEdBQUd4WCxFQUFFeVksUUFBUWYsR0FBR2UsUUFBUWhCLEdBQUd6WCxFQUFFMFksUUFBUWhCLEdBQUdnQixTQUFTakIsR0FBR0QsR0FBRyxFQUFFRSxHQUFHMVgsR0FBVXdYLEtBQUltQyxVQUFVLFNBQVMzWixHQUFHLE1BQU0sY0FBY0EsRUFBRUEsRUFBRTJaLFVBQVVsQyxNQUFNbUMsR0FBR2pELEdBQUc2QixJQUFpQ3FCLEdBQUdsRCxHQUE3QjlhLEVBQUUsR0FBRzJjLEdBQUcsQ0FBQ3NCLGFBQWEsS0FBNENDLEdBQUdwRCxHQUE5QjlhLEVBQUUsR0FBR3VjLEdBQUcsQ0FBQ21CLGNBQWMsS0FBMEVTLEdBQUdyRCxHQUE1RDlhLEVBQUUsR0FBRzhiLEdBQUcsQ0FBQ3NDLGNBQWMsRUFBRUMsWUFBWSxFQUFFQyxjQUFjLEtBQXNIQyxHQUFHekQsR0FBeEc5YSxFQUFFLEdBQUc4YixHQUFHLENBQUMwQyxjQUFjLFNBQVNyYSxHQUFHLE1BQU0sa0JBQWtCQSxFQUFFQSxFQUFFcWEsY0FBYzVaLE9BQU80WixrQkFBZ0RDLEdBQUczRCxHQUFyQjlhLEVBQUUsR0FBRzhiLEdBQUcsQ0FBQ2xpQixLQUFLLEtBQWM4a0IsR0FBRyxDQUFDQyxJQUFJLFNBQ3hmQyxTQUFTLElBQUlDLEtBQUssWUFBWUMsR0FBRyxVQUFVQyxNQUFNLGFBQWFDLEtBQUssWUFBWUMsSUFBSSxTQUFTQyxJQUFJLEtBQUtDLEtBQUssY0FBY0MsS0FBSyxjQUFjQyxPQUFPLGFBQWFDLGdCQUFnQixnQkFBZ0JDLEdBQUcsQ0FBQ0MsRUFBRSxZQUFZQyxFQUFFLE1BQU1DLEdBQUcsUUFBUUMsR0FBRyxRQUFRQyxHQUFHLFFBQVFDLEdBQUcsVUFBVUMsR0FBRyxNQUFNQyxHQUFHLFFBQVFDLEdBQUcsV0FBV0MsR0FBRyxTQUFTQyxHQUFHLElBQUlDLEdBQUcsU0FBU0MsR0FBRyxXQUFXQyxHQUFHLE1BQU1DLEdBQUcsT0FBT0MsR0FBRyxZQUFZQyxHQUFHLFVBQVVDLEdBQUcsYUFBYUMsR0FBRyxZQUFZQyxHQUFHLFNBQVNDLEdBQUcsU0FBU0MsSUFBSSxLQUFLQyxJQUFJLEtBQUtDLElBQUksS0FBS0MsSUFBSSxLQUFLQyxJQUFJLEtBQUtDLElBQUksS0FBS0MsSUFBSSxLQUN0ZkMsSUFBSSxLQUFLQyxJQUFJLEtBQUtDLElBQUksTUFBTUMsSUFBSSxNQUFNQyxJQUFJLE1BQU1DLElBQUksVUFBVUMsSUFBSSxhQUFhQyxJQUFJLFFBQVFDLEdBQUcsQ0FBQ0MsSUFBSSxTQUFTQyxRQUFRLFVBQVVDLEtBQUssVUFBVUMsTUFBTSxZQUFZLFNBQVNDLEdBQUc5ZCxHQUFHLElBQUlDLEVBQUUvTixLQUFLc2YsWUFBWSxPQUFPdlIsRUFBRWtaLGlCQUFpQmxaLEVBQUVrWixpQkFBaUJuWixNQUFJQSxFQUFFeWQsR0FBR3pkLE9BQU1DLEVBQUVELEdBQU0sU0FBU29aLEtBQUssT0FBTzBFLEdBQzlSLElBQ2lFQyxHQUFHcEgsR0FEN0Q5YSxFQUFFLEdBQUd1YyxHQUFHLENBQUM1ZixJQUFJLFNBQVN3SCxHQUFHLEdBQUdBLEVBQUV4SCxJQUFJLENBQUMsSUFBSXlILEVBQUVzYSxHQUFHdmEsRUFBRXhILE1BQU13SCxFQUFFeEgsSUFBSSxHQUFHLGlCQUFpQnlILEVBQUUsT0FBT0EsRUFBRSxNQUFNLGFBQWFELEVBQUVySixLQUFjLE1BQVJxSixFQUFFc1csR0FBR3RXLElBQVUsUUFBUTlHLE9BQU9FLGFBQWE0RyxHQUFJLFlBQVlBLEVBQUVySixNQUFNLFVBQVVxSixFQUFFckosS0FBS3lrQixHQUFHcGIsRUFBRXVXLFVBQVUsZUFBZSxJQUFJeUgsS0FBSyxFQUFFOWYsU0FBUyxFQUFFNmEsUUFBUSxFQUFFQyxTQUFTLEVBQUVDLE9BQU8sRUFBRUMsUUFBUSxFQUFFMWUsT0FBTyxFQUFFeWpCLE9BQU8sRUFBRTlFLGlCQUFpQkMsR0FBRzVDLFNBQVMsU0FBU3hXLEdBQUcsTUFBTSxhQUFhQSxFQUFFckosS0FBSzJmLEdBQUd0VyxHQUFHLEdBQUd1VyxRQUFRLFNBQVN2VyxHQUFHLE1BQU0sWUFBWUEsRUFBRXJKLE1BQU0sVUFBVXFKLEVBQUVySixLQUFLcUosRUFBRXVXLFFBQVEsR0FBRzJILE1BQU0sU0FBU2xlLEdBQUcsTUFBTSxhQUM3ZUEsRUFBRXJKLEtBQUsyZixHQUFHdFcsR0FBRyxZQUFZQSxFQUFFckosTUFBTSxVQUFVcUosRUFBRXJKLEtBQUtxSixFQUFFdVcsUUFBUSxNQUE0STRILEdBQUd4SCxHQUE3SDlhLEVBQUUsR0FBRzJjLEdBQUcsQ0FBQzVHLFVBQVUsRUFBRXdNLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxTQUFTLEVBQUVDLG1CQUFtQixFQUFFQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxZQUFZLEVBQUVDLFVBQVUsS0FBbUlDLEdBQUdsSSxHQUFySDlhLEVBQUUsR0FBR3VjLEdBQUcsQ0FBQzBHLFFBQVEsRUFBRUMsY0FBYyxFQUFFQyxlQUFlLEVBQUUvRixPQUFPLEVBQUVDLFFBQVEsRUFBRUgsUUFBUSxFQUFFQyxTQUFTLEVBQUVHLGlCQUFpQkMsTUFBMEU2RixHQUFHdEksR0FBM0Q5YSxFQUFFLEdBQUc4YixHQUFHLENBQUNuVyxhQUFhLEVBQUUwWSxZQUFZLEVBQUVDLGNBQWMsS0FDL1ArRSxHQUFHdkksR0FENlE5YSxFQUFFLEdBQUcyYyxHQUFHLENBQUMyRyxPQUFPLFNBQVNuZixHQUFHLE1BQU0sV0FBV0EsRUFBRUEsRUFBRW1mLE9BQU8sZ0JBQWdCbmYsR0FBR0EsRUFBRW9mLFlBQVksR0FDbGZDLE9BQU8sU0FBU3JmLEdBQUcsTUFBTSxXQUFXQSxFQUFFQSxFQUFFcWYsT0FBTyxnQkFBZ0JyZixHQUFHQSxFQUFFc2YsWUFBWSxlQUFldGYsR0FBR0EsRUFBRXVmLFdBQVcsR0FBR0MsT0FBTyxFQUFFQyxVQUFVLEtBQWNDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxJQUFJQyxHQUFHbmYsR0FBSSxxQkFBcUJDLE9BQU9tZixHQUFHLEtBQUtwZixHQUFJLGlCQUFpQkUsV0FBV2tmLEdBQUdsZixTQUFTbWYsY0FBYyxJQUFJQyxHQUFHdGYsR0FBSSxjQUFjQyxTQUFTbWYsR0FBR0csR0FBR3ZmLEtBQU1tZixJQUFJQyxJQUFJLEVBQUVBLElBQUksSUFBSUEsSUFBSUksR0FBRzltQixPQUFPRSxhQUFhLElBQUk2bUIsSUFBRyxFQUMxVyxTQUFTQyxHQUFHbGdCLEVBQUVDLEdBQUcsT0FBT0QsR0FBRyxJQUFLLFFBQVEsT0FBTyxJQUFJMGYsR0FBRzNULFFBQVE5TCxFQUFFc1csU0FBUyxJQUFLLFVBQVUsT0FBTyxNQUFNdFcsRUFBRXNXLFFBQVEsSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLFdBQVcsT0FBTSxFQUFHLFFBQVEsT0FBTSxHQUFJLFNBQVM0SixHQUFHbmdCLEdBQWMsTUFBTSxpQkFBakJBLEVBQUVBLEVBQUVzWSxTQUFrQyxTQUFTdFksRUFBRUEsRUFBRXZLLEtBQUssS0FBSyxJQUFJMnFCLElBQUcsRUFFMVFDLEdBQUcsQ0FBQ0MsT0FBTSxFQUFHQyxNQUFLLEVBQUdDLFVBQVMsRUFBRyxrQkFBaUIsRUFBR0MsT0FBTSxFQUFHQyxPQUFNLEVBQUc5aEIsUUFBTyxFQUFHK2hCLFVBQVMsRUFBR0MsT0FBTSxFQUFHQyxRQUFPLEVBQUdDLEtBQUksRUFBR0MsTUFBSyxFQUFHQyxNQUFLLEVBQUdDLEtBQUksRUFBR0MsTUFBSyxHQUFJLFNBQVNDLEdBQUduaEIsR0FBRyxJQUFJQyxFQUFFRCxHQUFHQSxFQUFFcUYsVUFBVXJGLEVBQUVxRixTQUFTekQsY0FBYyxNQUFNLFVBQVUzQixJQUFJb2dCLEdBQUdyZ0IsRUFBRXJKLE1BQU0sYUFBYXNKLEVBQVEsU0FBU21oQixHQUFHcGhCLEVBQUVDLEVBQUV4RCxFQUFFd0UsR0FBR2dOLEdBQUdoTixHQUFzQixHQUFuQmhCLEVBQUVvaEIsR0FBR3BoQixFQUFFLGFBQWdCcE4sU0FBUzRKLEVBQUUsSUFBSTBiLEdBQUcsV0FBVyxTQUFTLEtBQUsxYixFQUFFd0UsR0FBR2pCLEVBQUV0TyxLQUFLLENBQUM0dkIsTUFBTTdrQixFQUFFOGtCLFVBQVV0aEIsS0FBSyxJQUFJdWhCLEdBQUcsS0FBS0MsR0FBRyxLQUFLLFNBQVNya0IsR0FBRzRDLEdBQUcwaEIsR0FBRzFoQixFQUFFLEdBQUcsU0FBUzJoQixHQUFHM2hCLEdBQWUsR0FBRytGLEVBQVQ2YixHQUFHNWhCLElBQVksT0FBT0EsRUFDbmUsU0FBUzZoQixHQUFHN2hCLEVBQUVDLEdBQUcsR0FBRyxXQUFXRCxFQUFFLE9BQU9DLEVBQUUsSUFBSTZoQixJQUFHLEVBQUcsR0FBR3RoQixFQUFHLENBQUMsSUFBSXVoQixHQUFHLEdBQUd2aEIsRUFBRyxDQUFDLElBQUl3aEIsR0FBRyxZQUFZdGhCLFNBQVMsSUFBSXNoQixHQUFHLENBQUMsSUFBSUMsR0FBR3ZoQixTQUFTQyxjQUFjLE9BQU9zaEIsR0FBRzVmLGFBQWEsVUFBVSxXQUFXMmYsR0FBRyxtQkFBb0JDLEdBQUdDLFFBQVFILEdBQUdDLFFBQVFELElBQUcsRUFBR0QsR0FBR0MsTUFBTXJoQixTQUFTbWYsY0FBYyxFQUFFbmYsU0FBU21mLGNBQWMsU0FBU3NDLEtBQUtYLEtBQUtBLEdBQUdZLFlBQVksbUJBQW1CQyxJQUFJWixHQUFHRCxHQUFHLE1BQU0sU0FBU2EsR0FBR3JpQixHQUFHLEdBQUcsVUFBVUEsRUFBRXdCLGNBQWNtZ0IsR0FBR0YsSUFBSSxDQUFDLElBQUl4aEIsRUFBRSxHQUF5QixHQUF0Qm1oQixHQUFHbmhCLEVBQUV3aEIsR0FBR3poQixFQUFFc04sR0FBR3ROLElBQUlBLEVBQUU1QyxHQUFNbVIsR0FBR3ZPLEVBQUVDLE9BQU8sQ0FBQ3NPLElBQUcsRUFBRyxJQUFJSixHQUFHbk8sRUFBRUMsR0FBRyxRQUFRc08sSUFBRyxFQUFHRSxRQUMzZSxTQUFTNlQsR0FBR3RpQixFQUFFQyxFQUFFeEQsR0FBRyxZQUFZdUQsR0FBR21pQixLQUFVVixHQUFHaGxCLEdBQVIra0IsR0FBR3ZoQixHQUFVc2lCLFlBQVksbUJBQW1CRixLQUFLLGFBQWFyaUIsR0FBR21pQixLQUFLLFNBQVNLLEdBQUd4aUIsR0FBRyxHQUFHLG9CQUFvQkEsR0FBRyxVQUFVQSxHQUFHLFlBQVlBLEVBQUUsT0FBTzJoQixHQUFHRixJQUFJLFNBQVNnQixHQUFHemlCLEVBQUVDLEdBQUcsR0FBRyxVQUFVRCxFQUFFLE9BQU8yaEIsR0FBRzFoQixHQUFHLFNBQVN5aUIsR0FBRzFpQixFQUFFQyxHQUFHLEdBQUcsVUFBVUQsR0FBRyxXQUFXQSxFQUFFLE9BQU8yaEIsR0FBRzFoQixHQUFtRSxJQUFJMGlCLEdBQUcsbUJBQW9CbHZCLE9BQU80WixHQUFHNVosT0FBTzRaLEdBQTVHLFNBQVlyTixFQUFFQyxHQUFHLE9BQU9ELElBQUlDLElBQUksSUFBSUQsR0FBRyxFQUFFQSxHQUFJLEVBQUVDLElBQUlELEdBQUlBLEdBQUdDLEdBQUlBLEdBQW9EMmlCLEdBQUdudkIsT0FBT2UsVUFBVW1FLGVBQzdhLFNBQVNrcUIsR0FBRzdpQixFQUFFQyxHQUFHLEdBQUcwaUIsR0FBRzNpQixFQUFFQyxHQUFHLE9BQU0sRUFBRyxHQUFHLGlCQUFrQkQsR0FBRyxPQUFPQSxHQUFHLGlCQUFrQkMsR0FBRyxPQUFPQSxFQUFFLE9BQU0sRUFBRyxJQUFJeEQsRUFBRWhKLE9BQU80RSxLQUFLMkgsR0FBR2lCLEVBQUV4TixPQUFPNEUsS0FBSzRILEdBQUcsR0FBR3hELEVBQUU1SixTQUFTb08sRUFBRXBPLE9BQU8sT0FBTSxFQUFHLElBQUlvTyxFQUFFLEVBQUVBLEVBQUV4RSxFQUFFNUosT0FBT29PLElBQUksSUFBSTJoQixHQUFHbnVCLEtBQUt3TCxFQUFFeEQsRUFBRXdFLE1BQU0waEIsR0FBRzNpQixFQUFFdkQsRUFBRXdFLElBQUloQixFQUFFeEQsRUFBRXdFLEtBQUssT0FBTSxFQUFHLE9BQU0sRUFBRyxTQUFTNmhCLEdBQUc5aUIsR0FBRyxLQUFLQSxHQUFHQSxFQUFFdUksWUFBWXZJLEVBQUVBLEVBQUV1SSxXQUFXLE9BQU92SSxFQUNsVSxTQUFTK2lCLEdBQUcvaUIsRUFBRUMsR0FBRyxJQUF3QmdCLEVBQXBCeEUsRUFBRXFtQixHQUFHOWlCLEdBQU8sSUFBSkEsRUFBRSxFQUFZdkQsR0FBRyxDQUFDLEdBQUcsSUFBSUEsRUFBRXFNLFNBQVMsQ0FBMEIsR0FBekI3SCxFQUFFakIsRUFBRXZELEVBQUVxTCxZQUFZalYsT0FBVW1OLEdBQUdDLEdBQUdnQixHQUFHaEIsRUFBRSxNQUFNLENBQUNaLEtBQUs1QyxFQUFFVixPQUFPa0UsRUFBRUQsR0FBR0EsRUFBRWlCLEVBQUVqQixFQUFFLENBQUMsS0FBS3ZELEdBQUcsQ0FBQyxHQUFHQSxFQUFFdW1CLFlBQVksQ0FBQ3ZtQixFQUFFQSxFQUFFdW1CLFlBQVksTUFBTWhqQixFQUFFdkQsRUFBRUEsRUFBRWdSLFdBQVdoUixPQUFFLEVBQU9BLEVBQUVxbUIsR0FBR3JtQixJQUFJLFNBQVN3bUIsR0FBR2pqQixFQUFFQyxHQUFHLFNBQU9ELElBQUdDLEtBQUVELElBQUlDLEtBQUtELEdBQUcsSUFBSUEsRUFBRThJLFlBQVk3SSxHQUFHLElBQUlBLEVBQUU2SSxTQUFTbWEsR0FBR2pqQixFQUFFQyxFQUFFd04sWUFBWSxhQUFhek4sRUFBRUEsRUFBRWtqQixTQUFTampCLEtBQUdELEVBQUVtakIsNEJBQXdELEdBQTdCbmpCLEVBQUVtakIsd0JBQXdCbGpCLE1BQ2xaLFNBQVNtakIsS0FBSyxJQUFJLElBQUlwakIsRUFBRVMsT0FBT1IsRUFBRWdHLElBQUtoRyxhQUFhRCxFQUFFcWpCLG1CQUFtQixDQUFDLElBQUksSUFBSTVtQixFQUFFLGlCQUFrQndELEVBQUVxakIsY0FBY3BsQixTQUFTcWxCLEtBQUssTUFBTXRpQixHQUFHeEUsR0FBRSxFQUFHLElBQUdBLEVBQXlCLE1BQU13RCxFQUFFZ0csR0FBL0JqRyxFQUFFQyxFQUFFcWpCLGVBQWdDNWlCLFVBQVUsT0FBT1QsRUFBRSxTQUFTdWpCLEdBQUd4akIsR0FBRyxJQUFJQyxFQUFFRCxHQUFHQSxFQUFFcUYsVUFBVXJGLEVBQUVxRixTQUFTekQsY0FBYyxPQUFPM0IsSUFBSSxVQUFVQSxJQUFJLFNBQVNELEVBQUVySixNQUFNLFdBQVdxSixFQUFFckosTUFBTSxRQUFRcUosRUFBRXJKLE1BQU0sUUFBUXFKLEVBQUVySixNQUFNLGFBQWFxSixFQUFFckosT0FBTyxhQUFhc0osR0FBRyxTQUFTRCxFQUFFeWpCLGlCQUN4WixJQUFJQyxHQUFHbGpCLEdBQUksaUJBQWlCRSxVQUFVLElBQUlBLFNBQVNtZixhQUFhOEQsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsSUFBRyxFQUMzRixTQUFTQyxHQUFHL2pCLEVBQUVDLEVBQUV4RCxHQUFHLElBQUl3RSxFQUFFeEUsRUFBRWdFLFNBQVNoRSxFQUFFQSxFQUFFaUUsU0FBUyxJQUFJakUsRUFBRXFNLFNBQVNyTSxFQUFFQSxFQUFFdUssY0FBYzhjLElBQUksTUFBTUgsSUFBSUEsS0FBSzFkLEVBQUdoRixLQUFzQ0EsRUFBNUIsbUJBQUxBLEVBQUUwaUIsS0FBeUJILEdBQUd2aUIsR0FBSyxDQUFDK2lCLE1BQU0vaUIsRUFBRWdqQixlQUFlMW1CLElBQUkwRCxFQUFFaWpCLGNBQXlGLENBQUNDLFlBQTNFbGpCLEdBQUdBLEVBQUUrRixlQUFlL0YsRUFBRStGLGNBQWNvZCxhQUFhM2pCLFFBQVE0akIsZ0JBQStCRixXQUFXRyxhQUFhcmpCLEVBQUVxakIsYUFBYUMsVUFBVXRqQixFQUFFc2pCLFVBQVVDLFlBQVl2akIsRUFBRXVqQixhQUFjWCxJQUFJaEIsR0FBR2dCLEdBQUc1aUIsS0FBSzRpQixHQUFHNWlCLEVBQXNCLEdBQXBCQSxFQUFFb2dCLEdBQUd1QyxHQUFHLGFBQWdCL3dCLFNBQVNvTixFQUFFLElBQUlrWSxHQUFHLFdBQVcsU0FBUyxLQUFLbFksRUFBRXhELEdBQUd1RCxFQUFFdE8sS0FBSyxDQUFDNHZCLE1BQU1yaEIsRUFBRXNoQixVQUFVdGdCLElBQUloQixFQUFFdkcsT0FBT2lxQixNQUNqZjNQLEdBQUcsbWpCQUFtakIxYSxNQUFNLEtBQzVqQixHQUFHMGEsR0FBRyxvUkFBb1IxYSxNQUFNLEtBQUssR0FBRzBhLEdBQUdELEdBQUcsR0FBRyxJQUFJLElBQUkwUSxHQUFHLHFGQUFxRm5yQixNQUFNLEtBQUtvckIsR0FBRyxFQUFFQSxHQUFHRCxHQUFHNXhCLE9BQU82eEIsS0FBSzVRLEdBQUd4UCxJQUFJbWdCLEdBQUdDLElBQUksR0FBR3BrQixFQUFHLGVBQWUsQ0FBQyxXQUFXLGNBQ2xlQSxFQUFHLGVBQWUsQ0FBQyxXQUFXLGNBQWNBLEVBQUcsaUJBQWlCLENBQUMsYUFBYSxnQkFBZ0JBLEVBQUcsaUJBQWlCLENBQUMsYUFBYSxnQkFBZ0JELEVBQUcsV0FBVyxvRUFBb0UvRyxNQUFNLE1BQU0rRyxFQUFHLFdBQVcsdUZBQXVGL0csTUFBTSxNQUFNK0csRUFBRyxnQkFBZ0IsQ0FBQyxpQkFBaUIsV0FBVyxZQUFZLFVBQVVBLEVBQUcsbUJBQW1CLDJEQUEyRC9HLE1BQU0sTUFDNWYrRyxFQUFHLHFCQUFxQiw2REFBNkQvRyxNQUFNLE1BQU0rRyxFQUFHLHNCQUFzQiw4REFBOEQvRyxNQUFNLE1BQU0sSUFBSXFyQixHQUFHLHNOQUFzTnJyQixNQUFNLEtBQUtzckIsR0FBRyxJQUFJemtCLElBQUksMENBQTBDN0csTUFBTSxLQUFLaEgsT0FBT3F5QixLQUNuZixTQUFTRSxHQUFHN2tCLEVBQUVDLEVBQUV4RCxHQUFHLElBQUl3RSxFQUFFakIsRUFBRXJKLE1BQU0sZ0JBQWdCcUosRUFBRThXLGNBQWNyYSxFQS9DakUsU0FBWXVELEVBQUVDLEVBQUV4RCxFQUFFd0UsRUFBRXZJLEVBQUV3SSxFQUFFQyxFQUFFdUQsRUFBRUQsR0FBNEIsR0FBekIrSyxHQUFHUCxNQUFNL2MsS0FBSzZFLFdBQWNvWSxHQUFHLENBQUMsSUFBR0EsR0FBZ0MsTUFBTTlRLE1BQU0wQixFQUFFLE1BQTFDLElBQUlpUCxFQUFFSSxHQUFHRCxJQUFHLEVBQUdDLEdBQUcsS0FBOEJDLEtBQUtBLElBQUcsRUFBR0MsR0FBR04sSUErQ2pFOFYsQ0FBRzdqQixFQUFFaEIsT0FBRSxFQUFPRCxHQUFHQSxFQUFFOFcsY0FBYyxLQUNwRyxTQUFTNEssR0FBRzFoQixFQUFFQyxHQUFHQSxFQUFFLElBQU8sRUFBRkEsR0FBSyxJQUFJLElBQUl4RCxFQUFFLEVBQUVBLEVBQUV1RCxFQUFFbk4sT0FBTzRKLElBQUksQ0FBQyxJQUFJd0UsRUFBRWpCLEVBQUV2RCxHQUFHL0QsRUFBRXVJLEVBQUVxZ0IsTUFBTXJnQixFQUFFQSxFQUFFc2dCLFVBQVV2aEIsRUFBRSxDQUFDLElBQUlrQixPQUFFLEVBQU8sR0FBR2pCLEVBQUUsSUFBSSxJQUFJa0IsRUFBRUYsRUFBRXBPLE9BQU8sRUFBRSxHQUFHc08sRUFBRUEsSUFBSSxDQUFDLElBQUl1RCxFQUFFekQsRUFBRUUsR0FBR3NELEVBQUVDLEVBQUVxZ0IsU0FBUy9WLEVBQUV0SyxFQUFFb1MsY0FBMkIsR0FBYnBTLEVBQUVBLEVBQUVzZ0IsU0FBWXZnQixJQUFJdkQsR0FBR3hJLEVBQUV3ZSx1QkFBdUIsTUFBTWxYLEVBQUU2a0IsR0FBR25zQixFQUFFZ00sRUFBRXNLLEdBQUc5TixFQUFFdUQsT0FBTyxJQUFJdEQsRUFBRSxFQUFFQSxFQUFFRixFQUFFcE8sT0FBT3NPLElBQUksQ0FBb0QsR0FBNUNzRCxHQUFQQyxFQUFFekQsRUFBRUUsSUFBTzRqQixTQUFTL1YsRUFBRXRLLEVBQUVvUyxjQUFjcFMsRUFBRUEsRUFBRXNnQixTQUFZdmdCLElBQUl2RCxHQUFHeEksRUFBRXdlLHVCQUF1QixNQUFNbFgsRUFBRTZrQixHQUFHbnNCLEVBQUVnTSxFQUFFc0ssR0FBRzlOLEVBQUV1RCxJQUFJLEdBQUc0SyxHQUFHLE1BQU1yUCxFQUFFc1AsR0FBR0QsSUFBRyxFQUFHQyxHQUFHLEtBQUt0UCxFQUMxYSxTQUFTaWxCLEdBQUVqbEIsRUFBRUMsR0FBRyxJQUFJeEQsRUFBRXlvQixHQUFHamxCLEdBQUdnQixFQUFFakIsRUFBRSxXQUFXdkQsRUFBRTBvQixJQUFJbGtCLEtBQUtta0IsR0FBR25sQixFQUFFRCxFQUFFLEdBQUUsR0FBSXZELEVBQUU4RCxJQUFJVSxJQUFJLElBQUlva0IsR0FBRyxrQkFBa0JsUSxLQUFLbVEsU0FBU3J6QixTQUFTLElBQUl5QyxNQUFNLEdBQUcsU0FBUzZ3QixHQUFHdmxCLEdBQUdBLEVBQUVxbEIsTUFBTXJsQixFQUFFcWxCLEtBQUksRUFBR25sQixFQUFHM0csU0FBUSxTQUFTMEcsR0FBRzJrQixHQUFHTyxJQUFJbGxCLElBQUl1bEIsR0FBR3ZsQixHQUFFLEVBQUdELEVBQUUsTUFBTXdsQixHQUFHdmxCLEdBQUUsRUFBR0QsRUFBRSxVQUN0TyxTQUFTd2xCLEdBQUd4bEIsRUFBRUMsRUFBRXhELEVBQUV3RSxHQUFHLElBQUl2SSxFQUFFLEVBQUUzQixVQUFVbEUsYUFBUSxJQUFTa0UsVUFBVSxHQUFHQSxVQUFVLEdBQUcsRUFBRW1LLEVBQUV6RSxFQUE2RCxHQUEzRCxvQkFBb0J1RCxHQUFHLElBQUl2RCxFQUFFcU0sV0FBVzVILEVBQUV6RSxFQUFFdUssZUFBa0IsT0FBTy9GLElBQUloQixHQUFHMmtCLEdBQUdPLElBQUlubEIsR0FBRyxDQUFDLEdBQUcsV0FBV0EsRUFBRSxPQUFPdEgsR0FBRyxFQUFFd0ksRUFBRUQsRUFBRSxJQUFJRSxFQUFFK2pCLEdBQUdoa0IsR0FBR3dELEVBQUUxRSxFQUFFLE1BQU1DLEVBQUUsVUFBVSxVQUFVa0IsRUFBRWdrQixJQUFJemdCLEtBQUt6RSxJQUFJdkgsR0FBRyxHQUFHMHNCLEdBQUdsa0IsRUFBRWxCLEVBQUV0SCxFQUFFdUgsR0FBR2tCLEVBQUVaLElBQUltRSxJQUNsUyxTQUFTMGdCLEdBQUdwbEIsRUFBRUMsRUFBRXhELEVBQUV3RSxHQUFHLElBQUl2SSxFQUFFb2IsR0FBR3RPLElBQUl2RixHQUFHLFlBQU8sSUFBU3ZILEVBQUUsRUFBRUEsR0FBRyxLQUFLLEVBQUVBLEVBQUVtZCxHQUFHLE1BQU0sS0FBSyxFQUFFbmQsRUFBRTlHLEdBQUcsTUFBTSxRQUFROEcsRUFBRW9kLEdBQUdyWixFQUFFL0QsRUFBRXFkLEtBQUssS0FBSzlWLEVBQUV4RCxFQUFFdUQsR0FBR3RILE9BQUUsR0FBUWlXLElBQUksZUFBZTFPLEdBQUcsY0FBY0EsR0FBRyxVQUFVQSxJQUFJdkgsR0FBRSxHQUFJdUksT0FBRSxJQUFTdkksRUFBRXNILEVBQUU2TyxpQkFBaUI1TyxFQUFFeEQsRUFBRSxDQUFDVCxTQUFRLEVBQUd5cEIsUUFBUS9zQixJQUFJc0gsRUFBRTZPLGlCQUFpQjVPLEVBQUV4RCxHQUFFLFFBQUksSUFBUy9ELEVBQUVzSCxFQUFFNk8saUJBQWlCNU8sRUFBRXhELEVBQUUsQ0FBQ2dwQixRQUFRL3NCLElBQUlzSCxFQUFFNk8saUJBQWlCNU8sRUFBRXhELEdBQUUsR0FDcFcsU0FBU3daLEdBQUdqVyxFQUFFQyxFQUFFeEQsRUFBRXdFLEVBQUV2SSxHQUFHLElBQUl3SSxFQUFFRCxFQUFFLEdBQUcsSUFBTyxFQUFGaEIsSUFBTSxJQUFPLEVBQUZBLElBQU0sT0FBT2dCLEVBQUVqQixFQUFFLE9BQU8sQ0FBQyxHQUFHLE9BQU9pQixFQUFFLE9BQU8sSUFBSUUsRUFBRUYsRUFBRTJELElBQUksR0FBRyxJQUFJekQsR0FBRyxJQUFJQSxFQUFFLENBQUMsSUFBSXVELEVBQUV6RCxFQUFFOE0sVUFBVXFFLGNBQWMsR0FBRzFOLElBQUloTSxHQUFHLElBQUlnTSxFQUFFb0UsVUFBVXBFLEVBQUUrSSxhQUFhL1UsRUFBRSxNQUFNLEdBQUcsSUFBSXlJLEVBQUUsSUFBSUEsRUFBRUYsRUFBRTBPLE9BQU8sT0FBT3hPLEdBQUcsQ0FBQyxJQUFJc0QsRUFBRXRELEVBQUV5RCxJQUFJLElBQUcsSUFBSUgsR0FBRyxJQUFJQSxNQUFLQSxFQUFFdEQsRUFBRTRNLFVBQVVxRSxpQkFBa0IxWixHQUFHLElBQUkrTCxFQUFFcUUsVUFBVXJFLEVBQUVnSixhQUFhL1UsR0FBRSxPQUFPeUksRUFBRUEsRUFBRXdPLE9BQU8sS0FBSyxPQUFPakwsR0FBRyxDQUFTLEdBQUcsUUFBWHZELEVBQUU0USxHQUFHck4sSUFBZSxPQUFlLEdBQUcsS0FBWEQsRUFBRXRELEVBQUV5RCxNQUFjLElBQUlILEVBQUUsQ0FBQ3hELEVBQUVDLEVBQUVDLEVBQUUsU0FBU25CLEVBQUUwRSxFQUFFQSxFQUFFK0ksWUFBWXhNLEVBQUVBLEVBQUUwTyxRQXZEN2MsU0FBWTNQLEVBQUVDLEVBQUV4RCxHQUFHLEdBQUcrUixHQUFHLE9BQU94TyxJQUFPd08sSUFBRyxFQUFHLElBQVdGLEdBQUd0TyxFQUFFQyxFQUFFeEQsR0FBRyxRQUFRK1IsSUFBRyxFQUFHQyxNQXVEb1lpWCxFQUFHLFdBQVcsSUFBSXprQixFQUFFQyxFQUFFeEksRUFBRTRVLEdBQUc3USxHQUFHMEUsRUFBRSxHQUNwZm5CLEVBQUUsQ0FBQyxJQUFJMEUsRUFBRW1QLEdBQUdyTyxJQUFJeEYsR0FBRyxRQUFHLElBQVMwRSxFQUFFLENBQUMsSUFBSUQsRUFBRTBULEdBQUd3TixFQUFFM2xCLEVBQUUsT0FBT0EsR0FBRyxJQUFLLFdBQVcsR0FBRyxJQUFJc1csR0FBRzdaLEdBQUcsTUFBTXVELEVBQUUsSUFBSyxVQUFVLElBQUssUUFBUXlFLEVBQUVzWixHQUFHLE1BQU0sSUFBSyxVQUFVNEgsRUFBRSxRQUFRbGhCLEVBQUVzVixHQUFHLE1BQU0sSUFBSyxXQUFXNEwsRUFBRSxPQUFPbGhCLEVBQUVzVixHQUFHLE1BQU0sSUFBSyxhQUFhLElBQUssWUFBWXRWLEVBQUVzVixHQUFHLE1BQU0sSUFBSyxRQUFRLEdBQUcsSUFBSXRkLEVBQUU0YyxPQUFPLE1BQU1yWixFQUFFLElBQUssV0FBVyxJQUFLLFdBQVcsSUFBSyxZQUFZLElBQUssWUFBWSxJQUFLLFVBQVUsSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLGNBQWN5RSxFQUFFbVYsR0FBRyxNQUFNLElBQUssT0FBTyxJQUFLLFVBQVUsSUFBSyxZQUFZLElBQUssV0FBVyxJQUFLLFlBQVksSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLE9BQU9uVixFQUMxaUJvVixHQUFHLE1BQU0sSUFBSyxjQUFjLElBQUssV0FBVyxJQUFLLFlBQVksSUFBSyxhQUFhcFYsRUFBRW9hLEdBQUcsTUFBTSxLQUFLcEwsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUdsUCxFQUFFdVYsR0FBRyxNQUFNLEtBQUtwRyxHQUFHblAsRUFBRXdhLEdBQUcsTUFBTSxJQUFLLFNBQVN4YSxFQUFFOFQsR0FBRyxNQUFNLElBQUssUUFBUTlULEVBQUV5YSxHQUFHLE1BQU0sSUFBSyxPQUFPLElBQUssTUFBTSxJQUFLLFFBQVF6YSxFQUFFMlYsR0FBRyxNQUFNLElBQUssb0JBQW9CLElBQUsscUJBQXFCLElBQUssZ0JBQWdCLElBQUssY0FBYyxJQUFLLGNBQWMsSUFBSyxhQUFhLElBQUssY0FBYyxJQUFLLFlBQVkzVixFQUFFMFosR0FBRyxJQUFJeUgsRUFBRSxJQUFPLEVBQUYzbEIsR0FBSzRsQixHQUFHRCxHQUFHLFdBQVc1bEIsRUFBRThsQixFQUFFRixFQUFFLE9BQU9saEIsRUFBRUEsRUFBRSxVQUFVLEtBQUtBLEVBQUVraEIsRUFBRSxHQUFHLElBQUksSUFBUUcsRUFBSkMsRUFBRS9rQixFQUFJLE9BQy9lK2tCLEdBQUcsQ0FBSyxJQUFJQyxHQUFSRixFQUFFQyxHQUFValksVUFBc0YsR0FBNUUsSUFBSWdZLEVBQUVuaEIsS0FBSyxPQUFPcWhCLElBQUlGLEVBQUVFLEVBQUUsT0FBT0gsR0FBYyxPQUFWRyxFQUFFdlgsR0FBR3NYLEVBQUVGLEtBQVlGLEVBQUVsMEIsS0FBS3cwQixHQUFHRixFQUFFQyxFQUFFRixLQUFTRixFQUFFLE1BQU1HLEVBQUVBLEVBQUVyVyxPQUFPLEVBQUVpVyxFQUFFL3lCLFNBQVM2UixFQUFFLElBQUlELEVBQUVDLEVBQUVpaEIsRUFBRSxLQUFLbHBCLEVBQUUvRCxHQUFHeUksRUFBRXpQLEtBQUssQ0FBQzR2QixNQUFNNWMsRUFBRTZjLFVBQVVxRSxNQUFNLEdBQUcsSUFBTyxFQUFGM2xCLEdBQUssQ0FBNEUsR0FBbkN3RSxFQUFFLGFBQWF6RSxHQUFHLGVBQWVBLEtBQXRFMEUsRUFBRSxjQUFjMUUsR0FBRyxnQkFBZ0JBLElBQTJDLElBQU8sR0FBRkMsTUFBUTBsQixFQUFFbHBCLEVBQUU4YyxlQUFlOWMsRUFBRStjLGVBQWV6SCxHQUFHNFQsS0FBSUEsRUFBRVEsT0FBZ0IxaEIsR0FBR0MsS0FBR0EsRUFBRWhNLEVBQUUrSCxTQUFTL0gsRUFBRUEsR0FBR2dNLEVBQUVoTSxFQUFFc08sZUFBZXRDLEVBQUUwZixhQUFhMWYsRUFBRTBoQixhQUFhM2xCLE9BQVVnRSxHQUFxQ0EsRUFBRXhELEVBQWlCLFFBQWYwa0IsR0FBbkNBLEVBQUVscEIsRUFBRThjLGVBQWU5YyxFQUFFZ2QsV0FBa0IxSCxHQUFHNFQsR0FBRyxRQUNsZUEsS0FBUkUsRUFBRXBXLEdBQUdrVyxLQUFVLElBQUlBLEVBQUUvZ0IsS0FBSyxJQUFJK2dCLEVBQUUvZ0IsT0FBSytnQixFQUFFLFFBQVVsaEIsRUFBRSxLQUFLa2hCLEVBQUUxa0IsR0FBS3dELElBQUlraEIsR0FBRSxDQUFnVSxHQUEvVEMsRUFBRWhNLEdBQUdxTSxFQUFFLGVBQWVILEVBQUUsZUFBZUUsRUFBRSxRQUFXLGVBQWVobUIsR0FBRyxnQkFBZ0JBLElBQUU0bEIsRUFBRXpILEdBQUc4SCxFQUFFLGlCQUFpQkgsRUFBRSxpQkFBaUJFLEVBQUUsV0FBVUgsRUFBRSxNQUFNcGhCLEVBQUVDLEVBQUVrZCxHQUFHbmQsR0FBR3NoQixFQUFFLE1BQU1KLEVBQUVqaEIsRUFBRWtkLEdBQUcrRCxJQUFHamhCLEVBQUUsSUFBSWtoQixFQUFFSyxFQUFFRCxFQUFFLFFBQVF2aEIsRUFBRWhJLEVBQUUvRCxJQUFLZ0IsT0FBT21zQixFQUFFbmhCLEVBQUU2VSxjQUFjd00sRUFBRUUsRUFBRSxLQUFLbFUsR0FBR3JaLEtBQUt1SSxLQUFJMmtCLEVBQUUsSUFBSUEsRUFBRUUsRUFBRUUsRUFBRSxRQUFRTCxFQUFFbHBCLEVBQUUvRCxJQUFLZ0IsT0FBT3FzQixFQUFFSCxFQUFFck0sY0FBY3NNLEVBQUVJLEVBQUVMLEdBQUdDLEVBQUVJLEVBQUt4aEIsR0FBR2toQixFQUFFMWxCLEVBQUUsQ0FBYSxJQUFSNmxCLEVBQUVILEVBQUVLLEVBQUUsRUFBTUQsRUFBaEJILEVBQUVuaEIsRUFBa0JzaEIsRUFBRUEsRUFBRU0sR0FBR04sR0FBR0MsSUFBUSxJQUFKRCxFQUFFLEVBQU1FLEVBQUVILEVBQUVHLEVBQUVBLEVBQUVJLEdBQUdKLEdBQUdGLElBQUksS0FBSyxFQUFFQyxFQUFFRCxHQUFHSCxFQUFFUyxHQUFHVCxHQUFHSSxJQUFJLEtBQUssRUFBRUQsRUFBRUMsR0FBR0YsRUFDcGZPLEdBQUdQLEdBQUdDLElBQUksS0FBS0MsS0FBSyxDQUFDLEdBQUdKLElBQUlFLEdBQUcsT0FBT0EsR0FBR0YsSUFBSUUsRUFBRXBXLFVBQVUsTUFBTXpQLEVBQUUybEIsRUFBRVMsR0FBR1QsR0FBR0UsRUFBRU8sR0FBR1AsR0FBR0YsRUFBRSxVQUFVQSxFQUFFLEtBQUssT0FBT25oQixHQUFHNmhCLEdBQUdubEIsRUFBRXVELEVBQUVELEVBQUVtaEIsR0FBRSxHQUFJLE9BQU9ELEdBQUcsT0FBT0UsR0FBR1MsR0FBR25sQixFQUFFMGtCLEVBQUVGLEVBQUVDLEdBQUUsR0FBaUUsR0FBRyxZQUExQ25oQixHQUFqQkMsRUFBRXpELEVBQUUyZ0IsR0FBRzNnQixHQUFHUixRQUFXNEUsVUFBVVgsRUFBRVcsU0FBU3pELGdCQUErQixVQUFVNkMsR0FBRyxTQUFTQyxFQUFFL04sS0FBSyxJQUFJNHZCLEVBQUUxRSxRQUFRLEdBQUdWLEdBQUd6YyxHQUFHLEdBQUdvZCxHQUFHeUUsRUFBRTdELE9BQU8sQ0FBQzZELEVBQUUvRCxHQUFHLElBQUlnRSxFQUFFbEUsUUFBUTdkLEVBQUVDLEVBQUVXLFdBQVcsVUFBVVosRUFBRTdDLGdCQUFnQixhQUFhOEMsRUFBRS9OLE1BQU0sVUFBVStOLEVBQUUvTixRQUFRNHZCLEVBQUU5RCxJQUNsVixPQUR5VjhELElBQUlBLEVBQUVBLEVBQUV2bUIsRUFBRWlCLElBQUttZ0IsR0FBR2pnQixFQUFFb2xCLEVBQUU5cEIsRUFBRS9ELElBQVc4dEIsR0FBR0EsRUFBRXhtQixFQUFFMEUsRUFBRXpELEdBQUcsYUFBYWpCLElBQUl3bUIsRUFBRTloQixFQUFFNkIsZ0JBQ3RlaWdCLEVBQUU3ZixZQUFZLFdBQVdqQyxFQUFFL04sTUFBTW1RLEdBQUdwQyxFQUFFLFNBQVNBLEVBQUV4USxRQUFPc3lCLEVBQUV2bEIsRUFBRTJnQixHQUFHM2dCLEdBQUdSLE9BQWNULEdBQUcsSUFBSyxXQUFhbWhCLEdBQUdxRixJQUFJLFNBQVNBLEVBQUUvQyxtQkFBZ0JFLEdBQUc2QyxFQUFFNUMsR0FBRzNpQixFQUFFNGlCLEdBQUcsTUFBSyxNQUFNLElBQUssV0FBV0EsR0FBR0QsR0FBR0QsR0FBRyxLQUFLLE1BQU0sSUFBSyxZQUFZRyxJQUFHLEVBQUcsTUFBTSxJQUFLLGNBQWMsSUFBSyxVQUFVLElBQUssVUFBVUEsSUFBRyxFQUFHQyxHQUFHNWlCLEVBQUUxRSxFQUFFL0QsR0FBRyxNQUFNLElBQUssa0JBQWtCLEdBQUdnckIsR0FBRyxNQUFNLElBQUssVUFBVSxJQUFLLFFBQVFLLEdBQUc1aUIsRUFBRTFFLEVBQUUvRCxHQUFHLElBQUkrdEIsRUFBRSxHQUFHOUcsR0FBRzFmLEVBQUUsQ0FBQyxPQUFPRCxHQUFHLElBQUssbUJBQW1CLElBQUkwbUIsRUFBRSxxQkFBcUIsTUFBTXptQixFQUFFLElBQUssaUJBQWlCeW1CLEVBQUUsbUJBQW1CLE1BQU16bUIsRUFDcmYsSUFBSyxvQkFBb0J5bUIsRUFBRSxzQkFBc0IsTUFBTXptQixFQUFFeW1CLE9BQUUsT0FBWXRHLEdBQUdGLEdBQUdsZ0IsRUFBRXZELEtBQUtpcUIsRUFBRSxvQkFBb0IsWUFBWTFtQixHQUFHLE1BQU12RCxFQUFFOFosVUFBVW1RLEVBQUUsc0JBQXNCQSxJQUFJM0csSUFBSSxPQUFPdGpCLEVBQUV3aEIsU0FBU21DLElBQUksdUJBQXVCc0csRUFBRSxxQkFBcUJBLEdBQUd0RyxLQUFLcUcsRUFBRXBRLE9BQVlGLEdBQUcsVUFBUkQsR0FBR3hkLEdBQWtCd2QsR0FBR2hpQixNQUFNZ2lCLEdBQUdwTyxZQUFZc1ksSUFBRyxJQUFlLEdBQVZvRyxFQUFFbkYsR0FBR3BnQixFQUFFeWxCLElBQU83ekIsU0FBUzZ6QixFQUFFLElBQUlwTSxHQUFHb00sRUFBRTFtQixFQUFFLEtBQUt2RCxFQUFFL0QsR0FBR3lJLEVBQUV6UCxLQUFLLENBQUM0dkIsTUFBTW9GLEVBQUVuRixVQUFVaUYsS0FBSUMsR0FBb0IsUUFBUkEsRUFBRXRHLEdBQUcxakIsT0FBZmlxQixFQUFFanhCLEtBQUtneEIsTUFBc0NBLEVBQUUzRyxHQTFCakssU0FBWTlmLEVBQUVDLEdBQUcsT0FBT0QsR0FBRyxJQUFLLGlCQUFpQixPQUFPbWdCLEdBQUdsZ0IsR0FBRyxJQUFLLFdBQVcsT0FBRyxLQUFLQSxFQUFFaWUsTUFBYSxNQUFLK0IsSUFBRyxFQUFVRCxJQUFHLElBQUssWUFBWSxPQUFPaGdCLEVBQUVDLEVBQUV4SyxRQUFTdXFCLElBQUlDLEdBQUcsS0FBS2pnQixFQUFFLFFBQVEsT0FBTyxNQTBCeEIybUIsQ0FBRzNtQixFQUFFdkQsR0F6QjFiLFNBQVl1RCxFQUFFQyxHQUFHLEdBQUdtZ0IsR0FBRyxNQUFNLG1CQUFtQnBnQixJQUFJMmYsSUFBSU8sR0FBR2xnQixFQUFFQyxJQUFJRCxFQUFFcVcsS0FBS0QsR0FBR0QsR0FBR0QsR0FBRyxLQUFLa0ssSUFBRyxFQUFHcGdCLEdBQUcsS0FBSyxPQUFPQSxHQUFHLElBQUssUUFBUSxPQUFPLEtBQUssSUFBSyxXQUFXLEtBQUtDLEVBQUU4WSxTQUFTOVksRUFBRWdaLFFBQVFoWixFQUFFaVosVUFBVWpaLEVBQUU4WSxTQUFTOVksRUFBRWdaLE9BQU8sQ0FBQyxHQUFHaFosRUFBRTJtQixNQUFNLEVBQUUzbUIsRUFBRTJtQixLQUFLL3pCLE9BQU8sT0FBT29OLEVBQUUybUIsS0FBSyxHQUFHM21CLEVBQUVpZSxNQUFNLE9BQU9obEIsT0FBT0UsYUFBYTZHLEVBQUVpZSxPQUFPLE9BQU8sS0FBSyxJQUFLLGlCQUFpQixPQUFPNkIsSUFBSSxPQUFPOWYsRUFBRWdlLE9BQU8sS0FBS2hlLEVBQUV4SyxLQUFLLFFBQVEsT0FBTyxNQXlCMkRveEIsQ0FBRzdtQixFQUFFdkQsS0FBMkIsR0FBeEJ3RSxFQUFFb2dCLEdBQUdwZ0IsRUFBRSxrQkFBcUJwTyxTQUFTNkYsRUFBRSxJQUFJNGhCLEdBQUcsZ0JBQ25mLGNBQWMsS0FBSzdkLEVBQUUvRCxHQUFHeUksRUFBRXpQLEtBQUssQ0FBQzR2QixNQUFNNW9CLEVBQUU2b0IsVUFBVXRnQixJQUFJdkksRUFBRWpELEtBQUtneEIsR0FBRy9FLEdBQUd2Z0IsRUFBRWxCLE1BQUssU0FBU2ltQixHQUFHbG1CLEVBQUVDLEVBQUV4RCxHQUFHLE1BQU0sQ0FBQ3NvQixTQUFTL2tCLEVBQUVnbEIsU0FBUy9rQixFQUFFNlcsY0FBY3JhLEdBQUcsU0FBUzRrQixHQUFHcmhCLEVBQUVDLEdBQUcsSUFBSSxJQUFJeEQsRUFBRXdELEVBQUUsVUFBVWdCLEVBQUUsR0FBRyxPQUFPakIsR0FBRyxDQUFDLElBQUl0SCxFQUFFc0gsRUFBRWtCLEVBQUV4SSxFQUFFcVYsVUFBVSxJQUFJclYsRUFBRWtNLEtBQUssT0FBTzFELElBQUl4SSxFQUFFd0ksRUFBWSxPQUFWQSxFQUFFd04sR0FBRzFPLEVBQUV2RCxLQUFZd0UsRUFBRTZsQixRQUFRWixHQUFHbG1CLEVBQUVrQixFQUFFeEksSUFBYyxPQUFWd0ksRUFBRXdOLEdBQUcxTyxFQUFFQyxLQUFZZ0IsRUFBRXZQLEtBQUt3MEIsR0FBR2xtQixFQUFFa0IsRUFBRXhJLEtBQUtzSCxFQUFFQSxFQUFFMlAsT0FBTyxPQUFPMU8sRUFBRSxTQUFTb2xCLEdBQUdybUIsR0FBRyxHQUFHLE9BQU9BLEVBQUUsT0FBTyxLQUFLLEdBQUdBLEVBQUVBLEVBQUUyUCxhQUFhM1AsR0FBRyxJQUFJQSxFQUFFNEUsS0FBSyxPQUFPNUUsR0FBSSxLQUN4YSxTQUFTc21CLEdBQUd0bUIsRUFBRUMsRUFBRXhELEVBQUV3RSxFQUFFdkksR0FBRyxJQUFJLElBQUl3SSxFQUFFakIsRUFBRTJXLFdBQVd6VixFQUFFLEdBQUcsT0FBTzFFLEdBQUdBLElBQUl3RSxHQUFHLENBQUMsSUFBSXlELEVBQUVqSSxFQUFFZ0ksRUFBRUMsRUFBRWdMLFVBQVVWLEVBQUV0SyxFQUFFcUosVUFBVSxHQUFHLE9BQU90SixHQUFHQSxJQUFJeEQsRUFBRSxNQUFNLElBQUl5RCxFQUFFRSxLQUFLLE9BQU9vSyxJQUFJdEssRUFBRXNLLEVBQUV0VyxFQUFhLE9BQVYrTCxFQUFFaUssR0FBR2pTLEVBQUV5RSxLQUFZQyxFQUFFMmxCLFFBQVFaLEdBQUd6cEIsRUFBRWdJLEVBQUVDLElBQUtoTSxHQUFjLE9BQVYrTCxFQUFFaUssR0FBR2pTLEVBQUV5RSxLQUFZQyxFQUFFelAsS0FBS3cwQixHQUFHenBCLEVBQUVnSSxFQUFFQyxLQUFNakksRUFBRUEsRUFBRWtULE9BQU8sSUFBSXhPLEVBQUV0TyxRQUFRbU4sRUFBRXRPLEtBQUssQ0FBQzR2QixNQUFNcmhCLEVBQUVzaEIsVUFBVXBnQixJQUFJLFNBQVM0bEIsTUFBTSxJQUFJQyxHQUFHLEtBQUtDLEdBQUcsS0FBSyxTQUFTQyxHQUFHbG5CLEVBQUVDLEdBQUcsT0FBT0QsR0FBRyxJQUFLLFNBQVMsSUFBSyxRQUFRLElBQUssU0FBUyxJQUFLLFdBQVcsUUFBUUMsRUFBRWtuQixVQUFVLE9BQU0sRUFDM2IsU0FBU0MsR0FBR3BuQixFQUFFQyxHQUFHLE1BQU0sYUFBYUQsR0FBRyxXQUFXQSxHQUFHLGFBQWFBLEdBQUcsaUJBQWtCQyxFQUFFaUgsVUFBVSxpQkFBa0JqSCxFQUFFaUgsVUFBVSxpQkFBa0JqSCxFQUFFeUgseUJBQXlCLE9BQU96SCxFQUFFeUgseUJBQXlCLE1BQU16SCxFQUFFeUgsd0JBQXdCMmYsT0FBTyxJQUFJQyxHQUFHLG1CQUFvQkMsV0FBV0EsZ0JBQVcsRUFBT0MsR0FBRyxtQkFBb0JDLGFBQWFBLGtCQUFhLEVBQU8sU0FBU0MsR0FBRzFuQixJQUFHLElBQUlBLEVBQUU4SSxVQUEwQixJQUFJOUksRUFBRThJLFVBQW9CLE9BQVQ5SSxFQUFFQSxFQUFFbUcsU0FBdENuRyxFQUFFOEgsWUFBWSxJQUNuWixTQUFTNmYsR0FBRzNuQixHQUFHLEtBQUssTUFBTUEsRUFBRUEsRUFBRUEsRUFBRWdqQixZQUFZLENBQUMsSUFBSS9pQixFQUFFRCxFQUFFOEksU0FBUyxHQUFHLElBQUk3SSxHQUFHLElBQUlBLEVBQUUsTUFBTSxPQUFPRCxFQUFFLFNBQVM0bkIsR0FBRzVuQixHQUFHQSxFQUFFQSxFQUFFNm5CLGdCQUFnQixJQUFJLElBQUk1bkIsRUFBRSxFQUFFRCxHQUFHLENBQUMsR0FBRyxJQUFJQSxFQUFFOEksU0FBUyxDQUFDLElBQUlyTSxFQUFFdUQsRUFBRXZLLEtBQUssR0FBRyxNQUFNZ0gsR0FBRyxPQUFPQSxHQUFHLE9BQU9BLEVBQUUsQ0FBQyxHQUFHLElBQUl3RCxFQUFFLE9BQU9ELEVBQUVDLFFBQVEsT0FBT3hELEdBQUd3RCxJQUFJRCxFQUFFQSxFQUFFNm5CLGdCQUFnQixPQUFPLEtBQUssSUFBSUMsR0FBRyxFQUE4REMsR0FBRzVTLEtBQUttUSxTQUFTcnpCLFNBQVMsSUFBSXlDLE1BQU0sR0FBR3N6QixHQUFHLGdCQUFnQkQsR0FBR0UsR0FBRyxnQkFBZ0JGLEdBQUc1QixHQUFHLG9CQUFvQjRCLEdBQUdHLEdBQUcsaUJBQWlCSCxHQUM5ZCxTQUFTaFcsR0FBRy9SLEdBQUcsSUFBSUMsRUFBRUQsRUFBRWdvQixJQUFJLEdBQUcvbkIsRUFBRSxPQUFPQSxFQUFFLElBQUksSUFBSXhELEVBQUV1RCxFQUFFeU4sV0FBV2hSLEdBQUcsQ0FBQyxHQUFHd0QsRUFBRXhELEVBQUUwcEIsS0FBSzFwQixFQUFFdXJCLElBQUksQ0FBZSxHQUFkdnJCLEVBQUV3RCxFQUFFeVAsVUFBYSxPQUFPelAsRUFBRWdRLE9BQU8sT0FBT3hULEdBQUcsT0FBT0EsRUFBRXdULE1BQU0sSUFBSWpRLEVBQUU0bkIsR0FBRzVuQixHQUFHLE9BQU9BLEdBQUcsQ0FBQyxHQUFHdkQsRUFBRXVELEVBQUVnb0IsSUFBSSxPQUFPdnJCLEVBQUV1RCxFQUFFNG5CLEdBQUc1bkIsR0FBRyxPQUFPQyxFQUFNeEQsR0FBSnVELEVBQUV2RCxHQUFNZ1IsV0FBVyxPQUFPLEtBQUssU0FBU0ssR0FBRzlOLEdBQWtCLFFBQWZBLEVBQUVBLEVBQUVnb0IsS0FBS2hvQixFQUFFbW1CLE1BQWMsSUFBSW5tQixFQUFFNEUsS0FBSyxJQUFJNUUsRUFBRTRFLEtBQUssS0FBSzVFLEVBQUU0RSxLQUFLLElBQUk1RSxFQUFFNEUsSUFBSSxLQUFLNUUsRUFBRSxTQUFTNGhCLEdBQUc1aEIsR0FBRyxHQUFHLElBQUlBLEVBQUU0RSxLQUFLLElBQUk1RSxFQUFFNEUsSUFBSSxPQUFPNUUsRUFBRStOLFVBQVUsTUFBTTFQLE1BQU0wQixFQUFFLEtBQU0sU0FBU2lPLEdBQUdoTyxHQUFHLE9BQU9BLEVBQUVpb0IsS0FBSyxLQUNsYixTQUFTL0MsR0FBR2xsQixHQUFHLElBQUlDLEVBQUVELEVBQUVrb0IsSUFBa0MsWUFBOUIsSUFBU2pvQixJQUFJQSxFQUFFRCxFQUFFa29CLElBQUksSUFBSS9uQixLQUFZRixFQUFFLElBQUlrb0IsR0FBRyxHQUFHQyxJQUFJLEVBQUUsU0FBU0MsR0FBR3JvQixHQUFHLE1BQU0sQ0FBQ21RLFFBQVFuUSxHQUFHLFNBQVNzb0IsR0FBRXRvQixHQUFHLEVBQUVvb0IsS0FBS3BvQixFQUFFbVEsUUFBUWdZLEdBQUdDLElBQUlELEdBQUdDLElBQUksS0FBS0EsTUFBTSxTQUFTRyxHQUFFdm9CLEVBQUVDLEdBQUdtb0IsS0FBS0QsR0FBR0MsSUFBSXBvQixFQUFFbVEsUUFBUW5RLEVBQUVtUSxRQUFRbFEsRUFBRSxJQUFJdW9CLEdBQUcsR0FBR0MsR0FBRUosR0FBR0csSUFBSUUsR0FBRUwsSUFBRyxHQUFJTSxHQUFHSCxHQUM1UCxTQUFTSSxHQUFHNW9CLEVBQUVDLEdBQUcsSUFBSXhELEVBQUV1RCxFQUFFckosS0FBS1IsYUFBYSxJQUFJc0csRUFBRSxPQUFPK3JCLEdBQUcsSUFBSXZuQixFQUFFakIsRUFBRStOLFVBQVUsR0FBRzlNLEdBQUdBLEVBQUU0bkIsOENBQThDNW9CLEVBQUUsT0FBT2dCLEVBQUU2bkIsMENBQTBDLElBQVM1bkIsRUFBTHhJLEVBQUUsR0FBSyxJQUFJd0ksS0FBS3pFLEVBQUUvRCxFQUFFd0ksR0FBR2pCLEVBQUVpQixHQUFvSCxPQUFqSEQsS0FBSWpCLEVBQUVBLEVBQUUrTixXQUFZOGEsNENBQTRDNW9CLEVBQUVELEVBQUU4b0IsMENBQTBDcHdCLEdBQVVBLEVBQUUsU0FBU3F3QixHQUFHL29CLEdBQXlCLE9BQU8sTUFBM0JBLEVBQUUvSixrQkFBOEMsU0FBUyt5QixLQUFLVixHQUFFSSxJQUFHSixHQUFFRyxJQUFHLFNBQVNRLEdBQUdqcEIsRUFBRUMsRUFBRXhELEdBQUcsR0FBR2dzQixHQUFFdFksVUFBVXFZLEdBQUcsTUFBTW5xQixNQUFNMEIsRUFBRSxNQUFNd29CLEdBQUVFLEdBQUV4b0IsR0FBR3NvQixHQUFFRyxHQUFFanNCLEdBQy9lLFNBQVN5c0IsR0FBR2xwQixFQUFFQyxFQUFFeEQsR0FBRyxJQUFJd0UsRUFBRWpCLEVBQUUrTixVQUFnQyxHQUF0Qi9OLEVBQUVDLEVBQUVoSyxrQkFBcUIsbUJBQW9CZ0wsRUFBRWtvQixnQkFBZ0IsT0FBTzFzQixFQUF3QixJQUFJLElBQUkvRCxLQUE5QnVJLEVBQUVBLEVBQUVrb0Isa0JBQWlDLEtBQUt6d0IsS0FBS3NILEdBQUcsTUFBTTNCLE1BQU0wQixFQUFFLElBQUkrRSxFQUFHN0UsSUFBSSxVQUFVdkgsSUFBSSxPQUFPbUQsRUFBRSxHQUFHWSxFQUFFd0UsR0FBRyxTQUFTbW9CLEdBQUdwcEIsR0FBeUcsT0FBdEdBLEdBQUdBLEVBQUVBLEVBQUUrTixZQUFZL04sRUFBRXFwQiwyQ0FBMkNiLEdBQUdHLEdBQUdGLEdBQUV0WSxRQUFRb1ksR0FBRUUsR0FBRXpvQixHQUFHdW9CLEdBQUVHLEdBQUVBLEdBQUV2WSxVQUFlLEVBQUcsU0FBU21aLEdBQUd0cEIsRUFBRUMsRUFBRXhELEdBQUcsSUFBSXdFLEVBQUVqQixFQUFFK04sVUFBVSxJQUFJOU0sRUFBRSxNQUFNNUMsTUFBTTBCLEVBQUUsTUFBTXRELEdBQUd1RCxFQUFFa3BCLEdBQUdscEIsRUFBRUMsRUFBRTBvQixJQUFJMW5CLEVBQUVvb0IsMENBQTBDcnBCLEVBQUVzb0IsR0FBRUksSUFBR0osR0FBRUcsSUFBR0YsR0FBRUUsR0FBRXpvQixJQUFJc29CLEdBQUVJLElBQUdILEdBQUVHLEdBQUVqc0IsR0FDN2UsSUFBSThzQixHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBRzNwQixFQUFFbVMseUJBQXlCeVgsR0FBRzVwQixFQUFFNlMsMEJBQTBCZ1gsR0FBRzdwQixFQUFFOHBCLHdCQUF3QkMsR0FBRy9wQixFQUFFZ3FCLHFCQUFxQkMsR0FBR2pxQixFQUFFa3FCLHNCQUFzQkMsR0FBR25xQixFQUFFb1UsYUFBYWdXLEdBQUdwcUIsRUFBRXFxQixpQ0FBaUNDLEdBQUd0cUIsRUFBRXVxQiwyQkFBMkJDLEdBQUd4cUIsRUFBRTRWLDhCQUE4QjZVLEdBQUd6cUIsRUFBRThTLHdCQUF3QjRYLEdBQUcxcUIsRUFBRTJxQixxQkFBcUJDLEdBQUc1cUIsRUFBRTZxQixzQkFBc0JDLEdBQUcsR0FBR0MsUUFBRyxJQUFTZCxHQUFHQSxHQUFHLGFBQWFlLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxJQUFHLEVBQUdDLEdBQUdoQixLQUFLaUIsR0FBRSxJQUFJRCxHQUFHaEIsR0FBRyxXQUFXLE9BQU9BLEtBQUtnQixJQUN0ZCxTQUFTRSxLQUFLLE9BQU9qQixNQUFNLEtBQUtFLEdBQUcsT0FBTyxHQUFHLEtBQUtFLEdBQUcsT0FBTyxHQUFHLEtBQUtDLEdBQUcsT0FBTyxHQUFHLEtBQUtDLEdBQUcsT0FBTyxHQUFHLEtBQUtFLEdBQUcsT0FBTyxHQUFHLFFBQVEsTUFBTXJzQixNQUFNMEIsRUFBRSxPQUFRLFNBQVNxckIsR0FBR3ByQixHQUFHLE9BQU9BLEdBQUcsS0FBSyxHQUFHLE9BQU9vcUIsR0FBRyxLQUFLLEdBQUcsT0FBT0UsR0FBRyxLQUFLLEdBQUcsT0FBT0MsR0FBRyxLQUFLLEdBQUcsT0FBT0MsR0FBRyxLQUFLLEdBQUcsT0FBT0UsR0FBRyxRQUFRLE1BQU1yc0IsTUFBTTBCLEVBQUUsT0FBUSxTQUFTc3JCLEdBQUdyckIsRUFBRUMsR0FBVyxPQUFSRCxFQUFFb3JCLEdBQUdwckIsR0FBVXlwQixHQUFHenBCLEVBQUVDLEdBQUcsU0FBU3FyQixHQUFHdHJCLEVBQUVDLEVBQUV4RCxHQUFXLE9BQVJ1RCxFQUFFb3JCLEdBQUdwckIsR0FBVTBwQixHQUFHMXBCLEVBQUVDLEVBQUV4RCxHQUFHLFNBQVM4dUIsS0FBSyxHQUFHLE9BQU9SLEdBQUcsQ0FBQyxJQUFJL3FCLEVBQUUrcUIsR0FBR0EsR0FBRyxLQUFLcEIsR0FBRzNwQixHQUFHd3JCLEtBQzNhLFNBQVNBLEtBQUssSUFBSVIsSUFBSSxPQUFPRixHQUFHLENBQUNFLElBQUcsRUFBRyxJQUFJaHJCLEVBQUUsRUFBRSxJQUFJLElBQUlDLEVBQUU2cUIsR0FBR08sR0FBRyxJQUFHLFdBQVcsS0FBS3JyQixFQUFFQyxFQUFFcE4sT0FBT21OLElBQUksQ0FBQyxJQUFJdkQsRUFBRXdELEVBQUVELEdBQUcsR0FBR3ZELEVBQUVBLEdBQUUsU0FBVSxPQUFPQSxPQUFNcXVCLEdBQUcsS0FBSyxNQUFNcnVCLEdBQUcsTUFBTSxPQUFPcXVCLEtBQUtBLEdBQUdBLEdBQUdwMkIsTUFBTXNMLEVBQUUsSUFBSTBwQixHQUFHVSxHQUFHbUIsSUFBSTl1QixFQUFHLFFBQVF1dUIsSUFBRyxJQUFLLElBQUlTLEdBQUdqcEIsRUFBR2twQix3QkFBd0IsU0FBU0MsR0FBRzNyQixFQUFFQyxHQUFHLEdBQUdELEdBQUdBLEVBQUU1SixhQUFhLENBQTRCLElBQUksSUFBSXFHLEtBQW5Dd0QsRUFBRXBFLEVBQUUsR0FBR29FLEdBQUdELEVBQUVBLEVBQUU1SixrQkFBNEIsSUFBUzZKLEVBQUV4RCxLQUFLd0QsRUFBRXhELEdBQUd1RCxFQUFFdkQsSUFBSSxPQUFPd0QsRUFBRSxPQUFPQSxFQUFFLElBQUkyckIsR0FBR3ZELEdBQUcsTUFBTXdELEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxHQUFHLEtBQUssU0FBU0MsS0FBS0QsR0FBR0QsR0FBR0QsR0FBRyxLQUM1YixTQUFTSSxHQUFHanNCLEdBQUcsSUFBSUMsRUFBRTJyQixHQUFHemIsUUFBUW1ZLEdBQUVzRCxJQUFJNXJCLEVBQUVySixLQUFLcU8sU0FBU2tuQixjQUFjanNCLEVBQUUsU0FBU2tzQixHQUFHbnNCLEVBQUVDLEdBQUcsS0FBSyxPQUFPRCxHQUFHLENBQUMsSUFBSXZELEVBQUV1RCxFQUFFMFAsVUFBVSxJQUFJMVAsRUFBRW9zQixXQUFXbnNCLEtBQUtBLEVBQUUsSUFBRyxPQUFPeEQsSUFBSUEsRUFBRTJ2QixXQUFXbnNCLEtBQUtBLEVBQUUsTUFBV3hELEVBQUUydkIsWUFBWW5zQixPQUFPRCxFQUFFb3NCLFlBQVluc0IsRUFBRSxPQUFPeEQsSUFBSUEsRUFBRTJ2QixZQUFZbnNCLEdBQUdELEVBQUVBLEVBQUUyUCxRQUFRLFNBQVMwYyxHQUFHcnNCLEVBQUVDLEdBQUc0ckIsR0FBRzdyQixFQUFFK3JCLEdBQUdELEdBQUcsS0FBc0IsUUFBakI5ckIsRUFBRUEsRUFBRXNzQixlQUF1QixPQUFPdHNCLEVBQUV1c0IsZUFBZSxJQUFLdnNCLEVBQUV3c0IsTUFBTXZzQixLQUFLd3NCLElBQUcsR0FBSXpzQixFQUFFdXNCLGFBQWEsTUFDdlksU0FBU0csR0FBRzFzQixFQUFFQyxHQUFHLEdBQUc4ckIsS0FBSy9yQixJQUFHLElBQUtDLEdBQUcsSUFBSUEsRUFBbUcsR0FBN0YsaUJBQWtCQSxHQUFHLGFBQWFBLElBQUU4ckIsR0FBRy9yQixFQUFFQyxFQUFFLFlBQVdBLEVBQUUsQ0FBQzBzQixRQUFRM3NCLEVBQUU0c0IsYUFBYTNzQixFQUFFak0sS0FBSyxNQUFTLE9BQU84M0IsR0FBRyxDQUFDLEdBQUcsT0FBT0QsR0FBRyxNQUFNeHRCLE1BQU0wQixFQUFFLE1BQU0rckIsR0FBRzdyQixFQUFFNHJCLEdBQUdTLGFBQWEsQ0FBQ0UsTUFBTSxFQUFFRCxhQUFhdHNCLEVBQUU0c0IsV0FBVyxXQUFXZixHQUFHQSxHQUFHOTNCLEtBQUtpTSxFQUFFLE9BQU9ELEVBQUVrc0IsY0FBYyxJQUFJWSxJQUFHLEVBQUcsU0FBU0MsR0FBRy9zQixHQUFHQSxFQUFFZ3RCLFlBQVksQ0FBQ0MsVUFBVWp0QixFQUFFNlAsY0FBY3FkLGdCQUFnQixLQUFLQyxlQUFlLEtBQUtDLE9BQU8sQ0FBQ0MsUUFBUSxNQUFNQyxRQUFRLE1BQzFhLFNBQVNDLEdBQUd2dEIsRUFBRUMsR0FBR0QsRUFBRUEsRUFBRWd0QixZQUFZL3NCLEVBQUUrc0IsY0FBY2h0QixJQUFJQyxFQUFFK3NCLFlBQVksQ0FBQ0MsVUFBVWp0QixFQUFFaXRCLFVBQVVDLGdCQUFnQmx0QixFQUFFa3RCLGdCQUFnQkMsZUFBZW50QixFQUFFbXRCLGVBQWVDLE9BQU9wdEIsRUFBRW90QixPQUFPRSxRQUFRdHRCLEVBQUVzdEIsVUFBVSxTQUFTRSxHQUFHeHRCLEVBQUVDLEdBQUcsTUFBTSxDQUFDd3RCLFVBQVV6dEIsRUFBRTB0QixLQUFLenRCLEVBQUUyRSxJQUFJLEVBQUUrb0IsUUFBUSxLQUFLQyxTQUFTLEtBQUs1NUIsS0FBSyxNQUFNLFNBQVM2NUIsR0FBRzd0QixFQUFFQyxHQUFtQixHQUFHLFFBQW5CRCxFQUFFQSxFQUFFZ3RCLGFBQXdCLENBQVksSUFBSXZ3QixHQUFmdUQsRUFBRUEsRUFBRW90QixRQUFlQyxRQUFRLE9BQU81d0IsRUFBRXdELEVBQUVqTSxLQUFLaU0sR0FBR0EsRUFBRWpNLEtBQUt5SSxFQUFFekksS0FBS3lJLEVBQUV6SSxLQUFLaU0sR0FBR0QsRUFBRXF0QixRQUFRcHRCLEdBQ3JaLFNBQVM2dEIsR0FBRzl0QixFQUFFQyxHQUFHLElBQUl4RCxFQUFFdUQsRUFBRWd0QixZQUFZL3JCLEVBQUVqQixFQUFFMFAsVUFBVSxHQUFHLE9BQU96TyxHQUFvQnhFLEtBQWhCd0UsRUFBRUEsRUFBRStyQixhQUFtQixDQUFDLElBQUl0MEIsRUFBRSxLQUFLd0ksRUFBRSxLQUF5QixHQUFHLFFBQXZCekUsRUFBRUEsRUFBRXl3QixpQkFBNEIsQ0FBQyxFQUFFLENBQUMsSUFBSS9yQixFQUFFLENBQUNzc0IsVUFBVWh4QixFQUFFZ3hCLFVBQVVDLEtBQUtqeEIsRUFBRWl4QixLQUFLOW9CLElBQUluSSxFQUFFbUksSUFBSStvQixRQUFRbHhCLEVBQUVreEIsUUFBUUMsU0FBU254QixFQUFFbXhCLFNBQVM1NUIsS0FBSyxNQUFNLE9BQU9rTixFQUFFeEksRUFBRXdJLEVBQUVDLEVBQUVELEVBQUVBLEVBQUVsTixLQUFLbU4sRUFBRTFFLEVBQUVBLEVBQUV6SSxXQUFXLE9BQU95SSxHQUFHLE9BQU95RSxFQUFFeEksRUFBRXdJLEVBQUVqQixFQUFFaUIsRUFBRUEsRUFBRWxOLEtBQUtpTSxPQUFPdkgsRUFBRXdJLEVBQUVqQixFQUFpSCxPQUEvR3hELEVBQUUsQ0FBQ3d3QixVQUFVaHNCLEVBQUVnc0IsVUFBVUMsZ0JBQWdCeDBCLEVBQUV5MEIsZUFBZWpzQixFQUFFa3NCLE9BQU9uc0IsRUFBRW1zQixPQUFPRSxRQUFRcnNCLEVBQUVxc0IsY0FBU3R0QixFQUFFZ3RCLFlBQVl2d0IsR0FBNEIsUUFBbkJ1RCxFQUFFdkQsRUFBRTB3QixnQkFBd0Ixd0IsRUFBRXl3QixnQkFBZ0JqdEIsRUFBRUQsRUFBRWhNLEtBQ25maU0sRUFBRXhELEVBQUUwd0IsZUFBZWx0QixFQUNuQixTQUFTOHRCLEdBQUcvdEIsRUFBRUMsRUFBRXhELEVBQUV3RSxHQUFHLElBQUl2SSxFQUFFc0gsRUFBRWd0QixZQUFZRixJQUFHLEVBQUcsSUFBSTVyQixFQUFFeEksRUFBRXcwQixnQkFBZ0IvckIsRUFBRXpJLEVBQUV5MEIsZUFBZXpvQixFQUFFaE0sRUFBRTAwQixPQUFPQyxRQUFRLEdBQUcsT0FBTzNvQixFQUFFLENBQUNoTSxFQUFFMDBCLE9BQU9DLFFBQVEsS0FBSyxJQUFJNW9CLEVBQUVDLEVBQUVzSyxFQUFFdkssRUFBRXpRLEtBQUt5USxFQUFFelEsS0FBSyxLQUFLLE9BQU9tTixFQUFFRCxFQUFFOE4sRUFBRTdOLEVBQUVuTixLQUFLZ2IsRUFBRTdOLEVBQUVzRCxFQUFFLElBQUlsUSxFQUFFeUwsRUFBRTBQLFVBQVUsR0FBRyxPQUFPbmIsRUFBRSxDQUFpQixJQUFJeTVCLEdBQXBCejVCLEVBQUVBLEVBQUV5NEIsYUFBb0JHLGVBQWVhLElBQUk3c0IsSUFBSSxPQUFPNnNCLEVBQUV6NUIsRUFBRTI0QixnQkFBZ0JsZSxFQUFFZ2YsRUFBRWg2QixLQUFLZ2IsRUFBRXphLEVBQUU0NEIsZUFBZTFvQixJQUFJLEdBQUcsT0FBT3ZELEVBQUUsQ0FBOEIsSUFBN0I4c0IsRUFBRXQxQixFQUFFdTBCLFVBQVU5ckIsRUFBRSxFQUFFNU0sRUFBRXlhLEVBQUV2SyxFQUFFLE9BQU8sQ0FBQ0MsRUFBRXhELEVBQUV3c0IsS0FBSyxJQUFJTyxFQUFFL3NCLEVBQUV1c0IsVUFBVSxJQUFJeHNCLEVBQUV5RCxLQUFLQSxFQUFFLENBQUMsT0FBT25RLElBQUlBLEVBQUVBLEVBQUVQLEtBQUssQ0FBQ3k1QixVQUFVUSxFQUFFUCxLQUFLLEVBQUU5b0IsSUFBSTFELEVBQUUwRCxJQUFJK29CLFFBQVF6c0IsRUFBRXlzQixRQUFRQyxTQUFTMXNCLEVBQUUwc0IsU0FDcmY1NUIsS0FBSyxPQUFPZ00sRUFBRSxDQUFDLElBQUlrdUIsRUFBRWx1QixFQUFFMmxCLEVBQUV6a0IsRUFBVSxPQUFSd0QsRUFBRXpFLEVBQUVndUIsRUFBRXh4QixFQUFTa3BCLEVBQUUvZ0IsS0FBSyxLQUFLLEVBQWMsR0FBRyxtQkFBZnNwQixFQUFFdkksRUFBRWdJLFNBQWlDLENBQUNLLEVBQUVFLEVBQUV6NUIsS0FBS3c1QixFQUFFRCxFQUFFdHBCLEdBQUcsTUFBTTFFLEVBQUVndUIsRUFBRUUsRUFBRSxNQUFNbHVCLEVBQUUsS0FBSyxFQUFFa3VCLEVBQUVuekIsT0FBZSxLQUFUbXpCLEVBQUVuekIsTUFBWSxHQUFHLEtBQUssRUFBc0QsR0FBRyxPQUEzQzJKLEVBQUUsbUJBQWR3cEIsRUFBRXZJLEVBQUVnSSxTQUFnQ08sRUFBRXo1QixLQUFLdzVCLEVBQUVELEVBQUV0cEIsR0FBR3dwQixHQUEwQixNQUFNbHVCLEVBQUVndUIsRUFBRW55QixFQUFFLEdBQUdteUIsRUFBRXRwQixHQUFHLE1BQU0xRSxFQUFFLEtBQUssRUFBRThzQixJQUFHLEdBQUksT0FBTzVyQixFQUFFMHNCLFdBQVc1dEIsRUFBRWpGLE9BQU8sR0FBZSxRQUFaMkosRUFBRWhNLEVBQUU0MEIsU0FBaUI1MEIsRUFBRTQwQixRQUFRLENBQUNwc0IsR0FBR3dELEVBQUVoVCxLQUFLd1AsU0FBUytzQixFQUFFLENBQUNSLFVBQVVRLEVBQUVQLEtBQUtocEIsRUFBRUUsSUFBSTFELEVBQUUwRCxJQUFJK29CLFFBQVF6c0IsRUFBRXlzQixRQUFRQyxTQUFTMXNCLEVBQUUwc0IsU0FBUzU1QixLQUFLLE1BQU0sT0FBT08sR0FBR3lhLEVBQUV6YSxFQUFFMDVCLEVBQUV4cEIsRUFBRXVwQixHQUFHejVCLEVBQUVBLEVBQUVQLEtBQUtpNkIsRUFBRTlzQixHQUFHdUQsRUFBVyxHQUFHLFFBQVp4RCxFQUFFQSxFQUFFbE4sTUFDMWUsSUFBc0IsUUFBbkIwUSxFQUFFaE0sRUFBRTAwQixPQUFPQyxTQUFpQixNQUFXbnNCLEVBQUV3RCxFQUFFMVEsS0FBSzBRLEVBQUUxUSxLQUFLLEtBQUswRSxFQUFFeTBCLGVBQWV6b0IsRUFBRWhNLEVBQUUwMEIsT0FBT0MsUUFBUSxNQUFjLE9BQU85NEIsSUFBSWtRLEVBQUV1cEIsR0FBR3QxQixFQUFFdTBCLFVBQVV4b0IsRUFBRS9MLEVBQUV3MEIsZ0JBQWdCbGUsRUFBRXRXLEVBQUV5MEIsZUFBZTU0QixFQUFFNDVCLElBQUlodEIsRUFBRW5CLEVBQUV3c0IsTUFBTXJyQixFQUFFbkIsRUFBRTZQLGNBQWNtZSxHQUFHLFNBQVNJLEdBQUdwdUIsRUFBRUMsRUFBRXhELEdBQThCLEdBQTNCdUQsRUFBRUMsRUFBRXF0QixRQUFRcnRCLEVBQUVxdEIsUUFBUSxLQUFRLE9BQU90dEIsRUFBRSxJQUFJQyxFQUFFLEVBQUVBLEVBQUVELEVBQUVuTixPQUFPb04sSUFBSSxDQUFDLElBQUlnQixFQUFFakIsRUFBRUMsR0FBR3ZILEVBQUV1SSxFQUFFMnNCLFNBQVMsR0FBRyxPQUFPbDFCLEVBQUUsQ0FBcUIsR0FBcEJ1SSxFQUFFMnNCLFNBQVMsS0FBSzNzQixFQUFFeEUsRUFBSyxtQkFBb0IvRCxFQUFFLE1BQU0yRixNQUFNMEIsRUFBRSxJQUFJckgsSUFBSUEsRUFBRWpFLEtBQUt3TSxLQUFLLElBQUlvdEIsSUFBRyxJQUFLeHVCLEVBQUd5dUIsV0FBV0MsS0FDM2IsU0FBU0MsR0FBR3h1QixFQUFFQyxFQUFFeEQsRUFBRXdFLEdBQThCeEUsRUFBRSxPQUFYQSxFQUFFQSxFQUFFd0UsRUFBdEJoQixFQUFFRCxFQUFFNlAsZ0JBQThDNVAsRUFBRXBFLEVBQUUsR0FBR29FLEVBQUV4RCxHQUFHdUQsRUFBRTZQLGNBQWNwVCxFQUFFLElBQUl1RCxFQUFFd3NCLFFBQVF4c0IsRUFBRWd0QixZQUFZQyxVQUFVeHdCLEdBQzNJLElBQUlneUIsR0FBRyxDQUFDQyxVQUFVLFNBQVMxdUIsR0FBRyxTQUFPQSxFQUFFQSxFQUFFMnVCLGtCQUFpQmxmLEdBQUd6UCxLQUFLQSxHQUFNNHVCLGdCQUFnQixTQUFTNXVCLEVBQUVDLEVBQUV4RCxHQUFHdUQsRUFBRUEsRUFBRTJ1QixnQkFBZ0IsSUFBSTF0QixFQUFFNHRCLEtBQUtuMkIsRUFBRW8yQixHQUFHOXVCLEdBQUdrQixFQUFFc3NCLEdBQUd2c0IsRUFBRXZJLEdBQUd3SSxFQUFFeXNCLFFBQVExdEIsRUFBRSxNQUFTeEQsSUFBY3lFLEVBQUUwc0IsU0FBU254QixHQUFHb3hCLEdBQUc3dEIsRUFBRWtCLEdBQUc2dEIsR0FBRy91QixFQUFFdEgsRUFBRXVJLElBQUkrdEIsb0JBQW9CLFNBQVNodkIsRUFBRUMsRUFBRXhELEdBQUd1RCxFQUFFQSxFQUFFMnVCLGdCQUFnQixJQUFJMXRCLEVBQUU0dEIsS0FBS24yQixFQUFFbzJCLEdBQUc5dUIsR0FBR2tCLEVBQUVzc0IsR0FBR3ZzQixFQUFFdkksR0FBR3dJLEVBQUUwRCxJQUFJLEVBQUUxRCxFQUFFeXNCLFFBQVExdEIsRUFBRSxNQUFTeEQsSUFBY3lFLEVBQUUwc0IsU0FBU254QixHQUFHb3hCLEdBQUc3dEIsRUFBRWtCLEdBQUc2dEIsR0FBRy91QixFQUFFdEgsRUFBRXVJLElBQUlndUIsbUJBQW1CLFNBQVNqdkIsRUFBRUMsR0FBR0QsRUFBRUEsRUFBRTJ1QixnQkFBZ0IsSUFBSWx5QixFQUFFb3lCLEtBQUs1dEIsRUFBRTZ0QixHQUFHOXVCLEdBQUd0SCxFQUFFODBCLEdBQUcvd0IsRUFBRXdFLEdBQUd2SSxFQUFFa00sSUFBSSxFQUFFLE1BQVMzRSxJQUFjdkgsRUFBRWsxQixTQUNqZjN0QixHQUFHNHRCLEdBQUc3dEIsRUFBRXRILEdBQUdxMkIsR0FBRy91QixFQUFFaUIsRUFBRXhFLEtBQUssU0FBU3l5QixHQUFHbHZCLEVBQUVDLEVBQUV4RCxFQUFFd0UsRUFBRXZJLEVBQUV3SSxFQUFFQyxHQUFpQixNQUFNLG1CQUFwQm5CLEVBQUVBLEVBQUUrTixXQUFzQ29oQixzQkFBc0JudkIsRUFBRW12QixzQkFBc0JsdUIsRUFBRUMsRUFBRUMsS0FBR2xCLEVBQUV6TCxXQUFXeUwsRUFBRXpMLFVBQVU0NkIsc0JBQXNCdk0sR0FBR3BtQixFQUFFd0UsSUFBSzRoQixHQUFHbnFCLEVBQUV3SSxJQUMvTSxTQUFTbXVCLEdBQUdydkIsRUFBRUMsRUFBRXhELEdBQUcsSUFBSXdFLEdBQUUsRUFBR3ZJLEVBQUU4dkIsR0FBT3RuQixFQUFFakIsRUFBRS9KLFlBQTJXLE1BQS9WLGlCQUFrQmdMLEdBQUcsT0FBT0EsRUFBRUEsRUFBRXdyQixHQUFHeHJCLElBQUl4SSxFQUFFcXdCLEdBQUc5b0IsR0FBRzBvQixHQUFHRixHQUFFdFksUUFBeUJqUCxHQUFHRCxFQUFFLE9BQXRCQSxFQUFFaEIsRUFBRTlKLGVBQXdDeXlCLEdBQUc1b0IsRUFBRXRILEdBQUc4dkIsSUFBSXZvQixFQUFFLElBQUlBLEVBQUV4RCxFQUFFeUUsR0FBR2xCLEVBQUU2UCxjQUFjLE9BQU81UCxFQUFFcXZCLFlBQU8sSUFBU3J2QixFQUFFcXZCLE1BQU1ydkIsRUFBRXF2QixNQUFNLEtBQUtydkIsRUFBRXN2QixRQUFRZCxHQUFHenVCLEVBQUUrTixVQUFVOU4sRUFBRUEsRUFBRTB1QixnQkFBZ0IzdUIsRUFBRWlCLEtBQUlqQixFQUFFQSxFQUFFK04sV0FBWThhLDRDQUE0Q253QixFQUFFc0gsRUFBRThvQiwwQ0FBMEM1bkIsR0FBVWpCLEVBQzNaLFNBQVN1dkIsR0FBR3h2QixFQUFFQyxFQUFFeEQsRUFBRXdFLEdBQUdqQixFQUFFQyxFQUFFcXZCLE1BQU0sbUJBQW9CcnZCLEVBQUV3dkIsMkJBQTJCeHZCLEVBQUV3dkIsMEJBQTBCaHpCLEVBQUV3RSxHQUFHLG1CQUFvQmhCLEVBQUV5dkIsa0NBQWtDenZCLEVBQUV5dkIsaUNBQWlDanpCLEVBQUV3RSxHQUFHaEIsRUFBRXF2QixRQUFRdHZCLEdBQUd5dUIsR0FBR08sb0JBQW9CL3VCLEVBQUVBLEVBQUVxdkIsTUFBTSxNQUMvUCxTQUFTSyxHQUFHM3ZCLEVBQUVDLEVBQUV4RCxFQUFFd0UsR0FBRyxJQUFJdkksRUFBRXNILEVBQUUrTixVQUFVclYsRUFBRXFGLE1BQU10QixFQUFFL0QsRUFBRTQyQixNQUFNdHZCLEVBQUU2UCxjQUFjblgsRUFBRTYxQixLQUFLRixHQUFHdEIsR0FBRy9zQixHQUFHLElBQUlrQixFQUFFakIsRUFBRS9KLFlBQVksaUJBQWtCZ0wsR0FBRyxPQUFPQSxFQUFFeEksRUFBRWkwQixRQUFRRCxHQUFHeHJCLElBQUlBLEVBQUU2bkIsR0FBRzlvQixHQUFHMG9CLEdBQUdGLEdBQUV0WSxRQUFRelgsRUFBRWkwQixRQUFRL0QsR0FBRzVvQixFQUFFa0IsSUFBSTZzQixHQUFHL3RCLEVBQUV2RCxFQUFFL0QsRUFBRXVJLEdBQUd2SSxFQUFFNDJCLE1BQU10dkIsRUFBRTZQLGNBQTJDLG1CQUE3QjNPLEVBQUVqQixFQUFFekosNEJBQWlEZzRCLEdBQUd4dUIsRUFBRUMsRUFBRWlCLEVBQUV6RSxHQUFHL0QsRUFBRTQyQixNQUFNdHZCLEVBQUU2UCxlQUFlLG1CQUFvQjVQLEVBQUV6SiwwQkFBMEIsbUJBQW9Ca0MsRUFBRWszQix5QkFBeUIsbUJBQW9CbDNCLEVBQUVtM0IsMkJBQTJCLG1CQUFvQm4zQixFQUFFbzNCLHFCQUN2ZTd2QixFQUFFdkgsRUFBRTQyQixNQUFNLG1CQUFvQjUyQixFQUFFbzNCLG9CQUFvQnAzQixFQUFFbzNCLHFCQUFxQixtQkFBb0JwM0IsRUFBRW0zQiwyQkFBMkJuM0IsRUFBRW0zQiw0QkFBNEI1dkIsSUFBSXZILEVBQUU0MkIsT0FBT2IsR0FBR08sb0JBQW9CdDJCLEVBQUVBLEVBQUU0MkIsTUFBTSxNQUFNdkIsR0FBRy90QixFQUFFdkQsRUFBRS9ELEVBQUV1SSxHQUFHdkksRUFBRTQyQixNQUFNdHZCLEVBQUU2UCxlQUFlLG1CQUFvQm5YLEVBQUVxM0Isb0JBQW9CL3ZCLEVBQUVqRixPQUFPLEdBQUcsSUFBSWkxQixHQUFHNzhCLE1BQU1FLFFBQ3ZULFNBQVM0OEIsR0FBR2p3QixFQUFFQyxFQUFFeEQsR0FBVyxHQUFHLFFBQVh1RCxFQUFFdkQsRUFBRXl6QixNQUFpQixtQkFBb0Jsd0IsR0FBRyxpQkFBa0JBLEVBQUUsQ0FBQyxHQUFHdkQsRUFBRTB6QixPQUFPLENBQVksR0FBWDF6QixFQUFFQSxFQUFFMHpCLE9BQVksQ0FBQyxHQUFHLElBQUkxekIsRUFBRW1JLElBQUksTUFBTXZHLE1BQU0wQixFQUFFLE1BQU0sSUFBSWtCLEVBQUV4RSxFQUFFc1IsVUFBVSxJQUFJOU0sRUFBRSxNQUFNNUMsTUFBTTBCLEVBQUUsSUFBSUMsSUFBSSxJQUFJdEgsRUFBRSxHQUFHc0gsRUFBRSxPQUFHLE9BQU9DLEdBQUcsT0FBT0EsRUFBRWl3QixLQUFLLG1CQUFvQmp3QixFQUFFaXdCLEtBQUtqd0IsRUFBRWl3QixJQUFJRSxhQUFhMTNCLEVBQVN1SCxFQUFFaXdCLE1BQUlqd0IsRUFBRSxTQUFTRCxHQUFHLElBQUlDLEVBQUVnQixFQUFFc3RCLEtBQUt0dUIsSUFBSW91QixLQUFLcHVCLEVBQUVnQixFQUFFc3RCLEtBQUssSUFBSSxPQUFPdnVCLFNBQVNDLEVBQUV2SCxHQUFHdUgsRUFBRXZILEdBQUdzSCxJQUFLb3dCLFdBQVcxM0IsRUFBU3VILEdBQUUsR0FBRyxpQkFBa0JELEVBQUUsTUFBTTNCLE1BQU0wQixFQUFFLE1BQU0sSUFBSXRELEVBQUUwekIsT0FBTyxNQUFNOXhCLE1BQU0wQixFQUFFLElBQUlDLElBQUssT0FBT0EsRUFDaGUsU0FBU3F3QixHQUFHcndCLEVBQUVDLEdBQUcsR0FBRyxhQUFhRCxFQUFFckosS0FBSyxNQUFNMEgsTUFBTTBCLEVBQUUsR0FBRyxvQkFBb0J0TSxPQUFPZSxVQUFVdkMsU0FBU3dDLEtBQUt3TCxHQUFHLHFCQUFxQnhNLE9BQU80RSxLQUFLNEgsR0FBRzFOLEtBQUssTUFBTSxJQUFJME4sSUFDbEssU0FBU3F3QixHQUFHdHdCLEdBQUcsU0FBU0MsRUFBRUEsRUFBRXhELEdBQUcsR0FBR3VELEVBQUUsQ0FBQyxJQUFJaUIsRUFBRWhCLEVBQUVzd0IsV0FBVyxPQUFPdHZCLEdBQUdBLEVBQUV1dkIsV0FBVy96QixFQUFFd0QsRUFBRXN3QixXQUFXOXpCLEdBQUd3RCxFQUFFd3dCLFlBQVl4d0IsRUFBRXN3QixXQUFXOXpCLEVBQUVBLEVBQUUrekIsV0FBVyxLQUFLL3pCLEVBQUUxQixNQUFNLEdBQUcsU0FBUzBCLEVBQUVBLEVBQUV3RSxHQUFHLElBQUlqQixFQUFFLE9BQU8sS0FBSyxLQUFLLE9BQU9pQixHQUFHaEIsRUFBRXhELEVBQUV3RSxHQUFHQSxFQUFFQSxFQUFFaVAsUUFBUSxPQUFPLEtBQUssU0FBU2pQLEVBQUVqQixFQUFFQyxHQUFHLElBQUlELEVBQUUsSUFBSWdSLElBQUksT0FBTy9RLEdBQUcsT0FBT0EsRUFBRXpILElBQUl3SCxFQUFFc0UsSUFBSXJFLEVBQUV6SCxJQUFJeUgsR0FBR0QsRUFBRXNFLElBQUlyRSxFQUFFdkUsTUFBTXVFLEdBQUdBLEVBQUVBLEVBQUVpUSxRQUFRLE9BQU9sUSxFQUFFLFNBQVN0SCxFQUFFc0gsRUFBRUMsR0FBc0MsT0FBbkNELEVBQUUwd0IsR0FBRzF3QixFQUFFQyxJQUFLdkUsTUFBTSxFQUFFc0UsRUFBRWtRLFFBQVEsS0FBWWxRLEVBQUUsU0FBU2tCLEVBQUVqQixFQUFFeEQsRUFBRXdFLEdBQWEsT0FBVmhCLEVBQUV2RSxNQUFNdUYsRUFBTWpCLEVBQTRCLFFBQWpCaUIsRUFBRWhCLEVBQUV5UCxZQUE2QnpPLEVBQUVBLEVBQUV2RixPQUFRZSxHQUFHd0QsRUFBRWxGLE1BQU0sRUFDcGYwQixHQUFHd0UsR0FBRWhCLEVBQUVsRixNQUFNLEVBQVMwQixHQURvYUEsRUFDbGEsU0FBUzBFLEVBQUVsQixHQUFzQyxPQUFuQ0QsR0FBRyxPQUFPQyxFQUFFeVAsWUFBWXpQLEVBQUVsRixNQUFNLEdBQVVrRixFQUFFLFNBQVN5RSxFQUFFMUUsRUFBRUMsRUFBRXhELEVBQUV3RSxHQUFHLE9BQUcsT0FBT2hCLEdBQUcsSUFBSUEsRUFBRTJFLE1BQVczRSxFQUFFMHdCLEdBQUdsMEIsRUFBRXVELEVBQUU0d0IsS0FBSzN2QixJQUFLME8sT0FBTzNQLEVBQUVDLEtBQUVBLEVBQUV2SCxFQUFFdUgsRUFBRXhELElBQUtrVCxPQUFPM1AsRUFBU0MsR0FBRSxTQUFTd0UsRUFBRXpFLEVBQUVDLEVBQUV4RCxFQUFFd0UsR0FBRyxPQUFHLE9BQU9oQixHQUFHQSxFQUFFZCxjQUFjMUMsRUFBRTlGLE9BQVlzSyxFQUFFdkksRUFBRXVILEVBQUV4RCxFQUFFc0IsUUFBU215QixJQUFJRCxHQUFHandCLEVBQUVDLEVBQUV4RCxHQUFHd0UsRUFBRTBPLE9BQU8zUCxFQUFFaUIsS0FBRUEsRUFBRTR2QixHQUFHcDBCLEVBQUU5RixLQUFLOEYsRUFBRWpFLElBQUlpRSxFQUFFc0IsTUFBTSxLQUFLaUMsRUFBRTR3QixLQUFLM3ZCLElBQUtpdkIsSUFBSUQsR0FBR2p3QixFQUFFQyxFQUFFeEQsR0FBR3dFLEVBQUUwTyxPQUFPM1AsRUFBU2lCLEdBQUUsU0FBUytOLEVBQUVoUCxFQUFFQyxFQUFFeEQsRUFBRXdFLEdBQUcsT0FBRyxPQUFPaEIsR0FBRyxJQUFJQSxFQUFFMkUsS0FBSzNFLEVBQUU4TixVQUFVcUUsZ0JBQWdCM1YsRUFBRTJWLGVBQWVuUyxFQUFFOE4sVUFBVStpQixpQkFBaUJyMEIsRUFBRXEwQixpQkFBc0I3d0IsRUFDcmdCOHdCLEdBQUd0MEIsRUFBRXVELEVBQUU0d0IsS0FBSzN2QixJQUFLME8sT0FBTzNQLEVBQUVDLEtBQUVBLEVBQUV2SCxFQUFFdUgsRUFBRXhELEVBQUV5SyxVQUFVLEtBQU15SSxPQUFPM1AsRUFBU0MsR0FBRSxTQUFTMUwsRUFBRXlMLEVBQUVDLEVBQUV4RCxFQUFFd0UsRUFBRUMsR0FBRyxPQUFHLE9BQU9qQixHQUFHLElBQUlBLEVBQUUyRSxNQUFXM0UsRUFBRSt3QixHQUFHdjBCLEVBQUV1RCxFQUFFNHdCLEtBQUszdkIsRUFBRUMsSUFBS3lPLE9BQU8zUCxFQUFFQyxLQUFFQSxFQUFFdkgsRUFBRXVILEVBQUV4RCxJQUFLa1QsT0FBTzNQLEVBQVNDLEdBQUUsU0FBUyt0QixFQUFFaHVCLEVBQUVDLEVBQUV4RCxHQUFHLEdBQUcsaUJBQWtCd0QsR0FBRyxpQkFBa0JBLEVBQUUsT0FBT0EsRUFBRTB3QixHQUFHLEdBQUcxd0IsRUFBRUQsRUFBRTR3QixLQUFLbjBCLElBQUtrVCxPQUFPM1AsRUFBRUMsRUFBRSxHQUFHLGlCQUFrQkEsR0FBRyxPQUFPQSxFQUFFLENBQUMsT0FBT0EsRUFBRThFLFVBQVUsS0FBS3JDLEVBQUcsT0FBT2pHLEVBQUVvMEIsR0FBRzV3QixFQUFFdEosS0FBS3NKLEVBQUV6SCxJQUFJeUgsRUFBRWxDLE1BQU0sS0FBS2lDLEVBQUU0d0IsS0FBS24wQixJQUFLeXpCLElBQUlELEdBQUdqd0IsRUFBRSxLQUFLQyxHQUFHeEQsRUFBRWtULE9BQU8zUCxFQUFFdkQsRUFBRSxLQUFLa0csRUFBRyxPQUFPMUMsRUFBRTh3QixHQUFHOXdCLEVBQUVELEVBQUU0d0IsS0FBS24wQixJQUFLa1QsT0FBTzNQLEVBQUVDLEVBQUUsR0FBRyt2QixHQUFHL3ZCLElBQUk4RCxFQUFHOUQsR0FBRyxPQUFPQSxFQUFFK3dCLEdBQUcvd0IsRUFDbmZELEVBQUU0d0IsS0FBS24wQixFQUFFLE9BQVFrVCxPQUFPM1AsRUFBRUMsRUFBRW93QixHQUFHcndCLEVBQUVDLEdBQUcsT0FBTyxLQUFLLFNBQVNndUIsRUFBRWp1QixFQUFFQyxFQUFFeEQsRUFBRXdFLEdBQUcsSUFBSXZJLEVBQUUsT0FBT3VILEVBQUVBLEVBQUV6SCxJQUFJLEtBQUssR0FBRyxpQkFBa0JpRSxHQUFHLGlCQUFrQkEsRUFBRSxPQUFPLE9BQU8vRCxFQUFFLEtBQUtnTSxFQUFFMUUsRUFBRUMsRUFBRSxHQUFHeEQsRUFBRXdFLEdBQUcsR0FBRyxpQkFBa0J4RSxHQUFHLE9BQU9BLEVBQUUsQ0FBQyxPQUFPQSxFQUFFc0ksVUFBVSxLQUFLckMsRUFBRyxPQUFPakcsRUFBRWpFLE1BQU1FLEVBQUUrRCxFQUFFOUYsT0FBT2lNLEVBQUdyTyxFQUFFeUwsRUFBRUMsRUFBRXhELEVBQUVzQixNQUFNbUosU0FBU2pHLEVBQUV2SSxHQUFHK0wsRUFBRXpFLEVBQUVDLEVBQUV4RCxFQUFFd0UsR0FBRyxLQUFLLEtBQUswQixFQUFHLE9BQU9sRyxFQUFFakUsTUFBTUUsRUFBRXNXLEVBQUVoUCxFQUFFQyxFQUFFeEQsRUFBRXdFLEdBQUcsS0FBSyxHQUFHK3VCLEdBQUd2ekIsSUFBSXNILEVBQUd0SCxHQUFHLE9BQU8sT0FBTy9ELEVBQUUsS0FBS25FLEVBQUV5TCxFQUFFQyxFQUFFeEQsRUFBRXdFLEVBQUUsTUFBTW92QixHQUFHcndCLEVBQUV2RCxHQUFHLE9BQU8sS0FBSyxTQUFTeXhCLEVBQUVsdUIsRUFBRUMsRUFBRXhELEVBQUV3RSxFQUFFdkksR0FBRyxHQUFHLGlCQUFrQnVJLEdBQUcsaUJBQWtCQSxFQUFFLE9BQ2xleUQsRUFBRXpFLEVBRHVlRCxFQUFFQSxFQUFFd0YsSUFBSS9JLElBQ3RmLEtBQVcsR0FBR3dFLEVBQUV2SSxHQUFHLEdBQUcsaUJBQWtCdUksR0FBRyxPQUFPQSxFQUFFLENBQUMsT0FBT0EsRUFBRThELFVBQVUsS0FBS3JDLEVBQUcsT0FBTzFDLEVBQUVBLEVBQUV3RixJQUFJLE9BQU92RSxFQUFFekksSUFBSWlFLEVBQUV3RSxFQUFFekksTUFBTSxLQUFLeUksRUFBRXRLLE9BQU9pTSxFQUFHck8sRUFBRTBMLEVBQUVELEVBQUVpQixFQUFFbEQsTUFBTW1KLFNBQVN4TyxFQUFFdUksRUFBRXpJLEtBQUtpTSxFQUFFeEUsRUFBRUQsRUFBRWlCLEVBQUV2SSxHQUFHLEtBQUtpSyxFQUFHLE9BQTJDcU0sRUFBRS9PLEVBQXRDRCxFQUFFQSxFQUFFd0YsSUFBSSxPQUFPdkUsRUFBRXpJLElBQUlpRSxFQUFFd0UsRUFBRXpJLE1BQU0sS0FBV3lJLEVBQUV2SSxHQUFHLEdBQUdzM0IsR0FBRy91QixJQUFJOEMsRUFBRzlDLEdBQUcsT0FBd0IxTSxFQUFFMEwsRUFBbkJELEVBQUVBLEVBQUV3RixJQUFJL0ksSUFBSSxLQUFXd0UsRUFBRXZJLEVBQUUsTUFBTTIzQixHQUFHcHdCLEVBQUVnQixHQUFHLE9BQU8sS0FBSyxTQUFTMGtCLEVBQUVqdEIsRUFBRXlJLEVBQUV1RCxFQUFFRCxHQUFHLElBQUksSUFBSXVLLEVBQUUsS0FBS2dYLEVBQUUsS0FBS0YsRUFBRTNrQixFQUFFMGtCLEVBQUUxa0IsRUFBRSxFQUFFNGtCLEVBQUUsS0FBSyxPQUFPRCxHQUFHRCxFQUFFbmhCLEVBQUU3UixPQUFPZ3pCLElBQUksQ0FBQ0MsRUFBRXBxQixNQUFNbXFCLEdBQUdFLEVBQUVELEVBQUVBLEVBQUUsTUFBTUMsRUFBRUQsRUFBRTVWLFFBQVEsSUFBSTNiLEVBQUUwNUIsRUFBRXYxQixFQUFFb3RCLEVBQUVwaEIsRUFBRW1oQixHQUFHcGhCLEdBQUcsR0FBRyxPQUFPbFEsRUFBRSxDQUFDLE9BQU91eEIsSUFBSUEsRUFBRUMsR0FBRyxNQUFNL2xCLEdBQUc4bEIsR0FBRyxPQUNqZnZ4QixFQUFFbWIsV0FBV3pQLEVBQUV2SCxFQUFFb3RCLEdBQUcza0IsRUFBRUQsRUFBRTNNLEVBQUU0TSxFQUFFMGtCLEdBQUcsT0FBT0csRUFBRWhYLEVBQUV6YSxFQUFFeXhCLEVBQUU5VixRQUFRM2IsRUFBRXl4QixFQUFFenhCLEVBQUV1eEIsRUFBRUMsRUFBRSxHQUFHRixJQUFJbmhCLEVBQUU3UixPQUFPLE9BQU80SixFQUFFL0QsRUFBRW90QixHQUFHOVcsRUFBRSxHQUFHLE9BQU84VyxFQUFFLENBQUMsS0FBS0QsRUFBRW5oQixFQUFFN1IsT0FBT2d6QixJQUFrQixRQUFkQyxFQUFFa0ksRUFBRXQxQixFQUFFZ00sRUFBRW1oQixHQUFHcGhCLE1BQWN0RCxFQUFFRCxFQUFFNGtCLEVBQUUza0IsRUFBRTBrQixHQUFHLE9BQU9HLEVBQUVoWCxFQUFFOFcsRUFBRUUsRUFBRTlWLFFBQVE0VixFQUFFRSxFQUFFRixHQUFHLE9BQU85VyxFQUFFLElBQUk4VyxFQUFFN2tCLEVBQUV2SSxFQUFFb3RCLEdBQUdELEVBQUVuaEIsRUFBRTdSLE9BQU9nekIsSUFBc0IsUUFBbEJFLEVBQUVtSSxFQUFFcEksRUFBRXB0QixFQUFFbXRCLEVBQUVuaEIsRUFBRW1oQixHQUFHcGhCLE1BQWN6RSxHQUFHLE9BQU8rbEIsRUFBRXJXLFdBQVdvVyxFQUFFblUsT0FBTyxPQUFPb1UsRUFBRXZ0QixJQUFJcXRCLEVBQUVFLEVBQUV2dEIsS0FBSzJJLEVBQUVELEVBQUU2a0IsRUFBRTVrQixFQUFFMGtCLEdBQUcsT0FBT0csRUFBRWhYLEVBQUUrVyxFQUFFQyxFQUFFOVYsUUFBUTZWLEVBQUVDLEVBQUVELEdBQTRDLE9BQXpDL2xCLEdBQUc4bEIsRUFBRXZzQixTQUFRLFNBQVN5RyxHQUFHLE9BQU9DLEVBQUV2SCxFQUFFc0gsTUFBWWdQLEVBQUUsU0FBUzRXLEVBQUVsdEIsRUFBRXlJLEVBQUV1RCxFQUFFRCxHQUFHLElBQUl1SyxFQUFFakwsRUFBR1csR0FBRyxHQUFHLG1CQUFvQnNLLEVBQUUsTUFBTTNRLE1BQU0wQixFQUFFLE1BQWtCLEdBQUcsT0FBZjJFLEVBQUVzSyxFQUFFdmEsS0FBS2lRLElBQzFlLE1BQU1yRyxNQUFNMEIsRUFBRSxNQUFNLElBQUksSUFBSWltQixFQUFFaFgsRUFBRSxLQUFLOFcsRUFBRTNrQixFQUFFMGtCLEVBQUUxa0IsRUFBRSxFQUFFNGtCLEVBQUUsS0FBS3h4QixFQUFFbVEsRUFBRTFRLE9BQU8sT0FBTzh4QixJQUFJdnhCLEVBQUVOLEtBQUs0eEIsSUFBSXR4QixFQUFFbVEsRUFBRTFRLE9BQU8sQ0FBQzh4QixFQUFFcHFCLE1BQU1tcUIsR0FBR0UsRUFBRUQsRUFBRUEsRUFBRSxNQUFNQyxFQUFFRCxFQUFFNVYsUUFBUSxJQUFJMFYsRUFBRXFJLEVBQUV2MUIsRUFBRW90QixFQUFFdnhCLEVBQUVMLE1BQU11USxHQUFHLEdBQUcsT0FBT21oQixFQUFFLENBQUMsT0FBT0UsSUFBSUEsRUFBRUMsR0FBRyxNQUFNL2xCLEdBQUc4bEIsR0FBRyxPQUFPRixFQUFFbFcsV0FBV3pQLEVBQUV2SCxFQUFFb3RCLEdBQUcza0IsRUFBRUQsRUFBRTBrQixFQUFFemtCLEVBQUUwa0IsR0FBRyxPQUFPRyxFQUFFaFgsRUFBRTRXLEVBQUVJLEVBQUU5VixRQUFRMFYsRUFBRUksRUFBRUosRUFBRUUsRUFBRUMsRUFBRSxHQUFHeHhCLEVBQUVOLEtBQUssT0FBT3dJLEVBQUUvRCxFQUFFb3RCLEdBQUc5VyxFQUFFLEdBQUcsT0FBTzhXLEVBQUUsQ0FBQyxNQUFNdnhCLEVBQUVOLEtBQUs0eEIsSUFBSXR4QixFQUFFbVEsRUFBRTFRLE9BQXdCLFFBQWpCTyxFQUFFeTVCLEVBQUV0MUIsRUFBRW5FLEVBQUVMLE1BQU11USxNQUFjdEQsRUFBRUQsRUFBRTNNLEVBQUU0TSxFQUFFMGtCLEdBQUcsT0FBT0csRUFBRWhYLEVBQUV6YSxFQUFFeXhCLEVBQUU5VixRQUFRM2IsRUFBRXl4QixFQUFFenhCLEdBQUcsT0FBT3lhLEVBQUUsSUFBSThXLEVBQUU3a0IsRUFBRXZJLEVBQUVvdEIsSUFBSXZ4QixFQUFFTixLQUFLNHhCLElBQUl0eEIsRUFBRW1RLEVBQUUxUSxPQUE0QixRQUFyQk8sRUFBRTI1QixFQUFFcEksRUFBRXB0QixFQUFFbXRCLEVBQUV0eEIsRUFBRUwsTUFBTXVRLE1BQWN6RSxHQUFHLE9BQU96TCxFQUFFbWIsV0FDaGZvVyxFQUFFblUsT0FBTyxPQUFPcGQsRUFBRWlFLElBQUlxdEIsRUFBRXR4QixFQUFFaUUsS0FBSzJJLEVBQUVELEVBQUUzTSxFQUFFNE0sRUFBRTBrQixHQUFHLE9BQU9HLEVBQUVoWCxFQUFFemEsRUFBRXl4QixFQUFFOVYsUUFBUTNiLEVBQUV5eEIsRUFBRXp4QixHQUE0QyxPQUF6Q3lMLEdBQUc4bEIsRUFBRXZzQixTQUFRLFNBQVN5RyxHQUFHLE9BQU9DLEVBQUV2SCxFQUFFc0gsTUFBWWdQLEVBQUUsT0FBTyxTQUFTaFAsRUFBRWlCLEVBQUVDLEVBQUV3RCxHQUFHLElBQUlELEVBQUUsaUJBQWtCdkQsR0FBRyxPQUFPQSxHQUFHQSxFQUFFdkssT0FBT2lNLEdBQUksT0FBTzFCLEVBQUUxSSxJQUFJaU0sSUFBSXZELEVBQUVBLEVBQUVuRCxNQUFNbUosVUFBVSxJQUFJOEgsRUFBRSxpQkFBa0I5TixHQUFHLE9BQU9BLEVBQUUsR0FBRzhOLEVBQUUsT0FBTzlOLEVBQUU2RCxVQUFVLEtBQUtyQyxFQUFHMUMsRUFBRSxDQUFTLElBQVJnUCxFQUFFOU4sRUFBRTFJLElBQVFpTSxFQUFFeEQsRUFBRSxPQUFPd0QsR0FBRyxDQUFDLEdBQUdBLEVBQUVqTSxNQUFNd1csRUFBRSxDQUFDLE9BQU92SyxFQUFFRyxLQUFLLEtBQUssRUFBRSxHQUFHMUQsRUFBRXZLLE9BQU9pTSxFQUFHLENBQUNuRyxFQUFFdUQsRUFBRXlFLEVBQUV5TCxVQUFTalAsRUFBRXZJLEVBQUUrTCxFQUFFdkQsRUFBRW5ELE1BQU1tSixXQUFZeUksT0FBTzNQLEVBQUVBLEVBQUVpQixFQUFFLE1BQU1qQixFQUFFLE1BQU0sUUFBUSxHQUFHeUUsRUFBRXRGLGNBQWMrQixFQUFFdkssS0FBSyxDQUFDOEYsRUFBRXVELEVBQUV5RSxFQUFFeUwsVUFDNWVqUCxFQUFFdkksRUFBRStMLEVBQUV2RCxFQUFFbkQsUUFBU215QixJQUFJRCxHQUFHandCLEVBQUV5RSxFQUFFdkQsR0FBR0QsRUFBRTBPLE9BQU8zUCxFQUFFQSxFQUFFaUIsRUFBRSxNQUFNakIsR0FBR3ZELEVBQUV1RCxFQUFFeUUsR0FBRyxNQUFXeEUsRUFBRUQsRUFBRXlFLEdBQUdBLEVBQUVBLEVBQUV5TCxRQUFRaFAsRUFBRXZLLE9BQU9pTSxJQUFJM0IsRUFBRSt2QixHQUFHOXZCLEVBQUVuRCxNQUFNbUosU0FBU2xILEVBQUU0d0IsS0FBS2xzQixFQUFFeEQsRUFBRTFJLE1BQU9tWCxPQUFPM1AsRUFBRUEsRUFBRWlCLEtBQUl5RCxFQUFFbXNCLEdBQUczdkIsRUFBRXZLLEtBQUt1SyxFQUFFMUksSUFBSTBJLEVBQUVuRCxNQUFNLEtBQUtpQyxFQUFFNHdCLEtBQUtsc0IsSUFBS3dyQixJQUFJRCxHQUFHandCLEVBQUVpQixFQUFFQyxHQUFHd0QsRUFBRWlMLE9BQU8zUCxFQUFFQSxFQUFFMEUsR0FBRyxPQUFPdkQsRUFBRW5CLEdBQUcsS0FBSzJDLEVBQUczQyxFQUFFLENBQUMsSUFBSXlFLEVBQUV2RCxFQUFFMUksSUFBSSxPQUFPeUksR0FBRyxDQUFDLEdBQUdBLEVBQUV6SSxNQUFNaU0sRUFBRSxJQUFHLElBQUl4RCxFQUFFMkQsS0FBSzNELEVBQUU4TSxVQUFVcUUsZ0JBQWdCbFIsRUFBRWtSLGVBQWVuUixFQUFFOE0sVUFBVStpQixpQkFBaUI1dkIsRUFBRTR2QixlQUFlLENBQUNyMEIsRUFBRXVELEVBQUVpQixFQUFFaVAsVUFBU2pQLEVBQUV2SSxFQUFFdUksRUFBRUMsRUFBRWdHLFVBQVUsS0FBTXlJLE9BQU8zUCxFQUFFQSxFQUFFaUIsRUFBRSxNQUFNakIsRUFBT3ZELEVBQUV1RCxFQUFFaUIsR0FBRyxNQUFXaEIsRUFBRUQsRUFBRWlCLEdBQUdBLEVBQUVBLEVBQUVpUCxTQUFRalAsRUFDcGY4dkIsR0FBRzd2QixFQUFFbEIsRUFBRTR3QixLQUFLbHNCLElBQUtpTCxPQUFPM1AsRUFBRUEsRUFBRWlCLEVBQUUsT0FBT0UsRUFBRW5CLEdBQUcsR0FBRyxpQkFBa0JrQixHQUFHLGlCQUFrQkEsRUFBRSxPQUFPQSxFQUFFLEdBQUdBLEVBQUUsT0FBT0QsR0FBRyxJQUFJQSxFQUFFMkQsS0FBS25JLEVBQUV1RCxFQUFFaUIsRUFBRWlQLFVBQVNqUCxFQUFFdkksRUFBRXVJLEVBQUVDLElBQUt5TyxPQUFPM1AsRUFBRUEsRUFBRWlCLElBQUl4RSxFQUFFdUQsRUFBRWlCLElBQUdBLEVBQUUwdkIsR0FBR3p2QixFQUFFbEIsRUFBRTR3QixLQUFLbHNCLElBQUtpTCxPQUFPM1AsRUFBRUEsRUFBRWlCLEdBQUdFLEVBQUVuQixHQUFHLEdBQUdnd0IsR0FBRzl1QixHQUFHLE9BQU95a0IsRUFBRTNsQixFQUFFaUIsRUFBRUMsRUFBRXdELEdBQUcsR0FBR1gsRUFBRzdDLEdBQUcsT0FBTzBrQixFQUFFNWxCLEVBQUVpQixFQUFFQyxFQUFFd0QsR0FBYyxHQUFYc0ssR0FBR3FoQixHQUFHcndCLEVBQUVrQixRQUFNLElBQXFCQSxJQUFJdUQsRUFBRSxPQUFPekUsRUFBRTRFLEtBQUssS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxNQUFNdkcsTUFBTTBCLEVBQUUsSUFBSStFLEVBQUc5RSxFQUFFckosT0FBTyxjQUFlLE9BQU84RixFQUFFdUQsRUFBRWlCLElBQUksSUFBSWd3QixHQUFHWCxJQUFHLEdBQUlZLEdBQUdaLElBQUcsR0FBSWEsR0FBRyxHQUFHQyxHQUFHL0ksR0FBRzhJLElBQUlFLEdBQUdoSixHQUFHOEksSUFBSUcsR0FBR2pKLEdBQUc4SSxJQUN0ZCxTQUFTSSxHQUFHdnhCLEdBQUcsR0FBR0EsSUFBSW14QixHQUFHLE1BQU05eUIsTUFBTTBCLEVBQUUsTUFBTSxPQUFPQyxFQUFFLFNBQVN3eEIsR0FBR3h4QixFQUFFQyxHQUF5QyxPQUF0Q3NvQixHQUFFK0ksR0FBR3J4QixHQUFHc29CLEdBQUU4SSxHQUFHcnhCLEdBQUd1b0IsR0FBRTZJLEdBQUdELElBQUlueEIsRUFBRUMsRUFBRTZJLFVBQW1CLEtBQUssRUFBRSxLQUFLLEdBQUc3SSxHQUFHQSxFQUFFQSxFQUFFd3hCLGlCQUFpQnh4QixFQUFFbUksYUFBYUgsR0FBRyxLQUFLLElBQUksTUFBTSxRQUFrRWhJLEVBQUVnSSxHQUFyQ2hJLEdBQXZCRCxFQUFFLElBQUlBLEVBQUVDLEVBQUV3TixXQUFXeE4sR0FBTW1JLGNBQWMsS0FBS3BJLEVBQUVBLEVBQUUweEIsU0FBa0JwSixHQUFFOEksSUFBSTdJLEdBQUU2SSxHQUFHbnhCLEdBQUcsU0FBUzB4QixLQUFLckosR0FBRThJLElBQUk5SSxHQUFFK0ksSUFBSS9JLEdBQUVnSixJQUFJLFNBQVNNLEdBQUc1eEIsR0FBR3V4QixHQUFHRCxHQUFHbmhCLFNBQVMsSUFBSWxRLEVBQUVzeEIsR0FBR0gsR0FBR2poQixTQUFhMVQsRUFBRXdMLEdBQUdoSSxFQUFFRCxFQUFFckosTUFBTXNKLElBQUl4RCxJQUFJOHJCLEdBQUU4SSxHQUFHcnhCLEdBQUd1b0IsR0FBRTZJLEdBQUczMEIsSUFBSSxTQUFTbzFCLEdBQUc3eEIsR0FBR3F4QixHQUFHbGhCLFVBQVVuUSxJQUFJc29CLEdBQUU4SSxJQUFJOUksR0FBRStJLEtBQUssSUFBSVMsR0FBRXpKLEdBQUcsR0FDOWMsU0FBUzBKLEdBQUcveEIsR0FBRyxJQUFJLElBQUlDLEVBQUVELEVBQUUsT0FBT0MsR0FBRyxDQUFDLEdBQUcsS0FBS0EsRUFBRTJFLElBQUksQ0FBQyxJQUFJbkksRUFBRXdELEVBQUU0UCxjQUFjLEdBQUcsT0FBT3BULElBQW1CLFFBQWZBLEVBQUVBLEVBQUVxVCxhQUFxQixPQUFPclQsRUFBRWhILE1BQU0sT0FBT2dILEVBQUVoSCxNQUFNLE9BQU93SyxPQUFPLEdBQUcsS0FBS0EsRUFBRTJFLFVBQUssSUFBUzNFLEVBQUUreEIsY0FBY0MsYUFBYSxHQUFHLElBQWEsR0FBUmh5QixFQUFFbEYsT0FBVSxPQUFPa0YsT0FBTyxHQUFHLE9BQU9BLEVBQUVnUSxNQUFNLENBQUNoUSxFQUFFZ1EsTUFBTU4sT0FBTzFQLEVBQUVBLEVBQUVBLEVBQUVnUSxNQUFNLFNBQVMsR0FBR2hRLElBQUlELEVBQUUsTUFBTSxLQUFLLE9BQU9DLEVBQUVpUSxTQUFTLENBQUMsR0FBRyxPQUFPalEsRUFBRTBQLFFBQVExUCxFQUFFMFAsU0FBUzNQLEVBQUUsT0FBTyxLQUFLQyxFQUFFQSxFQUFFMFAsT0FBTzFQLEVBQUVpUSxRQUFRUCxPQUFPMVAsRUFBRTBQLE9BQU8xUCxFQUFFQSxFQUFFaVEsUUFBUSxPQUFPLEtBQUssSUFBSWdpQixHQUFHLEtBQUtDLEdBQUcsS0FBS0MsSUFBRyxFQUNwZCxTQUFTQyxHQUFHcnlCLEVBQUVDLEdBQUcsSUFBSXhELEVBQUU2MUIsR0FBRyxFQUFFLEtBQUssS0FBSyxHQUFHNzFCLEVBQUUwQyxZQUFZLFVBQVUxQyxFQUFFOUYsS0FBSyxVQUFVOEYsRUFBRXNSLFVBQVU5TixFQUFFeEQsRUFBRWtULE9BQU8zUCxFQUFFdkQsRUFBRTFCLE1BQU0sRUFBRSxPQUFPaUYsRUFBRXV3QixZQUFZdndCLEVBQUV1d0IsV0FBV0MsV0FBVy96QixFQUFFdUQsRUFBRXV3QixXQUFXOXpCLEdBQUd1RCxFQUFFeXdCLFlBQVl6d0IsRUFBRXV3QixXQUFXOXpCLEVBQUUsU0FBUzgxQixHQUFHdnlCLEVBQUVDLEdBQUcsT0FBT0QsRUFBRTRFLEtBQUssS0FBSyxFQUFFLElBQUluSSxFQUFFdUQsRUFBRXJKLEtBQXlFLE9BQU8sUUFBM0VzSixFQUFFLElBQUlBLEVBQUU2SSxVQUFVck0sRUFBRW1GLGdCQUFnQjNCLEVBQUVvRixTQUFTekQsY0FBYyxLQUFLM0IsS0FBbUJELEVBQUUrTixVQUFVOU4sR0FBRSxHQUFPLEtBQUssRUFBRSxPQUFvRCxRQUE3Q0EsRUFBRSxLQUFLRCxFQUFFd3lCLGNBQWMsSUFBSXZ5QixFQUFFNkksU0FBUyxLQUFLN0ksS0FBWUQsRUFBRStOLFVBQVU5TixHQUFFLEdBQU8sS0FBSyxHQUFZLFFBQVEsT0FBTSxHQUN2ZSxTQUFTd3lCLEdBQUd6eUIsR0FBRyxHQUFHb3lCLEdBQUcsQ0FBQyxJQUFJbnlCLEVBQUVreUIsR0FBRyxHQUFHbHlCLEVBQUUsQ0FBQyxJQUFJeEQsRUFBRXdELEVBQUUsSUFBSXN5QixHQUFHdnlCLEVBQUVDLEdBQUcsQ0FBcUIsS0FBcEJBLEVBQUUwbkIsR0FBR2xyQixFQUFFdW1CLGdCQUFxQnVQLEdBQUd2eUIsRUFBRUMsR0FBdUMsT0FBbkNELEVBQUVqRixPQUFlLEtBQVRpRixFQUFFakYsTUFBWSxFQUFFcTNCLElBQUcsT0FBR0YsR0FBR2x5QixHQUFTcXlCLEdBQUdILEdBQUd6MUIsR0FBR3kxQixHQUFHbHlCLEVBQUVteUIsR0FBR3hLLEdBQUcxbkIsRUFBRXNJLGlCQUFpQnZJLEVBQUVqRixPQUFlLEtBQVRpRixFQUFFakYsTUFBWSxFQUFFcTNCLElBQUcsRUFBR0YsR0FBR2x5QixHQUFHLFNBQVMweUIsR0FBRzF5QixHQUFHLElBQUlBLEVBQUVBLEVBQUUyUCxPQUFPLE9BQU8zUCxHQUFHLElBQUlBLEVBQUU0RSxLQUFLLElBQUk1RSxFQUFFNEUsS0FBSyxLQUFLNUUsRUFBRTRFLEtBQUs1RSxFQUFFQSxFQUFFMlAsT0FBT3VpQixHQUFHbHlCLEVBQzVTLFNBQVMyeUIsR0FBRzN5QixHQUFHLEdBQUdBLElBQUlreUIsR0FBRyxPQUFNLEVBQUcsSUFBSUUsR0FBRyxPQUFPTSxHQUFHMXlCLEdBQUdveUIsSUFBRyxHQUFHLEVBQUcsSUFBSW55QixFQUFFRCxFQUFFckosS0FBSyxHQUFHLElBQUlxSixFQUFFNEUsS0FBSyxTQUFTM0UsR0FBRyxTQUFTQSxJQUFJbW5CLEdBQUdubkIsRUFBRUQsRUFBRWd5QixlQUFlLElBQUkveEIsRUFBRWt5QixHQUFHbHlCLEdBQUdveUIsR0FBR3J5QixFQUFFQyxHQUFHQSxFQUFFMG5CLEdBQUcxbkIsRUFBRStpQixhQUFtQixHQUFOMFAsR0FBRzF5QixHQUFNLEtBQUtBLEVBQUU0RSxJQUFJLENBQWdELEtBQTdCNUUsRUFBRSxRQUFwQkEsRUFBRUEsRUFBRTZQLGVBQXlCN1AsRUFBRThQLFdBQVcsTUFBVyxNQUFNelIsTUFBTTBCLEVBQUUsTUFBTUMsRUFBRSxDQUFpQixJQUFoQkEsRUFBRUEsRUFBRWdqQixZQUFnQi9pQixFQUFFLEVBQUVELEdBQUcsQ0FBQyxHQUFHLElBQUlBLEVBQUU4SSxTQUFTLENBQUMsSUFBSXJNLEVBQUV1RCxFQUFFdkssS0FBSyxHQUFHLE9BQU9nSCxFQUFFLENBQUMsR0FBRyxJQUFJd0QsRUFBRSxDQUFDa3lCLEdBQUd4SyxHQUFHM25CLEVBQUVnakIsYUFBYSxNQUFNaGpCLEVBQUVDLFFBQVEsTUFBTXhELEdBQUcsT0FBT0EsR0FBRyxPQUFPQSxHQUFHd0QsSUFBSUQsRUFBRUEsRUFBRWdqQixZQUFZbVAsR0FBRyxXQUFXQSxHQUFHRCxHQUFHdkssR0FBRzNuQixFQUFFK04sVUFBVWlWLGFBQWEsS0FBSyxPQUFNLEVBQ3RmLFNBQVM0UCxLQUFLVCxHQUFHRCxHQUFHLEtBQUtFLElBQUcsRUFBRyxJQUFJUyxHQUFHLEdBQUcsU0FBU0MsS0FBSyxJQUFJLElBQUk5eUIsRUFBRSxFQUFFQSxFQUFFNnlCLEdBQUdoZ0MsT0FBT21OLElBQUk2eUIsR0FBRzd5QixHQUFHK3lCLDhCQUE4QixLQUFLRixHQUFHaGdDLE9BQU8sRUFBRSxJQUFJbWdDLEdBQUd4d0IsRUFBR3l3Qix1QkFBdUJDLEdBQUcxd0IsRUFBR2twQix3QkFBd0J5SCxHQUFHLEVBQUVDLEdBQUUsS0FBS0MsR0FBRSxLQUFLQyxHQUFFLEtBQUtDLElBQUcsRUFBR0MsSUFBRyxFQUFHLFNBQVNDLEtBQUssTUFBTXAxQixNQUFNMEIsRUFBRSxNQUFPLFNBQVMyekIsR0FBRzF6QixFQUFFQyxHQUFHLEdBQUcsT0FBT0EsRUFBRSxPQUFNLEVBQUcsSUFBSSxJQUFJeEQsRUFBRSxFQUFFQSxFQUFFd0QsRUFBRXBOLFFBQVE0SixFQUFFdUQsRUFBRW5OLE9BQU80SixJQUFJLElBQUlrbUIsR0FBRzNpQixFQUFFdkQsR0FBR3dELEVBQUV4RCxJQUFJLE9BQU0sRUFBRyxPQUFNLEVBQzlYLFNBQVNrM0IsR0FBRzN6QixFQUFFQyxFQUFFeEQsRUFBRXdFLEVBQUV2SSxFQUFFd0ksR0FBeUgsR0FBdEhpeUIsR0FBR2p5QixFQUFFa3lCLEdBQUVuekIsRUFBRUEsRUFBRTRQLGNBQWMsS0FBSzVQLEVBQUUrc0IsWUFBWSxLQUFLL3NCLEVBQUV1c0IsTUFBTSxFQUFFd0csR0FBRzdpQixRQUFRLE9BQU9uUSxHQUFHLE9BQU9BLEVBQUU2UCxjQUFjK2pCLEdBQUdDLEdBQUc3ekIsRUFBRXZELEVBQUV3RSxFQUFFdkksR0FBTTg2QixHQUFHLENBQUN0eUIsRUFBRSxFQUFFLEVBQUUsQ0FBTyxHQUFOc3lCLElBQUcsSUFBUSxHQUFHdHlCLEdBQUcsTUFBTTdDLE1BQU0wQixFQUFFLE1BQU1tQixHQUFHLEVBQUVveUIsR0FBRUQsR0FBRSxLQUFLcHpCLEVBQUUrc0IsWUFBWSxLQUFLZ0csR0FBRzdpQixRQUFRMmpCLEdBQUc5ekIsRUFBRXZELEVBQUV3RSxFQUFFdkksU0FBUzg2QixJQUFrRSxHQUE5RFIsR0FBRzdpQixRQUFRNGpCLEdBQUc5ekIsRUFBRSxPQUFPb3pCLElBQUcsT0FBT0EsR0FBRXIvQixLQUFLbS9CLEdBQUcsRUFBRUcsR0FBRUQsR0FBRUQsR0FBRSxLQUFLRyxJQUFHLEVBQU10ekIsRUFBRSxNQUFNNUIsTUFBTTBCLEVBQUUsTUFBTSxPQUFPQyxFQUFFLFNBQVNnMEIsS0FBSyxJQUFJaDBCLEVBQUUsQ0FBQzZQLGNBQWMsS0FBS29kLFVBQVUsS0FBS2dILFVBQVUsS0FBS0MsTUFBTSxLQUFLbGdDLEtBQUssTUFBOEMsT0FBeEMsT0FBT3MvQixHQUFFRixHQUFFdmpCLGNBQWN5akIsR0FBRXR6QixFQUFFc3pCLEdBQUVBLEdBQUV0L0IsS0FBS2dNLEVBQVNzekIsR0FDL2UsU0FBU2EsS0FBSyxHQUFHLE9BQU9kLEdBQUUsQ0FBQyxJQUFJcnpCLEVBQUVvekIsR0FBRTFqQixVQUFVMVAsRUFBRSxPQUFPQSxFQUFFQSxFQUFFNlAsY0FBYyxVQUFVN1AsRUFBRXF6QixHQUFFci9CLEtBQUssSUFBSWlNLEVBQUUsT0FBT3F6QixHQUFFRixHQUFFdmpCLGNBQWN5akIsR0FBRXQvQixLQUFLLEdBQUcsT0FBT2lNLEVBQUVxekIsR0FBRXJ6QixFQUFFb3pCLEdBQUVyekIsTUFBTSxDQUFDLEdBQUcsT0FBT0EsRUFBRSxNQUFNM0IsTUFBTTBCLEVBQUUsTUFBVUMsRUFBRSxDQUFDNlAsZUFBUHdqQixHQUFFcnpCLEdBQXFCNlAsY0FBY29kLFVBQVVvRyxHQUFFcEcsVUFBVWdILFVBQVVaLEdBQUVZLFVBQVVDLE1BQU1iLEdBQUVhLE1BQU1sZ0MsS0FBSyxNQUFNLE9BQU9zL0IsR0FBRUYsR0FBRXZqQixjQUFjeWpCLEdBQUV0ekIsRUFBRXN6QixHQUFFQSxHQUFFdC9CLEtBQUtnTSxFQUFFLE9BQU9zekIsR0FBRSxTQUFTYyxHQUFHcDBCLEVBQUVDLEdBQUcsTUFBTSxtQkFBb0JBLEVBQUVBLEVBQUVELEdBQUdDLEVBQ3ZZLFNBQVNvMEIsR0FBR3IwQixHQUFHLElBQUlDLEVBQUVrMEIsS0FBSzEzQixFQUFFd0QsRUFBRWkwQixNQUFNLEdBQUcsT0FBT3ozQixFQUFFLE1BQU00QixNQUFNMEIsRUFBRSxNQUFNdEQsRUFBRTYzQixvQkFBb0J0MEIsRUFBRSxJQUFJaUIsRUFBRW95QixHQUFFMzZCLEVBQUV1SSxFQUFFZ3pCLFVBQVUveUIsRUFBRXpFLEVBQUU0d0IsUUFBUSxHQUFHLE9BQU9uc0IsRUFBRSxDQUFDLEdBQUcsT0FBT3hJLEVBQUUsQ0FBQyxJQUFJeUksRUFBRXpJLEVBQUUxRSxLQUFLMEUsRUFBRTFFLEtBQUtrTixFQUFFbE4sS0FBS2tOLEVBQUVsTixLQUFLbU4sRUFBRUYsRUFBRWd6QixVQUFVdjdCLEVBQUV3SSxFQUFFekUsRUFBRTR3QixRQUFRLEtBQUssR0FBRyxPQUFPMzBCLEVBQUUsQ0FBQ0EsRUFBRUEsRUFBRTFFLEtBQUtpTixFQUFFQSxFQUFFZ3NCLFVBQVUsSUFBSXZvQixFQUFFdkQsRUFBRUQsRUFBRSxLQUFLdUQsRUFBRS9MLEVBQUUsRUFBRSxDQUFDLElBQUlzVyxFQUFFdkssRUFBRWlwQixLQUFLLElBQUl5RixHQUFHbmtCLEtBQUtBLEVBQUUsT0FBT3RLLElBQUlBLEVBQUVBLEVBQUUxUSxLQUFLLENBQUMwNUIsS0FBSyxFQUFFNkcsT0FBTzl2QixFQUFFOHZCLE9BQU9DLGFBQWEvdkIsRUFBRSt2QixhQUFhQyxXQUFXaHdCLEVBQUVnd0IsV0FBV3pnQyxLQUFLLE9BQU9pTixFQUFFd0QsRUFBRSt2QixlQUFleDBCLEVBQUV5RSxFQUFFZ3dCLFdBQVd6MEIsRUFBRWlCLEVBQUV3RCxFQUFFOHZCLFlBQVksQ0FBQyxJQUFJaGdDLEVBQUUsQ0FBQ201QixLQUFLMWUsRUFBRXVsQixPQUFPOXZCLEVBQUU4dkIsT0FBT0MsYUFBYS92QixFQUFFK3ZCLGFBQzlmQyxXQUFXaHdCLEVBQUVnd0IsV0FBV3pnQyxLQUFLLE1BQU0sT0FBTzBRLEdBQUd2RCxFQUFFdUQsRUFBRW5RLEVBQUUyTSxFQUFFRCxHQUFHeUQsRUFBRUEsRUFBRTFRLEtBQUtPLEVBQUU2K0IsR0FBRTVHLE9BQU94ZCxFQUFFbWYsSUFBSW5mLEVBQUV2SyxFQUFFQSxFQUFFelEsV0FBVyxPQUFPeVEsR0FBR0EsSUFBSS9MLEdBQUcsT0FBT2dNLEVBQUV4RCxFQUFFRCxFQUFFeUQsRUFBRTFRLEtBQUttTixFQUFFd2hCLEdBQUcxaEIsRUFBRWhCLEVBQUU0UCxpQkFBaUI0YyxJQUFHLEdBQUl4c0IsRUFBRTRQLGNBQWM1TyxFQUFFaEIsRUFBRWd0QixVQUFVL3JCLEVBQUVqQixFQUFFZzBCLFVBQVV2dkIsRUFBRWpJLEVBQUVpNEIsa0JBQWtCenpCLEVBQUUsTUFBTSxDQUFDaEIsRUFBRTRQLGNBQWNwVCxFQUFFazRCLFVBQ3RRLFNBQVNDLEdBQUc1MEIsR0FBRyxJQUFJQyxFQUFFazBCLEtBQUsxM0IsRUFBRXdELEVBQUVpMEIsTUFBTSxHQUFHLE9BQU96M0IsRUFBRSxNQUFNNEIsTUFBTTBCLEVBQUUsTUFBTXRELEVBQUU2M0Isb0JBQW9CdDBCLEVBQUUsSUFBSWlCLEVBQUV4RSxFQUFFazRCLFNBQVNqOEIsRUFBRStELEVBQUU0d0IsUUFBUW5zQixFQUFFakIsRUFBRTRQLGNBQWMsR0FBRyxPQUFPblgsRUFBRSxDQUFDK0QsRUFBRTR3QixRQUFRLEtBQUssSUFBSWxzQixFQUFFekksRUFBRUEsRUFBRTFFLEtBQUssR0FBR2tOLEVBQUVsQixFQUFFa0IsRUFBRUMsRUFBRW96QixRQUFRcHpCLEVBQUVBLEVBQUVuTixXQUFXbU4sSUFBSXpJLEdBQUdpcUIsR0FBR3poQixFQUFFakIsRUFBRTRQLGlCQUFpQjRjLElBQUcsR0FBSXhzQixFQUFFNFAsY0FBYzNPLEVBQUUsT0FBT2pCLEVBQUVnMEIsWUFBWWgwQixFQUFFZ3RCLFVBQVUvckIsR0FBR3pFLEVBQUVpNEIsa0JBQWtCeHpCLEVBQUUsTUFBTSxDQUFDQSxFQUFFRCxHQUNuVixTQUFTNHpCLEdBQUc3MEIsRUFBRUMsRUFBRXhELEdBQUcsSUFBSXdFLEVBQUVoQixFQUFFNjBCLFlBQVk3ekIsRUFBRUEsRUFBRWhCLEVBQUU4MEIsU0FBUyxJQUFJcjhCLEVBQUV1SCxFQUFFOHlCLDhCQUF5SSxHQUF4RyxPQUFPcjZCLEVBQUVzSCxFQUFFdEgsSUFBSXVJLEdBQVVqQixFQUFFQSxFQUFFZzFCLGtCQUFpQmgxQixHQUFHbXpCLEdBQUduekIsS0FBS0EsS0FBRUMsRUFBRTh5Qiw4QkFBOEI5eEIsRUFBRTR4QixHQUFHbmhDLEtBQUt1TyxLQUFNRCxFQUFFLE9BQU92RCxFQUFFd0QsRUFBRTgwQixTQUFvQixNQUFYbEMsR0FBR25oQyxLQUFLdU8sR0FBUzVCLE1BQU0wQixFQUFFLE1BQ3pQLFNBQVNrMUIsR0FBR2oxQixFQUFFQyxFQUFFeEQsRUFBRXdFLEdBQUcsSUFBSXZJLEVBQUV3OEIsR0FBRSxHQUFHLE9BQU94OEIsRUFBRSxNQUFNMkYsTUFBTTBCLEVBQUUsTUFBTSxJQUFJbUIsRUFBRWpCLEVBQUU2MEIsWUFBWTN6QixFQUFFRCxFQUFFakIsRUFBRTgwQixTQUFTcndCLEVBQUVzdUIsR0FBRzdpQixRQUFRMUwsRUFBRUMsRUFBRXl3QixVQUFTLFdBQVcsT0FBT04sR0FBR244QixFQUFFdUgsRUFBRXhELE1BQUt1UyxFQUFFdkssRUFBRSxHQUFHbFEsRUFBRWtRLEVBQUUsR0FBR0EsRUFBRTZ1QixHQUFFLElBQUl0RixFQUFFaHVCLEVBQUU2UCxjQUFjb2UsRUFBRUQsRUFBRU8sS0FBS0wsRUFBRUQsRUFBRW1ILFlBQVl6UCxFQUFFcUksRUFBRW40QixPQUFPbTRCLEVBQUVBLEVBQUVxSCxVQUFVLElBQUl6UCxFQUFFd04sR0FDdU8sT0FEck9wekIsRUFBRTZQLGNBQWMsQ0FBQzBlLEtBQUtOLEVBQUVwNEIsT0FBT29LLEVBQUVvMUIsVUFBVXAwQixHQUFHeUQsRUFBRTR3QixXQUFVLFdBQVdySCxFQUFFbUgsWUFBWTM0QixFQUFFd3hCLEVBQUVzSCxZQUFZdm1CLEVBQUUsSUFBSWhQLEVBQUVrQixFQUFFakIsRUFBRTgwQixTQUFTLElBQUlwUyxHQUFHeGhCLEVBQUVuQixHQUFHLENBQUNBLEVBQUV2RCxFQUFFd0QsRUFBRTgwQixTQUFTcFMsR0FBR3B1QixFQUFFeUwsS0FBS2dQLEVBQUVoUCxHQUFHQSxFQUFFOHVCLEdBQUdsSixHQUFHbHRCLEVBQUVzOEIsa0JBQWtCaDFCLEVBQUV0SCxFQUFFNGIsY0FBY3RVLEVBQUV0SCxFQUFFczhCLGlCQUFpQnQ4QixFQUFFaWMsZ0JBQWdCM1UsRUFBRSxJQUFJLElBQUlpQixFQUM1ZnZJLEVBQUVrYyxjQUFjbFEsRUFBRTFFLEVBQUUsRUFBRTBFLEdBQUcsQ0FBQyxJQUFJRCxFQUFFLEdBQUdpUSxHQUFHaFEsR0FBR3VoQixFQUFFLEdBQUd4aEIsRUFBRXhELEVBQUV3RCxJQUFJekUsRUFBRTBFLElBQUl1aEIsTUFBSyxDQUFDeHBCLEVBQUV3RCxFQUFFZ0IsSUFBSXlELEVBQUU0d0IsV0FBVSxXQUFXLE9BQU9yMEIsRUFBRWhCLEVBQUU4MEIsU0FBUSxXQUFXLElBQUkvMEIsRUFBRWl1QixFQUFFbUgsWUFBWTM0QixFQUFFd3hCLEVBQUVzSCxZQUFZLElBQUk5NEIsRUFBRXVELEVBQUVDLEVBQUU4MEIsVUFBVSxJQUFJOXpCLEVBQUU2dEIsR0FBR2xKLEdBQUdsdEIsRUFBRXM4QixrQkFBa0IvekIsRUFBRXZJLEVBQUU0YixhQUFhLE1BQU15UixHQUFHdHBCLEdBQUUsV0FBVyxNQUFNc3BCLFdBQVMsQ0FBQzlsQixFQUFFZ0IsSUFBSTBoQixHQUFHdUwsRUFBRXp4QixJQUFJa21CLEdBQUdnRCxFQUFFMWxCLElBQUkwaUIsR0FBR3FMLEVBQUUvc0IsTUFBS2pCLEVBQUUsQ0FBQ3F0QixRQUFRLEtBQUtzSCxTQUFTLEtBQUtMLG9CQUFvQkYsR0FBR00sa0JBQWtCbmdDLElBQUtvZ0MsU0FBUzNsQixFQUFFd21CLEdBQUd6ZixLQUFLLEtBQUtxZCxHQUFFcHpCLEdBQUd5RSxFQUFFeXZCLE1BQU1sMEIsRUFBRXlFLEVBQUV3dkIsVUFBVSxLQUFLMS9CLEVBQUVzZ0MsR0FBR244QixFQUFFdUgsRUFBRXhELEdBQUdnSSxFQUFFb0wsY0FBY3BMLEVBQUV3b0IsVUFBVTE0QixHQUFVQSxFQUN0ZSxTQUFTa2hDLEdBQUd6MUIsRUFBRUMsRUFBRXhELEdBQWMsT0FBT3c0QixHQUFaZCxLQUFpQm4wQixFQUFFQyxFQUFFeEQsR0FBRyxTQUFTaTVCLEdBQUcxMUIsR0FBRyxJQUFJQyxFQUFFK3pCLEtBQW1MLE1BQTlLLG1CQUFvQmgwQixJQUFJQSxFQUFFQSxLQUFLQyxFQUFFNFAsY0FBYzVQLEVBQUVndEIsVUFBVWp0QixFQUFvRkEsR0FBbEZBLEVBQUVDLEVBQUVpMEIsTUFBTSxDQUFDN0csUUFBUSxLQUFLc0gsU0FBUyxLQUFLTCxvQkFBb0JGLEdBQUdNLGtCQUFrQjEwQixJQUFPMjBCLFNBQVNhLEdBQUd6ZixLQUFLLEtBQUtxZCxHQUFFcHpCLEdBQVMsQ0FBQ0MsRUFBRTRQLGNBQWM3UCxHQUNoUixTQUFTMjFCLEdBQUczMUIsRUFBRUMsRUFBRXhELEVBQUV3RSxHQUFrTyxPQUEvTmpCLEVBQUUsQ0FBQzRFLElBQUk1RSxFQUFFNDFCLE9BQU8zMUIsRUFBRTQxQixRQUFRcDVCLEVBQUVxNUIsS0FBSzcwQixFQUFFak4sS0FBSyxNQUFzQixRQUFoQmlNLEVBQUVtekIsR0FBRXBHLGNBQXNCL3NCLEVBQUUsQ0FBQ3N3QixXQUFXLE1BQU02QyxHQUFFcEcsWUFBWS9zQixFQUFFQSxFQUFFc3dCLFdBQVd2d0IsRUFBRWhNLEtBQUtnTSxHQUFtQixRQUFmdkQsRUFBRXdELEVBQUVzd0IsWUFBb0J0d0IsRUFBRXN3QixXQUFXdndCLEVBQUVoTSxLQUFLZ00sR0FBR2lCLEVBQUV4RSxFQUFFekksS0FBS3lJLEVBQUV6SSxLQUFLZ00sRUFBRUEsRUFBRWhNLEtBQUtpTixFQUFFaEIsRUFBRXN3QixXQUFXdndCLEdBQVdBLEVBQUUsU0FBUysxQixHQUFHLzFCLEdBQTRCLE9BQWRBLEVBQUUsQ0FBQ21RLFFBQVFuUSxHQUFoQmcwQixLQUE0Qm5rQixjQUFjN1AsRUFBRSxTQUFTZzJCLEtBQUssT0FBTzdCLEtBQUt0a0IsY0FBYyxTQUFTb21CLEdBQUdqMkIsRUFBRUMsRUFBRXhELEVBQUV3RSxHQUFHLElBQUl2SSxFQUFFczdCLEtBQUtaLEdBQUVyNEIsT0FBT2lGLEVBQUV0SCxFQUFFbVgsY0FBYzhsQixHQUFHLEVBQUUxMUIsRUFBRXhELE9BQUUsT0FBTyxJQUFTd0UsRUFBRSxLQUFLQSxHQUNqYyxTQUFTaTFCLEdBQUdsMkIsRUFBRUMsRUFBRXhELEVBQUV3RSxHQUFHLElBQUl2SSxFQUFFeTdCLEtBQUtsekIsT0FBRSxJQUFTQSxFQUFFLEtBQUtBLEVBQUUsSUFBSUMsT0FBRSxFQUFPLEdBQUcsT0FBT215QixHQUFFLENBQUMsSUFBSWx5QixFQUFFa3lCLEdBQUV4akIsY0FBMEIsR0FBWjNPLEVBQUVDLEVBQUUwMEIsUUFBVyxPQUFPNTBCLEdBQUd5eUIsR0FBR3p5QixFQUFFRSxFQUFFMjBCLE1BQW1CLFlBQVpILEdBQUcxMUIsRUFBRXhELEVBQUV5RSxFQUFFRCxHQUFXbXlCLEdBQUVyNEIsT0FBT2lGLEVBQUV0SCxFQUFFbVgsY0FBYzhsQixHQUFHLEVBQUUxMUIsRUFBRXhELEVBQUV5RSxFQUFFRCxHQUFHLFNBQVNrMUIsR0FBR24yQixFQUFFQyxHQUFHLE9BQU9nMkIsR0FBRyxJQUFJLEVBQUVqMkIsRUFBRUMsR0FBRyxTQUFTbTJCLEdBQUdwMkIsRUFBRUMsR0FBRyxPQUFPaTJCLEdBQUcsSUFBSSxFQUFFbDJCLEVBQUVDLEdBQUcsU0FBU28yQixHQUFHcjJCLEVBQUVDLEdBQUcsT0FBT2kyQixHQUFHLEVBQUUsRUFBRWwyQixFQUFFQyxHQUFHLFNBQVNxMkIsR0FBR3QyQixFQUFFQyxHQUFHLE1BQUcsbUJBQW9CQSxHQUFTRCxFQUFFQSxJQUFJQyxFQUFFRCxHQUFHLFdBQVdDLEVBQUUsUUFBVSxNQUFPQSxHQUFxQkQsRUFBRUEsSUFBSUMsRUFBRWtRLFFBQVFuUSxFQUFFLFdBQVdDLEVBQUVrUSxRQUFRLFlBQXRFLEVBQ3hZLFNBQVNvbUIsR0FBR3YyQixFQUFFQyxFQUFFeEQsR0FBNkMsT0FBMUNBLEVBQUUsTUFBT0EsRUFBY0EsRUFBRW5LLE9BQU8sQ0FBQzBOLElBQUksS0FBWWsyQixHQUFHLEVBQUUsRUFBRUksR0FBR3ZnQixLQUFLLEtBQUs5VixFQUFFRCxHQUFHdkQsR0FBRyxTQUFTKzVCLE1BQU0sU0FBU0MsR0FBR3oyQixFQUFFQyxHQUFHLElBQUl4RCxFQUFFMDNCLEtBQUtsMEIsT0FBRSxJQUFTQSxFQUFFLEtBQUtBLEVBQUUsSUFBSWdCLEVBQUV4RSxFQUFFb1QsY0FBYyxPQUFHLE9BQU81TyxHQUFHLE9BQU9oQixHQUFHeXpCLEdBQUd6ekIsRUFBRWdCLEVBQUUsSUFBV0EsRUFBRSxJQUFHeEUsRUFBRW9ULGNBQWMsQ0FBQzdQLEVBQUVDLEdBQVVELEdBQUUsU0FBUzAyQixHQUFHMTJCLEVBQUVDLEdBQUcsSUFBSXhELEVBQUUwM0IsS0FBS2wwQixPQUFFLElBQVNBLEVBQUUsS0FBS0EsRUFBRSxJQUFJZ0IsRUFBRXhFLEVBQUVvVCxjQUFjLE9BQUcsT0FBTzVPLEdBQUcsT0FBT2hCLEdBQUd5ekIsR0FBR3p6QixFQUFFZ0IsRUFBRSxJQUFXQSxFQUFFLElBQUdqQixFQUFFQSxJQUFJdkQsRUFBRW9ULGNBQWMsQ0FBQzdQLEVBQUVDLEdBQVVELEdBQ3paLFNBQVMyMkIsR0FBRzMyQixFQUFFQyxHQUFHLElBQUl4RCxFQUFFMHVCLEtBQUtFLEdBQUcsR0FBRzV1QixFQUFFLEdBQUdBLEdBQUUsV0FBV3VELEdBQUUsTUFBTXFyQixHQUFHLEdBQUc1dUIsRUFBRSxHQUFHQSxHQUFFLFdBQVcsSUFBSUEsRUFBRXkyQixHQUFHMWYsV0FBVzBmLEdBQUcxZixXQUFXLEVBQUUsSUFBSXhULEdBQUUsR0FBSUMsSUFBSSxRQUFRaXpCLEdBQUcxZixXQUFXL1csTUFDNUosU0FBUys0QixHQUFHeDFCLEVBQUVDLEVBQUV4RCxHQUFHLElBQUl3RSxFQUFFNHRCLEtBQUtuMkIsRUFBRW8yQixHQUFHOXVCLEdBQUdrQixFQUFFLENBQUN3c0IsS0FBS2gxQixFQUFFNjdCLE9BQU85M0IsRUFBRSszQixhQUFhLEtBQUtDLFdBQVcsS0FBS3pnQyxLQUFLLE1BQU1tTixFQUFFbEIsRUFBRW90QixRQUE2RSxHQUFyRSxPQUFPbHNCLEVBQUVELEVBQUVsTixLQUFLa04sR0FBR0EsRUFBRWxOLEtBQUttTixFQUFFbk4sS0FBS21OLEVBQUVuTixLQUFLa04sR0FBR2pCLEVBQUVvdEIsUUFBUW5zQixFQUFFQyxFQUFFbkIsRUFBRTBQLFVBQWExUCxJQUFJb3pCLElBQUcsT0FBT2p5QixHQUFHQSxJQUFJaXlCLEdBQUVJLEdBQUdELElBQUcsTUFBTyxDQUFDLEdBQUcsSUFBSXZ6QixFQUFFd3NCLFFBQVEsT0FBT3JyQixHQUFHLElBQUlBLEVBQUVxckIsUUFBaUMsUUFBeEJyckIsRUFBRWxCLEVBQUVxMEIscUJBQThCLElBQUksSUFBSTV2QixFQUFFekUsRUFBRXkwQixrQkFBa0Jqd0IsRUFBRXRELEVBQUV1RCxFQUFFakksR0FBbUMsR0FBaEN5RSxFQUFFc3pCLGFBQWFyekIsRUFBRUQsRUFBRXV6QixXQUFXaHdCLEVBQUtrZSxHQUFHbGUsRUFBRUMsR0FBRyxPQUFPLE1BQU1zSyxJQUFhK2YsR0FBRy91QixFQUFFdEgsRUFBRXVJLElBQzlaLElBQUk4eUIsR0FBRyxDQUFDNkMsWUFBWWxLLEdBQUdtSyxZQUFZcEQsR0FBR3FELFdBQVdyRCxHQUFHNkIsVUFBVTdCLEdBQUdzRCxvQkFBb0J0RCxHQUFHdUQsZ0JBQWdCdkQsR0FBR3dELFFBQVF4RCxHQUFHeUQsV0FBV3pELEdBQUcwRCxPQUFPMUQsR0FBRzBCLFNBQVMxQixHQUFHMkQsY0FBYzNELEdBQUc0RCxpQkFBaUI1RCxHQUFHNkQsY0FBYzdELEdBQUc4RCxpQkFBaUI5RCxHQUFHK0Qsb0JBQW9CL0QsR0FBR2dFLDBCQUF5QixHQUFJN0QsR0FBRyxDQUFDZ0QsWUFBWWxLLEdBQUdtSyxZQUFZLFNBQVM3MkIsRUFBRUMsR0FBNEMsT0FBekMrekIsS0FBS25rQixjQUFjLENBQUM3UCxPQUFFLElBQVNDLEVBQUUsS0FBS0EsR0FBVUQsR0FBRzgyQixXQUFXcEssR0FBRzRJLFVBQVVhLEdBQUdZLG9CQUFvQixTQUFTLzJCLEVBQUVDLEVBQUV4RCxHQUE2QyxPQUExQ0EsRUFBRSxNQUFPQSxFQUFjQSxFQUFFbkssT0FBTyxDQUFDME4sSUFBSSxLQUFZaTJCLEdBQUcsRUFBRSxFQUFFSyxHQUFHdmdCLEtBQUssS0FDdmY5VixFQUFFRCxHQUFHdkQsSUFBSXU2QixnQkFBZ0IsU0FBU2gzQixFQUFFQyxHQUFHLE9BQU9nMkIsR0FBRyxFQUFFLEVBQUVqMkIsRUFBRUMsSUFBSWczQixRQUFRLFNBQVNqM0IsRUFBRUMsR0FBRyxJQUFJeEQsRUFBRXUzQixLQUFxRCxPQUFoRC96QixPQUFFLElBQVNBLEVBQUUsS0FBS0EsRUFBRUQsRUFBRUEsSUFBSXZELEVBQUVvVCxjQUFjLENBQUM3UCxFQUFFQyxHQUFVRCxHQUFHazNCLFdBQVcsU0FBU2wzQixFQUFFQyxFQUFFeEQsR0FBRyxJQUFJd0UsRUFBRSt5QixLQUF1SyxPQUFsSy96QixPQUFFLElBQVN4RCxFQUFFQSxFQUFFd0QsR0FBR0EsRUFBRWdCLEVBQUU0TyxjQUFjNU8sRUFBRWdzQixVQUFVaHRCLEVBQW1GRCxHQUFqRkEsRUFBRWlCLEVBQUVpekIsTUFBTSxDQUFDN0csUUFBUSxLQUFLc0gsU0FBUyxLQUFLTCxvQkFBb0J0MEIsRUFBRTAwQixrQkFBa0J6MEIsSUFBTzAwQixTQUFTYSxHQUFHemYsS0FBSyxLQUFLcWQsR0FBRXB6QixHQUFTLENBQUNpQixFQUFFNE8sY0FBYzdQLElBQUltM0IsT0FBT3BCLEdBQUdaLFNBQVNPLEdBQUcwQixjQUFjWixHQUFHYSxpQkFBaUIsU0FBU3IzQixHQUFHLElBQUlDLEVBQUV5MUIsR0FBRzExQixHQUFHdkQsRUFBRXdELEVBQUUsR0FBR2dCLEVBQUVoQixFQUFFLEdBQzVaLE9BRCtaazJCLElBQUcsV0FBVyxJQUFJbDJCLEVBQUVpekIsR0FBRzFmLFdBQzllMGYsR0FBRzFmLFdBQVcsRUFBRSxJQUFJdlMsRUFBRWpCLEdBQUcsUUFBUWt6QixHQUFHMWYsV0FBV3ZULEtBQUksQ0FBQ0QsSUFBV3ZELEdBQUc2NkIsY0FBYyxXQUFXLElBQUl0M0IsRUFBRTAxQixJQUFHLEdBQUl6MUIsRUFBRUQsRUFBRSxHQUE4QixPQUFOKzFCLEdBQXJCLzFCLEVBQUUyMkIsR0FBRzVnQixLQUFLLEtBQUsvVixFQUFFLEtBQWdCLENBQUNBLEVBQUVDLElBQUlzM0IsaUJBQWlCLFNBQVN2M0IsRUFBRUMsRUFBRXhELEdBQUcsSUFBSXdFLEVBQUUreUIsS0FBa0YsT0FBN0UveUIsRUFBRTRPLGNBQWMsQ0FBQzBlLEtBQUssQ0FBQzZHLFlBQVluMUIsRUFBRXMxQixZQUFZLE1BQU0xL0IsT0FBT21LLEVBQUVxMUIsVUFBVTU0QixHQUFVdzRCLEdBQUdoMEIsRUFBRWpCLEVBQUVDLEVBQUV4RCxJQUFJKzZCLG9CQUFvQixXQUFXLEdBQUdwRixHQUFHLENBQUMsSUFBSXB5QixHQUFFLEVBQUdDLEVBekRsRCxTQUFZRCxHQUFHLE1BQU0sQ0FBQytFLFNBQVN4QixFQUFHdFIsU0FBUytOLEVBQUVzSSxRQUFRdEksR0F5REQwM0IsRUFBRyxXQUFpRCxNQUF0QzEzQixJQUFJQSxHQUFFLEVBQUd2RCxFQUFFLE1BQU1xckIsTUFBTTcxQixTQUFTLE1BQVlvTSxNQUFNMEIsRUFBRSxTQUFTdEQsRUFBRWk1QixHQUFHejFCLEdBQUcsR0FDMVosT0FENlosSUFBWSxFQUFQbXpCLEdBQUV4QyxRQUFVd0MsR0FBRXI0QixPQUFPLElBQUk0NkIsR0FBRyxHQUFFLFdBQVdsNUIsRUFBRSxNQUFNcXJCLE1BQU03MUIsU0FBUyxZQUNoZixFQUFPLE9BQWNnTyxFQUFtQyxPQUFOeTFCLEdBQTNCejFCLEVBQUUsTUFBTTZuQixNQUFNNzFCLFNBQVMsS0FBaUJnTyxHQUFHdzNCLDBCQUF5QixHQUFJNUQsR0FBRyxDQUFDK0MsWUFBWWxLLEdBQUdtSyxZQUFZSixHQUFHSyxXQUFXcEssR0FBRzRJLFVBQVVjLEdBQUdXLG9CQUFvQlIsR0FBR1MsZ0JBQWdCWCxHQUFHWSxRQUFRUCxHQUFHUSxXQUFXN0MsR0FBRzhDLE9BQU9uQixHQUFHYixTQUFTLFdBQVcsT0FBT2QsR0FBR0QsS0FBS2dELGNBQWNaLEdBQUdhLGlCQUFpQixTQUFTcjNCLEdBQUcsSUFBSUMsRUFBRW8wQixHQUFHRCxJQUFJMzNCLEVBQUV3RCxFQUFFLEdBQUdnQixFQUFFaEIsRUFBRSxHQUE2RixPQUExRm0yQixJQUFHLFdBQVcsSUFBSW4yQixFQUFFaXpCLEdBQUcxZixXQUFXMGYsR0FBRzFmLFdBQVcsRUFBRSxJQUFJdlMsRUFBRWpCLEdBQUcsUUFBUWt6QixHQUFHMWYsV0FBV3ZULEtBQUksQ0FBQ0QsSUFBV3ZELEdBQUc2NkIsY0FBYyxXQUFXLElBQUl0M0IsRUFBRXEwQixHQUFHRCxJQUFJLEdBQUcsTUFBTSxDQUFDNEIsS0FBSzdsQixRQUM5ZW5RLElBQUl1M0IsaUJBQWlCOUIsR0FBRytCLG9CQUFvQixXQUFXLE9BQU9uRCxHQUFHRCxJQUFJLElBQUlxRCwwQkFBeUIsR0FBSTNELEdBQUcsQ0FBQzhDLFlBQVlsSyxHQUFHbUssWUFBWUosR0FBR0ssV0FBV3BLLEdBQUc0SSxVQUFVYyxHQUFHVyxvQkFBb0JSLEdBQUdTLGdCQUFnQlgsR0FBR1ksUUFBUVAsR0FBR1EsV0FBV3RDLEdBQUd1QyxPQUFPbkIsR0FBR2IsU0FBUyxXQUFXLE9BQU9QLEdBQUdSLEtBQUtnRCxjQUFjWixHQUFHYSxpQkFBaUIsU0FBU3IzQixHQUFHLElBQUlDLEVBQUUyMEIsR0FBR1IsSUFBSTMzQixFQUFFd0QsRUFBRSxHQUFHZ0IsRUFBRWhCLEVBQUUsR0FBNkYsT0FBMUZtMkIsSUFBRyxXQUFXLElBQUluMkIsRUFBRWl6QixHQUFHMWYsV0FBVzBmLEdBQUcxZixXQUFXLEVBQUUsSUFBSXZTLEVBQUVqQixHQUFHLFFBQVFrekIsR0FBRzFmLFdBQVd2VCxLQUFJLENBQUNELElBQVd2RCxHQUFHNjZCLGNBQWMsV0FBVyxJQUFJdDNCLEVBQUU0MEIsR0FBR1IsSUFBSSxHQUFHLE1BQU0sQ0FBQzRCLEtBQUs3bEIsUUFDcmZuUSxJQUFJdTNCLGlCQUFpQjlCLEdBQUcrQixvQkFBb0IsV0FBVyxPQUFPNUMsR0FBR1IsSUFBSSxJQUFJcUQsMEJBQXlCLEdBQUlFLEdBQUduMUIsRUFBR28xQixrQkFBa0JuTCxJQUFHLEVBQUcsU0FBU29MLEdBQUc3M0IsRUFBRUMsRUFBRXhELEVBQUV3RSxHQUFHaEIsRUFBRWdRLE1BQU0sT0FBT2pRLEVBQUVreEIsR0FBR2p4QixFQUFFLEtBQUt4RCxFQUFFd0UsR0FBR2d3QixHQUFHaHhCLEVBQUVELEVBQUVpUSxNQUFNeFQsRUFBRXdFLEdBQUcsU0FBUzYyQixHQUFHOTNCLEVBQUVDLEVBQUV4RCxFQUFFd0UsRUFBRXZJLEdBQUcrRCxFQUFFQSxFQUFFakYsT0FBTyxJQUFJMEosRUFBRWpCLEVBQUVpd0IsSUFBOEIsT0FBMUI3RCxHQUFHcHNCLEVBQUV2SCxHQUFHdUksRUFBRTB5QixHQUFHM3pCLEVBQUVDLEVBQUV4RCxFQUFFd0UsRUFBRUMsRUFBRXhJLEdBQU0sT0FBT3NILEdBQUl5c0IsSUFBMEV4c0IsRUFBRWxGLE9BQU8sRUFBRTg4QixHQUFHNzNCLEVBQUVDLEVBQUVnQixFQUFFdkksR0FBVXVILEVBQUVnUSxRQUFoR2hRLEVBQUUrc0IsWUFBWWh0QixFQUFFZ3RCLFlBQVkvc0IsRUFBRWxGLFFBQVEsSUFBSWlGLEVBQUV3c0IsUUFBUTl6QixFQUFFcS9CLEdBQUcvM0IsRUFBRUMsRUFBRXZILElBQ3hXLFNBQVNzL0IsR0FBR2g0QixFQUFFQyxFQUFFeEQsRUFBRXdFLEVBQUV2SSxFQUFFd0ksR0FBRyxHQUFHLE9BQU9sQixFQUFFLENBQUMsSUFBSW1CLEVBQUUxRSxFQUFFOUYsS0FBSyxNQUFHLG1CQUFvQndLLEdBQUk4MkIsR0FBRzkyQixTQUFJLElBQVNBLEVBQUUvSyxjQUFjLE9BQU9xRyxFQUFFdkYsY0FBUyxJQUFTdUYsRUFBRXJHLGVBQXNENEosRUFBRTZ3QixHQUFHcDBCLEVBQUU5RixLQUFLLEtBQUtzSyxFQUFFaEIsRUFBRUEsRUFBRTJ3QixLQUFLMXZCLElBQUtndkIsSUFBSWp3QixFQUFFaXdCLElBQUlsd0IsRUFBRTJQLE9BQU8xUCxFQUFTQSxFQUFFZ1EsTUFBTWpRLElBQXZHQyxFQUFFMkUsSUFBSSxHQUFHM0UsRUFBRXRKLEtBQUt3SyxFQUFFKzJCLEdBQUdsNEIsRUFBRUMsRUFBRWtCLEVBQUVGLEVBQUV2SSxFQUFFd0ksSUFBb0YsT0FBVkMsRUFBRW5CLEVBQUVpUSxNQUFTLElBQUt2WCxFQUFFd0ksS0FBS3hJLEVBQUV5SSxFQUFFNndCLGVBQTBCdjFCLEVBQUUsUUFBZEEsRUFBRUEsRUFBRXZGLFNBQW1CdUYsRUFBRW9tQixJQUFLbnFCLEVBQUV1SSxJQUFJakIsRUFBRWt3QixNQUFNandCLEVBQUVpd0IsS0FBWTZILEdBQUcvM0IsRUFBRUMsRUFBRWlCLElBQUdqQixFQUFFbEYsT0FBTyxHQUFFaUYsRUFBRTB3QixHQUFHdnZCLEVBQUVGLElBQUtpdkIsSUFBSWp3QixFQUFFaXdCLElBQUlsd0IsRUFBRTJQLE9BQU8xUCxFQUFTQSxFQUFFZ1EsTUFBTWpRLEdBQ2xiLFNBQVNrNEIsR0FBR2w0QixFQUFFQyxFQUFFeEQsRUFBRXdFLEVBQUV2SSxFQUFFd0ksR0FBRyxHQUFHLE9BQU9sQixHQUFHNmlCLEdBQUc3aUIsRUFBRWd5QixjQUFjL3dCLElBQUlqQixFQUFFa3dCLE1BQU1qd0IsRUFBRWl3QixJQUFJLElBQUd6RCxJQUFHLEVBQUcsSUFBS3ZyQixFQUFFeEksR0FBcUMsT0FBT3VILEVBQUV1c0IsTUFBTXhzQixFQUFFd3NCLE1BQU11TCxHQUFHLzNCLEVBQUVDLEVBQUVpQixHQUFoRSxJQUFhLE1BQVJsQixFQUFFakYsU0FBZTB4QixJQUFHLEdBQTBDLE9BQU8wTCxHQUFHbjRCLEVBQUVDLEVBQUV4RCxFQUFFd0UsRUFBRUMsR0FDbkwsU0FBU2szQixHQUFHcDRCLEVBQUVDLEVBQUV4RCxHQUFHLElBQUl3RSxFQUFFaEIsRUFBRXV5QixhQUFhOTVCLEVBQUV1SSxFQUFFaUcsU0FBU2hHLEVBQUUsT0FBT2xCLEVBQUVBLEVBQUU2UCxjQUFjLEtBQUssR0FBRyxXQUFXNU8sRUFBRTJ2QixNQUFNLGtDQUFrQzN2QixFQUFFMnZCLEtBQUssR0FBRyxJQUFZLEVBQVAzd0IsRUFBRTJ3QixNQUFRM3dCLEVBQUU0UCxjQUFjLENBQUN3b0IsVUFBVSxHQUFHQyxHQUFHcjRCLEVBQUV4RCxPQUFRLElBQUcsSUFBTyxXQUFGQSxHQUE4RSxPQUFPdUQsRUFBRSxPQUFPa0IsRUFBRUEsRUFBRW0zQixVQUFVNTdCLEVBQUVBLEVBQUV3RCxFQUFFdXNCLE1BQU12c0IsRUFBRW1zQixXQUFXLFdBQVduc0IsRUFBRTRQLGNBQWMsQ0FBQ3dvQixVQUFVcjRCLEdBQUdzNEIsR0FBR3I0QixFQUFFRCxHQUFHLEtBQXhLQyxFQUFFNFAsY0FBYyxDQUFDd29CLFVBQVUsR0FBR0MsR0FBR3I0QixFQUFFLE9BQU9pQixFQUFFQSxFQUFFbTNCLFVBQVU1N0IsUUFBMEgsT0FBT3lFLEdBQUdELEVBQUVDLEVBQUVtM0IsVUFBVTU3QixFQUFFd0QsRUFBRTRQLGNBQWMsTUFBTTVPLEVBQUV4RSxFQUFFNjdCLEdBQUdyNEIsRUFBRWdCLEdBQWUsT0FBWjQyQixHQUFHNzNCLEVBQUVDLEVBQUV2SCxFQUFFK0QsR0FBVXdELEVBQUVnUSxNQUMxZSxTQUFTc29CLEdBQUd2NEIsRUFBRUMsR0FBRyxJQUFJeEQsRUFBRXdELEVBQUVpd0IsS0FBTyxPQUFPbHdCLEdBQUcsT0FBT3ZELEdBQUcsT0FBT3VELEdBQUdBLEVBQUVrd0IsTUFBTXp6QixLQUFFd0QsRUFBRWxGLE9BQU8sS0FBSSxTQUFTbzlCLEdBQUduNEIsRUFBRUMsRUFBRXhELEVBQUV3RSxFQUFFdkksR0FBRyxJQUFJd0ksRUFBRTZuQixHQUFHdHNCLEdBQUdrc0IsR0FBR0YsR0FBRXRZLFFBQTRDLE9BQXBDalAsRUFBRTBuQixHQUFHM29CLEVBQUVpQixHQUFHbXJCLEdBQUdwc0IsRUFBRXZILEdBQUcrRCxFQUFFazNCLEdBQUczekIsRUFBRUMsRUFBRXhELEVBQUV3RSxFQUFFQyxFQUFFeEksR0FBTSxPQUFPc0gsR0FBSXlzQixJQUEwRXhzQixFQUFFbEYsT0FBTyxFQUFFODhCLEdBQUc3M0IsRUFBRUMsRUFBRXhELEVBQUUvRCxHQUFVdUgsRUFBRWdRLFFBQWhHaFEsRUFBRStzQixZQUFZaHRCLEVBQUVndEIsWUFBWS9zQixFQUFFbEYsUUFBUSxJQUFJaUYsRUFBRXdzQixRQUFROXpCLEVBQUVxL0IsR0FBRy8zQixFQUFFQyxFQUFFdkgsSUFDOVAsU0FBUzgvQixHQUFHeDRCLEVBQUVDLEVBQUV4RCxFQUFFd0UsRUFBRXZJLEdBQUcsR0FBR3F3QixHQUFHdHNCLEdBQUcsQ0FBQyxJQUFJeUUsR0FBRSxFQUFHa29CLEdBQUducEIsUUFBUWlCLEdBQUUsRUFBVyxHQUFSbXJCLEdBQUdwc0IsRUFBRXZILEdBQU0sT0FBT3VILEVBQUU4TixVQUFVLE9BQU8vTixJQUFJQSxFQUFFMFAsVUFBVSxLQUFLelAsRUFBRXlQLFVBQVUsS0FBS3pQLEVBQUVsRixPQUFPLEdBQUdzMEIsR0FBR3B2QixFQUFFeEQsRUFBRXdFLEdBQUcwdUIsR0FBRzF2QixFQUFFeEQsRUFBRXdFLEVBQUV2SSxHQUFHdUksR0FBRSxPQUFRLEdBQUcsT0FBT2pCLEVBQUUsQ0FBQyxJQUFJbUIsRUFBRWxCLEVBQUU4TixVQUFVckosRUFBRXpFLEVBQUUreEIsY0FBYzd3QixFQUFFcEQsTUFBTTJHLEVBQUUsSUFBSUQsRUFBRXRELEVBQUV3ckIsUUFBUTNkLEVBQUV2UyxFQUFFdkcsWUFBMEM4WSxFQUE5QixpQkFBa0JBLEdBQUcsT0FBT0EsRUFBSTBkLEdBQUcxZCxHQUEyQjRaLEdBQUczb0IsRUFBMUIrTyxFQUFFK1osR0FBR3RzQixHQUFHa3NCLEdBQUdGLEdBQUV0WSxTQUFtQixJQUFJNWIsRUFBRWtJLEVBQUVqRyx5QkFBeUJ3M0IsRUFBRSxtQkFBb0J6NUIsR0FBRyxtQkFBb0I0TSxFQUFFeXVCLHdCQUF3QjVCLEdBQUcsbUJBQW9CN3NCLEVBQUV1dUIsa0NBQ3BkLG1CQUFvQnZ1QixFQUFFc3VCLDRCQUE0Qi9xQixJQUFJekQsR0FBR3dELElBQUl1SyxJQUFJd2dCLEdBQUd2dkIsRUFBRWtCLEVBQUVGLEVBQUUrTixHQUFHOGQsSUFBRyxFQUFHLElBQUltQixFQUFFaHVCLEVBQUU0UCxjQUFjMU8sRUFBRW11QixNQUFNckIsRUFBRUYsR0FBRzl0QixFQUFFZ0IsRUFBRUUsRUFBRXpJLEdBQUcrTCxFQUFFeEUsRUFBRTRQLGNBQWNuTCxJQUFJekQsR0FBR2d0QixJQUFJeHBCLEdBQUdpa0IsR0FBRXZZLFNBQVMyYyxJQUFJLG1CQUFvQnY0QixJQUFJaTZCLEdBQUd2dUIsRUFBRXhELEVBQUVsSSxFQUFFME0sR0FBR3dELEVBQUV4RSxFQUFFNFAsZ0JBQWdCbkwsRUFBRW9vQixJQUFJb0MsR0FBR2p2QixFQUFFeEQsRUFBRWlJLEVBQUV6RCxFQUFFZ3RCLEVBQUV4cEIsRUFBRXVLLEtBQUtnZixHQUFHLG1CQUFvQjdzQixFQUFFMHVCLDJCQUEyQixtQkFBb0IxdUIsRUFBRTJ1QixxQkFBcUIsbUJBQW9CM3VCLEVBQUUydUIsb0JBQW9CM3VCLEVBQUUydUIscUJBQXFCLG1CQUFvQjN1QixFQUFFMHVCLDJCQUEyQjF1QixFQUFFMHVCLDZCQUE2QixtQkFDemUxdUIsRUFBRTR1QixvQkFBb0I5dkIsRUFBRWxGLE9BQU8sS0FBSyxtQkFBb0JvRyxFQUFFNHVCLG9CQUFvQjl2QixFQUFFbEYsT0FBTyxHQUFHa0YsRUFBRSt4QixjQUFjL3dCLEVBQUVoQixFQUFFNFAsY0FBY3BMLEdBQUd0RCxFQUFFcEQsTUFBTWtELEVBQUVFLEVBQUVtdUIsTUFBTTdxQixFQUFFdEQsRUFBRXdyQixRQUFRM2QsRUFBRS9OLEVBQUV5RCxJQUFJLG1CQUFvQnZELEVBQUU0dUIsb0JBQW9COXZCLEVBQUVsRixPQUFPLEdBQUdrRyxHQUFFLE9BQVEsQ0FBQ0UsRUFBRWxCLEVBQUU4TixVQUFVd2YsR0FBR3Z0QixFQUFFQyxHQUFHeUUsRUFBRXpFLEVBQUUreEIsY0FBY2hqQixFQUFFL08sRUFBRXRKLE9BQU9zSixFQUFFZCxZQUFZdUYsRUFBRWluQixHQUFHMXJCLEVBQUV0SixLQUFLK04sR0FBR3ZELEVBQUVwRCxNQUFNaVIsRUFBRWdmLEVBQUUvdEIsRUFBRXV5QixhQUFhdkUsRUFBRTlzQixFQUFFd3JCLFFBQXNEbG9CLEVBQTlCLGlCQUFoQkEsRUFBRWhJLEVBQUV2RyxjQUFpQyxPQUFPdU8sRUFBSWlvQixHQUFHam9CLEdBQTJCbWtCLEdBQUczb0IsRUFBMUJ3RSxFQUFFc2tCLEdBQUd0c0IsR0FBR2tzQixHQUFHRixHQUFFdFksU0FBbUIsSUFBSStkLEVBQUV6eEIsRUFBRWpHLDBCQUEwQmpDLEVBQUUsbUJBQW9CMjVCLEdBQ25mLG1CQUFvQi9zQixFQUFFeXVCLDBCQUEwQixtQkFBb0J6dUIsRUFBRXV1QixrQ0FBa0MsbUJBQW9CdnVCLEVBQUVzdUIsNEJBQTRCL3FCLElBQUlzcEIsR0FBR0MsSUFBSXhwQixJQUFJK3FCLEdBQUd2dkIsRUFBRWtCLEVBQUVGLEVBQUV3RCxHQUFHcW9CLElBQUcsRUFBR21CLEVBQUVodUIsRUFBRTRQLGNBQWMxTyxFQUFFbXVCLE1BQU1yQixFQUFFRixHQUFHOXRCLEVBQUVnQixFQUFFRSxFQUFFekksR0FBRyxJQUFJaXRCLEVBQUUxbEIsRUFBRTRQLGNBQWNuTCxJQUFJc3BCLEdBQUdDLElBQUl0SSxHQUFHK0MsR0FBRXZZLFNBQVMyYyxJQUFJLG1CQUFvQm9CLElBQUlNLEdBQUd2dUIsRUFBRXhELEVBQUV5eEIsRUFBRWp0QixHQUFHMGtCLEVBQUUxbEIsRUFBRTRQLGdCQUFnQmIsRUFBRThkLElBQUlvQyxHQUFHanZCLEVBQUV4RCxFQUFFdVMsRUFBRS9OLEVBQUVndEIsRUFBRXRJLEVBQUVsaEIsS0FBS2xRLEdBQUcsbUJBQW9CNE0sRUFBRXMzQiw0QkFBNEIsbUJBQW9CdDNCLEVBQUV1M0Isc0JBQXNCLG1CQUFvQnYzQixFQUFFdTNCLHFCQUFxQnYzQixFQUFFdTNCLG9CQUFvQnozQixFQUMxZ0Iwa0IsRUFBRWxoQixHQUFHLG1CQUFvQnRELEVBQUVzM0IsNEJBQTRCdDNCLEVBQUVzM0IsMkJBQTJCeDNCLEVBQUUwa0IsRUFBRWxoQixJQUFJLG1CQUFvQnRELEVBQUV3M0IscUJBQXFCMTRCLEVBQUVsRixPQUFPLEdBQUcsbUJBQW9Cb0csRUFBRXl1QiwwQkFBMEIzdkIsRUFBRWxGLE9BQU8sT0FBTyxtQkFBb0JvRyxFQUFFdzNCLG9CQUFvQmowQixJQUFJMUUsRUFBRWd5QixlQUFlL0QsSUFBSWp1QixFQUFFNlAsZ0JBQWdCNVAsRUFBRWxGLE9BQU8sR0FBRyxtQkFBb0JvRyxFQUFFeXVCLHlCQUF5QmxyQixJQUFJMUUsRUFBRWd5QixlQUFlL0QsSUFBSWp1QixFQUFFNlAsZ0JBQWdCNVAsRUFBRWxGLE9BQU8sS0FBS2tGLEVBQUUreEIsY0FBYy93QixFQUFFaEIsRUFBRTRQLGNBQWM4VixHQUFHeGtCLEVBQUVwRCxNQUFNa0QsRUFBRUUsRUFBRW11QixNQUFNM0osRUFBRXhrQixFQUFFd3JCLFFBQVFsb0IsRUFBRXhELEVBQUUrTixJQUFJLG1CQUFvQjdOLEVBQUV3M0Isb0JBQzdmajBCLElBQUkxRSxFQUFFZ3lCLGVBQWUvRCxJQUFJanVCLEVBQUU2UCxnQkFBZ0I1UCxFQUFFbEYsT0FBTyxHQUFHLG1CQUFvQm9HLEVBQUV5dUIseUJBQXlCbHJCLElBQUkxRSxFQUFFZ3lCLGVBQWUvRCxJQUFJanVCLEVBQUU2UCxnQkFBZ0I1UCxFQUFFbEYsT0FBTyxLQUFLa0csR0FBRSxHQUFJLE9BQU8yM0IsR0FBRzU0QixFQUFFQyxFQUFFeEQsRUFBRXdFLEVBQUVDLEVBQUV4SSxHQUN6TCxTQUFTa2dDLEdBQUc1NEIsRUFBRUMsRUFBRXhELEVBQUV3RSxFQUFFdkksRUFBRXdJLEdBQUdxM0IsR0FBR3Y0QixFQUFFQyxHQUFHLElBQUlrQixFQUFFLElBQWEsR0FBUmxCLEVBQUVsRixPQUFVLElBQUlrRyxJQUFJRSxFQUFFLE9BQU96SSxHQUFHNHdCLEdBQUdycEIsRUFBRXhELEdBQUUsR0FBSXM3QixHQUFHLzNCLEVBQUVDLEVBQUVpQixHQUFHRCxFQUFFaEIsRUFBRThOLFVBQVU0cEIsR0FBR3huQixRQUFRbFEsRUFBRSxJQUFJeUUsRUFBRXZELEdBQUcsbUJBQW9CMUUsRUFBRWxHLHlCQUF5QixLQUFLMEssRUFBRXpKLFNBQXdJLE9BQS9IeUksRUFBRWxGLE9BQU8sRUFBRSxPQUFPaUYsR0FBR21CLEdBQUdsQixFQUFFZ1EsTUFBTWdoQixHQUFHaHhCLEVBQUVELEVBQUVpUSxNQUFNLEtBQUsvTyxHQUFHakIsRUFBRWdRLE1BQU1naEIsR0FBR2h4QixFQUFFLEtBQUt5RSxFQUFFeEQsSUFBSTIyQixHQUFHNzNCLEVBQUVDLEVBQUV5RSxFQUFFeEQsR0FBR2pCLEVBQUU0UCxjQUFjNU8sRUFBRXF1QixNQUFNNTJCLEdBQUc0d0IsR0FBR3JwQixFQUFFeEQsR0FBRSxHQUFXd0QsRUFBRWdRLE1BQU0sU0FBUzRvQixHQUFHNzRCLEdBQUcsSUFBSUMsRUFBRUQsRUFBRStOLFVBQVU5TixFQUFFNjRCLGVBQWU3UCxHQUFHanBCLEVBQUVDLEVBQUU2NEIsZUFBZTc0QixFQUFFNjRCLGlCQUFpQjc0QixFQUFFMHNCLFNBQVMxc0IsRUFBRTBzQixTQUFTMUQsR0FBR2pwQixFQUFFQyxFQUFFMHNCLFNBQVEsR0FBSTZFLEdBQUd4eEIsRUFBRUMsRUFBRW1TLGVBQzdkLElBUzBWMm1CLEdBQU1DLEdBQUdDLEdBVC9WQyxHQUFHLENBQUNwcEIsV0FBVyxLQUFLcXBCLFVBQVUsR0FDbEMsU0FBU0MsR0FBR3A1QixFQUFFQyxFQUFFeEQsR0FBRyxJQUFzQzBFLEVBQWxDRixFQUFFaEIsRUFBRXV5QixhQUFhOTVCLEVBQUVvNUIsR0FBRTNoQixRQUFRalAsR0FBRSxFQUE2TSxPQUF2TUMsRUFBRSxJQUFhLEdBQVJsQixFQUFFbEYsVUFBYW9HLEdBQUUsT0FBT25CLEdBQUcsT0FBT0EsRUFBRTZQLGdCQUFpQixJQUFPLEVBQUZuWCxJQUFNeUksR0FBR0QsR0FBRSxFQUFHakIsRUFBRWxGLFFBQVEsSUFBSSxPQUFPaUYsR0FBRyxPQUFPQSxFQUFFNlAsb0JBQWUsSUFBUzVPLEVBQUVvNEIsV0FBVSxJQUFLcDRCLEVBQUVxNEIsNkJBQTZCNWdDLEdBQUcsR0FBRzZ2QixHQUFFdUosR0FBSSxFQUFGcDVCLEdBQVEsT0FBT3NILFFBQUcsSUFBU2lCLEVBQUVvNEIsVUFBVTVHLEdBQUd4eUIsR0FBR0QsRUFBRWlCLEVBQUVpRyxTQUFTeE8sRUFBRXVJLEVBQUVvNEIsU0FBWW40QixHQUFTbEIsRUFBRXU1QixHQUFHdDVCLEVBQUVELEVBQUV0SCxFQUFFK0QsR0FBR3dELEVBQUVnUSxNQUFNSixjQUFjLENBQUN3b0IsVUFBVTU3QixHQUFHd0QsRUFBRTRQLGNBQWNxcEIsR0FBR2w1QixHQUFLLGlCQUFrQmlCLEVBQUV1NEIsMkJBQWlDeDVCLEVBQUV1NUIsR0FBR3Q1QixFQUFFRCxFQUFFdEgsRUFBRStELEdBQUd3RCxFQUFFZ1EsTUFBTUosY0FBYyxDQUFDd29CLFVBQVU1N0IsR0FDL2Z3RCxFQUFFNFAsY0FBY3FwQixHQUFHajVCLEVBQUV1c0IsTUFBTSxTQUFTeHNCLEtBQUV2RCxFQUFFZzlCLEdBQUcsQ0FBQzdJLEtBQUssVUFBVTFwQixTQUFTbEgsR0FBR0MsRUFBRTJ3QixLQUFLbjBCLEVBQUUsT0FBUWtULE9BQU8xUCxFQUFTQSxFQUFFZ1EsTUFBTXhULEtBQVl1RCxFQUFFNlAsY0FBa0IzTyxHQUFTRCxFQUd6SixTQUFZakIsRUFBRUMsRUFBRXhELEVBQUV3RSxFQUFFdkksR0FBRyxJQUFJd0ksRUFBRWpCLEVBQUUyd0IsS0FBS3p2QixFQUFFbkIsRUFBRWlRLE1BQU1qUSxFQUFFbUIsRUFBRStPLFFBQVEsSUFBSXhMLEVBQUUsQ0FBQ2tzQixLQUFLLFNBQVMxcEIsU0FBU3pLLEdBQW9TLE9BQWpTLElBQU8sRUFBRnlFLElBQU1qQixFQUFFZ1EsUUFBUTlPLElBQUcxRSxFQUFFd0QsRUFBRWdRLE9BQVFtYyxXQUFXLEVBQUUzdkIsRUFBRSsxQixhQUFhOXRCLEVBQWlCLFFBQWZ2RCxFQUFFMUUsRUFBRTh6QixhQUFxQnR3QixFQUFFd3dCLFlBQVloMEIsRUFBRWcwQixZQUFZeHdCLEVBQUVzd0IsV0FBV3B2QixFQUFFQSxFQUFFcXZCLFdBQVcsTUFBTXZ3QixFQUFFd3dCLFlBQVl4d0IsRUFBRXN3QixXQUFXLE1BQU05ekIsRUFBRWkwQixHQUFHdnZCLEVBQUV1RCxHQUFHLE9BQU8xRSxFQUFFaUIsRUFBRXl2QixHQUFHMXdCLEVBQUVpQixJQUFJQSxFQUFFK3ZCLEdBQUcvdkIsRUFBRUMsRUFBRXhJLEVBQUUsT0FBUXFDLE9BQU8sRUFBR2tHLEVBQUUwTyxPQUFPMVAsRUFBRXhELEVBQUVrVCxPQUFPMVAsRUFBRXhELEVBQUV5VCxRQUFRalAsRUFBRWhCLEVBQUVnUSxNQUFNeFQsRUFBU3dFLEVBSHhPeTRCLENBQUcxNUIsRUFBRUMsRUFBRWdCLEVBQUVpRyxTQUFTakcsRUFBRW80QixTQUFTNThCLEdBQUd5RSxFQUFFakIsRUFBRWdRLE1BQU12WCxFQUFFc0gsRUFBRWlRLE1BQU1KLGNBQWMzTyxFQUFFMk8sY0FBYyxPQUFPblgsRUFBRSxDQUFDMi9CLFVBQVU1N0IsR0FBRyxDQUFDNDdCLFVBQVUzL0IsRUFBRTIvQixVQUFVNTdCLEdBQUd5RSxFQUFFa3JCLFdBQVdwc0IsRUFBRW9zQixZQUFZM3ZCLEVBQUV3RCxFQUFFNFAsY0FBY3FwQixHQUFHajRCLElBQUV4RSxFQUVoVixTQUFZdUQsRUFBRUMsRUFBRXhELEVBQUV3RSxHQUFHLElBQUl2SSxFQUFFc0gsRUFBRWlRLE1BQWlMLE9BQTNLalEsRUFBRXRILEVBQUV3WCxRQUFRelQsRUFBRWkwQixHQUFHaDRCLEVBQUUsQ0FBQ2s0QixLQUFLLFVBQVUxcEIsU0FBU3pLLElBQUksSUFBWSxFQUFQd0QsRUFBRTJ3QixRQUFVbjBCLEVBQUUrdkIsTUFBTXZyQixHQUFHeEUsRUFBRWtULE9BQU8xUCxFQUFFeEQsRUFBRXlULFFBQVEsS0FBSyxPQUFPbFEsSUFBSUEsRUFBRXd3QixXQUFXLEtBQUt4d0IsRUFBRWpGLE1BQU0sRUFBRWtGLEVBQUV3d0IsWUFBWXh3QixFQUFFc3dCLFdBQVd2d0IsR0FBVUMsRUFBRWdRLE1BQU14VCxFQUZxSGs5QixDQUFHMzVCLEVBQUVDLEVBQUVnQixFQUFFaUcsU0FBU3pLLEdBQUd3RCxFQUFFNFAsY0FBYyxLQUFZcFQsSUFDbFEsU0FBUzg4QixHQUFHdjVCLEVBQUVDLEVBQUV4RCxFQUFFd0UsR0FBRyxJQUFJdkksRUFBRXNILEVBQUU0d0IsS0FBSzF2QixFQUFFbEIsRUFBRWlRLE1BQXVLLE9BQWpLaFEsRUFBRSxDQUFDMndCLEtBQUssU0FBUzFwQixTQUFTakgsR0FBRyxJQUFPLEVBQUZ2SCxJQUFNLE9BQU93SSxHQUFHQSxFQUFFa3JCLFdBQVcsRUFBRWxyQixFQUFFc3hCLGFBQWF2eUIsR0FBR2lCLEVBQUV1NEIsR0FBR3g1QixFQUFFdkgsRUFBRSxFQUFFLE1BQU0rRCxFQUFFdTBCLEdBQUd2MEIsRUFBRS9ELEVBQUV1SSxFQUFFLE1BQU1DLEVBQUV5TyxPQUFPM1AsRUFBRXZELEVBQUVrVCxPQUFPM1AsRUFBRWtCLEVBQUVnUCxRQUFRelQsRUFBRXVELEVBQUVpUSxNQUFNL08sRUFBU3pFLEVBRWdELFNBQVNtOUIsR0FBRzU1QixFQUFFQyxHQUFHRCxFQUFFd3NCLE9BQU92c0IsRUFBRSxJQUFJeEQsRUFBRXVELEVBQUUwUCxVQUFVLE9BQU9qVCxJQUFJQSxFQUFFK3ZCLE9BQU92c0IsR0FBR2tzQixHQUFHbnNCLEVBQUUyUCxPQUFPMVAsR0FDdGQsU0FBUzQ1QixHQUFHNzVCLEVBQUVDLEVBQUV4RCxFQUFFd0UsRUFBRXZJLEVBQUV3SSxHQUFHLElBQUlDLEVBQUVuQixFQUFFNlAsY0FBYyxPQUFPMU8sRUFBRW5CLEVBQUU2UCxjQUFjLENBQUNpcUIsWUFBWTc1QixFQUFFODVCLFVBQVUsS0FBS0MsbUJBQW1CLEVBQUVDLEtBQUtoNUIsRUFBRWk1QixLQUFLejlCLEVBQUUwOUIsU0FBU3poQyxFQUFFNjNCLFdBQVdydkIsSUFBSUMsRUFBRTI0QixZQUFZNzVCLEVBQUVrQixFQUFFNDRCLFVBQVUsS0FBSzU0QixFQUFFNjRCLG1CQUFtQixFQUFFNzRCLEVBQUU4NEIsS0FBS2g1QixFQUFFRSxFQUFFKzRCLEtBQUt6OUIsRUFBRTBFLEVBQUVnNUIsU0FBU3poQyxFQUFFeUksRUFBRW92QixXQUFXcnZCLEdBQ3ZRLFNBQVNrNUIsR0FBR3A2QixFQUFFQyxFQUFFeEQsR0FBRyxJQUFJd0UsRUFBRWhCLEVBQUV1eUIsYUFBYTk1QixFQUFFdUksRUFBRWd4QixZQUFZL3dCLEVBQUVELEVBQUVpNUIsS0FBc0MsR0FBakNyQyxHQUFHNzNCLEVBQUVDLEVBQUVnQixFQUFFaUcsU0FBU3pLLEdBQWtCLElBQU8sR0FBdEJ3RSxFQUFFNndCLEdBQUUzaEIsVUFBcUJsUCxFQUFJLEVBQUZBLEVBQUksRUFBRWhCLEVBQUVsRixPQUFPLE9BQU8sQ0FBQyxHQUFHLE9BQU9pRixHQUFHLElBQWEsR0FBUkEsRUFBRWpGLE9BQVVpRixFQUFFLElBQUlBLEVBQUVDLEVBQUVnUSxNQUFNLE9BQU9qUSxHQUFHLENBQUMsR0FBRyxLQUFLQSxFQUFFNEUsSUFBSSxPQUFPNUUsRUFBRTZQLGVBQWUrcEIsR0FBRzU1QixFQUFFdkQsUUFBUSxHQUFHLEtBQUt1RCxFQUFFNEUsSUFBSWcxQixHQUFHNTVCLEVBQUV2RCxRQUFRLEdBQUcsT0FBT3VELEVBQUVpUSxNQUFNLENBQUNqUSxFQUFFaVEsTUFBTU4sT0FBTzNQLEVBQUVBLEVBQUVBLEVBQUVpUSxNQUFNLFNBQVMsR0FBR2pRLElBQUlDLEVBQUUsTUFBTUQsRUFBRSxLQUFLLE9BQU9BLEVBQUVrUSxTQUFTLENBQUMsR0FBRyxPQUFPbFEsRUFBRTJQLFFBQVEzUCxFQUFFMlAsU0FBUzFQLEVBQUUsTUFBTUQsRUFBRUEsRUFBRUEsRUFBRTJQLE9BQU8zUCxFQUFFa1EsUUFBUVAsT0FBTzNQLEVBQUUyUCxPQUFPM1AsRUFBRUEsRUFBRWtRLFFBQVFqUCxHQUFHLEVBQVMsR0FBUHNuQixHQUFFdUosR0FBRTd3QixHQUFNLElBQVksRUFBUGhCLEVBQUUyd0IsTUFBUTN3QixFQUFFNFAsY0FDemUsVUFBVSxPQUFPblgsR0FBRyxJQUFLLFdBQXFCLElBQVYrRCxFQUFFd0QsRUFBRWdRLE1BQVV2WCxFQUFFLEtBQUssT0FBTytELEdBQWlCLFFBQWR1RCxFQUFFdkQsRUFBRWlULFlBQW9CLE9BQU9xaUIsR0FBRy94QixLQUFLdEgsRUFBRStELEdBQUdBLEVBQUVBLEVBQUV5VCxRQUFZLFFBQUp6VCxFQUFFL0QsSUFBWUEsRUFBRXVILEVBQUVnUSxNQUFNaFEsRUFBRWdRLE1BQU0sT0FBT3ZYLEVBQUUrRCxFQUFFeVQsUUFBUXpULEVBQUV5VCxRQUFRLE1BQU0ycEIsR0FBRzU1QixHQUFFLEVBQUd2SCxFQUFFK0QsRUFBRXlFLEVBQUVqQixFQUFFc3dCLFlBQVksTUFBTSxJQUFLLFlBQTZCLElBQWpCOXpCLEVBQUUsS0FBSy9ELEVBQUV1SCxFQUFFZ1EsTUFBVWhRLEVBQUVnUSxNQUFNLEtBQUssT0FBT3ZYLEdBQUcsQ0FBZSxHQUFHLFFBQWpCc0gsRUFBRXRILEVBQUVnWCxZQUF1QixPQUFPcWlCLEdBQUcveEIsR0FBRyxDQUFDQyxFQUFFZ1EsTUFBTXZYLEVBQUUsTUFBTXNILEVBQUV0SCxFQUFFd1gsUUFBUXhYLEVBQUV3WCxRQUFRelQsRUFBRUEsRUFBRS9ELEVBQUVBLEVBQUVzSCxFQUFFNjVCLEdBQUc1NUIsR0FBRSxFQUFHeEQsRUFBRSxLQUFLeUUsRUFBRWpCLEVBQUVzd0IsWUFBWSxNQUFNLElBQUssV0FBV3NKLEdBQUc1NUIsR0FBRSxFQUFHLEtBQUssVUFBSyxFQUFPQSxFQUFFc3dCLFlBQVksTUFBTSxRQUFRdHdCLEVBQUU0UCxjQUFjLEtBQUssT0FBTzVQLEVBQUVnUSxNQUMvZixTQUFTOG5CLEdBQUcvM0IsRUFBRUMsRUFBRXhELEdBQXlELEdBQXRELE9BQU91RCxJQUFJQyxFQUFFcXNCLGFBQWF0c0IsRUFBRXNzQixjQUFjNkIsSUFBSWx1QixFQUFFdXNCLE1BQVMsSUFBSy92QixFQUFFd0QsRUFBRW1zQixZQUFZLENBQUMsR0FBRyxPQUFPcHNCLEdBQUdDLEVBQUVnUSxRQUFRalEsRUFBRWlRLE1BQU0sTUFBTTVSLE1BQU0wQixFQUFFLE1BQU0sR0FBRyxPQUFPRSxFQUFFZ1EsTUFBTSxDQUE0QyxJQUFqQ3hULEVBQUVpMEIsR0FBWjF3QixFQUFFQyxFQUFFZ1EsTUFBYWpRLEVBQUV3eUIsY0FBY3Z5QixFQUFFZ1EsTUFBTXhULEVBQU1BLEVBQUVrVCxPQUFPMVAsRUFBRSxPQUFPRCxFQUFFa1EsU0FBU2xRLEVBQUVBLEVBQUVrUSxTQUFRelQsRUFBRUEsRUFBRXlULFFBQVF3Z0IsR0FBRzF3QixFQUFFQSxFQUFFd3lCLGVBQWdCN2lCLE9BQU8xUCxFQUFFeEQsRUFBRXlULFFBQVEsS0FBSyxPQUFPalEsRUFBRWdRLE1BQU0sT0FBTyxLQUs1UCxTQUFTb3FCLEdBQUdyNkIsRUFBRUMsR0FBRyxJQUFJbXlCLEdBQUcsT0FBT3B5QixFQUFFbTZCLFVBQVUsSUFBSyxTQUFTbDZCLEVBQUVELEVBQUVrNkIsS0FBSyxJQUFJLElBQUl6OUIsRUFBRSxLQUFLLE9BQU93RCxHQUFHLE9BQU9BLEVBQUV5UCxZQUFZalQsRUFBRXdELEdBQUdBLEVBQUVBLEVBQUVpUSxRQUFRLE9BQU96VCxFQUFFdUQsRUFBRWs2QixLQUFLLEtBQUt6OUIsRUFBRXlULFFBQVEsS0FBSyxNQUFNLElBQUssWUFBWXpULEVBQUV1RCxFQUFFazZCLEtBQUssSUFBSSxJQUFJajVCLEVBQUUsS0FBSyxPQUFPeEUsR0FBRyxPQUFPQSxFQUFFaVQsWUFBWXpPLEVBQUV4RSxHQUFHQSxFQUFFQSxFQUFFeVQsUUFBUSxPQUFPalAsRUFBRWhCLEdBQUcsT0FBT0QsRUFBRWs2QixLQUFLbDZCLEVBQUVrNkIsS0FBSyxLQUFLbDZCLEVBQUVrNkIsS0FBS2hxQixRQUFRLEtBQUtqUCxFQUFFaVAsUUFBUSxNQUM3WixTQUFTb3FCLEdBQUd0NkIsRUFBRUMsRUFBRXhELEdBQUcsSUFBSXdFLEVBQUVoQixFQUFFdXlCLGFBQWEsT0FBT3Z5QixFQUFFMkUsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssRUFBRSxLQUFLLEdBQUcsT0FBTyxLQUFLLEtBQUssRUFBRSxPQUFPbWtCLEdBQUc5b0IsRUFBRXRKLE9BQU9xeUIsS0FBSyxLQUFLLEtBQUssRUFBc0wsT0FBcEwySSxLQUFLckosR0FBRUksSUFBR0osR0FBRUcsSUFBR3FLLE1BQUs3eEIsRUFBRWhCLEVBQUU4TixXQUFZK3FCLGlCQUFpQjczQixFQUFFMHJCLFFBQVExckIsRUFBRTYzQixlQUFlNzNCLEVBQUU2M0IsZUFBZSxNQUFTLE9BQU85NEIsR0FBRyxPQUFPQSxFQUFFaVEsUUFBTTBpQixHQUFHMXlCLEdBQUdBLEVBQUVsRixPQUFPLEVBQUVrRyxFQUFFa1IsVUFBVWxTLEVBQUVsRixPQUFPLE1BQWtCLEtBQUssS0FBSyxFQUFFODJCLEdBQUc1eEIsR0FBRyxJQUFJdkgsRUFBRTY0QixHQUFHRCxHQUFHbmhCLFNBQWtCLEdBQVQxVCxFQUFFd0QsRUFBRXRKLEtBQVEsT0FBT3FKLEdBQUcsTUFBTUMsRUFBRThOLFVBQVVpckIsR0FBR2g1QixFQUFFQyxFQUFFeEQsRUFBRXdFLEdBQUtqQixFQUFFa3dCLE1BQU1qd0IsRUFBRWl3QixNQUFNandCLEVBQUVsRixPQUFPLFNBQVMsQ0FBQyxJQUFJa0csRUFBRSxDQUFDLEdBQUcsT0FDN2ZoQixFQUFFOE4sVUFBVSxNQUFNMVAsTUFBTTBCLEVBQUUsTUFBTSxPQUFPLEtBQXNCLEdBQWpCQyxFQUFFdXhCLEdBQUdILEdBQUdqaEIsU0FBWXdpQixHQUFHMXlCLEdBQUcsQ0FBQ2dCLEVBQUVoQixFQUFFOE4sVUFBVXRSLEVBQUV3RCxFQUFFdEosS0FBSyxJQUFJdUssRUFBRWpCLEVBQUUreEIsY0FBOEIsT0FBaEIvd0IsRUFBRSttQixJQUFJL25CLEVBQUVnQixFQUFFZ25CLElBQUkvbUIsRUFBU3pFLEdBQUcsSUFBSyxTQUFTd29CLEdBQUUsU0FBU2hrQixHQUFHZ2tCLEdBQUUsUUFBUWhrQixHQUFHLE1BQU0sSUFBSyxTQUFTLElBQUssU0FBUyxJQUFLLFFBQVFna0IsR0FBRSxPQUFPaGtCLEdBQUcsTUFBTSxJQUFLLFFBQVEsSUFBSyxRQUFRLElBQUlqQixFQUFFLEVBQUVBLEVBQUUya0IsR0FBRzl4QixPQUFPbU4sSUFBSWlsQixHQUFFTixHQUFHM2tCLEdBQUdpQixHQUFHLE1BQU0sSUFBSyxTQUFTZ2tCLEdBQUUsUUFBUWhrQixHQUFHLE1BQU0sSUFBSyxNQUFNLElBQUssUUFBUSxJQUFLLE9BQU9na0IsR0FBRSxRQUFRaGtCLEdBQUdna0IsR0FBRSxPQUFPaGtCLEdBQUcsTUFBTSxJQUFLLFVBQVVna0IsR0FBRSxTQUFTaGtCLEdBQUcsTUFBTSxJQUFLLFFBQVF3RixHQUFHeEYsRUFBRUMsR0FBRytqQixHQUFFLFVBQVVoa0IsR0FBRyxNQUFNLElBQUssU0FBU0EsRUFBRXNGLGNBQzVmLENBQUNnMEIsY0FBY3I1QixFQUFFczVCLFVBQVV2VixHQUFFLFVBQVVoa0IsR0FBRyxNQUFNLElBQUssV0FBVzBHLEdBQUcxRyxFQUFFQyxHQUFHK2pCLEdBQUUsVUFBVWhrQixHQUFrQixJQUFJLElBQUlFLEtBQXZCZ00sR0FBRzFRLEVBQUV5RSxHQUFHbEIsRUFBRSxLQUFrQmtCLEVBQUVBLEVBQUV2SSxlQUFld0ksS0FBS3pJLEVBQUV3SSxFQUFFQyxHQUFHLGFBQWFBLEVBQUUsaUJBQWtCekksRUFBRXVJLEVBQUU2RyxjQUFjcFAsSUFBSXNILEVBQUUsQ0FBQyxXQUFXdEgsSUFBSSxpQkFBa0JBLEdBQUd1SSxFQUFFNkcsY0FBYyxHQUFHcFAsSUFBSXNILEVBQUUsQ0FBQyxXQUFXLEdBQUd0SCxJQUFJMEgsRUFBR3pILGVBQWV3SSxJQUFJLE1BQU16SSxHQUFHLGFBQWF5SSxHQUFHOGpCLEdBQUUsU0FBU2hrQixJQUFJLE9BQU94RSxHQUFHLElBQUssUUFBUTZJLEVBQUdyRSxHQUFHOEYsR0FBRzlGLEVBQUVDLEdBQUUsR0FBSSxNQUFNLElBQUssV0FBV29FLEVBQUdyRSxHQUFHNEcsR0FBRzVHLEdBQUcsTUFBTSxJQUFLLFNBQVMsSUFBSyxTQUFTLE1BQU0sUUFBUSxtQkFBb0JDLEVBQUV1NUIsVUFBVXg1QixFQUFFeTVCLFFBQ3RmM1QsSUFBSTlsQixFQUFFakIsRUFBRUMsRUFBRStzQixZQUFZL3JCLEVBQUUsT0FBT0EsSUFBSWhCLEVBQUVsRixPQUFPLE9BQU8sQ0FBaVosT0FBaFpvRyxFQUFFLElBQUl6SSxFQUFFb1EsU0FBU3BRLEVBQUVBLEVBQUVzTyxjQUFjaEgsSUFBSStILEtBQVUvSCxFQUFFZ0ksR0FBR3ZMLElBQUl1RCxJQUFJK0gsR0FBUSxXQUFXdEwsSUFBR3VELEVBQUVtQixFQUFFUixjQUFjLFFBQVMwSCxVQUFVLHFCQUF1QnJJLEVBQUVBLEVBQUV3SSxZQUFZeEksRUFBRXVJLGFBQWEsaUJBQWtCdEgsRUFBRW9NLEdBQUdyTixFQUFFbUIsRUFBRVIsY0FBY2xFLEVBQUUsQ0FBQzRRLEdBQUdwTSxFQUFFb00sTUFBTXJOLEVBQUVtQixFQUFFUixjQUFjbEUsR0FBRyxXQUFXQSxJQUFJMEUsRUFBRW5CLEVBQUVpQixFQUFFdTVCLFNBQVNyNUIsRUFBRXE1QixVQUFTLEVBQUd2NUIsRUFBRTA1QixPQUFPeDVCLEVBQUV3NUIsS0FBSzE1QixFQUFFMDVCLFFBQVEzNkIsRUFBRW1CLEVBQUV5NUIsZ0JBQWdCNTZCLEVBQUV2RCxHQUFHdUQsRUFBRWdvQixJQUFJL25CLEVBQUVELEVBQUVpb0IsSUFBSWhuQixFQUFFODNCLEdBQUcvNEIsRUFBRUMsR0FBU0EsRUFBRThOLFVBQVUvTixFQUFFbUIsRUFBRWlNLEdBQUczUSxFQUFFd0UsR0FBVXhFLEdBQUcsSUFBSyxTQUFTd29CLEdBQUUsU0FBU2psQixHQUFHaWxCLEdBQUUsUUFBUWpsQixHQUNwZnRILEVBQUV1SSxFQUFFLE1BQU0sSUFBSyxTQUFTLElBQUssU0FBUyxJQUFLLFFBQVFna0IsR0FBRSxPQUFPamxCLEdBQUd0SCxFQUFFdUksRUFBRSxNQUFNLElBQUssUUFBUSxJQUFLLFFBQVEsSUFBSXZJLEVBQUUsRUFBRUEsRUFBRWlzQixHQUFHOXhCLE9BQU82RixJQUFJdXNCLEdBQUVOLEdBQUdqc0IsR0FBR3NILEdBQUd0SCxFQUFFdUksRUFBRSxNQUFNLElBQUssU0FBU2drQixHQUFFLFFBQVFqbEIsR0FBR3RILEVBQUV1SSxFQUFFLE1BQU0sSUFBSyxNQUFNLElBQUssUUFBUSxJQUFLLE9BQU9na0IsR0FBRSxRQUFRamxCLEdBQUdpbEIsR0FBRSxPQUFPamxCLEdBQUd0SCxFQUFFdUksRUFBRSxNQUFNLElBQUssVUFBVWdrQixHQUFFLFNBQVNqbEIsR0FBR3RILEVBQUV1SSxFQUFFLE1BQU0sSUFBSyxRQUFRd0YsR0FBR3pHLEVBQUVpQixHQUFHdkksRUFBRTBOLEVBQUdwRyxFQUFFaUIsR0FBR2drQixHQUFFLFVBQVVqbEIsR0FBRyxNQUFNLElBQUssU0FBU3RILEVBQUV1TyxHQUFHakgsRUFBRWlCLEdBQUcsTUFBTSxJQUFLLFNBQVNqQixFQUFFdUcsY0FBYyxDQUFDZzBCLGNBQWN0NUIsRUFBRXU1QixVQUFVOWhDLEVBQUVtRCxFQUFFLEdBQUdvRixFQUFFLENBQUMvTSxXQUFNLElBQVMrd0IsR0FBRSxVQUFVamxCLEdBQUcsTUFBTSxJQUFLLFdBQVcySCxHQUFHM0gsRUFBRWlCLEdBQUd2SSxFQUNwZitPLEdBQUd6SCxFQUFFaUIsR0FBR2drQixHQUFFLFVBQVVqbEIsR0FBRyxNQUFNLFFBQVF0SCxFQUFFdUksRUFBRWtNLEdBQUcxUSxFQUFFL0QsR0FBRyxJQUFJZ00sRUFBRWhNLEVBQUUsSUFBSXdJLEtBQUt3RCxFQUFFLEdBQUdBLEVBQUUvTCxlQUFldUksR0FBRyxDQUFDLElBQUl1RCxFQUFFQyxFQUFFeEQsR0FBRyxVQUFVQSxFQUFFMkssR0FBRzdMLEVBQUV5RSxHQUFHLDRCQUE0QnZELEVBQXVCLE9BQXBCdUQsRUFBRUEsRUFBRUEsRUFBRTRpQixZQUFPLElBQWdCbGYsR0FBR25JLEVBQUV5RSxHQUFJLGFBQWF2RCxFQUFFLGlCQUFrQnVELEdBQUcsYUFBYWhJLEdBQUcsS0FBS2dJLElBQUltRSxHQUFHNUksRUFBRXlFLEdBQUcsaUJBQWtCQSxHQUFHbUUsR0FBRzVJLEVBQUUsR0FBR3lFLEdBQUcsbUNBQW1DdkQsR0FBRyw2QkFBNkJBLEdBQUcsY0FBY0EsSUFBSWQsRUFBR3pILGVBQWV1SSxHQUFHLE1BQU11RCxHQUFHLGFBQWF2RCxHQUFHK2pCLEdBQUUsU0FBU2psQixHQUFHLE1BQU15RSxHQUFHMUMsRUFBRy9CLEVBQUVrQixFQUFFdUQsRUFBRXRELElBQUksT0FBTzFFLEdBQUcsSUFBSyxRQUFRNkksRUFBR3RGLEdBQUcrRyxHQUFHL0csRUFBRWlCLEdBQUUsR0FDbmYsTUFBTSxJQUFLLFdBQVdxRSxFQUFHdEYsR0FBRzZILEdBQUc3SCxHQUFHLE1BQU0sSUFBSyxTQUFTLE1BQU1pQixFQUFFL00sT0FBTzhMLEVBQUVxQyxhQUFhLFFBQVEsR0FBRzhDLEVBQUdsRSxFQUFFL00sUUFBUSxNQUFNLElBQUssU0FBUzhMLEVBQUV3NkIsV0FBV3Y1QixFQUFFdTVCLFNBQW1CLE9BQVZ0NUIsRUFBRUQsRUFBRS9NLE9BQWNtVCxHQUFHckgsSUFBSWlCLEVBQUV1NUIsU0FBU3Q1QixHQUFFLEdBQUksTUFBTUQsRUFBRXFGLGNBQWNlLEdBQUdySCxJQUFJaUIsRUFBRXU1QixTQUFTdjVCLEVBQUVxRixjQUFhLEdBQUksTUFBTSxRQUFRLG1CQUFvQjVOLEVBQUUraEMsVUFBVXo2QixFQUFFMDZCLFFBQVEzVCxJQUFJRyxHQUFHenFCLEVBQUV3RSxLQUFLaEIsRUFBRWxGLE9BQU8sR0FBRyxPQUFPa0YsRUFBRWl3QixNQUFNandCLEVBQUVsRixPQUFPLEtBQUssT0FBTyxLQUFLLEtBQUssRUFBRSxHQUFHaUYsR0FBRyxNQUFNQyxFQUFFOE4sVUFBVWtyQixHQUFHajVCLEVBQUVDLEVBQUVELEVBQUVneUIsY0FBYy93QixPQUFPLENBQUMsR0FBRyxpQkFBa0JBLEdBQUcsT0FBT2hCLEVBQUU4TixVQUFVLE1BQU0xUCxNQUFNMEIsRUFBRSxNQUMvZXRELEVBQUU4MEIsR0FBR0QsR0FBR25oQixTQUFTb2hCLEdBQUdILEdBQUdqaEIsU0FBU3dpQixHQUFHMXlCLElBQUlnQixFQUFFaEIsRUFBRThOLFVBQVV0UixFQUFFd0QsRUFBRSt4QixjQUFjL3dCLEVBQUUrbUIsSUFBSS9uQixFQUFFZ0IsRUFBRThILFlBQVl0TSxJQUFJd0QsRUFBRWxGLE9BQU8sTUFBS2tHLEdBQUcsSUFBSXhFLEVBQUVxTSxTQUFTck0sRUFBRUEsRUFBRXVLLGVBQWU2ekIsZUFBZTU1QixJQUFLK21CLElBQUkvbkIsRUFBRUEsRUFBRThOLFVBQVU5TSxHQUFHLE9BQU8sS0FBSyxLQUFLLEdBQTBCLE9BQXZCcW5CLEdBQUV3SixJQUFHN3dCLEVBQUVoQixFQUFFNFAsY0FBaUIsSUFBYSxHQUFSNVAsRUFBRWxGLFFBQWlCa0YsRUFBRXVzQixNQUFNL3ZCLEVBQUV3RCxJQUFFZ0IsRUFBRSxPQUFPQSxFQUFFeEUsR0FBRSxFQUFHLE9BQU91RCxPQUFFLElBQVNDLEVBQUUreEIsY0FBY3FILFVBQVUxRyxHQUFHMXlCLEdBQUd4RCxFQUFFLE9BQU91RCxFQUFFNlAsY0FBaUI1TyxJQUFJeEUsR0FBRyxJQUFZLEVBQVB3RCxFQUFFMndCLFFBQVcsT0FBTzV3QixJQUFHLElBQUtDLEVBQUUreEIsY0FBY3NILDRCQUE0QixJQUFlLEVBQVZ4SCxHQUFFM2hCLFNBQVcsSUFBSTJxQixLQUFJQSxHQUFFLElBQVcsSUFBSUEsSUFBRyxJQUFJQSxLQUFFQSxHQUNyZixHQUFFLE9BQU81RixJQUFHLElBQVEsVUFBSC9HLEtBQWUsSUFBUSxVQUFINE0sS0FBZUMsR0FBRzlGLEdBQUUrRixPQUFNaDZCLEdBQUd4RSxLQUFFd0QsRUFBRWxGLE9BQU8sR0FBUyxNQUFLLEtBQUssRUFBRSxPQUFPNDJCLEtBQVcsT0FBTzN4QixHQUFHdWxCLEdBQUd0bEIsRUFBRThOLFVBQVVxRSxlQUFlLEtBQUssS0FBSyxHQUFHLE9BQU82WixHQUFHaHNCLEdBQUcsS0FBSyxLQUFLLEdBQUcsT0FBTzhvQixHQUFHOW9CLEVBQUV0SixPQUFPcXlCLEtBQUssS0FBSyxLQUFLLEdBQTBCLEdBQXZCVixHQUFFd0osSUFBd0IsUUFBckI3d0IsRUFBRWhCLEVBQUU0UCxlQUEwQixPQUFPLEtBQXNDLEdBQWpDM08sRUFBRSxJQUFhLEdBQVJqQixFQUFFbEYsT0FBMkIsUUFBakJvRyxFQUFFRixFQUFFODRCLFdBQXNCLEdBQUc3NEIsRUFBRW01QixHQUFHcDVCLEdBQUUsT0FBUSxDQUFDLEdBQUcsSUFBSTY1QixJQUFHLE9BQU85NkIsR0FBRyxJQUFhLEdBQVJBLEVBQUVqRixPQUFVLElBQUlpRixFQUFFQyxFQUFFZ1EsTUFBTSxPQUFPalEsR0FBRyxDQUFTLEdBQUcsUUFBWG1CLEVBQUU0d0IsR0FBRy94QixJQUFlLENBQ2pXLElBRGtXQyxFQUFFbEYsT0FBTyxHQUFHcy9CLEdBQUdwNUIsR0FBRSxHQUFvQixRQUFoQkMsRUFBRUMsRUFBRTZyQixlQUF1Qi9zQixFQUFFK3NCLFlBQVk5ckIsRUFBRWpCLEVBQUVsRixPQUFPLEdBQ25mLE9BQU9rRyxFQUFFc3ZCLGFBQWF0d0IsRUFBRXd3QixZQUFZLE1BQU14d0IsRUFBRXN3QixXQUFXdHZCLEVBQUVzdkIsV0FBV3R2QixFQUFFeEUsRUFBTUEsRUFBRXdELEVBQUVnUSxNQUFNLE9BQU94VCxHQUFPdUQsRUFBRWlCLEdBQU5DLEVBQUV6RSxHQUFRMUIsT0FBTyxFQUFFbUcsRUFBRXN2QixXQUFXLEtBQUt0dkIsRUFBRXV2QixZQUFZLEtBQUt2dkIsRUFBRXF2QixXQUFXLEtBQW1CLFFBQWRwdkIsRUFBRUQsRUFBRXdPLFlBQW9CeE8sRUFBRWtyQixXQUFXLEVBQUVsckIsRUFBRXNyQixNQUFNeHNCLEVBQUVrQixFQUFFK08sTUFBTSxLQUFLL08sRUFBRTh3QixjQUFjLEtBQUs5d0IsRUFBRTJPLGNBQWMsS0FBSzNPLEVBQUU4ckIsWUFBWSxLQUFLOXJCLEVBQUVvckIsYUFBYSxLQUFLcHJCLEVBQUU2TSxVQUFVLE9BQU83TSxFQUFFa3JCLFdBQVdqckIsRUFBRWlyQixXQUFXbHJCLEVBQUVzckIsTUFBTXJyQixFQUFFcXJCLE1BQU10ckIsRUFBRStPLE1BQU05TyxFQUFFOE8sTUFBTS9PLEVBQUU4d0IsY0FBYzd3QixFQUFFNndCLGNBQWM5d0IsRUFBRTJPLGNBQWMxTyxFQUFFME8sY0FBYzNPLEVBQUU4ckIsWUFBWTdyQixFQUFFNnJCLFlBQVk5ckIsRUFBRXZLLEtBQUt3SyxFQUFFeEssS0FBS3FKLEVBQUVtQixFQUFFbXJCLGFBQ3BmcHJCLEVBQUVvckIsYUFBYSxPQUFPdHNCLEVBQUUsS0FBSyxDQUFDd3NCLE1BQU14c0IsRUFBRXdzQixNQUFNRCxhQUFhdnNCLEVBQUV1c0IsZUFBZTl2QixFQUFFQSxFQUFFeVQsUUFBMkIsT0FBbkJxWSxHQUFFdUosR0FBWSxFQUFWQSxHQUFFM2hCLFFBQVUsR0FBVWxRLEVBQUVnUSxNQUFNalEsRUFBRUEsRUFBRWtRLFFBQVEsT0FBT2pQLEVBQUVpNUIsTUFBTWhQLEtBQUlnUSxLQUFLajdCLEVBQUVsRixPQUFPLEdBQUdtRyxHQUFFLEVBQUdtNUIsR0FBR3A1QixHQUFFLEdBQUloQixFQUFFdXNCLE1BQU0sY0FBYyxDQUFDLElBQUl0ckIsRUFBRSxHQUFXLFFBQVJsQixFQUFFK3hCLEdBQUc1d0IsS0FBYSxHQUFHbEIsRUFBRWxGLE9BQU8sR0FBR21HLEdBQUUsRUFBbUIsUUFBaEJ6RSxFQUFFdUQsRUFBRWd0QixlQUF1Qi9zQixFQUFFK3NCLFlBQVl2d0IsRUFBRXdELEVBQUVsRixPQUFPLEdBQUdzL0IsR0FBR3A1QixHQUFFLEdBQUksT0FBT0EsRUFBRWk1QixNQUFNLFdBQVdqNUIsRUFBRWs1QixXQUFXaDVCLEVBQUV1TyxZQUFZMGlCLEdBQUcsT0FBbUMsUUFBNUJueUIsRUFBRUEsRUFBRXN3QixXQUFXdHZCLEVBQUVzdkIsY0FBc0J0d0IsRUFBRXV3QixXQUFXLE1BQU0sVUFBVSxFQUFFdEYsS0FBSWpxQixFQUFFKzRCLG1CQUFtQmtCLElBQUksYUFBYXorQixJQUFJd0QsRUFBRWxGLE9BQ2pmLEdBQUdtRyxHQUFFLEVBQUdtNUIsR0FBR3A1QixHQUFFLEdBQUloQixFQUFFdXNCLE1BQU0sVUFBVXZyQixFQUFFNjRCLGFBQWEzNEIsRUFBRStPLFFBQVFqUSxFQUFFZ1EsTUFBTWhRLEVBQUVnUSxNQUFNOU8sSUFBYSxRQUFUMUUsRUFBRXdFLEVBQUVnNUIsTUFBY3g5QixFQUFFeVQsUUFBUS9PLEVBQUVsQixFQUFFZ1EsTUFBTTlPLEVBQUVGLEVBQUVnNUIsS0FBSzk0QixHQUFHLE9BQU8sT0FBT0YsRUFBRWk1QixNQUFNejlCLEVBQUV3RSxFQUFFaTVCLEtBQUtqNUIsRUFBRTg0QixVQUFVdDlCLEVBQUV3RSxFQUFFaTVCLEtBQUt6OUIsRUFBRXlULFFBQVFqUCxFQUFFc3ZCLFdBQVd0d0IsRUFBRXN3QixXQUFXdHZCLEVBQUUrNEIsbUJBQW1COU8sS0FBSXp1QixFQUFFeVQsUUFBUSxLQUFLalEsRUFBRTZ4QixHQUFFM2hCLFFBQVFvWSxHQUFFdUosR0FBRTV3QixFQUFJLEVBQUZqQixFQUFJLEVBQUksRUFBRkEsR0FBS3hELEdBQUcsS0FBSyxLQUFLLEdBQUcsS0FBSyxHQUFHLE9BQU8wK0IsS0FBSyxPQUFPbjdCLEdBQUcsT0FBT0EsRUFBRTZQLGdCQUFpQixPQUFPNVAsRUFBRTRQLGdCQUFnQixrQ0FBa0M1TyxFQUFFMnZCLE9BQU8zd0IsRUFBRWxGLE9BQU8sR0FBRyxLQUFLLE1BQU1zRCxNQUFNMEIsRUFBRSxJQUFJRSxFQUFFMkUsTUFDaGQsU0FBU3cyQixHQUFHcDdCLEdBQUcsT0FBT0EsRUFBRTRFLEtBQUssS0FBSyxFQUFFbWtCLEdBQUcvb0IsRUFBRXJKLE9BQU9xeUIsS0FBSyxJQUFJL29CLEVBQUVELEVBQUVqRixNQUFNLE9BQVMsS0FBRmtGLEdBQVFELEVBQUVqRixPQUFTLEtBQUhrRixFQUFRLEdBQUdELEdBQUcsS0FBSyxLQUFLLEVBQWdDLEdBQTlCMnhCLEtBQUtySixHQUFFSSxJQUFHSixHQUFFRyxJQUFHcUssS0FBa0IsSUFBTyxJQUFwQjd5QixFQUFFRCxFQUFFakYsUUFBb0IsTUFBTXNELE1BQU0wQixFQUFFLE1BQXlCLE9BQW5CQyxFQUFFakYsT0FBUyxLQUFIa0YsRUFBUSxHQUFVRCxFQUFFLEtBQUssRUFBRSxPQUFPNnhCLEdBQUc3eEIsR0FBRyxLQUFLLEtBQUssR0FBRyxPQUFPc29CLEdBQUV3SixJQUFlLE1BQVo3eEIsRUFBRUQsRUFBRWpGLFFBQWNpRixFQUFFakYsT0FBUyxLQUFIa0YsRUFBUSxHQUFHRCxHQUFHLEtBQUssS0FBSyxHQUFHLE9BQU9zb0IsR0FBRXdKLElBQUcsS0FBSyxLQUFLLEVBQUUsT0FBT0gsS0FBSyxLQUFLLEtBQUssR0FBRyxPQUFPMUYsR0FBR2pzQixHQUFHLEtBQUssS0FBSyxHQUFHLEtBQUssR0FBRyxPQUFPbTdCLEtBQUssS0FBSyxRQUFRLE9BQU8sTUFDcmEsU0FBU0UsR0FBR3I3QixFQUFFQyxHQUFHLElBQUksSUFBSXhELEVBQUUsR0FBR3dFLEVBQUVoQixFQUFFLEdBQUd4RCxHQUFHa0ksRUFBRzFELEdBQUdBLEVBQUVBLEVBQUUwTyxhQUFhMU8sR0FBRyxJQUFJdkksRUFBRStELEVBQUUsTUFBTXlFLEdBQUd4SSxFQUFFLDZCQUE2QndJLEVBQUVvNkIsUUFBUSxLQUFLcDZCLEVBQUUrQyxNQUFNLE1BQU0sQ0FBQy9QLE1BQU04TCxFQUFFbkssT0FBT29LLEVBQUVnRSxNQUFNdkwsR0FBRyxTQUFTNmlDLEdBQUd2N0IsRUFBRUMsR0FBRyxJQUFJdTdCLFFBQVFDLE1BQU14N0IsRUFBRS9MLE9BQU8sTUFBTXVJLEdBQUc4cUIsWUFBVyxXQUFXLE1BQU05cUIsTUFsQjNQczhCLEdBQUcsU0FBUy80QixFQUFFQyxHQUFHLElBQUksSUFBSXhELEVBQUV3RCxFQUFFZ1EsTUFBTSxPQUFPeFQsR0FBRyxDQUFDLEdBQUcsSUFBSUEsRUFBRW1JLEtBQUssSUFBSW5JLEVBQUVtSSxJQUFJNUUsRUFBRXlJLFlBQVloTSxFQUFFc1IsZ0JBQWdCLEdBQUcsSUFBSXRSLEVBQUVtSSxLQUFLLE9BQU9uSSxFQUFFd1QsTUFBTSxDQUFDeFQsRUFBRXdULE1BQU1OLE9BQU9sVCxFQUFFQSxFQUFFQSxFQUFFd1QsTUFBTSxTQUFTLEdBQUd4VCxJQUFJd0QsRUFBRSxNQUFNLEtBQUssT0FBT3hELEVBQUV5VCxTQUFTLENBQUMsR0FBRyxPQUFPelQsRUFBRWtULFFBQVFsVCxFQUFFa1QsU0FBUzFQLEVBQUUsT0FBT3hELEVBQUVBLEVBQUVrVCxPQUFPbFQsRUFBRXlULFFBQVFQLE9BQU9sVCxFQUFFa1QsT0FBT2xULEVBQUVBLEVBQUV5VCxVQUNoUzhvQixHQUFHLFNBQVNoNUIsRUFBRUMsRUFBRXhELEVBQUV3RSxHQUFHLElBQUl2SSxFQUFFc0gsRUFBRWd5QixjQUFjLEdBQUd0NUIsSUFBSXVJLEVBQUUsQ0FBQ2pCLEVBQUVDLEVBQUU4TixVQUFVd2pCLEdBQUdILEdBQUdqaEIsU0FBUyxJQUF5VWhQLEVBQXJVRCxFQUFFLEtBQUssT0FBT3pFLEdBQUcsSUFBSyxRQUFRL0QsRUFBRTBOLEVBQUdwRyxFQUFFdEgsR0FBR3VJLEVBQUVtRixFQUFHcEcsRUFBRWlCLEdBQUdDLEVBQUUsR0FBRyxNQUFNLElBQUssU0FBU3hJLEVBQUV1TyxHQUFHakgsRUFBRXRILEdBQUd1SSxFQUFFZ0csR0FBR2pILEVBQUVpQixHQUFHQyxFQUFFLEdBQUcsTUFBTSxJQUFLLFNBQVN4SSxFQUFFbUQsRUFBRSxHQUFHbkQsRUFBRSxDQUFDeEUsV0FBTSxJQUFTK00sRUFBRXBGLEVBQUUsR0FBR29GLEVBQUUsQ0FBQy9NLFdBQU0sSUFBU2dOLEVBQUUsR0FBRyxNQUFNLElBQUssV0FBV3hJLEVBQUUrTyxHQUFHekgsRUFBRXRILEdBQUd1SSxFQUFFd0csR0FBR3pILEVBQUVpQixHQUFHQyxFQUFFLEdBQUcsTUFBTSxRQUFRLG1CQUFvQnhJLEVBQUUraEMsU0FBUyxtQkFBb0J4NUIsRUFBRXc1QixVQUFVejZCLEVBQUUwNkIsUUFBUTNULElBQXlCLElBQUkvWCxLQUF6QjdCLEdBQUcxUSxFQUFFd0UsR0FBU3hFLEVBQUUsS0FBYy9ELEVBQUUsSUFBSXVJLEVBQUV0SSxlQUFlcVcsSUFBSXRXLEVBQUVDLGVBQWVxVyxJQUFJLE1BQU10VyxFQUFFc1csR0FBRyxHQUFHLFVBQzNlQSxFQUFFLENBQUMsSUFBSXRLLEVBQUVoTSxFQUFFc1csR0FBRyxJQUFJN04sS0FBS3VELEVBQUVBLEVBQUUvTCxlQUFld0ksS0FBSzFFLElBQUlBLEVBQUUsSUFBSUEsRUFBRTBFLEdBQUcsUUFBUSw0QkFBNEI2TixHQUFHLGFBQWFBLEdBQUcsbUNBQW1DQSxHQUFHLDZCQUE2QkEsR0FBRyxjQUFjQSxJQUFJNU8sRUFBR3pILGVBQWVxVyxHQUFHOU4sSUFBSUEsRUFBRSxLQUFLQSxFQUFFQSxHQUFHLElBQUl4UCxLQUFLc2QsRUFBRSxPQUFPLElBQUlBLEtBQUsvTixFQUFFLENBQUMsSUFBSXdELEVBQUV4RCxFQUFFK04sR0FBeUIsR0FBdEJ0SyxFQUFFLE1BQU1oTSxFQUFFQSxFQUFFc1csUUFBRyxFQUFVL04sRUFBRXRJLGVBQWVxVyxJQUFJdkssSUFBSUMsSUFBSSxNQUFNRCxHQUFHLE1BQU1DLEdBQUcsR0FBRyxVQUFVc0ssRUFBRSxHQUFHdEssRUFBRSxDQUFDLElBQUl2RCxLQUFLdUQsR0FBR0EsRUFBRS9MLGVBQWV3SSxJQUFJc0QsR0FBR0EsRUFBRTlMLGVBQWV3SSxLQUFLMUUsSUFBSUEsRUFBRSxJQUFJQSxFQUFFMEUsR0FBRyxJQUFJLElBQUlBLEtBQUtzRCxFQUFFQSxFQUFFOUwsZUFBZXdJLElBQUl1RCxFQUFFdkQsS0FBS3NELEVBQUV0RCxLQUFLMUUsSUFDbGZBLEVBQUUsSUFBSUEsRUFBRTBFLEdBQUdzRCxFQUFFdEQsU0FBUzFFLElBQUl5RSxJQUFJQSxFQUFFLElBQUlBLEVBQUV4UCxLQUFLc2QsRUFBRXZTLElBQUlBLEVBQUVnSSxNQUFNLDRCQUE0QnVLLEdBQUd2SyxFQUFFQSxFQUFFQSxFQUFFNGlCLFlBQU8sRUFBTzNpQixFQUFFQSxFQUFFQSxFQUFFMmlCLFlBQU8sRUFBTyxNQUFNNWlCLEdBQUdDLElBQUlELElBQUl2RCxFQUFFQSxHQUFHLElBQUl4UCxLQUFLc2QsRUFBRXZLLElBQUksYUFBYXVLLEVBQUUsaUJBQWtCdkssR0FBRyxpQkFBa0JBLElBQUl2RCxFQUFFQSxHQUFHLElBQUl4UCxLQUFLc2QsRUFBRSxHQUFHdkssR0FBRyxtQ0FBbUN1SyxHQUFHLDZCQUE2QkEsSUFBSTVPLEVBQUd6SCxlQUFlcVcsSUFBSSxNQUFNdkssR0FBRyxhQUFhdUssR0FBR2lXLEdBQUUsU0FBU2psQixHQUFHa0IsR0FBR3dELElBQUlELElBQUl2RCxFQUFFLEtBQUssaUJBQWtCdUQsR0FBRyxPQUFPQSxHQUFHQSxFQUFFTSxXQUFXeEIsRUFBR2tCLEVBQUV4UyxZQUFZaVAsRUFBRUEsR0FBRyxJQUFJeFAsS0FBS3NkLEVBQUV2SyxJQUFJaEksSUFBSXlFLEVBQUVBLEdBQUcsSUFBSXhQLEtBQUssUUFDL2UrSyxHQUFHLElBQUl1UyxFQUFFOU4sR0FBS2pCLEVBQUUrc0IsWUFBWWhlLEtBQUUvTyxFQUFFbEYsT0FBTyxLQUFJaytCLEdBQUcsU0FBU2o1QixFQUFFQyxFQUFFeEQsRUFBRXdFLEdBQUd4RSxJQUFJd0UsSUFBSWhCLEVBQUVsRixPQUFPLElBY2dMLElBQUkyZ0MsR0FBRyxtQkFBb0JDLFFBQVFBLFFBQVEzcUIsSUFBSSxTQUFTNHFCLEdBQUc1N0IsRUFBRUMsRUFBRXhELElBQUdBLEVBQUUrd0IsSUFBSSxFQUFFL3dCLElBQUttSSxJQUFJLEVBQUVuSSxFQUFFa3hCLFFBQVEsQ0FBQ3p1QixRQUFRLE1BQU0sSUFBSStCLEVBQUVoQixFQUFFL0wsTUFBc0QsT0FBaER1SSxFQUFFbXhCLFNBQVMsV0FBV2lPLEtBQUtBLElBQUcsRUFBR0MsR0FBRzc2QixHQUFHczZCLEdBQUd2N0IsRUFBRUMsSUFBV3hELEVBQ3BiLFNBQVNzL0IsR0FBRy83QixFQUFFQyxFQUFFeEQsSUFBR0EsRUFBRSt3QixJQUFJLEVBQUUvd0IsSUFBS21JLElBQUksRUFBRSxJQUFJM0QsRUFBRWpCLEVBQUVySixLQUFLSix5QkFBeUIsR0FBRyxtQkFBb0IwSyxFQUFFLENBQUMsSUFBSXZJLEVBQUV1SCxFQUFFL0wsTUFBTXVJLEVBQUVreEIsUUFBUSxXQUFtQixPQUFSNE4sR0FBR3Y3QixFQUFFQyxHQUFVZ0IsRUFBRXZJLElBQUksSUFBSXdJLEVBQUVsQixFQUFFK04sVUFBOE8sT0FBcE8sT0FBTzdNLEdBQUcsbUJBQW9CQSxFQUFFODZCLG9CQUFvQnYvQixFQUFFbXhCLFNBQVMsV0FBVyxtQkFBb0Izc0IsSUFBSSxPQUFPZzdCLEdBQUdBLEdBQUcsSUFBSTk3QixJQUFJLENBQUNqTyxPQUFPK3BDLEdBQUcxN0IsSUFBSXJPLE1BQU1xcEMsR0FBR3Y3QixFQUFFQyxJQUFJLElBQUl4RCxFQUFFd0QsRUFBRWdFLE1BQU0vUixLQUFLOHBDLGtCQUFrQi83QixFQUFFL0wsTUFBTSxDQUFDZ29DLGVBQWUsT0FBT3ovQixFQUFFQSxFQUFFLE9BQWNBLEVBQUUsSUFBSTAvQixHQUFHLG1CQUFvQkMsUUFBUUEsUUFBUWo4QixJQUN4YyxTQUFTazhCLEdBQUdyOEIsR0FBRyxJQUFJQyxFQUFFRCxFQUFFa3dCLElBQUksR0FBRyxPQUFPandCLEVBQUUsR0FBRyxtQkFBb0JBLEVBQUUsSUFBSUEsRUFBRSxNQUFNLE1BQU14RCxHQUFHNi9CLEdBQUd0OEIsRUFBRXZELFFBQVF3RCxFQUFFa1EsUUFBUSxLQUFLLFNBQVNvc0IsR0FBR3Y4QixFQUFFQyxHQUFHLE9BQU9BLEVBQUUyRSxLQUFLLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxPQUFPLEtBQUssRUFBRSxHQUFXLElBQVIzRSxFQUFFbEYsT0FBVyxPQUFPaUYsRUFBRSxDQUFDLElBQUl2RCxFQUFFdUQsRUFBRWd5QixjQUFjL3dCLEVBQUVqQixFQUFFNlAsY0FBNEI1UCxHQUFkRCxFQUFFQyxFQUFFOE4sV0FBYzZoQix3QkFBd0IzdkIsRUFBRWQsY0FBY2MsRUFBRXRKLEtBQUs4RixFQUFFa3ZCLEdBQUcxckIsRUFBRXRKLEtBQUs4RixHQUFHd0UsR0FBR2pCLEVBQUV3OEIsb0NBQW9DdjhCLEVBQUUsT0FBTyxLQUFLLEVBQTZDLFlBQW5DLElBQVJBLEVBQUVsRixPQUFXMnNCLEdBQUd6bkIsRUFBRThOLFVBQVVxRSxnQkFBc0IsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxHQUFHLE9BQU8sTUFBTS9ULE1BQU0wQixFQUFFLE1BQzVlLFNBQVMwOEIsR0FBR3o4QixFQUFFQyxFQUFFeEQsR0FBRyxPQUFPQSxFQUFFbUksS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQWdELEdBQUcsUUFBaEMzRSxFQUFFLFFBQWxCQSxFQUFFeEQsRUFBRXV3QixhQUF1Qi9zQixFQUFFc3dCLFdBQVcsTUFBaUIsQ0FBQ3Z3QixFQUFFQyxFQUFFQSxFQUFFak0sS0FBSyxFQUFFLENBQUMsR0FBRyxJQUFXLEVBQU5nTSxFQUFFNEUsS0FBTyxDQUFDLElBQUkzRCxFQUFFakIsRUFBRTQxQixPQUFPNTFCLEVBQUU2MUIsUUFBUTUwQixJQUFJakIsRUFBRUEsRUFBRWhNLFdBQVdnTSxJQUFJQyxHQUFnRCxHQUFHLFFBQWhDQSxFQUFFLFFBQWxCQSxFQUFFeEQsRUFBRXV3QixhQUF1Qi9zQixFQUFFc3dCLFdBQVcsTUFBaUIsQ0FBQ3Z3QixFQUFFQyxFQUFFQSxFQUFFak0sS0FBSyxFQUFFLENBQUMsSUFBSTBFLEVBQUVzSCxFQUFFaUIsRUFBRXZJLEVBQUUxRSxLQUFhLElBQU8sR0FBZjBFLEVBQUVBLEVBQUVrTSxPQUFlLElBQU8sRUFBRmxNLEtBQU9na0MsR0FBR2pnQyxFQUFFdUQsR0FBRzI4QixHQUFHbGdDLEVBQUV1RCxJQUFJQSxFQUFFaUIsUUFBUWpCLElBQUlDLEdBQUcsT0FBTyxLQUFLLEVBQ3RSLE9BRHdSRCxFQUFFdkQsRUFBRXNSLFVBQWtCLEVBQVJ0UixFQUFFMUIsUUFBVSxPQUFPa0YsRUFBRUQsRUFBRSt2QixxQkFBcUI5dUIsRUFBRXhFLEVBQUUwQyxjQUFjMUMsRUFBRTlGLEtBQUtzSixFQUFFK3hCLGNBQWNyRyxHQUFHbHZCLEVBQUU5RixLQUFLc0osRUFBRSt4QixlQUFlaHlCLEVBQUUyNEIsbUJBQW1CMTNCLEVBQ3hnQmhCLEVBQUU0UCxjQUFjN1AsRUFBRXc4Qiw0Q0FBdUQsUUFBaEJ2OEIsRUFBRXhELEVBQUV1d0IsY0FBc0JvQixHQUFHM3hCLEVBQUV3RCxFQUFFRCxJQUFVLEtBQUssRUFBa0IsR0FBRyxRQUFuQkMsRUFBRXhELEVBQUV1d0IsYUFBd0IsQ0FBUSxHQUFQaHRCLEVBQUUsS0FBUSxPQUFPdkQsRUFBRXdULE1BQU0sT0FBT3hULEVBQUV3VCxNQUFNckwsS0FBSyxLQUFLLEVBQUU1RSxFQUFFdkQsRUFBRXdULE1BQU1sQyxVQUFVLE1BQU0sS0FBSyxFQUFFL04sRUFBRXZELEVBQUV3VCxNQUFNbEMsVUFBVXFnQixHQUFHM3hCLEVBQUV3RCxFQUFFRCxHQUFHLE9BQU8sS0FBSyxFQUEyRSxPQUF6RUEsRUFBRXZELEVBQUVzUixlQUFVLE9BQU85TixHQUFXLEVBQVJ4RCxFQUFFMUIsT0FBU21zQixHQUFHenFCLEVBQUU5RixLQUFLOEYsRUFBRXUxQixnQkFBZ0JoeUIsRUFBRTQ4QixTQUFlLEtBQUssRUFBUyxLQUFLLEVBQVMsS0FBSyxHQUFHLE9BQU8sS0FBSyxHQUN6WSxZQUQ0WSxPQUFPbmdDLEVBQUVvVCxnQkFBZ0JwVCxFQUFFQSxFQUFFaVQsVUFBVSxPQUFPalQsSUFBSUEsRUFBRUEsRUFBRW9ULGNBQWMsT0FBT3BULElBQUlBLEVBQUVBLEVBQUVxVCxXQUFXLE9BQU9yVCxHQUFHb1csR0FBR3BXLE9BQ2hmLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLE9BQU8sTUFBTTRCLE1BQU0wQixFQUFFLE1BQzVFLFNBQVM4OEIsR0FBRzc4QixFQUFFQyxHQUFHLElBQUksSUFBSXhELEVBQUV1RCxJQUFJLENBQUMsR0FBRyxJQUFJdkQsRUFBRW1JLElBQUksQ0FBQyxJQUFJM0QsRUFBRXhFLEVBQUVzUixVQUFVLEdBQUc5TixFQUFZLG1CQUFWZ0IsRUFBRUEsRUFBRTZLLE9BQTRCRSxZQUFZL0ssRUFBRStLLFlBQVksVUFBVSxPQUFPLGFBQWEvSyxFQUFFNjdCLFFBQVEsV0FBVyxDQUFDNzdCLEVBQUV4RSxFQUFFc1IsVUFBVSxJQUFJclYsRUFBRStELEVBQUV1MUIsY0FBY2xtQixNQUFNcFQsRUFBRSxNQUFTQSxHQUFhQSxFQUFFQyxlQUFlLFdBQVdELEVBQUVva0MsUUFBUSxLQUFLNzdCLEVBQUU2SyxNQUFNZ3hCLFFBQVFseEIsR0FBRyxVQUFVbFQsU0FBUyxHQUFHLElBQUkrRCxFQUFFbUksSUFBSW5JLEVBQUVzUixVQUFVaEYsVUFBVTlJLEVBQUUsR0FBR3hELEVBQUV1MUIsbUJBQW1CLElBQUksS0FBS3YxQixFQUFFbUksS0FBSyxLQUFLbkksRUFBRW1JLEtBQUssT0FBT25JLEVBQUVvVCxlQUFlcFQsSUFBSXVELElBQUksT0FBT3ZELEVBQUV3VCxNQUFNLENBQUN4VCxFQUFFd1QsTUFBTU4sT0FBT2xULEVBQUVBLEVBQUVBLEVBQUV3VCxNQUFNLFNBQVMsR0FBR3hULElBQ3RmdUQsRUFBRSxNQUFNLEtBQUssT0FBT3ZELEVBQUV5VCxTQUFTLENBQUMsR0FBRyxPQUFPelQsRUFBRWtULFFBQVFsVCxFQUFFa1QsU0FBUzNQLEVBQUUsT0FBT3ZELEVBQUVBLEVBQUVrVCxPQUFPbFQsRUFBRXlULFFBQVFQLE9BQU9sVCxFQUFFa1QsT0FBT2xULEVBQUVBLEVBQUV5VCxTQUNqSCxTQUFTNnNCLEdBQUcvOEIsRUFBRUMsR0FBRyxHQUFHdXBCLElBQUksbUJBQW9CQSxHQUFHd1QscUJBQXFCLElBQUl4VCxHQUFHd1QscUJBQXFCelQsR0FBR3RwQixHQUFHLE1BQU1pQixJQUFJLE9BQU9qQixFQUFFMkUsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFtQixHQUFHLFFBQW5CNUUsRUFBRUMsRUFBRStzQixjQUF5QyxRQUFmaHRCLEVBQUVBLEVBQUV1d0IsWUFBcUIsQ0FBQyxJQUFJOXpCLEVBQUV1RCxFQUFFQSxFQUFFaE0sS0FBSyxFQUFFLENBQUMsSUFBSWlOLEVBQUV4RSxFQUFFL0QsRUFBRXVJLEVBQUU0MEIsUUFBZ0IsR0FBUjUwQixFQUFFQSxFQUFFMkQsU0FBTyxJQUFTbE0sRUFBRSxHQUFHLElBQU8sRUFBRnVJLEdBQUt5N0IsR0FBR3o4QixFQUFFeEQsT0FBTyxDQUFDd0UsRUFBRWhCLEVBQUUsSUFBSXZILElBQUksTUFBTXdJLEdBQUdvN0IsR0FBR3I3QixFQUFFQyxJQUFJekUsRUFBRUEsRUFBRXpJLFdBQVd5SSxJQUFJdUQsR0FBRyxNQUFNLEtBQUssRUFBc0IsR0FBcEJxOEIsR0FBR3A4QixHQUFvQixtQkFBakJELEVBQUVDLEVBQUU4TixXQUFtQ2t2QixxQkFBcUIsSUFBSWo5QixFQUFFakMsTUFBTWtDLEVBQUUreEIsY0FBY2h5QixFQUFFc3ZCLE1BQU1ydkIsRUFBRTRQLGNBQWM3UCxFQUFFaTlCLHVCQUF1QixNQUFNLzdCLEdBQUdvN0IsR0FBR3I4QixFQUMvZ0JpQixHQUFHLE1BQU0sS0FBSyxFQUFFbTdCLEdBQUdwOEIsR0FBRyxNQUFNLEtBQUssRUFBRWk5QixHQUFHbDlCLEVBQUVDLElBQUksU0FBU2s5QixHQUFHbjlCLEdBQUdBLEVBQUUwUCxVQUFVLEtBQUsxUCxFQUFFaVEsTUFBTSxLQUFLalEsRUFBRXNzQixhQUFhLEtBQUt0c0IsRUFBRXl3QixZQUFZLEtBQUt6d0IsRUFBRXV3QixXQUFXLEtBQUt2d0IsRUFBRWd5QixjQUFjLEtBQUtoeUIsRUFBRTZQLGNBQWMsS0FBSzdQLEVBQUV3eUIsYUFBYSxLQUFLeHlCLEVBQUUyUCxPQUFPLEtBQUszUCxFQUFFZ3RCLFlBQVksS0FBSyxTQUFTb1EsR0FBR3A5QixHQUFHLE9BQU8sSUFBSUEsRUFBRTRFLEtBQUssSUFBSTVFLEVBQUU0RSxLQUFLLElBQUk1RSxFQUFFNEUsSUFDblMsU0FBU3k0QixHQUFHcjlCLEdBQUdBLEVBQUUsQ0FBQyxJQUFJLElBQUlDLEVBQUVELEVBQUUyUCxPQUFPLE9BQU8xUCxHQUFHLENBQUMsR0FBR205QixHQUFHbjlCLEdBQUcsTUFBTUQsRUFBRUMsRUFBRUEsRUFBRTBQLE9BQU8sTUFBTXRSLE1BQU0wQixFQUFFLE1BQU8sSUFBSXRELEVBQUV3RCxFQUFnQixPQUFkQSxFQUFFeEQsRUFBRXNSLFVBQWlCdFIsRUFBRW1JLEtBQUssS0FBSyxFQUFFLElBQUkzRCxHQUFFLEVBQUcsTUFBTSxLQUFLLEVBQStCLEtBQUssRUFBRWhCLEVBQUVBLEVBQUVtUyxjQUFjblIsR0FBRSxFQUFHLE1BQU0sUUFBUSxNQUFNNUMsTUFBTTBCLEVBQUUsTUFBZSxHQUFSdEQsRUFBRTFCLFFBQVc2TixHQUFHM0ksRUFBRSxJQUFJeEQsRUFBRTFCLFFBQVEsSUFBSWlGLEVBQUVDLEVBQUUsSUFBSXhELEVBQUV1RCxJQUFJLENBQUMsS0FBSyxPQUFPdkQsRUFBRXlULFNBQVMsQ0FBQyxHQUFHLE9BQU96VCxFQUFFa1QsUUFBUXl0QixHQUFHM2dDLEVBQUVrVCxRQUFRLENBQUNsVCxFQUFFLEtBQUssTUFBTXVELEVBQUV2RCxFQUFFQSxFQUFFa1QsT0FBaUMsSUFBMUJsVCxFQUFFeVQsUUFBUVAsT0FBT2xULEVBQUVrVCxPQUFXbFQsRUFBRUEsRUFBRXlULFFBQVEsSUFBSXpULEVBQUVtSSxLQUFLLElBQUluSSxFQUFFbUksS0FBSyxLQUFLbkksRUFBRW1JLEtBQUssQ0FBQyxHQUFXLEVBQVJuSSxFQUFFMUIsTUFBUSxTQUFTa0YsRUFBRSxHQUFHLE9BQy9leEQsRUFBRXdULE9BQU8sSUFBSXhULEVBQUVtSSxJQUFJLFNBQVMzRSxFQUFPeEQsRUFBRXdULE1BQU1OLE9BQU9sVCxFQUFFQSxFQUFFQSxFQUFFd1QsTUFBTSxLQUFhLEVBQVJ4VCxFQUFFMUIsT0FBUyxDQUFDMEIsRUFBRUEsRUFBRXNSLFVBQVUsTUFBTS9OLEdBQUdpQixFQUFFcThCLEdBQUd0OUIsRUFBRXZELEVBQUV3RCxHQUFHczlCLEdBQUd2OUIsRUFBRXZELEVBQUV3RCxHQUN6SCxTQUFTcTlCLEdBQUd0OUIsRUFBRUMsRUFBRXhELEdBQUcsSUFBSXdFLEVBQUVqQixFQUFFNEUsSUFBSWxNLEVBQUUsSUFBSXVJLEdBQUcsSUFBSUEsRUFBRSxHQUFHdkksRUFBRXNILEVBQUV0SCxFQUFFc0gsRUFBRStOLFVBQVUvTixFQUFFK04sVUFBVWdYLFNBQVM5a0IsRUFBRSxJQUFJeEQsRUFBRXFNLFNBQVNyTSxFQUFFZ1IsV0FBVyt2QixhQUFheDlCLEVBQUVDLEdBQUd4RCxFQUFFK2dDLGFBQWF4OUIsRUFBRUMsSUFBSSxJQUFJeEQsRUFBRXFNLFVBQVU3SSxFQUFFeEQsRUFBRWdSLFlBQWErdkIsYUFBYXg5QixFQUFFdkQsSUFBS3dELEVBQUV4RCxHQUFJZ00sWUFBWXpJLEdBQTRCLE9BQXhCdkQsRUFBRUEsRUFBRWdoQyxzQkFBMEMsT0FBT3g5QixFQUFFeTZCLFVBQVV6NkIsRUFBRXk2QixRQUFRM1QsVUFBVSxHQUFHLElBQUk5bEIsR0FBYyxRQUFWakIsRUFBRUEsRUFBRWlRLE9BQWdCLElBQUlxdEIsR0FBR3Q5QixFQUFFQyxFQUFFeEQsR0FBR3VELEVBQUVBLEVBQUVrUSxRQUFRLE9BQU9sUSxHQUFHczlCLEdBQUd0OUIsRUFBRUMsRUFBRXhELEdBQUd1RCxFQUFFQSxFQUFFa1EsUUFDOVksU0FBU3F0QixHQUFHdjlCLEVBQUVDLEVBQUV4RCxHQUFHLElBQUl3RSxFQUFFakIsRUFBRTRFLElBQUlsTSxFQUFFLElBQUl1SSxHQUFHLElBQUlBLEVBQUUsR0FBR3ZJLEVBQUVzSCxFQUFFdEgsRUFBRXNILEVBQUUrTixVQUFVL04sRUFBRStOLFVBQVVnWCxTQUFTOWtCLEVBQUV4RCxFQUFFK2dDLGFBQWF4OUIsRUFBRUMsR0FBR3hELEVBQUVnTSxZQUFZekksUUFBUSxHQUFHLElBQUlpQixHQUFjLFFBQVZqQixFQUFFQSxFQUFFaVEsT0FBZ0IsSUFBSXN0QixHQUFHdjlCLEVBQUVDLEVBQUV4RCxHQUFHdUQsRUFBRUEsRUFBRWtRLFFBQVEsT0FBT2xRLEdBQUd1OUIsR0FBR3Y5QixFQUFFQyxFQUFFeEQsR0FBR3VELEVBQUVBLEVBQUVrUSxRQUNyTixTQUFTZ3RCLEdBQUdsOUIsRUFBRUMsR0FBRyxJQUFJLElBQWF2SCxFQUFFd0ksRUFBWHpFLEVBQUV3RCxFQUFFZ0IsR0FBRSxJQUFTLENBQUMsSUFBSUEsRUFBRSxDQUFDQSxFQUFFeEUsRUFBRWtULE9BQU8zUCxFQUFFLE9BQU8sQ0FBQyxHQUFHLE9BQU9pQixFQUFFLE1BQU01QyxNQUFNMEIsRUFBRSxNQUFvQixPQUFkckgsRUFBRXVJLEVBQUU4TSxVQUFpQjlNLEVBQUUyRCxLQUFLLEtBQUssRUFBRTFELEdBQUUsRUFBRyxNQUFNbEIsRUFBRSxLQUFLLEVBQWlDLEtBQUssRUFBRXRILEVBQUVBLEVBQUUwWixjQUFjbFIsR0FBRSxFQUFHLE1BQU1sQixFQUFFaUIsRUFBRUEsRUFBRTBPLE9BQU8xTyxHQUFFLEVBQUcsR0FBRyxJQUFJeEUsRUFBRW1JLEtBQUssSUFBSW5JLEVBQUVtSSxJQUFJLENBQUM1RSxFQUFFLElBQUksSUFBSW1CLEVBQUVuQixFQUFFMEUsRUFBRWpJLEVBQUVnSSxFQUFFQyxJQUFJLEdBQUdxNEIsR0FBRzU3QixFQUFFc0QsR0FBRyxPQUFPQSxFQUFFd0wsT0FBTyxJQUFJeEwsRUFBRUcsSUFBSUgsRUFBRXdMLE1BQU1OLE9BQU9sTCxFQUFFQSxFQUFFQSxFQUFFd0wsVUFBVSxDQUFDLEdBQUd4TCxJQUFJQyxFQUFFLE1BQU0xRSxFQUFFLEtBQUssT0FBT3lFLEVBQUV5TCxTQUFTLENBQUMsR0FBRyxPQUFPekwsRUFBRWtMLFFBQVFsTCxFQUFFa0wsU0FBU2pMLEVBQUUsTUFBTTFFLEVBQUV5RSxFQUFFQSxFQUFFa0wsT0FBT2xMLEVBQUV5TCxRQUFRUCxPQUFPbEwsRUFBRWtMLE9BQU9sTCxFQUFFQSxFQUFFeUwsUUFBUWhQLEdBQUdDLEVBQUV6SSxFQUFFZ00sRUFBRWpJLEVBQUVzUixVQUNyZixJQUFJNU0sRUFBRTJILFNBQVMzSCxFQUFFc00sV0FBV2pGLFlBQVk5RCxHQUFHdkQsRUFBRXFILFlBQVk5RCxJQUFJaE0sRUFBRThQLFlBQVkvTCxFQUFFc1IsZ0JBQWdCLEdBQUcsSUFBSXRSLEVBQUVtSSxLQUFLLEdBQUcsT0FBT25JLEVBQUV3VCxNQUFNLENBQUN2WCxFQUFFK0QsRUFBRXNSLFVBQVVxRSxjQUFjbFIsR0FBRSxFQUFHekUsRUFBRXdULE1BQU1OLE9BQU9sVCxFQUFFQSxFQUFFQSxFQUFFd1QsTUFBTSxlQUFlLEdBQUc4c0IsR0FBRy84QixFQUFFdkQsR0FBRyxPQUFPQSxFQUFFd1QsTUFBTSxDQUFDeFQsRUFBRXdULE1BQU1OLE9BQU9sVCxFQUFFQSxFQUFFQSxFQUFFd1QsTUFBTSxTQUFTLEdBQUd4VCxJQUFJd0QsRUFBRSxNQUFNLEtBQUssT0FBT3hELEVBQUV5VCxTQUFTLENBQUMsR0FBRyxPQUFPelQsRUFBRWtULFFBQVFsVCxFQUFFa1QsU0FBUzFQLEVBQUUsT0FBa0IsS0FBWHhELEVBQUVBLEVBQUVrVCxRQUFhL0ssTUFBTTNELEdBQUUsR0FBSXhFLEVBQUV5VCxRQUFRUCxPQUFPbFQsRUFBRWtULE9BQU9sVCxFQUFFQSxFQUFFeVQsU0FDbFosU0FBU3d0QixHQUFHMTlCLEVBQUVDLEdBQUcsT0FBT0EsRUFBRTJFLEtBQUssS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxJQUFJbkksRUFBRXdELEVBQUUrc0IsWUFBeUMsR0FBRyxRQUFoQ3Z3QixFQUFFLE9BQU9BLEVBQUVBLEVBQUU4ekIsV0FBVyxNQUFpQixDQUFDLElBQUl0dkIsRUFBRXhFLEVBQUVBLEVBQUV6SSxLQUFLLEdBQUcsSUFBVyxFQUFOaU4sRUFBRTJELE9BQVM1RSxFQUFFaUIsRUFBRTQwQixRQUFRNTBCLEVBQUU0MEIsYUFBUSxPQUFPLElBQVM3MUIsR0FBR0EsS0FBS2lCLEVBQUVBLEVBQUVqTixXQUFXaU4sSUFBSXhFLEdBQUcsT0FBTyxLQUFLLEVBQUUsT0FBTyxLQUFLLEVBQWdCLEdBQUcsT0FBakJBLEVBQUV3RCxFQUFFOE4sV0FBcUIsQ0FBQzlNLEVBQUVoQixFQUFFK3hCLGNBQWMsSUFBSXQ1QixFQUFFLE9BQU9zSCxFQUFFQSxFQUFFZ3lCLGNBQWMvd0IsRUFBRWpCLEVBQUVDLEVBQUV0SixLQUFLLElBQUl1SyxFQUFFakIsRUFBRStzQixZQUErQixHQUFuQi9zQixFQUFFK3NCLFlBQVksS0FBUSxPQUFPOXJCLEVBQUUsQ0FBZ0YsSUFBL0V6RSxFQUFFd3JCLElBQUlobkIsRUFBRSxVQUFVakIsR0FBRyxVQUFVaUIsRUFBRXRLLE1BQU0sTUFBTXNLLEVBQUVyTSxNQUFNZ1MsR0FBR25LLEVBQUV3RSxHQUFHbU0sR0FBR3BOLEVBQUV0SCxHQUFHdUgsRUFBRW1OLEdBQUdwTixFQUFFaUIsR0FBT3ZJLEVBQUUsRUFBRUEsRUFBRXdJLEVBQUVyTyxPQUFPNkYsR0FDbGYsRUFBRSxDQUFDLElBQUl5SSxFQUFFRCxFQUFFeEksR0FBR2dNLEVBQUV4RCxFQUFFeEksRUFBRSxHQUFHLFVBQVV5SSxFQUFFMEssR0FBR3BQLEVBQUVpSSxHQUFHLDRCQUE0QnZELEVBQUVnSCxHQUFHMUwsRUFBRWlJLEdBQUcsYUFBYXZELEVBQUV5SCxHQUFHbk0sRUFBRWlJLEdBQUczQyxFQUFHdEYsRUFBRTBFLEVBQUV1RCxFQUFFekUsR0FBRyxPQUFPRCxHQUFHLElBQUssUUFBUTZHLEdBQUdwSyxFQUFFd0UsR0FBRyxNQUFNLElBQUssV0FBVzJHLEdBQUduTCxFQUFFd0UsR0FBRyxNQUFNLElBQUssU0FBU2pCLEVBQUV2RCxFQUFFOEosY0FBY2cwQixZQUFZOTlCLEVBQUU4SixjQUFjZzBCLGNBQWN0NUIsRUFBRXU1QixTQUFtQixPQUFWdDVCLEVBQUVELEVBQUUvTSxPQUFjbVQsR0FBRzVLLElBQUl3RSxFQUFFdTVCLFNBQVN0NUIsR0FBRSxHQUFJbEIsTUFBTWlCLEVBQUV1NUIsV0FBVyxNQUFNdjVCLEVBQUVxRixhQUFhZSxHQUFHNUssSUFBSXdFLEVBQUV1NUIsU0FBU3Y1QixFQUFFcUYsY0FBYSxHQUFJZSxHQUFHNUssSUFBSXdFLEVBQUV1NUIsU0FBU3Y1QixFQUFFdTVCLFNBQVMsR0FBRyxJQUFHLE1BQU8sT0FBTyxLQUFLLEVBQUUsR0FBRyxPQUFPdjZCLEVBQUU4TixVQUFVLE1BQU0xUCxNQUFNMEIsRUFBRSxNQUMvYyxZQURxZEUsRUFBRThOLFVBQVVoRixVQUNqZjlJLEVBQUUreEIsZUFBcUIsS0FBSyxFQUE4RCxhQUE1RHYxQixFQUFFd0QsRUFBRThOLFdBQVlvRSxVQUFVMVYsRUFBRTBWLFNBQVEsRUFBR1UsR0FBR3BXLEVBQUUyVixpQkFBdUIsS0FBSyxHQUFHLE9BQU8sS0FBSyxHQUF5RCxPQUF0RCxPQUFPblMsRUFBRTRQLGdCQUFnQjh0QixHQUFHelMsS0FBSTJSLEdBQUc1OEIsRUFBRWdRLE9BQU0sU0FBSzJ0QixHQUFHMzlCLEdBQVUsS0FBSyxHQUFTLFlBQU4yOUIsR0FBRzM5QixHQUFVLEtBQUssR0FBRyxPQUFPLEtBQUssR0FBRyxLQUFLLEdBQWdDLFlBQTdCNDhCLEdBQUc1OEIsRUFBRSxPQUFPQSxFQUFFNFAsZUFBc0IsTUFBTXhSLE1BQU0wQixFQUFFLE1BQU8sU0FBUzY5QixHQUFHNTlCLEdBQUcsSUFBSUMsRUFBRUQsRUFBRWd0QixZQUFZLEdBQUcsT0FBTy9zQixFQUFFLENBQUNELEVBQUVndEIsWUFBWSxLQUFLLElBQUl2d0IsRUFBRXVELEVBQUUrTixVQUFVLE9BQU90UixJQUFJQSxFQUFFdUQsRUFBRStOLFVBQVUsSUFBSW91QixJQUFJbDhCLEVBQUUxRyxTQUFRLFNBQVMwRyxHQUFHLElBQUlnQixFQUFFNDhCLEdBQUc5bkIsS0FBSyxLQUFLL1YsRUFBRUMsR0FBR3hELEVBQUUwb0IsSUFBSWxsQixLQUFLeEQsRUFBRThELElBQUlOLEdBQUdBLEVBQUU2OUIsS0FBSzc4QixFQUFFQSxRQUNuZSxTQUFTODhCLEdBQUcvOUIsRUFBRUMsR0FBRyxPQUFPLE9BQU9ELElBQXNCLFFBQWxCQSxFQUFFQSxFQUFFNlAsZ0JBQXdCLE9BQU83UCxFQUFFOFAsYUFBK0IsUUFBbEI3UCxFQUFFQSxFQUFFNFAsZ0JBQXdCLE9BQU81UCxFQUFFNlAsV0FBZSxJQUFJa3VCLEdBQUc3b0IsS0FBSzhvQixLQUFLQyxHQUFHMTdCLEVBQUd5d0IsdUJBQXVCa0wsR0FBRzM3QixFQUFHbzFCLGtCQUFrQndHLEdBQUUsRUFBRWxKLEdBQUUsS0FBS21KLEdBQUUsS0FBS3BELEdBQUUsRUFBRXFELEdBQUcsRUFBRUMsR0FBR2xXLEdBQUcsR0FBR3lTLEdBQUUsRUFBRTBELEdBQUcsS0FBS0MsR0FBRyxFQUFFdFEsR0FBRyxFQUFFNE0sR0FBRyxFQUFFMkQsR0FBRyxFQUFFQyxHQUFHLEtBQUtoQixHQUFHLEVBQUV6QyxHQUFHMEQsSUFBUyxTQUFTQyxLQUFLM0QsR0FBR2hRLEtBQUksSUFBSSxJQThCc0Y0VCxHQTlCbEZDLEdBQUUsS0FBS2xELElBQUcsRUFBR0MsR0FBRyxLQUFLRyxHQUFHLEtBQUsrQyxJQUFHLEVBQUdDLEdBQUcsS0FBS0MsR0FBRyxHQUFHQyxHQUFHLEdBQUdDLEdBQUcsR0FBR0MsR0FBRyxLQUFLQyxHQUFHLEVBQUVDLEdBQUcsS0FBS0MsSUFBSSxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxLQUFLQyxJQUFHLEVBQUcsU0FBUy9RLEtBQUssT0FBTyxJQUFPLEdBQUZ1UCxJQUFNbFQsTUFBSyxJQUFJc1UsR0FBR0EsR0FBR0EsR0FBR3RVLEtBQzNlLFNBQVM0RCxHQUFHOXVCLEdBQVksR0FBRyxJQUFPLEdBQW5CQSxFQUFFQSxFQUFFNHdCLE9BQWtCLE9BQU8sRUFBRSxHQUFHLElBQU8sRUFBRjV3QixHQUFLLE9BQU8sS0FBS21yQixLQUFLLEVBQUUsRUFBa0IsR0FBaEIsSUFBSXNVLEtBQUtBLEdBQUdoQixJQUFPLElBQUloVCxHQUFHalksV0FBVyxDQUFDLElBQUlrc0IsS0FBS0EsR0FBRyxPQUFPZixHQUFHQSxHQUFHcnFCLGFBQWEsR0FBR3RVLEVBQUV5L0IsR0FBRyxJQUFJeC9CLEVBQUUsU0FBU3kvQixHQUFzRCxPQUE3QyxJQUFOei9CLElBQUlBLElBQThCLElBQVBBLEdBQWJELEVBQUUsU0FBU0EsSUFBT0EsS0FBVUMsRUFBRSxNQUFjQSxFQUE0RCxPQUExREQsRUFBRW1yQixLQUF1Qm5yQixFQUFFOFUsR0FBcEIsSUFBTyxFQUFGc3BCLEtBQU0sS0FBS3ArQixFQUFPLEdBQVFBLEVBdEszUSxTQUFZQSxHQUFHLE9BQU9BLEdBQUcsS0FBSyxHQUFHLE9BQU8sR0FBRyxLQUFLLEdBQUcsT0FBTyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsT0FBTyxFQUFFLEtBQUssR0FBRyxPQUFPLEVBQUUsUUFBUSxPQUFPLEdBc0t1SjYvQixDQUFHNy9CLEdBQVZ5L0IsSUFDblIsU0FBUzFRLEdBQUcvdUIsRUFBRUMsRUFBRXhELEdBQUcsR0FBRyxHQUFHNmlDLEdBQUcsTUFBTUEsR0FBRyxFQUFFQyxHQUFHLEtBQUtsaEMsTUFBTTBCLEVBQUUsTUFBZ0IsR0FBRyxRQUFiQyxFQUFFOC9CLEdBQUc5L0IsRUFBRUMsSUFBZSxPQUFPLEtBQUtnVixHQUFHalYsRUFBRUMsRUFBRXhELEdBQUd1RCxJQUFJazFCLEtBQUk2RixJQUFJOTZCLEVBQUUsSUFBSTY2QixJQUFHRSxHQUFHaDdCLEVBQUVpN0IsS0FBSSxJQUFJaDZCLEVBQUVrcUIsS0FBSyxJQUFJbHJCLEVBQUUsSUFBTyxFQUFGbStCLEtBQU0sSUFBTyxHQUFGQSxJQUFNMkIsR0FBRy8vQixJQUFJZ2dDLEdBQUdoZ0MsRUFBRXZELEdBQUcsSUFBSTJoQyxLQUFJUyxLQUFLdFQsUUFBUSxJQUFPLEVBQUY2UyxLQUFNLEtBQUtuOUIsR0FBRyxLQUFLQSxJQUFJLE9BQU9vK0IsR0FBR0EsR0FBRyxJQUFJbC9CLElBQUksQ0FBQ0gsSUFBSXEvQixHQUFHOStCLElBQUlQLElBQUlnZ0MsR0FBR2hnQyxFQUFFdkQsSUFBSWtpQyxHQUFHMytCLEVBQUUsU0FBUzgvQixHQUFHOS9CLEVBQUVDLEdBQUdELEVBQUV3c0IsT0FBT3ZzQixFQUFFLElBQUl4RCxFQUFFdUQsRUFBRTBQLFVBQXFDLElBQTNCLE9BQU9qVCxJQUFJQSxFQUFFK3ZCLE9BQU92c0IsR0FBR3hELEVBQUV1RCxFQUFNQSxFQUFFQSxFQUFFMlAsT0FBTyxPQUFPM1AsR0FBR0EsRUFBRW9zQixZQUFZbnNCLEVBQWdCLFFBQWR4RCxFQUFFdUQsRUFBRTBQLGFBQXFCalQsRUFBRTJ2QixZQUFZbnNCLEdBQUd4RCxFQUFFdUQsRUFBRUEsRUFBRUEsRUFBRTJQLE9BQU8sT0FBTyxJQUFJbFQsRUFBRW1JLElBQUluSSxFQUFFc1IsVUFBVSxLQUN6ZSxTQUFTaXlCLEdBQUdoZ0MsRUFBRUMsR0FBRyxJQUFJLElBQUl4RCxFQUFFdUQsRUFBRWlnQyxhQUFhaC9CLEVBQUVqQixFQUFFd1UsZUFBZTliLEVBQUVzSCxFQUFFeVUsWUFBWXZULEVBQUVsQixFQUFFa2dDLGdCQUFnQi8rQixFQUFFbkIsRUFBRXNVLGFBQWEsRUFBRW5ULEdBQUcsQ0FBQyxJQUFJdUQsRUFBRSxHQUFHZ1EsR0FBR3ZULEdBQUdzRCxFQUFFLEdBQUdDLEVBQUVzSyxFQUFFOU4sRUFBRXdELEdBQUcsSUFBSSxJQUFJc0ssR0FBRyxHQUFHLElBQUt2SyxFQUFFeEQsSUFBSSxJQUFLd0QsRUFBRS9MLEdBQUcsQ0FBQ3NXLEVBQUUvTyxFQUFFbVUsR0FBRzNQLEdBQUcsSUFBSWxRLEVBQUU0ZixHQUFFalQsRUFBRXdELEdBQUcsSUFBSW5RLEVBQUV5YSxFQUFFLElBQUksR0FBR3phLEVBQUV5YSxFQUFFLEtBQUssUUFBUUEsR0FBRy9PLElBQUlELEVBQUV1VSxjQUFjOVAsR0FBR3RELElBQUlzRCxFQUF3QixHQUF0QnhELEVBQUVvVCxHQUFHclUsRUFBRUEsSUFBSWsxQixHQUFFK0YsR0FBRSxHQUFHaDdCLEVBQUVrVSxHQUFLLElBQUlsVCxFQUFFLE9BQU94RSxJQUFJQSxJQUFJbXVCLElBQUlqQixHQUFHbHRCLEdBQUd1RCxFQUFFaWdDLGFBQWEsS0FBS2pnQyxFQUFFbWdDLGlCQUFpQixPQUFPLENBQUMsR0FBRyxPQUFPMWpDLEVBQUUsQ0FBQyxHQUFHdUQsRUFBRW1nQyxtQkFBbUJsZ0MsRUFBRSxPQUFPeEQsSUFBSW11QixJQUFJakIsR0FBR2x0QixHQUFHLEtBQUt3RCxHQUFHeEQsRUFBRXNqQyxHQUFHaHFCLEtBQUssS0FBSy9WLEdBQUcsT0FBTzhxQixJQUFJQSxHQUFHLENBQUNydUIsR0FBR3N1QixHQUFHckIsR0FBR1UsR0FBR29CLEtBQUtWLEdBQUdwNUIsS0FBSytLLEdBQ3JmQSxFQUFFbXVCLElBQVdudUIsRUFBUCxLQUFLd0QsRUFBSXFyQixHQUFHLEdBQUd5VSxHQUFHaHFCLEtBQUssS0FBSy9WLElBQWVzckIsR0FBVjd1QixFQXpLK0YsU0FBWXVELEdBQUcsT0FBT0EsR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLE9BQU8sR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsT0FBTyxHQUFHLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPLEdBQUcsS0FBSyxFQUFFLE9BQU8sR0FBRyxRQUFRLE1BQU0zQixNQUFNMEIsRUFBRSxJQUFJQyxLQXlLeFRvZ0MsQ0FBR25nQyxHQUFVb2dDLEdBQUd0cUIsS0FBSyxLQUFLL1YsSUFBS0EsRUFBRW1nQyxpQkFBaUJsZ0MsRUFBRUQsRUFBRWlnQyxhQUFheGpDLEdBQzVHLFNBQVM0akMsR0FBR3JnQyxHQUFpQixHQUFkdy9CLElBQUksRUFBRUUsR0FBR0QsR0FBRyxFQUFLLElBQU8sR0FBRnJCLElBQU0sTUFBTS8vQixNQUFNMEIsRUFBRSxNQUFNLElBQUlFLEVBQUVELEVBQUVpZ0MsYUFBYSxHQUFHSyxNQUFNdGdDLEVBQUVpZ0MsZUFBZWhnQyxFQUFFLE9BQU8sS0FBSyxJQUFJeEQsRUFBRTRYLEdBQUdyVSxFQUFFQSxJQUFJazFCLEdBQUUrRixHQUFFLEdBQUcsR0FBRyxJQUFJeCtCLEVBQUUsT0FBTyxLQUFLLElBQUl3RSxFQUFFeEUsRUFBTS9ELEVBQUUwbEMsR0FBRUEsSUFBRyxHQUFHLElBQUlsOUIsRUFBRXEvQixLQUFrQyxJQUExQnJMLEtBQUlsMUIsR0FBR2k3QixLQUFJaDZCLElBQUU0OUIsS0FBSzJCLEdBQUd4Z0MsRUFBRWlCLFVBQVV3L0IsS0FBSyxNQUFNLE1BQU0vN0IsR0FBR2c4QixHQUFHMWdDLEVBQUUwRSxHQUFnRSxHQUFwRHNuQixLQUFLa1MsR0FBRy90QixRQUFRalAsRUFBRWs5QixHQUFFMWxDLEVBQUUsT0FBTzJsQyxHQUFFcDlCLEVBQUUsR0FBR2kwQixHQUFFLEtBQUsrRixHQUFFLEVBQUVoNkIsRUFBRTY1QixJQUFNLElBQUsyRCxHQUFHMUQsSUFBSXlGLEdBQUd4Z0MsRUFBRSxRQUFRLEdBQUcsSUFBSWlCLEVBQUUsQ0FBeUYsR0FBeEYsSUFBSUEsSUFBSW05QixJQUFHLEdBQUdwK0IsRUFBRW1TLFVBQVVuUyxFQUFFbVMsU0FBUSxFQUFHdVYsR0FBRzFuQixFQUFFb1MsZ0JBQXdCLEtBQVIzVixFQUFFb1ksR0FBRzdVLE1BQVdpQixFQUFFMC9CLEdBQUczZ0MsRUFBRXZELEtBQVEsSUFBSXdFLEVBQUUsTUFBTWhCLEVBQUV1K0IsR0FBR2dDLEdBQUd4Z0MsRUFBRSxHQUFHZzdCLEdBQUdoN0IsRUFBRXZELEdBQUd1akMsR0FBR2hnQyxFQUFFa3JCLE1BQUtqckIsRUFDM2MsT0FENmNELEVBQUU0Z0MsYUFDcmY1Z0MsRUFBRW1RLFFBQVFULFVBQVUxUCxFQUFFNmdDLGNBQWNwa0MsRUFBU3dFLEdBQUcsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNNUMsTUFBTTBCLEVBQUUsTUFBTSxLQUFLLEVBQUUrZ0MsR0FBRzlnQyxHQUFHLE1BQU0sS0FBSyxFQUFVLEdBQVJnN0IsR0FBR2g3QixFQUFFdkQsSUFBUyxTQUFGQSxLQUFjQSxHQUFpQixJQUFid0UsRUFBRTA4QixHQUFHLElBQUl6UyxNQUFVLENBQUMsR0FBRyxJQUFJN1csR0FBR3JVLEVBQUUsR0FBRyxNQUF5QixLQUFuQnRILEVBQUVzSCxFQUFFd1UsZ0JBQXFCL1gsS0FBS0EsRUFBRSxDQUFDb3lCLEtBQUs3dUIsRUFBRXlVLGFBQWF6VSxFQUFFd1UsZUFBZTliLEVBQUUsTUFBTXNILEVBQUUrZ0MsY0FBY3paLEdBQUd3WixHQUFHL3FCLEtBQUssS0FBSy9WLEdBQUdpQixHQUFHLE1BQU02L0IsR0FBRzlnQyxHQUFHLE1BQU0sS0FBSyxFQUFVLEdBQVJnN0IsR0FBR2g3QixFQUFFdkQsSUFBUyxRQUFGQSxLQUFhQSxFQUFFLE1BQXFCLElBQWZ3RSxFQUFFakIsRUFBRWtWLFdBQWV4YyxHQUFHLEVBQUUsRUFBRStELEdBQUcsQ0FBQyxJQUFJMEUsRUFBRSxHQUFHdVQsR0FBR2pZLEdBQUd5RSxFQUFFLEdBQUdDLEdBQUVBLEVBQUVGLEVBQUVFLElBQUt6SSxJQUFJQSxFQUFFeUksR0FBRzFFLElBQUl5RSxFQUNqWixHQURtWnpFLEVBQUUvRCxFQUNsWixJQUQ0WitELEdBQUcsS0FBWEEsRUFBRXl1QixLQUFJenVCLEdBQVcsSUFBSSxJQUFJQSxFQUFFLElBQUksS0FBS0EsRUFBRSxLQUFLLEtBQUtBLEVBQUUsS0FBSyxJQUFJQSxFQUFFLElBQUksS0FDbGZBLEVBQUUsS0FBSyxLQUFLdWhDLEdBQUd2aEMsRUFBRSxPQUFPQSxHQUFVLENBQUN1RCxFQUFFK2dDLGNBQWN6WixHQUFHd1osR0FBRy9xQixLQUFLLEtBQUsvVixHQUFHdkQsR0FBRyxNQUFNcWtDLEdBQUc5Z0MsR0FBRyxNQUFNLEtBQUssRUFBRThnQyxHQUFHOWdDLEdBQUcsTUFBTSxRQUFRLE1BQU0zQixNQUFNMEIsRUFBRSxPQUFrQixPQUFWaWdDLEdBQUdoZ0MsRUFBRWtyQixNQUFZbHJCLEVBQUVpZ0MsZUFBZWhnQyxFQUFFb2dDLEdBQUd0cUIsS0FBSyxLQUFLL1YsR0FBRyxLQUFLLFNBQVNnN0IsR0FBR2g3QixFQUFFQyxHQUF1RCxJQUFwREEsSUFBSXkrQixHQUFHeitCLElBQUk4NkIsR0FBRy82QixFQUFFd1UsZ0JBQWdCdlUsRUFBRUQsRUFBRXlVLGNBQWN4VSxFQUFNRCxFQUFFQSxFQUFFa2dDLGdCQUFnQixFQUFFamdDLEdBQUcsQ0FBQyxJQUFJeEQsRUFBRSxHQUFHaVksR0FBR3pVLEdBQUdnQixFQUFFLEdBQUd4RSxFQUFFdUQsRUFBRXZELElBQUksRUFBRXdELElBQUlnQixHQUMxVSxTQUFTOCtCLEdBQUcvL0IsR0FBRyxHQUFHLElBQU8sR0FBRm8rQixJQUFNLE1BQU0vL0IsTUFBTTBCLEVBQUUsTUFBVyxHQUFMdWdDLEtBQVF0Z0MsSUFBSWsxQixJQUFHLElBQUtsMUIsRUFBRXVVLGFBQWEwbUIsSUFBRyxDQUFDLElBQUloN0IsRUFBRWc3QixHQUFNeCtCLEVBQUVra0MsR0FBRzNnQyxFQUFFQyxHQUFHLElBQUt3K0IsR0FBRzFELE1BQWdCdCtCLEVBQUVra0MsR0FBRzNnQyxFQUFmQyxFQUFFb1UsR0FBR3JVLEVBQUVDLFVBQTZCeEQsRUFBRWtrQyxHQUFHM2dDLEVBQWZDLEVBQUVvVSxHQUFHclUsRUFBRSxJQUFnSCxHQUFuRyxJQUFJQSxFQUFFNEUsS0FBSyxJQUFJbkksSUFBSTJoQyxJQUFHLEdBQUdwK0IsRUFBRW1TLFVBQVVuUyxFQUFFbVMsU0FBUSxFQUFHdVYsR0FBRzFuQixFQUFFb1MsZ0JBQXdCLEtBQVJuUyxFQUFFNFUsR0FBRzdVLE1BQVd2RCxFQUFFa2tDLEdBQUczZ0MsRUFBRUMsS0FBUSxJQUFJeEQsRUFBRSxNQUFNQSxFQUFFK2hDLEdBQUdnQyxHQUFHeGdDLEVBQUUsR0FBR2c3QixHQUFHaDdCLEVBQUVDLEdBQUcrL0IsR0FBR2hnQyxFQUFFa3JCLE1BQUt6dUIsRUFBdUUsT0FBckV1RCxFQUFFNGdDLGFBQWE1Z0MsRUFBRW1RLFFBQVFULFVBQVUxUCxFQUFFNmdDLGNBQWM1Z0MsRUFBRTZnQyxHQUFHOWdDLEdBQUdnZ0MsR0FBR2hnQyxFQUFFa3JCLE1BQVksS0FDakgsU0FBU29OLEdBQUd0NEIsRUFBRUMsR0FBR3NvQixHQUFFZ1csR0FBR0QsSUFBSUEsSUFBSXIrQixFQUFFdytCLElBQUl4K0IsRUFBRSxTQUFTazdCLEtBQUttRCxHQUFHQyxHQUFHcHVCLFFBQVFtWSxHQUFFaVcsSUFDNVYsU0FBU2lDLEdBQUd4Z0MsRUFBRUMsR0FBR0QsRUFBRTRnQyxhQUFhLEtBQUs1Z0MsRUFBRTZnQyxjQUFjLEVBQUUsSUFBSXBrQyxFQUFFdUQsRUFBRStnQyxjQUFpRCxJQUFsQyxJQUFJdGtDLElBQUl1RCxFQUFFK2dDLGVBQWUsRUFBRXZaLEdBQUcvcUIsSUFBTyxPQUFPNGhDLEdBQUUsSUFBSTVoQyxFQUFFNGhDLEdBQUUxdUIsT0FBTyxPQUFPbFQsR0FBRyxDQUFDLElBQUl3RSxFQUFFeEUsRUFBRSxPQUFPd0UsRUFBRTJELEtBQUssS0FBSyxFQUE2QixPQUEzQjNELEVBQUVBLEVBQUV0SyxLQUFLVixvQkFBd0MreUIsS0FBSyxNQUFNLEtBQUssRUFBRTJJLEtBQUtySixHQUFFSSxJQUFHSixHQUFFRyxJQUFHcUssS0FBSyxNQUFNLEtBQUssRUFBRWpCLEdBQUc1d0IsR0FBRyxNQUFNLEtBQUssRUFBRTB3QixLQUFLLE1BQU0sS0FBSyxHQUFjLEtBQUssR0FBR3JKLEdBQUV3SixJQUFHLE1BQU0sS0FBSyxHQUFHN0YsR0FBR2hyQixHQUFHLE1BQU0sS0FBSyxHQUFHLEtBQUssR0FBR2s2QixLQUFLMStCLEVBQUVBLEVBQUVrVCxPQUFPdWxCLEdBQUVsMUIsRUFBRXErQixHQUFFM04sR0FBRzF3QixFQUFFbVEsUUFBUSxNQUFNOHFCLEdBQUVxRCxHQUFHRyxHQUFHeCtCLEVBQUU2NkIsR0FBRSxFQUFFMEQsR0FBRyxLQUFLRSxHQUFHM0QsR0FBRzVNLEdBQUcsRUFDdmMsU0FBU3VTLEdBQUcxZ0MsRUFBRUMsR0FBRyxPQUFFLENBQUMsSUFBSXhELEVBQUU0aEMsR0FBRSxJQUF1QixHQUFuQnJTLEtBQUtnSCxHQUFHN2lCLFFBQVE0akIsR0FBTVIsR0FBRyxDQUFDLElBQUksSUFBSXR5QixFQUFFbXlCLEdBQUV2akIsY0FBYyxPQUFPNU8sR0FBRyxDQUFDLElBQUl2SSxFQUFFdUksRUFBRWl6QixNQUFNLE9BQU94N0IsSUFBSUEsRUFBRTIwQixRQUFRLE1BQU1wc0IsRUFBRUEsRUFBRWpOLEtBQUt1L0IsSUFBRyxFQUF5QyxHQUF0Q0osR0FBRyxFQUFFRyxHQUFFRCxHQUFFRCxHQUFFLEtBQUtJLElBQUcsRUFBRzJLLEdBQUdodUIsUUFBUSxLQUFRLE9BQU8xVCxHQUFHLE9BQU9BLEVBQUVrVCxPQUFPLENBQUNtckIsR0FBRSxFQUFFMEQsR0FBR3YrQixFQUFFbytCLEdBQUUsS0FBSyxNQUFNcitCLEVBQUUsQ0FBQyxJQUFJa0IsRUFBRWxCLEVBQUVtQixFQUFFMUUsRUFBRWtULE9BQU9qTCxFQUFFakksRUFBRWdJLEVBQUV4RSxFQUFvRCxHQUFsREEsRUFBRWc3QixHQUFFdjJCLEVBQUUzSixPQUFPLEtBQUsySixFQUFFK3JCLFlBQVkvckIsRUFBRTZyQixXQUFXLEtBQVEsT0FBTzlyQixHQUFHLGlCQUFrQkEsR0FBRyxtQkFBb0JBLEVBQUVxNUIsS0FBSyxDQUFDLElBQUk5dUIsRUFBRXZLLEVBQUUsR0FBRyxJQUFZLEVBQVBDLEVBQUVrc0IsTUFBUSxDQUFDLElBQUlyOEIsRUFBRW1RLEVBQUVnTCxVQUFVbmIsR0FBR21RLEVBQUVzb0IsWUFBWXo0QixFQUFFeTRCLFlBQVl0b0IsRUFBRW1MLGNBQWN0YixFQUFFc2IsY0FBY25MLEVBQUU4bkIsTUFBTWo0QixFQUFFaTRCLFFBQ3BmOW5CLEVBQUVzb0IsWUFBWSxLQUFLdG9CLEVBQUVtTCxjQUFjLE1BQU0sSUFBSW1lLEVBQUUsSUFBZSxFQUFWOEQsR0FBRTNoQixTQUFXOGQsRUFBRTlzQixFQUFFLEVBQUUsQ0FBQyxJQUFJK3NCLEVBQUUsR0FBR0EsRUFBRSxLQUFLRCxFQUFFcnBCLElBQUksQ0FBQyxJQUFJK2dCLEVBQUVzSSxFQUFFcGUsY0FBYyxHQUFHLE9BQU84VixFQUFFdUksRUFBRSxPQUFPdkksRUFBRTdWLGVBQXFCLENBQUMsSUFBSThWLEVBQUVxSSxFQUFFK0QsY0FBYzlELE9BQUUsSUFBU3RJLEVBQUV5VCxZQUFZLElBQUt6VCxFQUFFMFQsNkJBQThCdEwsSUFBUyxHQUFHRSxFQUFFLENBQUMsSUFBSXJJLEVBQUVvSSxFQUFFakIsWUFBWSxHQUFHLE9BQU9uSCxFQUFFLENBQUMsSUFBSUMsRUFBRSxJQUFJM2xCLElBQUkybEIsRUFBRXZsQixJQUFJeU8sR0FBR2lmLEVBQUVqQixZQUFZbEgsT0FBT0QsRUFBRXRsQixJQUFJeU8sR0FBRyxHQUFHLElBQVksRUFBUGlmLEVBQUUyQyxNQUFRLENBQTJDLEdBQTFDM0MsRUFBRWx6QixPQUFPLEdBQUcySixFQUFFM0osT0FBTyxNQUFNMkosRUFBRTNKLFFBQVEsS0FBUSxJQUFJMkosRUFBRUUsSUFBSSxHQUFHLE9BQU9GLEVBQUVnTCxVQUFVaEwsRUFBRUUsSUFBSSxPQUFPLENBQUMsSUFBSW9oQixFQUFFd0gsSUFBSSxFQUFFLEdBQUd4SCxFQUFFcGhCLElBQUksRUFBRWlwQixHQUFHbnBCLEVBQUVzaEIsR0FBR3RoQixFQUFFOG5CLE9BQU8sRUFBRSxNQUFNeHNCLEVBQUV5RSxPQUM1ZixFQUFPQyxFQUFFekUsRUFBRSxJQUFJOGxCLEVBQUU3a0IsRUFBRTgvQixVQUErRyxHQUFyRyxPQUFPamIsR0FBR0EsRUFBRTdrQixFQUFFOC9CLFVBQVUsSUFBSXRGLEdBQUdqM0IsRUFBRSxJQUFJdEUsSUFBSTRsQixFQUFFemhCLElBQUkwSyxFQUFFdkssU0FBZ0IsS0FBWEEsRUFBRXNoQixFQUFFdmdCLElBQUl3SixNQUFnQnZLLEVBQUUsSUFBSXRFLElBQUk0bEIsRUFBRXpoQixJQUFJMEssRUFBRXZLLEtBQVNBLEVBQUUwZ0IsSUFBSXpnQixHQUFHLENBQUNELEVBQUVsRSxJQUFJbUUsR0FBRyxJQUFJdWhCLEVBQUVnYixHQUFHbHJCLEtBQUssS0FBSzdVLEVBQUU4TixFQUFFdEssR0FBR3NLLEVBQUU4dUIsS0FBSzdYLEVBQUVBLEdBQUdnSSxFQUFFbHpCLE9BQU8sS0FBS2t6QixFQUFFekIsTUFBTXZzQixFQUFFLE1BQU1ELEVBQUVpdUIsRUFBRUEsRUFBRXRlLGFBQWEsT0FBT3NlLEdBQUd4cEIsRUFBRXBHLE9BQU95RyxFQUFHSixFQUFFL04sT0FBTyxxQkFBcUIseUxBQXlMLElBQUlta0MsS0FBSUEsR0FBRSxHQUFHcjJCLEVBQUU0MkIsR0FBRzUyQixFQUFFQyxHQUFHdXBCLEVBQ3BmOXNCLEVBQUUsRUFBRSxDQUFDLE9BQU84c0IsRUFBRXJwQixLQUFLLEtBQUssRUFBRTFELEVBQUV1RCxFQUFFd3BCLEVBQUVsekIsT0FBTyxLQUFLa0YsSUFBSUEsRUFBRWd1QixFQUFFekIsT0FBT3ZzQixFQUFrQjZ0QixHQUFHRyxFQUFiMk4sR0FBRzNOLEVBQUUvc0IsRUFBRWpCLElBQVcsTUFBTUQsRUFBRSxLQUFLLEVBQUVrQixFQUFFdUQsRUFBRSxJQUFJK2hCLEVBQUV5SCxFQUFFdDNCLEtBQUs4dkIsRUFBRXdILEVBQUVsZ0IsVUFBVSxHQUFHLElBQWEsR0FBUmtnQixFQUFFbHpCLFNBQVksbUJBQW9CeXJCLEVBQUVqd0IsMEJBQTBCLE9BQU9rd0IsR0FBRyxtQkFBb0JBLEVBQUV1VixvQkFBb0IsT0FBT0MsS0FBS0EsR0FBRzlXLElBQUlzQixLQUFLLENBQUN3SCxFQUFFbHpCLE9BQU8sS0FBS2tGLElBQUlBLEVBQUVndUIsRUFBRXpCLE9BQU92c0IsRUFBa0I2dEIsR0FBR0csRUFBYjhOLEdBQUc5TixFQUFFL3NCLEVBQUVqQixJQUFXLE1BQU1ELEdBQUdpdUIsRUFBRUEsRUFBRXRlLGFBQWEsT0FBT3NlLEdBQUdpVCxHQUFHemtDLEdBQUcsTUFBTTBrQyxHQUFJbGhDLEVBQUVraEMsRUFBRzlDLEtBQUk1aEMsR0FBRyxPQUFPQSxJQUFJNGhDLEdBQUU1aEMsRUFBRUEsRUFBRWtULFFBQVEsU0FBUyxPQUMvYSxTQUFTNHdCLEtBQUssSUFBSXZnQyxFQUFFaytCLEdBQUcvdEIsUUFBc0IsT0FBZCt0QixHQUFHL3RCLFFBQVE0akIsR0FBVSxPQUFPL3pCLEVBQUUrekIsR0FBRy96QixFQUFFLFNBQVMyZ0MsR0FBRzNnQyxFQUFFQyxHQUFHLElBQUl4RCxFQUFFMmhDLEdBQUVBLElBQUcsR0FBRyxJQUFJbjlCLEVBQUVzL0IsS0FBMkIsSUFBdEJyTCxLQUFJbDFCLEdBQUdpN0IsS0FBSWg3QixHQUFHdWdDLEdBQUd4Z0MsRUFBRUMsU0FBVW1oQyxLQUFLLE1BQU0sTUFBTTFvQyxHQUFHZ29DLEdBQUcxZ0MsRUFBRXRILEdBQWtDLEdBQXRCc3pCLEtBQUtvUyxHQUFFM2hDLEVBQUV5aEMsR0FBRy90QixRQUFRbFAsRUFBSyxPQUFPbzlCLEdBQUUsTUFBTWhnQyxNQUFNMEIsRUFBRSxNQUFpQixPQUFYbTFCLEdBQUUsS0FBSytGLEdBQUUsRUFBU0gsR0FBRSxTQUFTc0csS0FBSyxLQUFLLE9BQU8vQyxJQUFHZ0QsR0FBR2hELElBQUcsU0FBU29DLEtBQUssS0FBSyxPQUFPcEMsS0FBSXhVLE1BQU13WCxHQUFHaEQsSUFBRyxTQUFTZ0QsR0FBR3JoQyxHQUFHLElBQUlDLEVBQUU2K0IsR0FBRzkrQixFQUFFMFAsVUFBVTFQLEVBQUVzK0IsSUFBSXQrQixFQUFFZ3lCLGNBQWNoeUIsRUFBRXd5QixhQUFhLE9BQU92eUIsRUFBRWloQyxHQUFHbGhDLEdBQUdxK0IsR0FBRXArQixFQUFFaytCLEdBQUdodUIsUUFBUSxLQUM1YSxTQUFTK3dCLEdBQUdsaEMsR0FBRyxJQUFJQyxFQUFFRCxFQUFFLEVBQUUsQ0FBQyxJQUFJdkQsRUFBRXdELEVBQUV5UCxVQUFxQixHQUFYMVAsRUFBRUMsRUFBRTBQLE9BQVUsSUFBYSxLQUFSMVAsRUFBRWxGLE9BQVksQ0FBYyxHQUFHLFFBQWhCMEIsRUFBRTY5QixHQUFHNzlCLEVBQUV3RCxFQUFFcStCLEtBQXFCLFlBQUpELEdBQUU1aEMsR0FBYSxHQUFHLE1BQVBBLEVBQUV3RCxHQUFZMkUsS0FBSyxLQUFLbkksRUFBRW1JLEtBQUssT0FBT25JLEVBQUVvVCxlQUFlLElBQVEsV0FBSHl1QixLQUFnQixJQUFZLEVBQVA3aEMsRUFBRW0wQixNQUFRLENBQUMsSUFBSSxJQUFJM3ZCLEVBQUUsRUFBRXZJLEVBQUUrRCxFQUFFd1QsTUFBTSxPQUFPdlgsR0FBR3VJLEdBQUd2SSxFQUFFOHpCLE1BQU05ekIsRUFBRTB6QixXQUFXMXpCLEVBQUVBLEVBQUV3WCxRQUFRelQsRUFBRTJ2QixXQUFXbnJCLEVBQUUsT0FBT2pCLEdBQUcsSUFBYSxLQUFSQSxFQUFFakYsU0FBYyxPQUFPaUYsRUFBRXl3QixjQUFjendCLEVBQUV5d0IsWUFBWXh3QixFQUFFd3dCLGFBQWEsT0FBT3h3QixFQUFFc3dCLGFBQWEsT0FBT3Z3QixFQUFFdXdCLGFBQWF2d0IsRUFBRXV3QixXQUFXQyxXQUFXdndCLEVBQUV3d0IsYUFBYXp3QixFQUFFdXdCLFdBQVd0d0IsRUFBRXN3QixZQUFZLEVBQUV0d0IsRUFBRWxGLFFBQVEsT0FDL2VpRixFQUFFdXdCLFdBQVd2d0IsRUFBRXV3QixXQUFXQyxXQUFXdndCLEVBQUVELEVBQUV5d0IsWUFBWXh3QixFQUFFRCxFQUFFdXdCLFdBQVd0d0IsUUFBUSxDQUFTLEdBQUcsUUFBWHhELEVBQUUyK0IsR0FBR243QixJQUFrQyxPQUFsQnhELEVBQUUxQixPQUFPLFVBQUtzakMsR0FBRTVoQyxHQUFTLE9BQU91RCxJQUFJQSxFQUFFeXdCLFlBQVl6d0IsRUFBRXV3QixXQUFXLEtBQUt2d0IsRUFBRWpGLE9BQU8sTUFBa0IsR0FBRyxRQUFma0YsRUFBRUEsRUFBRWlRLFNBQXlCLFlBQUptdUIsR0FBRXArQixHQUFTbytCLEdBQUVwK0IsRUFBRUQsUUFBUSxPQUFPQyxHQUFHLElBQUk2NkIsS0FBSUEsR0FBRSxHQUFHLFNBQVNnRyxHQUFHOWdDLEdBQUcsSUFBSUMsRUFBRWtyQixLQUE4QixPQUF6QkUsR0FBRyxHQUFHaVcsR0FBR3ZyQixLQUFLLEtBQUsvVixFQUFFQyxJQUFXLEtBQ3RULFNBQVNxaEMsR0FBR3RoQyxFQUFFQyxHQUFHLEdBQUdxZ0MsV0FBVyxPQUFPckIsSUFBSSxHQUFHLElBQU8sR0FBRmIsSUFBTSxNQUFNLy9CLE1BQU0wQixFQUFFLE1BQU0sSUFBSXRELEVBQUV1RCxFQUFFNGdDLGFBQWEsR0FBRyxPQUFPbmtDLEVBQUUsT0FBTyxLQUEyQyxHQUF0Q3VELEVBQUU0Z0MsYUFBYSxLQUFLNWdDLEVBQUU2Z0MsY0FBYyxFQUFLcGtDLElBQUl1RCxFQUFFbVEsUUFBUSxNQUFNOVIsTUFBTTBCLEVBQUUsTUFBTUMsRUFBRWlnQyxhQUFhLEtBQUssSUFBSWgvQixFQUFFeEUsRUFBRSt2QixNQUFNL3ZCLEVBQUUydkIsV0FBVzF6QixFQUFFdUksRUFBRUMsRUFBRWxCLEVBQUVzVSxjQUFjNWIsRUFBRXNILEVBQUVzVSxhQUFhNWIsRUFBRXNILEVBQUV3VSxlQUFlLEVBQUV4VSxFQUFFeVUsWUFBWSxFQUFFelUsRUFBRXVVLGNBQWM3YixFQUFFc0gsRUFBRWcxQixrQkFBa0J0OEIsRUFBRXNILEVBQUUyVSxnQkFBZ0JqYyxFQUFFQSxFQUFFc0gsRUFBRTRVLGNBQWMsSUFBSSxJQUFJelQsRUFBRW5CLEVBQUVrVixXQUFXeFEsRUFBRTFFLEVBQUVrZ0MsZ0JBQWdCLEVBQUVoL0IsR0FBRyxDQUFDLElBQUl1RCxFQUFFLEdBQUdpUSxHQUFHeFQsR0FBRzhOLEVBQUUsR0FBR3ZLLEVBQUUvTCxFQUFFK0wsR0FBRyxFQUFFdEQsRUFBRXNELElBQUksRUFBRUMsRUFBRUQsSUFBSSxFQUFFdkQsSUFBSThOLEVBQ25WLEdBRHFWLE9BQ2pmcXdCLElBQUksSUFBTyxHQUFGcCtCLElBQU9vK0IsR0FBR2xhLElBQUlubEIsSUFBSXEvQixHQUFHMXRCLE9BQU8zUixHQUFHQSxJQUFJazFCLEtBQUltSixHQUFFbkosR0FBRSxLQUFLK0YsR0FBRSxHQUFHLEVBQUV4K0IsRUFBRTFCLE1BQU0sT0FBTzBCLEVBQUU4ekIsWUFBWTl6QixFQUFFOHpCLFdBQVdDLFdBQVcvekIsRUFBRXdFLEVBQUV4RSxFQUFFZzBCLGFBQWF4dkIsRUFBRXhFLEVBQUV3RSxFQUFFeEUsRUFBRWcwQixZQUFlLE9BQU94dkIsRUFBRSxDQUF3QyxHQUF2Q3ZJLEVBQUUwbEMsR0FBRUEsSUFBRyxHQUFHRCxHQUFHaHVCLFFBQVEsS0FBSzZXLEdBQUdwUixHQUFhNE4sR0FBVnJpQixFQUFFaWlCLE1BQWMsQ0FBQyxHQUFHLG1CQUFtQmppQixFQUFFdUQsRUFBRSxDQUFDc2YsTUFBTTdpQixFQUFFOGlCLGVBQWUxbUIsSUFBSTRELEVBQUUraUIsbUJBQW1CbGtCLEVBQUUsR0FBRzBFLEdBQUdBLEVBQUV2RCxFQUFFNkYsZ0JBQWdCdEMsRUFBRTBmLGFBQWEzakIsUUFBUXVPLEVBQUV0SyxFQUFFMmYsY0FBYzNmLEVBQUUyZixpQkFBaUIsSUFBSXJWLEVBQUV1eUIsV0FBVyxDQUFDNzhCLEVBQUVzSyxFQUFFbVYsV0FBV2pqQixFQUFFOE4sRUFBRXNWLGFBQWE3ZixFQUFFdUssRUFBRXVWLFVBQVV2VixFQUFFQSxFQUFFd1YsWUFBWSxJQUFJOWYsRUFBRW9FLFNBQVNyRSxFQUFFcUUsU0FBUyxNQUFNcTRCLEdBQUl6OEIsRUFBRSxLQUNuZixNQUFNMUUsRUFBRSxJQUFJekwsRUFBRSxFQUFFeTVCLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxFQUFFLEVBQUV2SSxFQUFFLEVBQUVDLEVBQUV6a0IsRUFBRTBrQixFQUFFLEtBQUs1bEIsRUFBRSxPQUFPLENBQUMsSUFBSSxJQUFJNmxCLEVBQUtGLElBQUlsaEIsR0FBRyxJQUFJeEQsR0FBRyxJQUFJMGtCLEVBQUU5YyxXQUFXa2xCLEVBQUV6NUIsRUFBRTJNLEdBQUcwa0IsSUFBSW5oQixHQUFHLElBQUl1SyxHQUFHLElBQUk0VyxFQUFFOWMsV0FBV21sQixFQUFFMTVCLEVBQUV5YSxHQUFHLElBQUk0VyxFQUFFOWMsV0FBV3ZVLEdBQUdxeEIsRUFBRTdjLFVBQVVsVyxRQUFXLFFBQVFpekIsRUFBRUYsRUFBRXJkLGFBQWtCc2QsRUFBRUQsRUFBRUEsRUFBRUUsRUFBRSxPQUFPLENBQUMsR0FBR0YsSUFBSXprQixFQUFFLE1BQU1sQixFQUE4QyxHQUE1QzRsQixJQUFJbmhCLEtBQUt3cEIsSUFBSWh0QixJQUFJOHNCLEVBQUV6NUIsR0FBR3N4QixJQUFJcGhCLEtBQUtraEIsSUFBSTNXLElBQUlpZixFQUFFMTVCLEdBQU0sUUFBUXV4QixFQUFFRixFQUFFNUMsYUFBYSxNQUFVNkMsR0FBSkQsRUFBRUMsR0FBTXBZLFdBQVdtWSxFQUFFRSxFQUFFcGhCLEdBQUcsSUFBSXNwQixJQUFJLElBQUlDLEVBQUUsS0FBSyxDQUFDakssTUFBTWdLLEVBQUV6d0IsSUFBSTB3QixRQUFRdnBCLEVBQUUsS0FBS0EsRUFBRUEsR0FBRyxDQUFDc2YsTUFBTSxFQUFFem1CLElBQUksUUFBUW1ILEVBQUUsS0FBS3VpQixHQUFHLENBQUN1YSxZQUFZcmdDLEVBQUVzZ0MsZUFBZS84QixHQUFHa1IsSUFBRyxFQUFHK3BCLEdBQUcsS0FBS0MsSUFBRyxFQUFHYixHQUFFOTlCLEVBQUUsT0FBT3lnQyxLQUFLLE1BQU1QLEdBQUksR0FBRyxPQUN2Z0JwQyxHQUFFLE1BQU0xZ0MsTUFBTTBCLEVBQUUsTUFBTXU4QixHQUFHeUMsR0FBRW9DLEdBQUlwQyxHQUFFQSxHQUFFdk8sa0JBQWlCLE9BQU91TyxJQUFHWSxHQUFHLEtBQUtaLEdBQUU5OUIsRUFBRSxPQUFPLElBQUlFLEVBQUVuQixFQUFFLE9BQU8rK0IsSUFBRyxDQUFDLElBQUkvWSxFQUFFK1ksR0FBRWhrQyxNQUErQixHQUF2QixHQUFGaXJCLEdBQU1wZCxHQUFHbTJCLEdBQUVoeEIsVUFBVSxJQUFTLElBQUZpWSxFQUFNLENBQUMsSUFBSUQsRUFBRWdaLEdBQUVydkIsVUFBVSxHQUFHLE9BQU9xVyxFQUFFLENBQUMsSUFBSUUsRUFBRUYsRUFBRW1LLElBQUksT0FBT2pLLElBQUksbUJBQW9CQSxFQUFFQSxFQUFFLE1BQU1BLEVBQUU5VixRQUFRLE9BQU8sT0FBUyxLQUFGNlYsR0FBUSxLQUFLLEVBQUVxWCxHQUFHMEIsSUFBR0EsR0FBRWhrQyxRQUFRLEVBQUUsTUFBTSxLQUFLLEVBQUVzaUMsR0FBRzBCLElBQUdBLEdBQUVoa0MsUUFBUSxFQUFFMmlDLEdBQUdxQixHQUFFcnZCLFVBQVVxdkIsSUFBRyxNQUFNLEtBQUssS0FBS0EsR0FBRWhrQyxRQUFRLEtBQUssTUFBTSxLQUFLLEtBQUtna0MsR0FBRWhrQyxRQUFRLEtBQUsyaUMsR0FBR3FCLEdBQUVydkIsVUFBVXF2QixJQUFHLE1BQU0sS0FBSyxFQUFFckIsR0FBR3FCLEdBQUVydkIsVUFBVXF2QixJQUFHLE1BQU0sS0FBSyxFQUFNN0IsR0FBRy83QixFQUFQdUQsRUFBRXE2QixJQUFVLElBQUl4WSxFQUFFN2hCLEVBQUVnTCxVQUFVeXRCLEdBQUd6NEIsR0FBRyxPQUNuZjZoQixHQUFHNFcsR0FBRzVXLEdBQUd3WSxHQUFFQSxHQUFFdk8sWUFBWSxNQUFNMlEsR0FBSSxHQUFHLE9BQU9wQyxHQUFFLE1BQU0xZ0MsTUFBTTBCLEVBQUUsTUFBTXU4QixHQUFHeUMsR0FBRW9DLEdBQUlwQyxHQUFFQSxHQUFFdk8sa0JBQWlCLE9BQU91TyxJQUFrRCxHQUEvQzlZLEVBQUVnQixHQUFHbEIsRUFBRTNDLEtBQUs0QyxFQUFFQyxFQUFFdWIsWUFBWXJnQyxFQUFFOGtCLEVBQUV3YixlQUFrQjFiLElBQUlDLEdBQUdBLEdBQUdBLEVBQUVoZixlQUFlaWMsR0FBRytDLEVBQUVoZixjQUFjeXFCLGdCQUFnQnpMLEdBQUcsQ0FBQyxPQUFPN2tCLEdBQUdxaUIsR0FBR3dDLEtBQUtELEVBQUU1a0IsRUFBRTZpQixXQUFjLEtBQVJpQyxFQUFFOWtCLEVBQUU1RCxPQUFpQjBvQixFQUFFRixHQUFHLG1CQUFtQkMsR0FBR0EsRUFBRS9CLGVBQWU4QixFQUFFQyxFQUFFOUIsYUFBYS9PLEtBQUt3c0IsSUFBSTFiLEVBQUVELEVBQUU5eEIsTUFBTXJCLFVBQVVvekIsR0FBR0YsRUFBRUMsRUFBRWhmLGVBQWV0RyxXQUFXcWxCLEVBQUUzQixhQUFhM2pCLFFBQVM0akIsZUFBZTRCLEVBQUVBLEVBQUU1QixlQUFlM2YsRUFBRXNoQixFQUFFbGUsWUFBWWpWLE9BQU8wekIsRUFBRXBSLEtBQUt3c0IsSUFBSXhnQyxFQUFFNmlCLE1BQU10ZixHQUFHdkQsT0FBRSxJQUNwZkEsRUFBRTVELElBQUlncEIsRUFBRXBSLEtBQUt3c0IsSUFBSXhnQyxFQUFFNUQsSUFBSW1ILElBQUl1aEIsRUFBRTJiLFFBQVFyYixFQUFFcGxCLElBQUl1RCxFQUFFdkQsRUFBRUEsRUFBRW9sQixFQUFFQSxFQUFFN2hCLEdBQUdBLEVBQUVxZSxHQUFHaUQsRUFBRU8sR0FBR3JsQixFQUFFNmhCLEdBQUdpRCxFQUFFN2tCLEdBQUd1RCxHQUFHeEQsSUFBSSxJQUFJK2tCLEVBQUVzYixZQUFZdGIsRUFBRTlCLGFBQWF6ZixFQUFFckYsTUFBTTRtQixFQUFFM0IsZUFBZTVmLEVBQUUzSSxRQUFRa3FCLEVBQUUxQixZQUFZcmpCLEVBQUU3QixNQUFNNG1CLEVBQUV6QixjQUFjdGpCLEVBQUVuRixXQUFVZ3FCLEVBQUVBLEVBQUU4YixlQUFnQkMsU0FBU3A5QixFQUFFckYsS0FBS3FGLEVBQUUzSSxRQUFRa3FCLEVBQUU4YixrQkFBa0J4YixFQUFFcGxCLEdBQUc4a0IsRUFBRStiLFNBQVNqYyxHQUFHRSxFQUFFMmIsT0FBTzFnQyxFQUFFN0IsS0FBSzZCLEVBQUVuRixVQUFVZ3FCLEVBQUVrYyxPQUFPL2dDLEVBQUU3QixLQUFLNkIsRUFBRW5GLFFBQVFrcUIsRUFBRStiLFNBQVNqYyxPQUFRQSxFQUFFLEdBQUcsSUFBSUUsRUFBRUQsRUFBRUMsRUFBRUEsRUFBRXhZLFlBQVksSUFBSXdZLEVBQUVuZCxVQUFVaWQsRUFBRXIwQixLQUFLLENBQUN3TixRQUFRK21CLEVBQUVpYyxLQUFLamMsRUFBRWtjLFdBQVdDLElBQUluYyxFQUFFb2MsWUFBbUQsSUFBdkMsbUJBQW9CcmMsRUFBRTRXLE9BQU81VyxFQUFFNFcsUUFBWTVXLEVBQ3JmLEVBQUVBLEVBQUVELEVBQUVsekIsT0FBT216QixLQUFJQyxFQUFFRixFQUFFQyxJQUFLOW1CLFFBQVFpakMsV0FBV2xjLEVBQUVpYyxLQUFLamMsRUFBRS9tQixRQUFRbWpDLFVBQVVwYyxFQUFFbWMsSUFBSXhzQixLQUFLb1IsR0FBR0MsR0FBR0QsR0FBRyxLQUFLaG5CLEVBQUVtUSxRQUFRMVQsRUFBRXNpQyxHQUFFOTlCLEVBQUUsT0FBTyxJQUFJK2tCLEVBQUVobUIsRUFBRSxPQUFPKytCLElBQUcsQ0FBQyxJQUFJdlksRUFBRXVZLEdBQUVoa0MsTUFBZ0MsR0FBeEIsR0FBRnlyQixHQUFNaVcsR0FBR3pXLEVBQUUrWSxHQUFFcnZCLFVBQVVxdkIsSUFBUSxJQUFGdlksRUFBTSxDQUFDVCxPQUFFLEVBQU8sSUFBSVUsRUFBRXNZLEdBQUU3TyxJQUFJLEdBQUcsT0FBT3pKLEVBQUUsQ0FBQyxJQUFJQyxFQUFFcVksR0FBRWh4QixVQUFVLE9BQU9neEIsR0FBRW42QixLQUFLLEtBQUssRUFBRW1oQixFQUFFVyxFQUFFLE1BQU0sUUFBUVgsRUFBRVcsRUFBRSxtQkFBb0JELEVBQUVBLEVBQUVWLEdBQUdVLEVBQUV0VyxRQUFRNFYsR0FBR2daLEdBQUVBLEdBQUV2TyxZQUFZLE1BQU0yUSxHQUFJLEdBQUcsT0FBT3BDLEdBQUUsTUFBTTFnQyxNQUFNMEIsRUFBRSxNQUFNdThCLEdBQUd5QyxHQUFFb0MsR0FBSXBDLEdBQUVBLEdBQUV2TyxrQkFBaUIsT0FBT3VPLElBQUdBLEdBQUUsS0FBS2xVLEtBQUt1VCxHQUFFMWxDLE9BQU9zSCxFQUFFbVEsUUFBUTFULEVBQUUsR0FBR3VpQyxHQUFHQSxJQUFHLEVBQUdDLEdBQUdqL0IsRUFBRWsvQixHQUFHai9CLE9BQU8sSUFBSTgrQixHQUFFOTlCLEVBQUUsT0FBTzg5QixJQUFHOStCLEVBQ3BmOCtCLEdBQUV2TyxXQUFXdU8sR0FBRXZPLFdBQVcsS0FBYSxFQUFSdU8sR0FBRWhrQyxTQUFVeXJCLEVBQUV1WSxJQUFJN3VCLFFBQVEsS0FBS3NXLEVBQUV6WSxVQUFVLE1BQU1neEIsR0FBRTkrQixFQUFxRixHQUFsRSxLQUFqQmdCLEVBQUVqQixFQUFFc1UsZ0JBQXFCMm5CLEdBQUcsTUFBTSxJQUFJaDdCLEVBQUVqQixJQUFJdS9CLEdBQUdELE1BQU1BLEdBQUcsRUFBRUMsR0FBR3YvQixHQUFHcy9CLEdBQUcsRUFBRTdpQyxFQUFFQSxFQUFFc1IsVUFBYXliLElBQUksbUJBQW9CQSxHQUFHOFksa0JBQWtCLElBQUk5WSxHQUFHOFksa0JBQWtCL1ksR0FBRzlzQixPQUFFLEVBQU8sS0FBc0IsR0FBaEJBLEVBQUUwVCxRQUFRcFYsUUFBVyxNQUFNb21DLElBQWUsR0FBVm5CLEdBQUdoZ0MsRUFBRWtyQixNQUFRMlEsR0FBRyxNQUFNQSxJQUFHLEVBQUc3N0IsRUFBRTg3QixHQUFHQSxHQUFHLEtBQUs5N0IsRUFBRSxPQUFHLElBQU8sRUFBRm8rQixLQUFpQjdTLEtBQUwsS0FDalcsU0FBU21XLEtBQUssS0FBSyxPQUFPM0MsSUFBRyxDQUFDLElBQUkvK0IsRUFBRSsrQixHQUFFcnZCLFVBQVVrd0IsSUFBSSxPQUFPRCxLQUFLLElBQWEsRUFBUlosR0FBRWhrQyxPQUFTc1YsR0FBRzB1QixHQUFFWSxNQUFNQyxJQUFHLEdBQUksS0FBS2IsR0FBRW42QixLQUFLbTVCLEdBQUcvOUIsRUFBRSsrQixLQUFJMXVCLEdBQUcwdUIsR0FBRVksTUFBTUMsSUFBRyxJQUFLLElBQUkzL0IsRUFBRTgrQixHQUFFaGtDLE1BQU0sSUFBTyxJQUFGa0YsSUFBUXM4QixHQUFHdjhCLEVBQUUrK0IsSUFBRyxJQUFPLElBQUY5K0IsSUFBUSsrQixLQUFLQSxJQUFHLEVBQUcxVCxHQUFHLElBQUcsV0FBZ0IsT0FBTGdWLEtBQVksU0FBUXZCLEdBQUVBLEdBQUV2TyxZQUFZLFNBQVM4UCxLQUFLLEdBQUcsS0FBS3BCLEdBQUcsQ0FBQyxJQUFJbC9CLEVBQUUsR0FBR2svQixHQUFHLEdBQUdBLEdBQVMsT0FBTkEsR0FBRyxHQUFVN1QsR0FBR3JyQixFQUFFdWlDLElBQUksT0FBTSxFQUFHLFNBQVM1RixHQUFHMzhCLEVBQUVDLEdBQUdrL0IsR0FBR3p0QyxLQUFLdU8sRUFBRUQsR0FBR2cvQixLQUFLQSxJQUFHLEVBQUcxVCxHQUFHLElBQUcsV0FBZ0IsT0FBTGdWLEtBQVksU0FBUSxTQUFTNUQsR0FBRzE4QixFQUFFQyxHQUFHbS9CLEdBQUcxdEMsS0FBS3VPLEVBQUVELEdBQUdnL0IsS0FBS0EsSUFBRyxFQUFHMVQsR0FBRyxJQUFHLFdBQWdCLE9BQUxnVixLQUFZLFNBQ3pkLFNBQVNpQyxLQUFLLEdBQUcsT0FBT3RELEdBQUcsT0FBTSxFQUFHLElBQUlqL0IsRUFBRWkvQixHQUFXLEdBQVJBLEdBQUcsS0FBUSxJQUFPLEdBQUZiLElBQU0sTUFBTS8vQixNQUFNMEIsRUFBRSxNQUFNLElBQUlFLEVBQUVtK0IsR0FBRUEsSUFBRyxHQUFHLElBQUkzaEMsRUFBRTJpQyxHQUFHQSxHQUFHLEdBQUcsSUFBSSxJQUFJbitCLEVBQUUsRUFBRUEsRUFBRXhFLEVBQUU1SixPQUFPb08sR0FBRyxFQUFFLENBQUMsSUFBSXZJLEVBQUUrRCxFQUFFd0UsR0FBR0MsRUFBRXpFLEVBQUV3RSxFQUFFLEdBQUdFLEVBQUV6SSxFQUFFbTlCLFFBQXlCLEdBQWpCbjlCLEVBQUVtOUIsYUFBUSxFQUFVLG1CQUFvQjEwQixFQUFFLElBQUlBLElBQUksTUFBTXNELEdBQUcsR0FBRyxPQUFPdkQsRUFBRSxNQUFNN0MsTUFBTTBCLEVBQUUsTUFBTXU4QixHQUFHcDdCLEVBQUV1RCxJQUFlLElBQVhoSSxFQUFFMGlDLEdBQUdBLEdBQUcsR0FBT2wrQixFQUFFLEVBQUVBLEVBQUV4RSxFQUFFNUosT0FBT29PLEdBQUcsRUFBRSxDQUFDdkksRUFBRStELEVBQUV3RSxHQUFHQyxFQUFFekUsRUFBRXdFLEVBQUUsR0FBRyxJQUFJLElBQUl5RCxFQUFFaE0sRUFBRWs5QixPQUFPbDlCLEVBQUVtOUIsUUFBUW54QixJQUFJLE1BQU1ELEdBQUcsR0FBRyxPQUFPdkQsRUFBRSxNQUFNN0MsTUFBTTBCLEVBQUUsTUFBTXU4QixHQUFHcDdCLEVBQUV1RCxJQUFJLElBQUlDLEVBQUUxRSxFQUFFbVEsUUFBUXNnQixZQUFZLE9BQU8vckIsR0FBRzFFLEVBQUUwRSxFQUFFOHJCLFdBQVc5ckIsRUFBRThyQixXQUFXLEtBQWEsRUFBUjlyQixFQUFFM0osUUFBVTJKLEVBQUV3TCxRQUNqZixLQUFLeEwsRUFBRXFKLFVBQVUsTUFBTXJKLEVBQUUxRSxFQUFXLE9BQVRvK0IsR0FBRW4rQixFQUFFc3JCLE1BQVcsRUFBRyxTQUFTaVgsR0FBR3hpQyxFQUFFQyxFQUFFeEQsR0FBeUJveEIsR0FBRzd0QixFQUFmQyxFQUFFMjdCLEdBQUc1N0IsRUFBZkMsRUFBRW83QixHQUFHNStCLEVBQUV3RCxHQUFZLElBQVdBLEVBQUU0dUIsS0FBZSxRQUFWN3VCLEVBQUU4L0IsR0FBRzkvQixFQUFFLE1BQWNpVixHQUFHalYsRUFBRSxFQUFFQyxHQUFHKy9CLEdBQUdoZ0MsRUFBRUMsSUFDekksU0FBU3E4QixHQUFHdDhCLEVBQUVDLEdBQUcsR0FBRyxJQUFJRCxFQUFFNEUsSUFBSTQ5QixHQUFHeGlDLEVBQUVBLEVBQUVDLFFBQVEsSUFBSSxJQUFJeEQsRUFBRXVELEVBQUUyUCxPQUFPLE9BQU9sVCxHQUFHLENBQUMsR0FBRyxJQUFJQSxFQUFFbUksSUFBSSxDQUFDNDlCLEdBQUcvbEMsRUFBRXVELEVBQUVDLEdBQUcsTUFBVyxHQUFHLElBQUl4RCxFQUFFbUksSUFBSSxDQUFDLElBQUkzRCxFQUFFeEUsRUFBRXNSLFVBQVUsR0FBRyxtQkFBb0J0UixFQUFFOUYsS0FBS0osMEJBQTBCLG1CQUFvQjBLLEVBQUUrNkIsb0JBQW9CLE9BQU9DLEtBQUtBLEdBQUc5VyxJQUFJbGtCLElBQUksQ0FBVyxJQUFJdkksRUFBRXFqQyxHQUFHdC9CLEVBQW5CdUQsRUFBRXE3QixHQUFHcDdCLEVBQUVELEdBQWdCLEdBQTRCLEdBQXpCNnRCLEdBQUdweEIsRUFBRS9ELEdBQUdBLEVBQUVtMkIsS0FBa0IsUUFBYnB5QixFQUFFcWpDLEdBQUdyakMsRUFBRSxJQUFld1ksR0FBR3hZLEVBQUUsRUFBRS9ELEdBQUdzbkMsR0FBR3ZqQyxFQUFFL0QsUUFBUSxHQUFHLG1CQUFvQnVJLEVBQUUrNkIsb0JBQW9CLE9BQU9DLEtBQUtBLEdBQUc5VyxJQUFJbGtCLElBQUksSUFBSUEsRUFBRSs2QixrQkFBa0IvN0IsRUFBRUQsR0FBRyxNQUFNa0IsSUFBSSxPQUFPekUsRUFBRUEsRUFBRWtULFFBQ3BkLFNBQVNzeEIsR0FBR2poQyxFQUFFQyxFQUFFeEQsR0FBRyxJQUFJd0UsRUFBRWpCLEVBQUVnaEMsVUFBVSxPQUFPLy9CLEdBQUdBLEVBQUUwUSxPQUFPMVIsR0FBR0EsRUFBRTR1QixLQUFLN3VCLEVBQUV5VSxhQUFhelUsRUFBRXdVLGVBQWUvWCxFQUFFeTRCLEtBQUlsMUIsSUFBSWk3QixHQUFFeCtCLEtBQUtBLElBQUksSUFBSXErQixJQUFHLElBQUlBLEtBQU0sU0FBRkcsTUFBY0EsSUFBRyxJQUFJL1AsS0FBSXlTLEdBQUc2QyxHQUFHeGdDLEVBQUUsR0FBRzArQixJQUFJamlDLEdBQUd1akMsR0FBR2hnQyxFQUFFQyxHQUFHLFNBQVM0OUIsR0FBRzc5QixFQUFFQyxHQUFHLElBQUl4RCxFQUFFdUQsRUFBRStOLFVBQVUsT0FBT3RSLEdBQUdBLEVBQUVrVixPQUFPMVIsR0FBTyxJQUFKQSxFQUFFLEtBQW1CLElBQU8sR0FBaEJBLEVBQUVELEVBQUU0d0IsT0FBZTN3QixFQUFFLEVBQUUsSUFBTyxFQUFGQSxHQUFLQSxFQUFFLEtBQUtrckIsS0FBSyxFQUFFLEdBQUcsSUFBSXNVLEtBQUtBLEdBQUdoQixJQUF1QixLQUFuQngrQixFQUFFOFUsR0FBRyxVQUFVMHFCLE9BQVl4L0IsRUFBRSxXQUFXeEQsRUFBRW95QixLQUFlLFFBQVY3dUIsRUFBRTgvQixHQUFHOS9CLEVBQUVDLE1BQWNnVixHQUFHalYsRUFBRUMsRUFBRXhELEdBQUd1akMsR0FBR2hnQyxFQUFFdkQsSUFValosU0FBU2dtQyxHQUFHemlDLEVBQUVDLEVBQUV4RCxFQUFFd0UsR0FBRy9PLEtBQUswUyxJQUFJNUUsRUFBRTlOLEtBQUtzRyxJQUFJaUUsRUFBRXZLLEtBQUtnZSxRQUFRaGUsS0FBSytkLE1BQU0vZCxLQUFLeWQsT0FBT3pkLEtBQUs2YixVQUFVN2IsS0FBS3lFLEtBQUt6RSxLQUFLaU4sWUFBWSxLQUFLak4sS0FBS3dKLE1BQU0sRUFBRXhKLEtBQUtnK0IsSUFBSSxLQUFLaCtCLEtBQUtzZ0MsYUFBYXZ5QixFQUFFL04sS0FBS282QixhQUFhcDZCLEtBQUsyZCxjQUFjM2QsS0FBSzg2QixZQUFZOTZCLEtBQUs4L0IsY0FBYyxLQUFLOS9CLEtBQUswK0IsS0FBSzN2QixFQUFFL08sS0FBSzZJLE1BQU0sRUFBRTdJLEtBQUtxK0IsV0FBV3IrQixLQUFLdStCLFlBQVl2K0IsS0FBS3MrQixXQUFXLEtBQUt0K0IsS0FBS2s2QixXQUFXbDZCLEtBQUtzNkIsTUFBTSxFQUFFdDZCLEtBQUt3ZCxVQUFVLEtBQUssU0FBUzRpQixHQUFHdHlCLEVBQUVDLEVBQUV4RCxFQUFFd0UsR0FBRyxPQUFPLElBQUl3aEMsR0FBR3ppQyxFQUFFQyxFQUFFeEQsRUFBRXdFLEdBQUcsU0FBU2czQixHQUFHajRCLEdBQWlCLFVBQWRBLEVBQUVBLEVBQUV4TCxhQUF1QndMLEVBQUUwaUMsa0JBRXJkLFNBQVNoUyxHQUFHMXdCLEVBQUVDLEdBQUcsSUFBSXhELEVBQUV1RCxFQUFFMFAsVUFDdUIsT0FEYixPQUFPalQsSUFBR0EsRUFBRTYxQixHQUFHdHlCLEVBQUU0RSxJQUFJM0UsRUFBRUQsRUFBRXhILElBQUl3SCxFQUFFNHdCLE9BQVF6eEIsWUFBWWEsRUFBRWIsWUFBWTFDLEVBQUU5RixLQUFLcUosRUFBRXJKLEtBQUs4RixFQUFFc1IsVUFBVS9OLEVBQUUrTixVQUFVdFIsRUFBRWlULFVBQVUxUCxFQUFFQSxFQUFFMFAsVUFBVWpULElBQUlBLEVBQUUrMUIsYUFBYXZ5QixFQUFFeEQsRUFBRTlGLEtBQUtxSixFQUFFckosS0FBSzhGLEVBQUUxQixNQUFNLEVBQUUwQixFQUFFK3pCLFdBQVcsS0FBSy96QixFQUFFZzBCLFlBQVksS0FBS2gwQixFQUFFOHpCLFdBQVcsTUFBTTl6QixFQUFFMnZCLFdBQVdwc0IsRUFBRW9zQixXQUFXM3ZCLEVBQUUrdkIsTUFBTXhzQixFQUFFd3NCLE1BQU0vdkIsRUFBRXdULE1BQU1qUSxFQUFFaVEsTUFBTXhULEVBQUV1MUIsY0FBY2h5QixFQUFFZ3lCLGNBQWN2MUIsRUFBRW9ULGNBQWM3UCxFQUFFNlAsY0FBY3BULEVBQUV1d0IsWUFBWWh0QixFQUFFZ3RCLFlBQVkvc0IsRUFBRUQsRUFBRXNzQixhQUFhN3ZCLEVBQUU2dkIsYUFBYSxPQUFPcnNCLEVBQUUsS0FBSyxDQUFDdXNCLE1BQU12c0IsRUFBRXVzQixNQUFNRCxhQUFhdHNCLEVBQUVzc0IsY0FDM2U5dkIsRUFBRXlULFFBQVFsUSxFQUFFa1EsUUFBUXpULEVBQUVmLE1BQU1zRSxFQUFFdEUsTUFBTWUsRUFBRXl6QixJQUFJbHdCLEVBQUVrd0IsSUFBV3p6QixFQUN2RCxTQUFTbzBCLEdBQUc3d0IsRUFBRUMsRUFBRXhELEVBQUV3RSxFQUFFdkksRUFBRXdJLEdBQUcsSUFBSUMsRUFBRSxFQUFNLEdBQUpGLEVBQUVqQixFQUFLLG1CQUFvQkEsRUFBRWk0QixHQUFHajRCLEtBQUttQixFQUFFLFFBQVEsR0FBRyxpQkFBa0JuQixFQUFFbUIsRUFBRSxPQUFPbkIsRUFBRSxPQUFPQSxHQUFHLEtBQUs0QyxFQUFHLE9BQU9vdUIsR0FBR3YwQixFQUFFeUssU0FBU3hPLEVBQUV3SSxFQUFFakIsR0FBRyxLQUFLdUQsRUFBR3JDLEVBQUUsRUFBRXpJLEdBQUcsR0FBRyxNQUFNLEtBQUttSyxFQUFHMUIsRUFBRSxFQUFFekksR0FBRyxFQUFFLE1BQU0sS0FBS29LLEVBQUcsT0FBTzlDLEVBQUVzeUIsR0FBRyxHQUFHNzFCLEVBQUV3RCxFQUFJLEVBQUZ2SCxJQUFPeUcsWUFBWTJELEVBQUc5QyxFQUFFckosS0FBS21NLEVBQUc5QyxFQUFFd3NCLE1BQU10ckIsRUFBRWxCLEVBQUUsS0FBS2tELEVBQUcsT0FBT2xELEVBQUVzeUIsR0FBRyxHQUFHNzFCLEVBQUV3RCxFQUFFdkgsSUFBSy9CLEtBQUt1TSxFQUFHbEQsRUFBRWIsWUFBWStELEVBQUdsRCxFQUFFd3NCLE1BQU10ckIsRUFBRWxCLEVBQUUsS0FBS21ELEVBQUcsT0FBT25ELEVBQUVzeUIsR0FBRyxHQUFHNzFCLEVBQUV3RCxFQUFFdkgsSUFBS3lHLFlBQVlnRSxFQUFHbkQsRUFBRXdzQixNQUFNdHJCLEVBQUVsQixFQUFFLEtBQUt5RCxFQUFHLE9BQU9nMkIsR0FBR2g5QixFQUFFL0QsRUFBRXdJLEVBQUVqQixHQUFHLEtBQUt5RCxFQUFHLE9BQU8xRCxFQUFFc3lCLEdBQUcsR0FBRzcxQixFQUFFd0QsRUFBRXZILElBQUt5RyxZQUFZdUUsRUFBRzFELEVBQUV3c0IsTUFBTXRyQixFQUFFbEIsRUFBRSxRQUFRLEdBQUcsaUJBQ2hmQSxHQUFHLE9BQU9BLEVBQUUsT0FBT0EsRUFBRStFLFVBQVUsS0FBS2hDLEVBQUc1QixFQUFFLEdBQUcsTUFBTW5CLEVBQUUsS0FBS2dELEVBQUc3QixFQUFFLEVBQUUsTUFBTW5CLEVBQUUsS0FBS2lELEVBQUc5QixFQUFFLEdBQUcsTUFBTW5CLEVBQUUsS0FBS29ELEVBQUdqQyxFQUFFLEdBQUcsTUFBTW5CLEVBQUUsS0FBS3FELEVBQUdsQyxFQUFFLEdBQUdGLEVBQUUsS0FBSyxNQUFNakIsRUFBRSxLQUFLc0QsRUFBR25DLEVBQUUsR0FBRyxNQUFNbkIsRUFBRSxNQUFNM0IsTUFBTTBCLEVBQUUsSUFBSSxNQUFNQyxFQUFFQSxTQUFTQSxFQUFFLEtBQXVELE9BQWpEQyxFQUFFcXlCLEdBQUdueEIsRUFBRTFFLEVBQUV3RCxFQUFFdkgsSUFBS3lHLFlBQVlhLEVBQUVDLEVBQUV0SixLQUFLc0ssRUFBRWhCLEVBQUV1c0IsTUFBTXRyQixFQUFTakIsRUFBRSxTQUFTK3dCLEdBQUdoeEIsRUFBRUMsRUFBRXhELEVBQUV3RSxHQUEyQixPQUF4QmpCLEVBQUVzeUIsR0FBRyxFQUFFdHlCLEVBQUVpQixFQUFFaEIsSUFBS3VzQixNQUFNL3ZCLEVBQVN1RCxFQUFFLFNBQVN5NUIsR0FBR3o1QixFQUFFQyxFQUFFeEQsRUFBRXdFLEdBQTZDLE9BQTFDakIsRUFBRXN5QixHQUFHLEdBQUd0eUIsRUFBRWlCLEVBQUVoQixJQUFLZCxZQUFZc0UsRUFBR3pELEVBQUV3c0IsTUFBTS92QixFQUFTdUQsRUFBRSxTQUFTMndCLEdBQUczd0IsRUFBRUMsRUFBRXhELEdBQThCLE9BQTNCdUQsRUFBRXN5QixHQUFHLEVBQUV0eUIsRUFBRSxLQUFLQyxJQUFLdXNCLE1BQU0vdkIsRUFBU3VELEVBQ2xjLFNBQVMrd0IsR0FBRy93QixFQUFFQyxFQUFFeEQsR0FBOEosT0FBM0p3RCxFQUFFcXlCLEdBQUcsRUFBRSxPQUFPdHlCLEVBQUVrSCxTQUFTbEgsRUFBRWtILFNBQVMsR0FBR2xILEVBQUV4SCxJQUFJeUgsSUFBS3VzQixNQUFNL3ZCLEVBQUV3RCxFQUFFOE4sVUFBVSxDQUFDcUUsY0FBY3BTLEVBQUVvUyxjQUFjdXdCLGdCQUFnQixLQUFLN1IsZUFBZTl3QixFQUFFOHdCLGdCQUF1Qjd3QixFQUNyTCxTQUFTMmlDLEdBQUc1aUMsRUFBRUMsRUFBRXhELEdBQUd2SyxLQUFLMFMsSUFBSTNFLEVBQUUvTixLQUFLa2dCLGNBQWNwUyxFQUFFOU4sS0FBSzB1QyxhQUFhMXVDLEtBQUs4dUMsVUFBVTl1QyxLQUFLaWUsUUFBUWplLEtBQUt5d0MsZ0JBQWdCLEtBQUt6d0MsS0FBSzZ1QyxlQUFlLEVBQUU3dUMsS0FBSzRtQyxlQUFlNW1DLEtBQUt5NkIsUUFBUSxLQUFLejZCLEtBQUtpZ0IsUUFBUTFWLEVBQUV2SyxLQUFLK3RDLGFBQWEsS0FBSy90QyxLQUFLaXVDLGlCQUFpQixFQUFFanVDLEtBQUtnakIsV0FBV0YsR0FBRyxHQUFHOWlCLEtBQUtndUMsZ0JBQWdCbHJCLElBQUksR0FBRzlpQixLQUFLeWlCLGVBQWV6aUIsS0FBSzJ1QyxjQUFjM3VDLEtBQUs4aUMsaUJBQWlCOWlDLEtBQUtxaUIsYUFBYXJpQixLQUFLdWlCLFlBQVl2aUIsS0FBS3NpQixlQUFldGlCLEtBQUtvaUIsYUFBYSxFQUFFcGlCLEtBQUswaUIsY0FBY0ksR0FBRyxHQUFHOWlCLEtBQUsyd0MsZ0NBQWdDLEtBRTdlLFNBQVNDLEdBQUc5aUMsRUFBRUMsRUFBRXhELEVBQUV3RSxHQUFHLElBQUl2SSxFQUFFdUgsRUFBRWtRLFFBQVFqUCxFQUFFMnRCLEtBQUsxdEIsRUFBRTJ0QixHQUFHcDJCLEdBQUdzSCxFQUFFLEdBQUd2RCxFQUFFLENBQXFCd0QsRUFBRSxDQUFDLEdBQUd3UCxHQUExQmhULEVBQUVBLEVBQUVreUIsbUJBQThCbHlCLEdBQUcsSUFBSUEsRUFBRW1JLElBQUksTUFBTXZHLE1BQU0wQixFQUFFLE1BQU0sSUFBSTJFLEVBQUVqSSxFQUFFLEVBQUUsQ0FBQyxPQUFPaUksRUFBRUUsS0FBSyxLQUFLLEVBQUVGLEVBQUVBLEVBQUVxSixVQUFVNGUsUUFBUSxNQUFNMXNCLEVBQUUsS0FBSyxFQUFFLEdBQUc4b0IsR0FBR3JrQixFQUFFL04sTUFBTSxDQUFDK04sRUFBRUEsRUFBRXFKLFVBQVVzYiwwQ0FBMEMsTUFBTXBwQixHQUFHeUUsRUFBRUEsRUFBRWlMLGFBQWEsT0FBT2pMLEdBQUcsTUFBTXJHLE1BQU0wQixFQUFFLE1BQU8sR0FBRyxJQUFJdEQsRUFBRW1JLElBQUksQ0FBQyxJQUFJSCxFQUFFaEksRUFBRTlGLEtBQUssR0FBR295QixHQUFHdGtCLEdBQUcsQ0FBQ2hJLEVBQUV5c0IsR0FBR3pzQixFQUFFZ0ksRUFBRUMsR0FBRyxNQUFNMUUsR0FBR3ZELEVBQUVpSSxPQUFPakksRUFBRStyQixHQUNyVyxPQUR3VyxPQUFPdm9CLEVBQUUwc0IsUUFBUTFzQixFQUFFMHNCLFFBQVFsd0IsRUFBRXdELEVBQUU2NEIsZUFBZXI4QixHQUFFd0QsRUFBRXV0QixHQUFHdHNCLEVBQUVDLElBQUt3c0IsUUFBUSxDQUFDenVCLFFBQVFjLEdBQXVCLFFBQXBCaUIsT0FBRSxJQUFTQSxFQUFFLEtBQUtBLEtBQzFlaEIsRUFBRTJ0QixTQUFTM3NCLEdBQUc0c0IsR0FBR24xQixFQUFFdUgsR0FBRzh1QixHQUFHcjJCLEVBQUV5SSxFQUFFRCxHQUFVQyxFQUFFLFNBQVM0aEMsR0FBRy9pQyxHQUFlLEtBQVpBLEVBQUVBLEVBQUVtUSxTQUFjRixNQUFNLE9BQU8sS0FBSyxPQUFPalEsRUFBRWlRLE1BQU1yTCxLQUFLLEtBQUssRUFBMkIsUUFBUSxPQUFPNUUsRUFBRWlRLE1BQU1sQyxXQUFXLFNBQVNpMUIsR0FBR2hqQyxFQUFFQyxHQUFxQixHQUFHLFFBQXJCRCxFQUFFQSxFQUFFNlAsZ0JBQTJCLE9BQU83UCxFQUFFOFAsV0FBVyxDQUFDLElBQUlyVCxFQUFFdUQsRUFBRW01QixVQUFVbjVCLEVBQUVtNUIsVUFBVSxJQUFJMThCLEdBQUdBLEVBQUV3RCxFQUFFeEQsRUFBRXdELEdBQUcsU0FBU2dqQyxHQUFHampDLEVBQUVDLEdBQUcraUMsR0FBR2hqQyxFQUFFQyxJQUFJRCxFQUFFQSxFQUFFMFAsWUFBWXN6QixHQUFHaGpDLEVBQUVDLEdBQ3hWLFNBQVNpakMsR0FBR2xqQyxFQUFFQyxFQUFFeEQsR0FBRyxJQUFJd0UsRUFBRSxNQUFNeEUsR0FBRyxNQUFNQSxFQUFFMG1DLGtCQUFrQjFtQyxFQUFFMG1DLGlCQUFpQkMsZ0JBQWdCLEtBQWlLLEdBQTVKM21DLEVBQUUsSUFBSW1tQyxHQUFHNWlDLEVBQUVDLEVBQUUsTUFBTXhELElBQUcsSUFBS0EsRUFBRTBWLFNBQVNsUyxFQUFFcXlCLEdBQUcsRUFBRSxLQUFLLEtBQUssSUFBSXJ5QixFQUFFLEVBQUUsSUFBSUEsRUFBRSxFQUFFLEdBQUd4RCxFQUFFMFQsUUFBUWxRLEVBQUVBLEVBQUU4TixVQUFVdFIsRUFBRXN3QixHQUFHOXNCLEdBQUdELEVBQUVtbUIsSUFBSTFwQixFQUFFMFQsUUFBUW9WLEdBQUcsSUFBSXZsQixFQUFFOEksU0FBUzlJLEVBQUV5TixXQUFXek4sR0FBTWlCLEVBQUUsSUFBSWpCLEVBQUUsRUFBRUEsRUFBRWlCLEVBQUVwTyxPQUFPbU4sSUFBSSxDQUFRLElBQUl0SCxHQUFYdUgsRUFBRWdCLEVBQUVqQixJQUFXODBCLFlBQVlwOEIsRUFBRUEsRUFBRXVILEVBQUU4MEIsU0FBUyxNQUFNdDRCLEVBQUVvbUMsZ0NBQWdDcG1DLEVBQUVvbUMsZ0NBQWdDLENBQUM1aUMsRUFBRXZILEdBQUcrRCxFQUFFb21DLGdDQUFnQ254QyxLQUFLdU8sRUFBRXZILEdBQUd4RyxLQUFLbXhDLGNBQWM1bUMsRUFDL1IsU0FBUzZtQyxHQUFHdGpDLEdBQUcsU0FBU0EsR0FBRyxJQUFJQSxFQUFFOEksVUFBVSxJQUFJOUksRUFBRThJLFVBQVUsS0FBSzlJLEVBQUU4SSxXQUFXLElBQUk5SSxFQUFFOEksVUFBVSxpQ0FBaUM5SSxFQUFFK0ksWUFFdlQsU0FBU3c2QixHQUFHdmpDLEVBQUVDLEVBQUV4RCxFQUFFd0UsRUFBRXZJLEdBQUcsSUFBSXdJLEVBQUV6RSxFQUFFZ2hDLG9CQUFvQixHQUFHdjhCLEVBQUUsQ0FBQyxJQUFJQyxFQUFFRCxFQUFFbWlDLGNBQWMsR0FBRyxtQkFBb0IzcUMsRUFBRSxDQUFDLElBQUlnTSxFQUFFaE0sRUFBRUEsRUFBRSxXQUFXLElBQUlzSCxFQUFFK2lDLEdBQUc1aEMsR0FBR3VELEVBQUVqUSxLQUFLdUwsSUFBSThpQyxHQUFHN2lDLEVBQUVrQixFQUFFbkIsRUFBRXRILE9BQU8sQ0FBbUQsR0FBbER3SSxFQUFFekUsRUFBRWdoQyxvQkFEMUssU0FBWXo5QixFQUFFQyxHQUEwSCxHQUF2SEEsSUFBMkRBLE1BQXZEQSxFQUFFRCxFQUFFLElBQUlBLEVBQUU4SSxTQUFTOUksRUFBRXl4QixnQkFBZ0J6eEIsRUFBRXVJLFdBQVcsT0FBYSxJQUFJdEksRUFBRTZJLFdBQVc3SSxFQUFFdWpDLGFBQWEscUJBQXdCdmpDLEVBQUUsSUFBSSxJQUFJeEQsRUFBRUEsRUFBRXVELEVBQUU2SSxXQUFXN0ksRUFBRXdJLFlBQVkvTCxHQUFHLE9BQU8sSUFBSXltQyxHQUFHbGpDLEVBQUUsRUFBRUMsRUFBRSxDQUFDa1MsU0FBUSxRQUFJLEdBQzNCc3hCLENBQUdobkMsRUFBRXdFLEdBQUdFLEVBQUVELEVBQUVtaUMsY0FBaUIsbUJBQW9CM3FDLEVBQUUsQ0FBQyxJQUFJK0wsRUFBRS9MLEVBQUVBLEVBQUUsV0FBVyxJQUFJc0gsRUFBRStpQyxHQUFHNWhDLEdBQUdzRCxFQUFFaFEsS0FBS3VMLEtBN0N0RixTQUFZQSxFQUFFQyxHQUFHLElBQUl4RCxFQUFFMmhDLEdBQUVBLEtBQUksRUFBRUEsSUFBRyxFQUFFLElBQVdwK0IsRUFBRUMsR0FBRyxRQUFZLEtBQUptK0IsR0FBRTNoQyxLQUFVb2lDLEtBQUt0VCxPQTZDYW1ZLEVBQUcsV0FBV1osR0FBRzdpQyxFQUFFa0IsRUFBRW5CLEVBQUV0SCxNQUFLLE9BQU9xcUMsR0FBRzVoQyxHQXZCcFUyOUIsR0FBRyxTQUFTOStCLEVBQUVDLEVBQUV4RCxHQUFHLElBQUl3RSxFQUFFaEIsRUFBRXVzQixNQUFNLEdBQUcsT0FBT3hzQixFQUFFLEdBQUdBLEVBQUVneUIsZ0JBQWdCL3hCLEVBQUV1eUIsY0FBYzlKLEdBQUV2WSxRQUFRc2MsSUFBRyxNQUFRLElBQUcsSUFBS2h3QixFQUFFd0UsR0FBb0MsQ0FBTyxPQUFOd3JCLElBQUcsRUFBVXhzQixFQUFFMkUsS0FBSyxLQUFLLEVBQUVpMEIsR0FBRzU0QixHQUFHMnlCLEtBQUssTUFBTSxLQUFLLEVBQUVoQixHQUFHM3hCLEdBQUcsTUFBTSxLQUFLLEVBQUU4b0IsR0FBRzlvQixFQUFFdEosT0FBT3l5QixHQUFHbnBCLEdBQUcsTUFBTSxLQUFLLEVBQUV1eEIsR0FBR3Z4QixFQUFFQSxFQUFFOE4sVUFBVXFFLGVBQWUsTUFBTSxLQUFLLEdBQUduUixFQUFFaEIsRUFBRSt4QixjQUFjOTlCLE1BQU0sSUFBSXdFLEVBQUV1SCxFQUFFdEosS0FBS3FPLFNBQVN1akIsR0FBRXFELEdBQUdsekIsRUFBRXd6QixlQUFleHpCLEVBQUV3ekIsY0FBY2pyQixFQUFFLE1BQU0sS0FBSyxHQUFHLEdBQUcsT0FBT2hCLEVBQUU0UCxjQUFlLE9BQUcsSUFBS3BULEVBQUV3RCxFQUFFZ1EsTUFBTW1jLFlBQW1CZ04sR0FBR3A1QixFQUFFQyxFQUFFeEQsSUFBRzhyQixHQUFFdUosR0FBWSxFQUFWQSxHQUFFM2hCLFNBQThCLFFBQW5CbFEsRUFBRTgzQixHQUFHLzNCLEVBQUVDLEVBQUV4RCxJQUMvZXdELEVBQUVpUSxRQUFRLE1BQUtxWSxHQUFFdUosR0FBWSxFQUFWQSxHQUFFM2hCLFNBQVcsTUFBTSxLQUFLLEdBQTBCLEdBQXZCbFAsRUFBRSxJQUFLeEUsRUFBRXdELEVBQUVtc0IsWUFBZSxJQUFhLEdBQVJwc0IsRUFBRWpGLE9BQVUsQ0FBQyxHQUFHa0csRUFBRSxPQUFPbTVCLEdBQUdwNkIsRUFBRUMsRUFBRXhELEdBQUd3RCxFQUFFbEYsT0FBTyxHQUErRixHQUExRSxRQUFsQnJDLEVBQUV1SCxFQUFFNFAsaUJBQXlCblgsRUFBRXFoQyxVQUFVLEtBQUtyaEMsRUFBRXdoQyxLQUFLLEtBQUt4aEMsRUFBRTYzQixXQUFXLE1BQU1oSSxHQUFFdUosR0FBRUEsR0FBRTNoQixTQUFZbFAsRUFBRSxNQUFXLE9BQU8sS0FBSyxLQUFLLEdBQUcsS0FBSyxHQUFHLE9BQU9oQixFQUFFdXNCLE1BQU0sRUFBRTRMLEdBQUdwNEIsRUFBRUMsRUFBRXhELEdBQUcsT0FBT3M3QixHQUFHLzNCLEVBQUVDLEVBQUV4RCxHQUQzTGd3QixHQUFHLElBQWEsTUFBUnpzQixFQUFFakYsWUFDeUwweEIsSUFBRyxFQUFhLE9BQVZ4c0IsRUFBRXVzQixNQUFNLEVBQVN2c0IsRUFBRTJFLEtBQUssS0FBSyxFQUErSSxHQUE3STNELEVBQUVoQixFQUFFdEosS0FBSyxPQUFPcUosSUFBSUEsRUFBRTBQLFVBQVUsS0FBS3pQLEVBQUV5UCxVQUFVLEtBQUt6UCxFQUFFbEYsT0FBTyxHQUFHaUYsRUFBRUMsRUFBRXV5QixhQUFhOTVCLEVBQUVrd0IsR0FBRzNvQixFQUFFd29CLEdBQUV0WSxTQUFTa2MsR0FBR3BzQixFQUFFeEQsR0FBRy9ELEVBQUVpN0IsR0FBRyxLQUFLMXpCLEVBQUVnQixFQUFFakIsRUFBRXRILEVBQUUrRCxHQUFHd0QsRUFBRWxGLE9BQU8sRUFBSyxpQkFDcmVyQyxHQUFHLE9BQU9BLEdBQUcsbUJBQW9CQSxFQUFFbEIsYUFBUSxJQUFTa0IsRUFBRXFNLFNBQVMsQ0FBaUQsR0FBaEQ5RSxFQUFFMkUsSUFBSSxFQUFFM0UsRUFBRTRQLGNBQWMsS0FBSzVQLEVBQUUrc0IsWUFBWSxLQUFRakUsR0FBRzluQixHQUFHLENBQUMsSUFBSUMsR0FBRSxFQUFHa29CLEdBQUducEIsUUFBUWlCLEdBQUUsRUFBR2pCLEVBQUU0UCxjQUFjLE9BQU9uWCxFQUFFNDJCLFlBQU8sSUFBUzUyQixFQUFFNDJCLE1BQU01MkIsRUFBRTQyQixNQUFNLEtBQUt2QyxHQUFHOXNCLEdBQUcsSUFBSWtCLEVBQUVGLEVBQUV6Syx5QkFBeUIsbUJBQW9CMkssR0FBR3F0QixHQUFHdnVCLEVBQUVnQixFQUFFRSxFQUFFbkIsR0FBR3RILEVBQUU2MkIsUUFBUWQsR0FBR3h1QixFQUFFOE4sVUFBVXJWLEVBQUVBLEVBQUVpMkIsZ0JBQWdCMXVCLEVBQUUwdkIsR0FBRzF2QixFQUFFZ0IsRUFBRWpCLEVBQUV2RCxHQUFHd0QsRUFBRTI0QixHQUFHLEtBQUszNEIsRUFBRWdCLEdBQUUsRUFBR0MsRUFBRXpFLFFBQVF3RCxFQUFFMkUsSUFBSSxFQUFFaXpCLEdBQUcsS0FBSzUzQixFQUFFdkgsRUFBRStELEdBQUd3RCxFQUFFQSxFQUFFZ1EsTUFBTSxPQUFPaFEsRUFBRSxLQUFLLEdBQUd2SCxFQUFFdUgsRUFBRWQsWUFBWWEsRUFBRSxDQUNoWCxPQURpWCxPQUFPQSxJQUFJQSxFQUFFMFAsVUFBVSxLQUFLelAsRUFBRXlQLFVBQVUsS0FBS3pQLEVBQUVsRixPQUFPLEdBQ25maUYsRUFBRUMsRUFBRXV5QixhQUF1Qjk1QixHQUFWd0ksRUFBRXhJLEVBQUV3TSxPQUFVeE0sRUFBRXVNLFVBQVVoRixFQUFFdEosS0FBSytCLEVBQUV3SSxFQUFFakIsRUFBRTJFLElBT3hELFNBQVk1RSxHQUFHLEdBQUcsbUJBQW9CQSxFQUFFLE9BQU9pNEIsR0FBR2o0QixHQUFHLEVBQUUsRUFBRSxHQUFHLE1BQVNBLEVBQVksQ0FBYyxJQUFiQSxFQUFFQSxFQUFFK0UsWUFBZ0I5QixFQUFHLE9BQU8sR0FBRyxHQUFHakQsSUFBSW9ELEVBQUcsT0FBTyxHQUFHLE9BQU8sRUFQbEZ1Z0MsQ0FBR2pyQyxHQUFHc0gsRUFBRTJyQixHQUFHanpCLEVBQUVzSCxHQUFVa0IsR0FBRyxLQUFLLEVBQUVqQixFQUFFazRCLEdBQUcsS0FBS2w0QixFQUFFdkgsRUFBRXNILEVBQUV2RCxHQUFHLE1BQU11RCxFQUFFLEtBQUssRUFBRUMsRUFBRXU0QixHQUFHLEtBQUt2NEIsRUFBRXZILEVBQUVzSCxFQUFFdkQsR0FBRyxNQUFNdUQsRUFBRSxLQUFLLEdBQUdDLEVBQUU2M0IsR0FBRyxLQUFLNzNCLEVBQUV2SCxFQUFFc0gsRUFBRXZELEdBQUcsTUFBTXVELEVBQUUsS0FBSyxHQUFHQyxFQUFFKzNCLEdBQUcsS0FBSy8zQixFQUFFdkgsRUFBRWl6QixHQUFHanpCLEVBQUUvQixLQUFLcUosR0FBR2lCLEVBQUV4RSxHQUFHLE1BQU11RCxFQUFFLE1BQU0zQixNQUFNMEIsRUFBRSxJQUFJckgsRUFBRSxLQUFNLE9BQU91SCxFQUFFLEtBQUssRUFBRSxPQUFPZ0IsRUFBRWhCLEVBQUV0SixLQUFLK0IsRUFBRXVILEVBQUV1eUIsYUFBMkMyRixHQUFHbjRCLEVBQUVDLEVBQUVnQixFQUFyQ3ZJLEVBQUV1SCxFQUFFZCxjQUFjOEIsRUFBRXZJLEVBQUVpekIsR0FBRzFxQixFQUFFdkksR0FBYytELEdBQUcsS0FBSyxFQUFFLE9BQU93RSxFQUFFaEIsRUFBRXRKLEtBQUsrQixFQUFFdUgsRUFBRXV5QixhQUEyQ2dHLEdBQUd4NEIsRUFBRUMsRUFBRWdCLEVBQXJDdkksRUFBRXVILEVBQUVkLGNBQWM4QixFQUFFdkksRUFBRWl6QixHQUFHMXFCLEVBQUV2SSxHQUFjK0QsR0FBRyxLQUFLLEVBQXdCLEdBQXRCbzhCLEdBQUc1NEIsR0FBR2dCLEVBQUVoQixFQUFFK3NCLFlBQWUsT0FBT2h0QixHQUFHLE9BQU9pQixFQUFFLE1BQU01QyxNQUFNMEIsRUFBRSxNQUMzWSxHQUE5R2tCLEVBQUVoQixFQUFFdXlCLGFBQStCOTVCLEVBQUUsUUFBcEJBLEVBQUV1SCxFQUFFNFAsZUFBeUJuWCxFQUFFd0csUUFBUSxLQUFLcXVCLEdBQUd2dEIsRUFBRUMsR0FBRzh0QixHQUFHOXRCLEVBQUVnQixFQUFFLEtBQUt4RSxJQUFHd0UsRUFBRWhCLEVBQUU0UCxjQUFjM1EsV0FBZXhHLEVBQUVrNkIsS0FBSzN5QixFQUFFODNCLEdBQUcvM0IsRUFBRUMsRUFBRXhELE9BQU8sQ0FBdUYsSUFBckV5RSxHQUFqQnhJLEVBQUV1SCxFQUFFOE4sV0FBaUJvRSxXQUFRZ2dCLEdBQUd4SyxHQUFHMW5CLEVBQUU4TixVQUFVcUUsY0FBYzdKLFlBQVkycEIsR0FBR2p5QixFQUFFaUIsRUFBRWt4QixJQUFHLEdBQU1seEIsRUFBRSxDQUFxQyxHQUFHLE9BQXZDbEIsRUFBRXRILEVBQUVtcUMsaUNBQTJDLElBQUlucUMsRUFBRSxFQUFFQSxFQUFFc0gsRUFBRW5OLE9BQU82RixHQUFHLEdBQUV3SSxFQUFFbEIsRUFBRXRILElBQUtxNkIsOEJBQThCL3lCLEVBQUV0SCxFQUFFLEdBQUdtNkIsR0FBR25oQyxLQUFLd1AsR0FBb0IsSUFBakJ6RSxFQUFFeTBCLEdBQUdqeEIsRUFBRSxLQUFLZ0IsRUFBRXhFLEdBQU93RCxFQUFFZ1EsTUFBTXhULEVBQUVBLEdBQUdBLEVBQUUxQixPQUFlLEVBQVQwQixFQUFFMUIsTUFBUyxLQUFLMEIsRUFBRUEsRUFBRXlULGFBQWEybkIsR0FBRzczQixFQUFFQyxFQUFFZ0IsRUFBRXhFLEdBQUdtMkIsS0FBSzN5QixFQUFFQSxFQUFFZ1EsTUFBTSxPQUFPaFEsRUFBRSxLQUFLLEVBQUUsT0FBTzJ4QixHQUFHM3hCLEdBQUcsT0FBT0QsR0FDbmZ5eUIsR0FBR3h5QixHQUFHZ0IsRUFBRWhCLEVBQUV0SixLQUFLK0IsRUFBRXVILEVBQUV1eUIsYUFBYXR4QixFQUFFLE9BQU9sQixFQUFFQSxFQUFFZ3lCLGNBQWMsS0FBSzd3QixFQUFFekksRUFBRXdPLFNBQVNrZ0IsR0FBR25tQixFQUFFdkksR0FBR3lJLEVBQUUsS0FBSyxPQUFPRCxHQUFHa21CLEdBQUdubUIsRUFBRUMsS0FBS2pCLEVBQUVsRixPQUFPLElBQUl3OUIsR0FBR3Y0QixFQUFFQyxHQUFHNDNCLEdBQUc3M0IsRUFBRUMsRUFBRWtCLEVBQUUxRSxHQUFHd0QsRUFBRWdRLE1BQU0sS0FBSyxFQUFFLE9BQU8sT0FBT2pRLEdBQUd5eUIsR0FBR3h5QixHQUFHLEtBQUssS0FBSyxHQUFHLE9BQU9tNUIsR0FBR3A1QixFQUFFQyxFQUFFeEQsR0FBRyxLQUFLLEVBQUUsT0FBTyswQixHQUFHdnhCLEVBQUVBLEVBQUU4TixVQUFVcUUsZUFBZW5SLEVBQUVoQixFQUFFdXlCLGFBQWEsT0FBT3h5QixFQUFFQyxFQUFFZ1EsTUFBTWdoQixHQUFHaHhCLEVBQUUsS0FBS2dCLEVBQUV4RSxHQUFHbzdCLEdBQUc3M0IsRUFBRUMsRUFBRWdCLEVBQUV4RSxHQUFHd0QsRUFBRWdRLE1BQU0sS0FBSyxHQUFHLE9BQU9oUCxFQUFFaEIsRUFBRXRKLEtBQUsrQixFQUFFdUgsRUFBRXV5QixhQUEyQ3NGLEdBQUc5M0IsRUFBRUMsRUFBRWdCLEVBQXJDdkksRUFBRXVILEVBQUVkLGNBQWM4QixFQUFFdkksRUFBRWl6QixHQUFHMXFCLEVBQUV2SSxHQUFjK0QsR0FBRyxLQUFLLEVBQUUsT0FBT283QixHQUFHNzNCLEVBQUVDLEVBQUVBLEVBQUV1eUIsYUFBYS8xQixHQUFHd0QsRUFBRWdRLE1BQU0sS0FBSyxFQUN0YyxLQUFLLEdBQUcsT0FBTzRuQixHQUFHNzNCLEVBQUVDLEVBQUVBLEVBQUV1eUIsYUFBYXRyQixTQUFTekssR0FBR3dELEVBQUVnUSxNQUFNLEtBQUssR0FBR2pRLEVBQUUsQ0FBQ2lCLEVBQUVoQixFQUFFdEosS0FBS3FPLFNBQVN0TSxFQUFFdUgsRUFBRXV5QixhQUFhcnhCLEVBQUVsQixFQUFFK3hCLGNBQWM5d0IsRUFBRXhJLEVBQUV4RSxNQUFNLElBQUl3USxFQUFFekUsRUFBRXRKLEtBQUtxTyxTQUFpRCxHQUF4Q3VqQixHQUFFcUQsR0FBR2xuQixFQUFFd25CLGVBQWV4bkIsRUFBRXduQixjQUFjaHJCLEVBQUssT0FBT0MsRUFBRSxHQUFHdUQsRUFBRXZELEVBQUVqTixNQUEwRyxJQUFwR2dOLEVBQUV5aEIsR0FBR2plLEVBQUV4RCxHQUFHLEVBQXdGLEdBQXJGLG1CQUFvQkQsRUFBRTJpQyxzQkFBc0IzaUMsRUFBRTJpQyxzQkFBc0JsL0IsRUFBRXhELEdBQUcsY0FBcUIsR0FBR0MsRUFBRStGLFdBQVd4TyxFQUFFd08sV0FBV3doQixHQUFFdlksUUFBUSxDQUFDbFEsRUFBRTgzQixHQUFHLzNCLEVBQUVDLEVBQUV4RCxHQUFHLE1BQU11RCxRQUFRLElBQWMsUUFBVjBFLEVBQUV6RSxFQUFFZ1EsU0FBaUJ2TCxFQUFFaUwsT0FBTzFQLEdBQUcsT0FBT3lFLEdBQUcsQ0FBQyxJQUFJRCxFQUFFQyxFQUFFNG5CLGFBQWEsR0FBRyxPQUFPN25CLEVBQUUsQ0FBQ3RELEVBQUV1RCxFQUFFdUwsTUFBTSxJQUFJLElBQUlqQixFQUN0ZnZLLEVBQUU4bkIsYUFBYSxPQUFPdmQsR0FBRyxDQUFDLEdBQUdBLEVBQUUyZCxVQUFVMXJCLEdBQUcsSUFBSytOLEVBQUU0ZCxhQUFhMXJCLEdBQUcsQ0FBQyxJQUFJd0QsRUFBRUUsT0FBTW9LLEVBQUV3ZSxJQUFJLEVBQUUvd0IsR0FBR0EsSUFBS21JLElBQUksRUFBRWlwQixHQUFHbnBCLEVBQUVzSyxJQUFJdEssRUFBRThuQixPQUFPL3ZCLEVBQWdCLFFBQWR1UyxFQUFFdEssRUFBRWdMLGFBQXFCVixFQUFFd2QsT0FBTy92QixHQUFHMHZCLEdBQUd6bkIsRUFBRWlMLE9BQU9sVCxHQUFHZ0ksRUFBRStuQixPQUFPL3ZCLEVBQUUsTUFBTXVTLEVBQUVBLEVBQUVoYixXQUFXbU4sRUFBRSxLQUFLdUQsRUFBRUUsS0FBSUYsRUFBRS9OLE9BQU9zSixFQUFFdEosS0FBSyxLQUFhK04sRUFBRXVMLE1BQU0sR0FBRyxPQUFPOU8sRUFBRUEsRUFBRXdPLE9BQU9qTCxPQUFPLElBQUl2RCxFQUFFdUQsRUFBRSxPQUFPdkQsR0FBRyxDQUFDLEdBQUdBLElBQUlsQixFQUFFLENBQUNrQixFQUFFLEtBQUssTUFBa0IsR0FBRyxRQUFmdUQsRUFBRXZELEVBQUUrTyxTQUFvQixDQUFDeEwsRUFBRWlMLE9BQU94TyxFQUFFd08sT0FBT3hPLEVBQUV1RCxFQUFFLE1BQU12RCxFQUFFQSxFQUFFd08sT0FBT2pMLEVBQUV2RCxFQUFFMDJCLEdBQUc3M0IsRUFBRUMsRUFBRXZILEVBQUV3TyxTQUFTekssR0FBR3dELEVBQUVBLEVBQUVnUSxNQUFNLE9BQU9oUSxFQUFFLEtBQUssRUFBRSxPQUFPdkgsRUFBRXVILEVBQUV0SixLQUFzQnNLLEdBQWpCQyxFQUFFakIsRUFBRXV5QixjQUFpQnRyQixTQUFTbWxCLEdBQUdwc0IsRUFBRXhELEdBQ25kd0UsRUFBRUEsRUFEb2R2SSxFQUFFZzBCLEdBQUdoMEIsRUFDcGZ3SSxFQUFFMmlDLHdCQUE4QjVqQyxFQUFFbEYsT0FBTyxFQUFFODhCLEdBQUc3M0IsRUFBRUMsRUFBRWdCLEVBQUV4RSxHQUFHd0QsRUFBRWdRLE1BQU0sS0FBSyxHQUFHLE9BQWdCL08sRUFBRXlxQixHQUFYanpCLEVBQUV1SCxFQUFFdEosS0FBWXNKLEVBQUV1eUIsY0FBNkJ3RixHQUFHaDRCLEVBQUVDLEVBQUV2SCxFQUF0QndJLEVBQUV5cUIsR0FBR2p6QixFQUFFL0IsS0FBS3VLLEdBQWNELEVBQUV4RSxHQUFHLEtBQUssR0FBRyxPQUFPeTdCLEdBQUdsNEIsRUFBRUMsRUFBRUEsRUFBRXRKLEtBQUtzSixFQUFFdXlCLGFBQWF2eEIsRUFBRXhFLEdBQUcsS0FBSyxHQUFHLE9BQU93RSxFQUFFaEIsRUFBRXRKLEtBQUsrQixFQUFFdUgsRUFBRXV5QixhQUFhOTVCLEVBQUV1SCxFQUFFZCxjQUFjOEIsRUFBRXZJLEVBQUVpekIsR0FBRzFxQixFQUFFdkksR0FBRyxPQUFPc0gsSUFBSUEsRUFBRTBQLFVBQVUsS0FBS3pQLEVBQUV5UCxVQUFVLEtBQUt6UCxFQUFFbEYsT0FBTyxHQUFHa0YsRUFBRTJFLElBQUksRUFBRW1rQixHQUFHOW5CLElBQUlqQixHQUFFLEVBQUdvcEIsR0FBR25wQixJQUFJRCxHQUFFLEVBQUdxc0IsR0FBR3BzQixFQUFFeEQsR0FBRzR5QixHQUFHcHZCLEVBQUVnQixFQUFFdkksR0FBR2kzQixHQUFHMXZCLEVBQUVnQixFQUFFdkksRUFBRStELEdBQUdtOEIsR0FBRyxLQUFLMzRCLEVBQUVnQixHQUFFLEVBQUdqQixFQUFFdkQsR0FBRyxLQUFLLEdBQUcsT0FBTzI5QixHQUFHcDZCLEVBQUVDLEVBQUV4RCxHQUFHLEtBQUssR0FBb0IsS0FBSyxHQUFHLE9BQU8yN0IsR0FBR3A0QixFQUFFQyxFQUFFeEQsR0FBRyxNQUFNNEIsTUFBTTBCLEVBQUUsSUFBSUUsRUFBRTJFLE9BYS9lcytCLEdBQUcxdUMsVUFBVWdELE9BQU8sU0FBU3dJLEdBQUc4aUMsR0FBRzlpQyxFQUFFOU4sS0FBS214QyxjQUFjLEtBQUssT0FBT0gsR0FBRzF1QyxVQUFVc3ZDLFFBQVEsV0FBVyxJQUFJOWpDLEVBQUU5TixLQUFLbXhDLGNBQWNwakMsRUFBRUQsRUFBRW9TLGNBQWMwd0IsR0FBRyxLQUFLOWlDLEVBQUUsTUFBSyxXQUFXQyxFQUFFa21CLElBQUksU0FFd0o3VixHQUFHLFNBQVN0USxHQUFNLEtBQUtBLEVBQUU0RSxNQUFnQm1xQixHQUFHL3VCLEVBQUUsRUFBVjZ1QixNQUFlb1UsR0FBR2pqQyxFQUFFLEtBQUt1USxHQUFHLFNBQVN2USxHQUFNLEtBQUtBLEVBQUU0RSxNQUFnQm1xQixHQUFHL3VCLEVBQUUsU0FBVjZ1QixNQUFzQm9VLEdBQUdqakMsRUFBRSxZQUNuY3dRLEdBQUcsU0FBU3hRLEdBQUcsR0FBRyxLQUFLQSxFQUFFNEUsSUFBSSxDQUFDLElBQUkzRSxFQUFFNHVCLEtBQUtweUIsRUFBRXF5QixHQUFHOXVCLEdBQUcrdUIsR0FBRy91QixFQUFFdkQsRUFBRXdELEdBQUdnakMsR0FBR2pqQyxFQUFFdkQsS0FBS2dVLEdBQUcsU0FBU3pRLEVBQUVDLEdBQUcsT0FBT0EsS0FDN0Z5TixHQUFHLFNBQVMxTixFQUFFQyxFQUFFeEQsR0FBRyxPQUFPd0QsR0FBRyxJQUFLLFFBQXlCLEdBQWpCNEcsR0FBRzdHLEVBQUV2RCxHQUFHd0QsRUFBRXhELEVBQUU3SCxLQUFRLFVBQVU2SCxFQUFFOUYsTUFBTSxNQUFNc0osRUFBRSxDQUFDLElBQUl4RCxFQUFFdUQsRUFBRXZELEVBQUVnUixZQUFZaFIsRUFBRUEsRUFBRWdSLFdBQXNGLElBQTNFaFIsRUFBRUEsRUFBRXNuQyxpQkFBaUIsY0FBY3h1QyxLQUFLQyxVQUFVLEdBQUd5SyxHQUFHLG1CQUF1QkEsRUFBRSxFQUFFQSxFQUFFeEQsRUFBRTVKLE9BQU9vTixJQUFJLENBQUMsSUFBSWdCLEVBQUV4RSxFQUFFd0QsR0FBRyxHQUFHZ0IsSUFBSWpCLEdBQUdpQixFQUFFK2lDLE9BQU9oa0MsRUFBRWdrQyxLQUFLLENBQUMsSUFBSXRyQyxFQUFFc1YsR0FBRy9NLEdBQUcsSUFBSXZJLEVBQUUsTUFBTTJGLE1BQU0wQixFQUFFLEtBQUtnRyxFQUFHOUUsR0FBRzRGLEdBQUc1RixFQUFFdkksS0FBSyxNQUFNLElBQUssV0FBV2tQLEdBQUc1SCxFQUFFdkQsR0FBRyxNQUFNLElBQUssU0FBbUIsT0FBVndELEVBQUV4RCxFQUFFdkksUUFBZW1ULEdBQUdySCxJQUFJdkQsRUFBRSs5QixTQUFTdjZCLEdBQUUsS0FBTWtPLEdBL0NyUyxTQUFZbk8sRUFBRUMsR0FBRyxJQUFJeEQsRUFBRTJoQyxHQUFFQSxJQUFHLEVBQUUsSUFBSSxPQUFPcCtCLEVBQUVDLEdBQUcsUUFBWSxLQUFKbStCLEdBQUUzaEMsS0FBVW9pQyxLQUFLdFQsUUFnRDdMbmQsR0FBRyxTQUFTcE8sRUFBRUMsRUFBRXhELEVBQUV3RSxFQUFFdkksR0FBRyxJQUFJd0ksRUFBRWs5QixHQUFFQSxJQUFHLEVBQUUsSUFBSSxPQUFPL1MsR0FBRyxHQUFHcnJCLEVBQUUrVixLQUFLLEtBQUs5VixFQUFFeEQsRUFBRXdFLEVBQUV2SSxJQUFJLFFBQVksS0FBSjBsQyxHQUFFbDlCLEtBQVUyOUIsS0FBS3RULFFBQVFsZCxHQUFHLFdBQVcsSUFBTyxHQUFGK3ZCLE1BaEQvSCxXQUFjLEdBQUcsT0FBT2lCLEdBQUcsQ0FBQyxJQUFJci9CLEVBQUVxL0IsR0FBR0EsR0FBRyxLQUFLci9CLEVBQUV6RyxTQUFRLFNBQVN5RyxHQUFHQSxFQUFFdVUsY0FBYyxHQUFHdlUsRUFBRXNVLGFBQWEwckIsR0FBR2hnQyxFQUFFa3JCLFNBQU9LLEtBZ0RzQjBZLEdBQUszRCxPQUFPaHlCLEdBQUcsU0FBU3RPLEVBQUVDLEdBQUcsSUFBSXhELEVBQUUyaEMsR0FBRUEsSUFBRyxFQUFFLElBQUksT0FBT3ArQixFQUFFQyxHQUFHLFFBQVksS0FBSm0rQixHQUFFM2hDLEtBQVVvaUMsS0FBS3RULFFBQStJLElBQWlEMlksR0FBRyxDQUFDQyx3QkFBd0JweUIsR0FBR3F5QixXQUFXLEVBQUVDLFFBQVEsU0FBU0Msb0JBQW9CLGFBQ3ZlQyxHQUFHLENBQUNILFdBQVdGLEdBQUdFLFdBQVdDLFFBQVFILEdBQUdHLFFBQVFDLG9CQUFvQkosR0FBR0ksb0JBQW9CRSxlQUFlTixHQUFHTSxlQUFlQyxrQkFBa0IsS0FBS0MsNEJBQTRCLEtBQUtDLDRCQUE0QixLQUFLQyxjQUFjLEtBQUtDLHdCQUF3QixLQUFLQyx3QkFBd0IsS0FBS0MsbUJBQW1CLEtBQUtDLGVBQWUsS0FBS0MscUJBQXFCemlDLEVBQUd5d0IsdUJBQXVCaVMsd0JBQXdCLFNBQVNsbEMsR0FBVyxPQUFPLFFBQWZBLEVBQUVnUSxHQUFHaFEsSUFBbUIsS0FBS0EsRUFBRStOLFdBQVdvMkIsd0JBQXdCRCxHQUFHQyx5QkFSL0ksV0FBYyxPQUFPLE1BUzdXZ0IsNEJBQTRCLEtBQUtDLGdCQUFnQixLQUFLQyxhQUFhLEtBQUtDLGtCQUFrQixLQUFLQyxnQkFBZ0IsTUFBTSxHQUFHLG9CQUFxQkMsK0JBQStCLENBQUMsSUFBSUMsR0FBR0QsK0JBQStCLElBQUlDLEdBQUdDLFlBQVlELEdBQUdFLGNBQWMsSUFBSXBjLEdBQUdrYyxHQUFHRyxPQUFPckIsSUFBSS9hLEdBQUdpYyxHQUFHLE1BQU16bEMsTUFDM1JsTyxFQUFRK3pDLFlBQVksU0FBUzdsQyxHQUFHLEdBQUcsTUFBTUEsRUFBRSxPQUFPLEtBQUssR0FBRyxJQUFJQSxFQUFFOEksU0FBUyxPQUFPOUksRUFBRSxJQUFJQyxFQUFFRCxFQUFFMnVCLGdCQUFnQixRQUFHLElBQVMxdUIsRUFBRSxDQUFDLEdBQUcsbUJBQW9CRCxFQUFFeEksT0FBTyxNQUFNNkcsTUFBTTBCLEVBQUUsTUFBTSxNQUFNMUIsTUFBTTBCLEVBQUUsSUFBSXRNLE9BQU80RSxLQUFLMkgsS0FBMEMsT0FBMUIsUUFBVkEsRUFBRWdRLEdBQUcvUCxJQUFjLEtBQUtELEVBQUUrTixXQUMzT2pjLEVBQVEwRixPQUFPLFNBQVN3SSxFQUFFQyxFQUFFeEQsR0FBRyxJQUFJNm1DLEdBQUdyakMsR0FBRyxNQUFNNUIsTUFBTTBCLEVBQUUsTUFBTSxPQUFPd2pDLEdBQUcsS0FBS3ZqQyxFQUFFQyxHQUFFLEVBQUd4RCxLLDRCQ3JTbkYsU0FBU3FwQyxJQUVQLEdBQzRDLG9CQUFuQ04sZ0NBQzRDLG1CQUE1Q0EsK0JBQStCTSxTQWN4QyxJQUVFTiwrQkFBK0JNLFNBQVNBLEdBQ3hDLE1BQU8zeEMsR0FHUHFuQyxRQUFRQyxNQUFNdG5DLElBT2hCMnhDLEdBQ0FuMEMsRUFBT0csUUFBVSxFQUFqQixNLHlCQ3pCVyxJQUFJbU8sRUFBRSxtQkFBb0IxTSxRQUFRQSxPQUFPb1EsSUFBSWxILEVBQUV3RCxFQUFFMU0sT0FBT29RLElBQUksaUJBQWlCLE1BQU0xQyxFQUFFaEIsRUFBRTFNLE9BQU9vUSxJQUFJLGdCQUFnQixNQUFNakwsRUFBRXVILEVBQUUxTSxPQUFPb1EsSUFBSSxrQkFBa0IsTUFBTXpDLEVBQUVqQixFQUFFMU0sT0FBT29RLElBQUkscUJBQXFCLE1BQU14QyxFQUFFbEIsRUFBRTFNLE9BQU9vUSxJQUFJLGtCQUFrQixNQUFNZSxFQUFFekUsRUFBRTFNLE9BQU9vUSxJQUFJLGtCQUFrQixNQUFNYyxFQUFFeEUsRUFBRTFNLE9BQU9vUSxJQUFJLGlCQUFpQixNQUFNcUwsRUFBRS9PLEVBQUUxTSxPQUFPb1EsSUFBSSxvQkFBb0IsTUFBTTlILEVBQUVvRSxFQUFFMU0sT0FBT29RLElBQUkseUJBQXlCLE1BQU1wUCxFQUFFMEwsRUFBRTFNLE9BQU9vUSxJQUFJLHFCQUFxQixNQUFNc3FCLEVBQUVodUIsRUFBRTFNLE9BQU9vUSxJQUFJLGtCQUFrQixNQUFNb2lCLEVBQUU5bEIsRUFDcGYxTSxPQUFPb1EsSUFBSSx1QkFBdUIsTUFBTTdELEVBQUVHLEVBQUUxTSxPQUFPb1EsSUFBSSxjQUFjLE1BQU1xaUIsRUFBRS9sQixFQUFFMU0sT0FBT29RLElBQUksY0FBYyxNQUFNc2lCLEVBQUVobUIsRUFBRTFNLE9BQU9vUSxJQUFJLGVBQWUsTUFBTWlpQixFQUFFM2xCLEVBQUUxTSxPQUFPb1EsSUFBSSxxQkFBcUIsTUFBTWdpQixFQUFFMWxCLEVBQUUxTSxPQUFPb1EsSUFBSSxtQkFBbUIsTUFBTTVELEVBQUVFLEVBQUUxTSxPQUFPb1EsSUFBSSxlQUFlLE1BQ2xRLFNBQVNraUIsRUFBRTdsQixHQUFHLEdBQUcsaUJBQWtCQSxHQUFHLE9BQU9BLEVBQUUsQ0FBQyxJQUFJOGxCLEVBQUU5bEIsRUFBRStFLFNBQVMsT0FBTytnQixHQUFHLEtBQUtycEIsRUFBRSxPQUFPdUQsRUFBRUEsRUFBRXJKLE1BQVEsS0FBS3FZLEVBQUUsS0FBS25ULEVBQUUsS0FBS25ELEVBQUUsS0FBS3lJLEVBQUUsS0FBS0QsRUFBRSxLQUFLK3NCLEVBQUUsT0FBT2p1QixFQUFFLFFBQVEsT0FBT0EsRUFBRUEsR0FBR0EsRUFBRStFLFVBQVksS0FBS04sRUFBRSxLQUFLbFEsRUFBRSxLQUFLeXhCLEVBQUUsS0FBS2xtQixFQUFFLEtBQUs0RSxFQUFFLE9BQU8xRSxFQUFFLFFBQVEsT0FBTzhsQixHQUFHLEtBQUs3a0IsRUFBRSxPQUFPNmtCLElBQUksU0FBU2tJLEVBQUVodUIsR0FBRyxPQUFPNmxCLEVBQUU3bEIsS0FBS25FLEVBQUUvSixFQUFRaTBDLFVBQVUvMkIsRUFBRWxkLEVBQVFrMEMsZUFBZW5xQyxFQUFFL0osRUFBUW0wQyxnQkFBZ0J4aEMsRUFBRTNTLEVBQVFvMEMsZ0JBQWdCeGhDLEVBQUU1UyxFQUFRcTBDLFFBQVExcEMsRUFBRTNLLEVBQVF5RixXQUFXaEQsRUFBRXpDLEVBQVFzMEMsU0FBUzF0QyxFQUFFNUcsRUFBUXUwQyxLQUFLcmdCLEVBQUVsMEIsRUFBUTJGLEtBQUtxSSxFQUFFaE8sRUFBUXcwQyxPQUFPcmxDLEVBQ2hmblAsRUFBUXkwQyxTQUFTcGxDLEVBQUVyUCxFQUFRMDBDLFdBQVd0bEMsRUFBRXBQLEVBQVEyMEMsU0FBU3hZLEVBQUVuOEIsRUFBUTQwQyxZQUFZLFNBQVMxbUMsR0FBRyxPQUFPZ3VCLEVBQUVodUIsSUFBSTZsQixFQUFFN2xCLEtBQUtnUCxHQUFHbGQsRUFBUTYwQyxpQkFBaUIzWSxFQUFFbDhCLEVBQVE4MEMsa0JBQWtCLFNBQVM1bUMsR0FBRyxPQUFPNmxCLEVBQUU3bEIsS0FBS3lFLEdBQUczUyxFQUFRKzBDLGtCQUFrQixTQUFTN21DLEdBQUcsT0FBTzZsQixFQUFFN2xCLEtBQUswRSxHQUFHNVMsRUFBUWcxQyxVQUFVLFNBQVM5bUMsR0FBRyxNQUFNLGlCQUFrQkEsR0FBRyxPQUFPQSxHQUFHQSxFQUFFK0UsV0FBV3RJLEdBQUczSyxFQUFRaTFDLGFBQWEsU0FBUy9tQyxHQUFHLE9BQU82bEIsRUFBRTdsQixLQUFLekwsR0FBR3pDLEVBQVFrMUMsV0FBVyxTQUFTaG5DLEdBQUcsT0FBTzZsQixFQUFFN2xCLEtBQUt0SCxHQUFHNUcsRUFBUW0xQyxPQUFPLFNBQVNqbkMsR0FBRyxPQUFPNmxCLEVBQUU3bEIsS0FBS2dtQixHQUN6ZGwwQixFQUFRd0YsT0FBTyxTQUFTMEksR0FBRyxPQUFPNmxCLEVBQUU3bEIsS0FBS0YsR0FBR2hPLEVBQVFvMUMsU0FBUyxTQUFTbG5DLEdBQUcsT0FBTzZsQixFQUFFN2xCLEtBQUtpQixHQUFHblAsRUFBUXExQyxXQUFXLFNBQVNubkMsR0FBRyxPQUFPNmxCLEVBQUU3bEIsS0FBS21CLEdBQUdyUCxFQUFRczFDLGFBQWEsU0FBU3BuQyxHQUFHLE9BQU82bEIsRUFBRTdsQixLQUFLa0IsR0FBR3BQLEVBQVF1MUMsV0FBVyxTQUFTcm5DLEdBQUcsT0FBTzZsQixFQUFFN2xCLEtBQUtpdUIsR0FDek9uOEIsRUFBUXcxQyxtQkFBbUIsU0FBU3RuQyxHQUFHLE1BQU0saUJBQWtCQSxHQUFHLG1CQUFvQkEsR0FBR0EsSUFBSXRILEdBQUdzSCxJQUFJbkUsR0FBR21FLElBQUltQixHQUFHbkIsSUFBSWtCLEdBQUdsQixJQUFJaXVCLEdBQUdqdUIsSUFBSStsQixHQUFHLGlCQUFrQi9sQixHQUFHLE9BQU9BLElBQUlBLEVBQUUrRSxXQUFXaWhCLEdBQUdobUIsRUFBRStFLFdBQVdqRixHQUFHRSxFQUFFK0UsV0FBV0wsR0FBRzFFLEVBQUUrRSxXQUFXTixHQUFHekUsRUFBRStFLFdBQVd4USxHQUFHeUwsRUFBRStFLFdBQVc2Z0IsR0FBRzVsQixFQUFFK0UsV0FBVzRnQixHQUFHM2xCLEVBQUUrRSxXQUFXaEYsR0FBR0MsRUFBRStFLFdBQVdraEIsSUFBSW4wQixFQUFReTFDLE9BQU8xaEIsRywyQkNYalVsMEIsRUFBT0csUUFBVSxFQUFqQixNLDJCQ0tXLElBQUlrZCxFQUFFLEVBQVEsS0FBaUJ6YSxFQUFFLE1BQU0wNUIsRUFBRSxNQUFNbjhCLEVBQVFzMEMsU0FBUyxNQUFNdDBDLEVBQVEwMEMsV0FBVyxNQUFNMTBDLEVBQVF5MEMsU0FBUyxNQUFNLElBQUl4Z0IsRUFBRSxNQUFNam1CLEVBQUUsTUFBTWttQixFQUFFLE1BQU1sMEIsRUFBUTIwQyxTQUFTLE1BQU0sSUFBSTNnQixFQUFFLE1BQU1HLEVBQUUsTUFDcE0sR0FBRyxtQkFBb0IxeUIsUUFBUUEsT0FBT29RLElBQUksQ0FBQyxJQUFJaWlCLEVBQUVyeUIsT0FBT29RLElBQUlwUCxFQUFFcXhCLEVBQUUsaUJBQWlCcUksRUFBRXJJLEVBQUUsZ0JBQWdCOXpCLEVBQVFzMEMsU0FBU3hnQixFQUFFLGtCQUFrQjl6QixFQUFRMDBDLFdBQVc1Z0IsRUFBRSxxQkFBcUI5ekIsRUFBUXkwQyxTQUFTM2dCLEVBQUUsa0JBQWtCRyxFQUFFSCxFQUFFLGtCQUFrQjlsQixFQUFFOGxCLEVBQUUsaUJBQWlCSSxFQUFFSixFQUFFLHFCQUFxQjl6QixFQUFRMjBDLFNBQVM3Z0IsRUFBRSxrQkFBa0JFLEVBQUVGLEVBQUUsY0FBY0ssRUFBRUwsRUFBRSxjQUFjLElBQUlELEVBQUUsbUJBQW9CcHlCLFFBQVFBLE9BQU9DLFNBQ3RSLFNBQVNxeUIsRUFBRTdsQixHQUFHLElBQUksSUFBSUMsRUFBRSx5REFBeURELEVBQUV2RCxFQUFFLEVBQUVBLEVBQUUxRixVQUFVbEUsT0FBTzRKLElBQUl3RCxHQUFHLFdBQVczSyxtQkFBbUJ5QixVQUFVMEYsSUFBSSxNQUFNLHlCQUF5QnVELEVBQUUsV0FBV0MsRUFBRSxpSEFDcFUsSUFBSSt0QixFQUFFLENBQUNVLFVBQVUsV0FBVyxPQUFNLEdBQUlPLG1CQUFtQixhQUFhRCxvQkFBb0IsYUFBYUosZ0JBQWdCLGNBQWM1dEIsRUFBRSxHQUFHLFNBQVNrdEIsRUFBRWx1QixFQUFFQyxFQUFFeEQsR0FBR3ZLLEtBQUs2TCxNQUFNaUMsRUFBRTlOLEtBQUt5NkIsUUFBUTFzQixFQUFFL04sS0FBS3E4QixLQUFLdnRCLEVBQUU5TyxLQUFLcTlCLFFBQVE5eUIsR0FBR3V4QixFQUNwTixTQUFTcnNCLEtBQTZCLFNBQVNpQyxFQUFFNUQsRUFBRUMsRUFBRXhELEdBQUd2SyxLQUFLNkwsTUFBTWlDLEVBQUU5TixLQUFLeTZCLFFBQVExc0IsRUFBRS9OLEtBQUtxOEIsS0FBS3Z0QixFQUFFOU8sS0FBS3E5QixRQUFROXlCLEdBQUd1eEIsRUFEc0dFLEVBQUUxNUIsVUFBVWt1QyxpQkFBaUIsR0FBR3hVLEVBQUUxNUIsVUFBVWd6QyxTQUFTLFNBQVN4bkMsRUFBRUMsR0FBRyxHQUFHLGlCQUFrQkQsR0FBRyxtQkFBb0JBLEdBQUcsTUFBTUEsRUFBRSxNQUFNM0IsTUFBTXduQixFQUFFLEtBQUszekIsS0FBS3E5QixRQUFRWCxnQkFBZ0IxOEIsS0FBSzhOLEVBQUVDLEVBQUUsYUFBYWl1QixFQUFFMTVCLFVBQVVpekMsWUFBWSxTQUFTem5DLEdBQUc5TixLQUFLcTlCLFFBQVFOLG1CQUFtQi84QixLQUFLOE4sRUFBRSxnQkFDbmQyQixFQUFFbk4sVUFBVTA1QixFQUFFMTVCLFVBQXNGLElBQUkyZixFQUFFdlEsRUFBRXBQLFVBQVUsSUFBSW1OLEVBQUV3UyxFQUFFeGYsWUFBWWlQLEVBQUVvTCxFQUFFbUYsRUFBRStaLEVBQUUxNUIsV0FBVzJmLEVBQUVpYixzQkFBcUIsRUFBRyxJQUFJbkssRUFBRSxDQUFDOVUsUUFBUSxNQUFNbVksRUFBRTcwQixPQUFPZSxVQUFVbUUsZUFBZTR2QixFQUFFLENBQUMvdkIsS0FBSSxFQUFHMDNCLEtBQUksRUFBR3dYLFFBQU8sRUFBR0MsVUFBUyxHQUNoUyxTQUFTcGhCLEVBQUV2bUIsRUFBRUMsRUFBRXhELEdBQUcsSUFBSS9ELEVBQUV1SSxFQUFFLEdBQUd3RCxFQUFFLEtBQUtDLEVBQUUsS0FBSyxHQUFHLE1BQU16RSxFQUFFLElBQUl2SCxVQUFLLElBQVN1SCxFQUFFaXdCLE1BQU14ckIsRUFBRXpFLEVBQUVpd0IsVUFBSyxJQUFTandCLEVBQUV6SCxNQUFNaU0sRUFBRSxHQUFHeEUsRUFBRXpILEtBQUt5SCxFQUFFcW9CLEVBQUU3ekIsS0FBS3dMLEVBQUV2SCxLQUFLNnZCLEVBQUU1dkIsZUFBZUQsS0FBS3VJLEVBQUV2SSxHQUFHdUgsRUFBRXZILElBQUksSUFBSXlJLEVBQUVwSyxVQUFVbEUsT0FBTyxFQUFFLEdBQUcsSUFBSXNPLEVBQUVGLEVBQUVpRyxTQUFTekssT0FBTyxHQUFHLEVBQUUwRSxFQUFFLENBQUMsSUFBSSxJQUFJRCxFQUFFL04sTUFBTWdPLEdBQUd0RixFQUFFLEVBQUVBLEVBQUVzRixFQUFFdEYsSUFBSXFGLEVBQUVyRixHQUFHOUUsVUFBVThFLEVBQUUsR0FBR29GLEVBQUVpRyxTQUFTaEcsRUFBRSxHQUFHbEIsR0FBR0EsRUFBRTVKLGFBQWEsSUFBSXNDLEtBQUt5SSxFQUFFbkIsRUFBRTVKLGtCQUFlLElBQVM2SyxFQUFFdkksS0FBS3VJLEVBQUV2SSxHQUFHeUksRUFBRXpJLElBQUksTUFBTSxDQUFDcU0sU0FBU3hRLEVBQUVvQyxLQUFLcUosRUFBRXhILElBQUlpTSxFQUFFeXJCLElBQUl4ckIsRUFBRTNHLE1BQU1rRCxFQUFFa3ZCLE9BQU9sTCxFQUFFOVUsU0FDeFUsU0FBU3VXLEVBQUUxbUIsR0FBRyxNQUFNLGlCQUFrQkEsR0FBRyxPQUFPQSxHQUFHQSxFQUFFK0UsV0FBV3hRLEVBQXFHLElBQUlrMEIsRUFBRSxPQUFPLFNBQVNDLEVBQUUxb0IsRUFBRUMsR0FBRyxNQUFNLGlCQUFrQkQsR0FBRyxPQUFPQSxHQUFHLE1BQU1BLEVBQUV4SCxJQUE3SyxTQUFnQndILEdBQUcsSUFBSUMsRUFBRSxDQUFDLElBQUksS0FBSyxJQUFJLE1BQU0sTUFBTSxJQUFJRCxFQUFFeEQsUUFBUSxTQUFRLFNBQVN3RCxHQUFHLE9BQU9DLEVBQUVELE1BQW1GNG5DLENBQU8sR0FBRzVuQyxFQUFFeEgsS0FBS3lILEVBQUVoTyxTQUFTLElBQzVXLFNBQVNpNUIsRUFBRWxyQixFQUFFQyxFQUFFeEQsRUFBRS9ELEVBQUV1SSxHQUFHLElBQUl3RCxTQUFTekUsRUFBSyxjQUFjeUUsR0FBRyxZQUFZQSxJQUFFekUsRUFBRSxNQUFLLElBQUkwRSxHQUFFLEVBQUcsR0FBRyxPQUFPMUUsRUFBRTBFLEdBQUUsT0FBUSxPQUFPRCxHQUFHLElBQUssU0FBUyxJQUFLLFNBQVNDLEdBQUUsRUFBRyxNQUFNLElBQUssU0FBUyxPQUFPMUUsRUFBRStFLFVBQVUsS0FBS3hRLEVBQUUsS0FBSzA1QixFQUFFdnBCLEdBQUUsR0FBSSxHQUFHQSxFQUFFLE9BQVd6RCxFQUFFQSxFQUFOeUQsRUFBRTFFLEdBQVNBLEVBQUUsS0FBS3RILEVBQUUsSUFBSWd3QixFQUFFaGtCLEVBQUUsR0FBR2hNLEVBQUV2RixNQUFNRSxRQUFRNE4sSUFBSXhFLEVBQUUsR0FBRyxNQUFNdUQsSUFBSXZELEVBQUV1RCxFQUFFeEQsUUFBUWlzQixFQUFFLE9BQU8sS0FBS3lDLEVBQUVqcUIsRUFBRWhCLEVBQUV4RCxFQUFFLElBQUcsU0FBU3VELEdBQUcsT0FBT0EsTUFBSyxNQUFNaUIsSUFBSXlsQixFQUFFemxCLEtBQUtBLEVBRC9XLFNBQVdqQixFQUFFQyxHQUFHLE1BQU0sQ0FBQzhFLFNBQVN4USxFQUFFb0MsS0FBS3FKLEVBQUVySixLQUFLNkIsSUFBSXlILEVBQUVpd0IsSUFBSWx3QixFQUFFa3dCLElBQUlueUIsTUFBTWlDLEVBQUVqQyxNQUFNb3lCLE9BQU9ud0IsRUFBRW13QixRQUM0UjNKLENBQUV2bEIsRUFBRXhFLElBQUl3RSxFQUFFekksS0FBS2tNLEdBQUdBLEVBQUVsTSxNQUFNeUksRUFBRXpJLElBQUksSUFBSSxHQUFHeUksRUFBRXpJLEtBQUtnRSxRQUFRaXNCLEVBQUUsT0FBTyxLQUFLem9CLElBQUlDLEVBQUV2TyxLQUFLdVAsSUFBSSxFQUF5QixHQUF2QnlELEVBQUUsRUFBRWhNLEVBQUUsS0FBS0EsRUFBRSxJQUFJQSxFQUFFLElBQU92RixNQUFNRSxRQUFRMk0sR0FBRyxJQUFJLElBQUltQixFQUN6ZixFQUFFQSxFQUFFbkIsRUFBRW5OLE9BQU9zTyxJQUFJLENBQVEsSUFBSUQsRUFBRXhJLEVBQUVnd0IsRUFBZmprQixFQUFFekUsRUFBRW1CLEdBQWVBLEdBQUd1RCxHQUFHd21CLEVBQUV6bUIsRUFBRXhFLEVBQUV4RCxFQUFFeUUsRUFBRUQsUUFBUSxHQUFVLG1CQUFQQyxFQU5oRSxTQUFXbEIsR0FBRyxPQUFHLE9BQU9BLEdBQUcsaUJBQWtCQSxFQUFTLEtBQXNDLG1CQUFqQ0EsRUFBRTJsQixHQUFHM2xCLEVBQUUybEIsSUFBSTNsQixFQUFFLGVBQTBDQSxFQUFFLEtBTWxERCxDQUFFQyxJQUF5QixJQUFJQSxFQUFFa0IsRUFBRXpNLEtBQUt1TCxHQUFHbUIsRUFBRSxJQUFJc0QsRUFBRXpFLEVBQUVoTSxRQUFRQyxNQUE2QnlRLEdBQUd3bUIsRUFBMUJ6bUIsRUFBRUEsRUFBRXZRLE1BQTBCK0wsRUFBRXhELEVBQXRCeUUsRUFBRXhJLEVBQUVnd0IsRUFBRWprQixFQUFFdEQsS0FBa0JGLFFBQVEsR0FBRyxXQUFXd0QsRUFBRSxNQUFNeEUsRUFBRSxHQUFHRCxFQUFFM0IsTUFBTXduQixFQUFFLEdBQUcsb0JBQW9CNWxCLEVBQUUscUJBQXFCeE0sT0FBTzRFLEtBQUsySCxHQUFHek4sS0FBSyxNQUFNLElBQUkwTixJQUFJLE9BQU95RSxFQUFFLFNBQVNvdEIsRUFBRTl4QixFQUFFQyxFQUFFeEQsR0FBRyxHQUFHLE1BQU11RCxFQUFFLE9BQU9BLEVBQUUsSUFBSXRILEVBQUUsR0FBR3VJLEVBQUUsRUFBbUQsT0FBakRpcUIsRUFBRWxyQixFQUFFdEgsRUFBRSxHQUFHLElBQUcsU0FBU3NILEdBQUcsT0FBT0MsRUFBRXhMLEtBQUtnSSxFQUFFdUQsRUFBRWlCLFFBQWN2SSxFQUMxWixTQUFTK3RCLEVBQUV6bUIsR0FBRyxJQUFJLElBQUlBLEVBQUU2bkMsUUFBUSxDQUFDLElBQUk1bkMsRUFBRUQsRUFBRThuQyxRQUFRN25DLEVBQUVBLElBQUlELEVBQUU2bkMsUUFBUSxFQUFFN25DLEVBQUU4bkMsUUFBUTduQyxFQUFFQSxFQUFFNjlCLE1BQUssU0FBUzc5QixHQUFHLElBQUlELEVBQUU2bkMsVUFBVTVuQyxFQUFFQSxFQUFFOG5DLFFBQVEvbkMsRUFBRTZuQyxRQUFRLEVBQUU3bkMsRUFBRThuQyxRQUFRN25DLE1BQUksU0FBU0EsR0FBRyxJQUFJRCxFQUFFNm5DLFVBQVU3bkMsRUFBRTZuQyxRQUFRLEVBQUU3bkMsRUFBRThuQyxRQUFRN25DLE1BQUssR0FBRyxJQUFJRCxFQUFFNm5DLFFBQVEsT0FBTzduQyxFQUFFOG5DLFFBQVEsTUFBTTluQyxFQUFFOG5DLFFBQVMsSUFBSTFVLEVBQUUsQ0FBQ2pqQixRQUFRLE1BQU0sU0FBU2tqQixJQUFJLElBQUlyekIsRUFBRW96QixFQUFFampCLFFBQVEsR0FBRyxPQUFPblEsRUFBRSxNQUFNM0IsTUFBTXduQixFQUFFLE1BQU0sT0FBTzdsQixFQUFFLElBQUlzekIsRUFBRSxDQUFDTCx1QkFBdUJHLEVBQUUxSCx3QkFBd0IsQ0FBQ2xZLFdBQVcsR0FBR29rQixrQkFBa0IzUyxFQUFFK2lCLHFCQUFxQixDQUFDNzNCLFNBQVEsR0FBSW5YLE9BQU9nVyxHQUNqZWxkLEVBQVFxVixTQUFTLENBQUNoVixJQUFJMi9CLEVBQUV2NEIsUUFBUSxTQUFTeUcsRUFBRUMsRUFBRXhELEdBQUdxMUIsRUFBRTl4QixHQUFFLFdBQVdDLEVBQUVnUCxNQUFNL2MsS0FBSzZFLGFBQVkwRixJQUFJd3JDLE1BQU0sU0FBU2pvQyxHQUFHLElBQUlDLEVBQUUsRUFBdUIsT0FBckI2eEIsRUFBRTl4QixHQUFFLFdBQVdDLE9BQWFBLEdBQUdpb0MsUUFBUSxTQUFTbG9DLEdBQUcsT0FBTzh4QixFQUFFOXhCLEdBQUUsU0FBU0EsR0FBRyxPQUFPQSxNQUFLLElBQUltb0MsS0FBSyxTQUFTbm9DLEdBQUcsSUFBSTBtQixFQUFFMW1CLEdBQUcsTUFBTTNCLE1BQU13bkIsRUFBRSxNQUFNLE9BQU83bEIsSUFBSWxPLEVBQVF3OEIsVUFBVUosRUFBRXA4QixFQUFRczJDLGNBQWN4a0MsRUFBRTlSLEVBQVEyUSxtREFBbUQ2d0IsRUFDaFh4aEMsRUFBUXUyQyxhQUFhLFNBQVNyb0MsRUFBRUMsRUFBRXhELEdBQUcsR0FBRyxNQUFPdUQsRUFBYyxNQUFNM0IsTUFBTXduQixFQUFFLElBQUk3bEIsSUFBSSxJQUFJdEgsRUFBRXNXLEVBQUUsR0FBR2hQLEVBQUVqQyxPQUFPa0QsRUFBRWpCLEVBQUV4SCxJQUFJaU0sRUFBRXpFLEVBQUVrd0IsSUFBSXhyQixFQUFFMUUsRUFBRW13QixPQUFPLEdBQUcsTUFBTWx3QixFQUFFLENBQW9FLFFBQW5FLElBQVNBLEVBQUVpd0IsTUFBTXpyQixFQUFFeEUsRUFBRWl3QixJQUFJeHJCLEVBQUV1Z0IsRUFBRTlVLGNBQVMsSUFBU2xRLEVBQUV6SCxNQUFNeUksRUFBRSxHQUFHaEIsRUFBRXpILEtBQVF3SCxFQUFFckosTUFBTXFKLEVBQUVySixLQUFLUCxhQUFhLElBQUkrSyxFQUFFbkIsRUFBRXJKLEtBQUtQLGFBQWEsSUFBSThLLEtBQUtqQixFQUFFcW9CLEVBQUU3ekIsS0FBS3dMLEVBQUVpQixLQUFLcW5CLEVBQUU1dkIsZUFBZXVJLEtBQUt4SSxFQUFFd0ksUUFBRyxJQUFTakIsRUFBRWlCLFNBQUksSUFBU0MsRUFBRUEsRUFBRUQsR0FBR2pCLEVBQUVpQixJQUFJLElBQUlBLEVBQUVuSyxVQUFVbEUsT0FBTyxFQUFFLEdBQUcsSUFBSXFPLEVBQUV4SSxFQUFFd08sU0FBU3pLLE9BQU8sR0FBRyxFQUFFeUUsRUFBRSxDQUFDQyxFQUFFaE8sTUFBTStOLEdBQUcsSUFBSSxJQUFJckYsRUFBRSxFQUFFQSxFQUFFcUYsRUFBRXJGLElBQUlzRixFQUFFdEYsR0FBRzlFLFVBQVU4RSxFQUFFLEdBQUduRCxFQUFFd08sU0FBUy9GLEVBQUUsTUFBTSxDQUFDNEQsU0FBU3hRLEVBQUVvQyxLQUFLcUosRUFBRXJKLEtBQ3hmNkIsSUFBSXlJLEVBQUVpdkIsSUFBSXpyQixFQUFFMUcsTUFBTXJGLEVBQUV5M0IsT0FBT3pyQixJQUFJNVMsRUFBUXcyQyxjQUFjLFNBQVN0b0MsRUFBRUMsR0FBOEssWUFBM0ssSUFBU0EsSUFBSUEsRUFBRSxPQUFNRCxFQUFFLENBQUMrRSxTQUFTakYsRUFBRThqQyxzQkFBc0IzakMsRUFBRWlzQixjQUFjbHNCLEVBQUV1b0MsZUFBZXZvQyxFQUFFd29DLGFBQWEsRUFBRUMsU0FBUyxLQUFLQyxTQUFTLE9BQVFELFNBQVMsQ0FBQzFqQyxTQUFTZ2hCLEVBQUUvZ0IsU0FBU2hGLEdBQVVBLEVBQUUwb0MsU0FBUzFvQyxHQUFHbE8sRUFBUTZPLGNBQWM0bEIsRUFBRXowQixFQUFRNjJDLGNBQWMsU0FBUzNvQyxHQUFHLElBQUlDLEVBQUVzbUIsRUFBRXhRLEtBQUssS0FBSy9WLEdBQVksT0FBVEMsRUFBRXRKLEtBQUtxSixFQUFTQyxHQUFHbk8sRUFBUTgyQyxVQUFVLFdBQVcsTUFBTSxDQUFDejRCLFFBQVEsT0FBT3JlLEVBQVErMkMsV0FBVyxTQUFTN29DLEdBQUcsTUFBTSxDQUFDK0UsU0FBU2loQixFQUFFeHVCLE9BQU93SSxJQUFJbE8sRUFBUWczQyxlQUFlcGlCLEVBQzNlNTBCLEVBQVFpM0MsS0FBSyxTQUFTL29DLEdBQUcsTUFBTSxDQUFDK0UsU0FBU2toQixFQUFFaGhCLFNBQVMsQ0FBQzRpQyxTQUFTLEVBQUVDLFFBQVE5bkMsR0FBR2tGLE1BQU11aEIsSUFBSTMwQixFQUFRazNDLEtBQUssU0FBU2hwQyxFQUFFQyxHQUFHLE1BQU0sQ0FBQzhFLFNBQVMrZ0IsRUFBRW52QixLQUFLcUosRUFBRTlJLGFBQVEsSUFBUytJLEVBQUUsS0FBS0EsSUFBSW5PLEVBQVEra0MsWUFBWSxTQUFTNzJCLEVBQUVDLEdBQUcsT0FBT296QixJQUFJd0QsWUFBWTcyQixFQUFFQyxJQUFJbk8sRUFBUWdsQyxXQUFXLFNBQVM5MkIsRUFBRUMsR0FBRyxPQUFPb3pCLElBQUl5RCxXQUFXOTJCLEVBQUVDLElBQUluTyxFQUFRc2xDLGNBQWMsYUFBYXRsQyxFQUFRd2pDLFVBQVUsU0FBU3QxQixFQUFFQyxHQUFHLE9BQU9vekIsSUFBSWlDLFVBQVV0MUIsRUFBRUMsSUFBSW5PLEVBQVFpbEMsb0JBQW9CLFNBQVMvMkIsRUFBRUMsRUFBRXhELEdBQUcsT0FBTzQyQixJQUFJMEQsb0JBQW9CLzJCLEVBQUVDLEVBQUV4RCxJQUM5YzNLLEVBQVFrbEMsZ0JBQWdCLFNBQVNoM0IsRUFBRUMsR0FBRyxPQUFPb3pCLElBQUkyRCxnQkFBZ0JoM0IsRUFBRUMsSUFBSW5PLEVBQVFtbEMsUUFBUSxTQUFTajNCLEVBQUVDLEdBQUcsT0FBT296QixJQUFJNEQsUUFBUWozQixFQUFFQyxJQUFJbk8sRUFBUW9sQyxXQUFXLFNBQVNsM0IsRUFBRUMsRUFBRXhELEdBQUcsT0FBTzQyQixJQUFJNkQsV0FBV2wzQixFQUFFQyxFQUFFeEQsSUFBSTNLLEVBQVFxbEMsT0FBTyxTQUFTbjNCLEdBQUcsT0FBT3F6QixJQUFJOEQsT0FBT24zQixJQUFJbE8sRUFBUXFqQyxTQUFTLFNBQVNuMUIsR0FBRyxPQUFPcXpCLElBQUk4QixTQUFTbjFCLElBQUlsTyxFQUFRdXlDLFFBQVEsVSwyQkNuQm5UMXlDLEVBQU9HLFFBQVUsRUFBakIsTSx3QkNLVyxJQUFJb1AsRUFBRUMsRUFBRXVELEVBQUVELEVBQUUsR0FBRyxpQkFBa0J3a0MsYUFBYSxtQkFBb0JBLFlBQVloeEIsSUFBSSxDQUFDLElBQUlqSixFQUFFaTZCLFlBQVluM0MsRUFBUW9pQixhQUFhLFdBQVcsT0FBT2xGLEVBQUVpSixXQUFXLENBQUMsSUFBSWdXLEVBQUVqVyxLQUFLK04sRUFBRWtJLEVBQUVoVyxNQUFNbm1CLEVBQVFvaUIsYUFBYSxXQUFXLE9BQU8rWixFQUFFaFcsTUFBTThOLEdBQzNPLEdBQUcsb0JBQXFCdGxCLFFBQVEsbUJBQW9CeW9DLGVBQWUsQ0FBQyxJQUFJbGpCLEVBQUUsS0FBS0YsRUFBRSxLQUFLRixFQUFFLFdBQVcsR0FBRyxPQUFPSSxFQUFFLElBQUksSUFBSWhtQixFQUFFbE8sRUFBUW9pQixlQUFlOFIsR0FBRSxFQUFHaG1CLEdBQUdnbUIsRUFBRSxLQUFLLE1BQU0vbEIsR0FBRyxNQUFNc25CLFdBQVczQixFQUFFLEdBQUczbEIsSUFBS2lCLEVBQUUsU0FBU2xCLEdBQUcsT0FBT2dtQixFQUFFdUIsV0FBV3JtQixFQUFFLEVBQUVsQixJQUFJZ21CLEVBQUVobUIsRUFBRXVuQixXQUFXM0IsRUFBRSxLQUFLemtCLEVBQUUsU0FBU25CLEVBQUVDLEdBQUc2bEIsRUFBRXlCLFdBQVd2bkIsRUFBRUMsSUFBSXlFLEVBQUUsV0FBVytpQixhQUFhM0IsSUFBSWgwQixFQUFRZzRCLHFCQUFxQixXQUFXLE9BQU0sR0FBSXJsQixFQUFFM1MsRUFBUXEzQyx3QkFBd0IsaUJBQWlCLENBQUMsSUFBSXhqQixFQUFFbGxCLE9BQU84bUIsV0FBV3huQixFQUFFVSxPQUFPZ25CLGFBQWEsR0FBRyxvQkFBcUIrVCxRQUFRLENBQUMsSUFBSTNWLEVBQzdmcGxCLE9BQU8yb0MscUJBQXFCLG1CQUFvQjNvQyxPQUFPNG9DLHVCQUF1QjdOLFFBQVFDLE1BQU0sc0pBQXNKLG1CQUFvQjVWLEdBQUcyVixRQUFRQyxNQUFNLHFKQUFxSixJQUFJek4sR0FBRSxFQUFHaHRCLEVBQUUsS0FBS2t0QixHQUFHLEVBQUV2c0IsRUFBRSxFQUFFaUMsRUFBRSxFQUFFOVIsRUFBUWc0QixxQkFBcUIsV0FBVyxPQUFPaDRCLEVBQVFvaUIsZ0JBQ2hnQnRRLEdBQUdhLEVBQUUsYUFBYTNTLEVBQVFxM0Msd0JBQXdCLFNBQVNucEMsR0FBRyxFQUFFQSxHQUFHLElBQUlBLEVBQUV3N0IsUUFBUUMsTUFBTSxtSEFBbUg5NUIsRUFBRSxFQUFFM0IsRUFBRW1WLEtBQUttMEIsTUFBTSxJQUFJdHBDLEdBQUcsR0FBRyxJQUFJbVUsRUFBRSxJQUFJKzBCLGVBQWVqa0IsRUFBRTlRLEVBQUVvMUIsTUFBTXAxQixFQUFFcTFCLE1BQU1DLFVBQVUsV0FBVyxHQUFHLE9BQU96b0MsRUFBRSxDQUFDLElBQUloQixFQUFFbE8sRUFBUW9pQixlQUFldFEsRUFBRTVELEVBQUUyQixFQUFFLElBQUlYLEdBQUUsRUFBR2hCLEdBQUdpbEIsRUFBRXlrQixZQUFZLE9BQU8xYixHQUFFLEVBQUdodEIsRUFBRSxNQUFNLE1BQU1mLEdBQUcsTUFBTWdsQixFQUFFeWtCLFlBQVksTUFBTXpwQyxRQUFTK3RCLEdBQUUsR0FBSTlzQixFQUFFLFNBQVNsQixHQUFHZ0IsRUFBRWhCLEVBQUVndUIsSUFBSUEsR0FBRSxFQUFHL0ksRUFBRXlrQixZQUFZLFFBQVF2b0MsRUFBRSxTQUFTbkIsRUFBRUMsR0FBR2l1QixFQUN0ZnZJLEdBQUUsV0FBVzNsQixFQUFFbE8sRUFBUW9pQixrQkFBaUJqVSxJQUFJeUUsRUFBRSxXQUFXM0UsRUFBRW11QixHQUFHQSxHQUFHLEdBQUcsU0FBUzVGLEVBQUV0b0IsRUFBRUMsR0FBRyxJQUFJeEQsRUFBRXVELEVBQUVuTixPQUFPbU4sRUFBRXRPLEtBQUt1TyxHQUFHRCxFQUFFLE9BQU8sQ0FBQyxJQUFJaUIsRUFBRXhFLEVBQUUsSUFBSSxFQUFFL0QsRUFBRXNILEVBQUVpQixHQUFHLFVBQUcsSUFBU3ZJLEdBQUcsRUFBRTZ2QixFQUFFN3ZCLEVBQUV1SCxJQUEwQixNQUFNRCxFQUE3QkEsRUFBRWlCLEdBQUdoQixFQUFFRCxFQUFFdkQsR0FBRy9ELEVBQUUrRCxFQUFFd0UsR0FBZ0IsU0FBU3NsQixFQUFFdm1CLEdBQVUsWUFBTyxLQUFkQSxFQUFFQSxFQUFFLElBQXFCLEtBQUtBLEVBQ2hQLFNBQVN3bUIsRUFBRXhtQixHQUFHLElBQUlDLEVBQUVELEVBQUUsR0FBRyxRQUFHLElBQVNDLEVBQUUsQ0FBQyxJQUFJeEQsRUFBRXVELEVBQUUycEMsTUFBTSxHQUFHbHRDLElBQUl3RCxFQUFFLENBQUNELEVBQUUsR0FBR3ZELEVBQUV1RCxFQUFFLElBQUksSUFBSWlCLEVBQUUsRUFBRXZJLEVBQUVzSCxFQUFFbk4sT0FBT29PLEVBQUV2SSxHQUFHLENBQUMsSUFBSW1ELEVBQUUsR0FBR29GLEVBQUUsR0FBRyxFQUFFMU0sRUFBRXlMLEVBQUVuRSxHQUFHb3FCLEVBQUVwcUIsRUFBRSxFQUFFaUUsRUFBRUUsRUFBRWltQixHQUFHLFFBQUcsSUFBUzF4QixHQUFHLEVBQUVnMEIsRUFBRWgwQixFQUFFa0ksUUFBRyxJQUFTcUQsR0FBRyxFQUFFeW9CLEVBQUV6b0IsRUFBRXZMLElBQUl5TCxFQUFFaUIsR0FBR25CLEVBQUVFLEVBQUVpbUIsR0FBR3hwQixFQUFFd0UsRUFBRWdsQixJQUFJam1CLEVBQUVpQixHQUFHMU0sRUFBRXlMLEVBQUVuRSxHQUFHWSxFQUFFd0UsRUFBRXBGLE9BQVEsV0FBRyxJQUFTaUUsR0FBRyxFQUFFeW9CLEVBQUV6b0IsRUFBRXJELElBQTBCLE1BQU11RCxFQUE3QkEsRUFBRWlCLEdBQUduQixFQUFFRSxFQUFFaW1CLEdBQUd4cEIsRUFBRXdFLEVBQUVnbEIsSUFBZ0IsT0FBT2htQixFQUFFLE9BQU8sS0FBSyxTQUFTc29CLEVBQUV2b0IsRUFBRUMsR0FBRyxJQUFJeEQsRUFBRXVELEVBQUU0cEMsVUFBVTNwQyxFQUFFMnBDLFVBQVUsT0FBTyxJQUFJbnRDLEVBQUVBLEVBQUV1RCxFQUFFcE8sR0FBR3FPLEVBQUVyTyxHQUFHLElBQUk4MEIsRUFBRSxHQUFHK0IsRUFBRSxHQUFHQyxFQUFFLEVBQUV3QyxFQUFFLEtBQUs0RyxFQUFFLEVBQUVyTCxHQUFFLEVBQUcyTSxHQUFFLEVBQUdDLEdBQUUsRUFDamEsU0FBU0MsRUFBRXR6QixHQUFHLElBQUksSUFBSUMsRUFBRXNtQixFQUFFa0MsR0FBRyxPQUFPeG9CLEdBQUcsQ0FBQyxHQUFHLE9BQU9BLEVBQUUydEIsU0FBU3BILEVBQUVpQyxPQUFRLE1BQUd4b0IsRUFBRTRwQyxXQUFXN3BDLEdBQWdELE1BQTlDd21CLEVBQUVpQyxHQUFHeG9CLEVBQUUycEMsVUFBVTNwQyxFQUFFNnBDLGVBQWV4aEIsRUFBRTVCLEVBQUV6bUIsR0FBY0EsRUFBRXNtQixFQUFFa0MsSUFBSSxTQUFTeU0sRUFBRWwxQixHQUFhLEdBQVZxekIsR0FBRSxFQUFHQyxFQUFFdHpCLElBQU9vekIsRUFBRSxHQUFHLE9BQU83TSxFQUFFRyxHQUFHME0sR0FBRSxFQUFHbHlCLEVBQUU0NUIsT0FBTyxDQUFDLElBQUk3NkIsRUFBRXNtQixFQUFFa0MsR0FBRyxPQUFPeG9CLEdBQUdrQixFQUFFK3pCLEVBQUVqMUIsRUFBRTRwQyxVQUFVN3BDLElBQ3RQLFNBQVM4NkIsRUFBRTk2QixFQUFFQyxHQUFHbXpCLEdBQUUsRUFBR0MsSUFBSUEsR0FBRSxFQUFHM3VCLEtBQUsraEIsR0FBRSxFQUFHLElBQUlocUIsRUFBRXExQixFQUFFLElBQVMsSUFBTHdCLEVBQUVyekIsR0FBT2lyQixFQUFFM0UsRUFBRUcsR0FBRyxPQUFPd0UsTUFBTUEsRUFBRTRlLGVBQWU3cEMsSUFBSUQsSUFBSWxPLEVBQVFnNEIseUJBQXlCLENBQUMsSUFBSTdvQixFQUFFaXFCLEVBQUUwQyxTQUFTLEdBQUcsbUJBQW9CM3NCLEVBQUUsQ0FBQ2lxQixFQUFFMEMsU0FBUyxLQUFLa0UsRUFBRTVHLEVBQUU2ZSxjQUFjLElBQUlyeEMsRUFBRXVJLEVBQUVpcUIsRUFBRTRlLGdCQUFnQjdwQyxHQUFHQSxFQUFFbk8sRUFBUW9pQixlQUFlLG1CQUFvQnhiLEVBQUV3eUIsRUFBRTBDLFNBQVNsMUIsRUFBRXd5QixJQUFJM0UsRUFBRUcsSUFBSUYsRUFBRUUsR0FBRzRNLEVBQUVyekIsUUFBUXVtQixFQUFFRSxHQUFHd0UsRUFBRTNFLEVBQUVHLEdBQUcsR0FBRyxPQUFPd0UsRUFBRSxJQUFJcnZCLEdBQUUsTUFBTyxDQUFDLElBQUl0SCxFQUFFZ3lCLEVBQUVrQyxHQUFHLE9BQU9sMEIsR0FBRzRNLEVBQUUrekIsRUFBRTNnQyxFQUFFczFDLFVBQVU1cEMsR0FBR3BFLEdBQUUsRUFBRyxPQUFPQSxFQUFFLFFBQVFxdkIsRUFBRSxLQUFLNEcsRUFBRXIxQixFQUFFZ3FCLEdBQUUsR0FBSSxJQUFJd1UsRUFBRXgyQixFQUFFM1MsRUFBUTY0QixzQkFBc0IsRUFDdGU3NEIsRUFBUXU0QiwyQkFBMkIsRUFBRXY0QixFQUFRMjRCLHFCQUFxQixFQUFFMzRCLEVBQVE4Z0Isd0JBQXdCLEVBQUU5Z0IsRUFBUWs0QyxtQkFBbUIsS0FBS2w0QyxFQUFRNGpCLDhCQUE4QixFQUFFNWpCLEVBQVE4M0Isd0JBQXdCLFNBQVM1cEIsR0FBR0EsRUFBRTR0QixTQUFTLE1BQU05N0IsRUFBUW00QywyQkFBMkIsV0FBVzdXLEdBQUczTSxJQUFJMk0sR0FBRSxFQUFHbHlCLEVBQUU0NUIsS0FBS2hwQyxFQUFRcTRCLGlDQUFpQyxXQUFXLE9BQU8ySCxHQUFHaGdDLEVBQVFvNEMsOEJBQThCLFdBQVcsT0FBTzNqQixFQUFFRyxJQUNwYTUwQixFQUFRcTRDLGNBQWMsU0FBU25xQyxHQUFHLE9BQU84eEIsR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJN3hCLEVBQUUsRUFBRSxNQUFNLFFBQVFBLEVBQUU2eEIsRUFBRSxJQUFJcjFCLEVBQUVxMUIsRUFBRUEsRUFBRTd4QixFQUFFLElBQUksT0FBT0QsSUFBSSxRQUFROHhCLEVBQUVyMUIsSUFBSTNLLEVBQVFzNEMsd0JBQXdCLGFBQWF0NEMsRUFBUWs0QixzQkFBc0JpUixFQUFFbnBDLEVBQVFtZ0IseUJBQXlCLFNBQVNqUyxFQUFFQyxHQUFHLE9BQU9ELEdBQUcsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLFFBQVFBLEVBQUUsRUFBRSxJQUFJdkQsRUFBRXExQixFQUFFQSxFQUFFOXhCLEVBQUUsSUFBSSxPQUFPQyxJQUFJLFFBQVE2eEIsRUFBRXIxQixJQUNwVzNLLEVBQVE2Z0IsMEJBQTBCLFNBQVMzUyxFQUFFQyxFQUFFeEQsR0FBRyxJQUFJd0UsRUFBRW5QLEVBQVFvaUIsZUFBOEYsT0FBdEN6WCxFQUF6QyxpQkFBa0JBLEdBQUcsT0FBT0EsR0FBZSxpQkFBWkEsRUFBRUEsRUFBRTR0QyxRQUE2QixFQUFFNXRDLEVBQUV3RSxFQUFFeEUsRUFBT3dFLEVBQVNqQixHQUFHLEtBQUssRUFBRSxJQUFJdEgsR0FBRyxFQUFFLE1BQU0sS0FBSyxFQUFFQSxFQUFFLElBQUksTUFBTSxLQUFLLEVBQUVBLEVBQUUsV0FBVyxNQUFNLEtBQUssRUFBRUEsRUFBRSxJQUFJLE1BQU0sUUFBUUEsRUFBRSxJQUEyTSxPQUFqTXNILEVBQUUsQ0FBQ3BPLEdBQUc4MkIsSUFBSWtGLFNBQVMzdEIsRUFBRThwQyxjQUFjL3BDLEVBQUU2cEMsVUFBVXB0QyxFQUFFcXRDLGVBQXZEcHhDLEVBQUUrRCxFQUFFL0QsRUFBb0VreEMsV0FBVyxHQUFHbnRDLEVBQUV3RSxHQUFHakIsRUFBRTRwQyxVQUFVbnRDLEVBQUU2ckIsRUFBRUcsRUFBRXpvQixHQUFHLE9BQU91bUIsRUFBRUcsSUFBSTFtQixJQUFJdW1CLEVBQUVrQyxLQUFLNEssRUFBRTN1QixJQUFJMnVCLEdBQUUsRUFBR2x5QixFQUFFK3pCLEVBQUV6NEIsRUFBRXdFLE1BQU1qQixFQUFFNHBDLFVBQVVseEMsRUFBRTR2QixFQUFFNUIsRUFBRTFtQixHQUFHb3pCLEdBQUczTSxJQUFJMk0sR0FBRSxFQUFHbHlCLEVBQUU0NUIsS0FBWTk2QixHQUMxZGxPLEVBQVF3NEMsc0JBQXNCLFNBQVN0cUMsR0FBRyxJQUFJQyxFQUFFNnhCLEVBQUUsT0FBTyxXQUFXLElBQUlyMUIsRUFBRXExQixFQUFFQSxFQUFFN3hCLEVBQUUsSUFBSSxPQUFPRCxFQUFFaVAsTUFBTS9jLEtBQUs2RSxXQUFXLFFBQVErNkIsRUFBRXIxQixNLDJCQ2hCM0g5SyxFQUFPRyxRQUFVLEVBQWpCLEssMkJDREYsSUFDTWszQyxFQWVGdUIsRUFBWSxXQUNkLElBQUl2QixFQUFPLEdBQ1gsT0FBTyxTQUFrQnR2QyxHQUN2QixRQUE0QixJQUFqQnN2QyxFQUFLdHZDLEdBQXlCLENBQ3ZDLElBQUk4d0MsRUFBYzlwQyxTQUFTK3BDLGNBQWMvd0MsR0FFekMsR0FBSStHLE9BQU80aUIsbUJBQXFCbW5CLGFBQXVCL3BDLE9BQU80aUIsa0JBQzVELElBR0VtbkIsRUFBY0EsRUFBWUUsZ0JBQWdCQyxLQUMxQyxNQUFPanlDLEdBRVA4eEMsRUFBYyxLQUlsQnhCLEVBQUt0dkMsR0FBVTh3QyxFQUdqQixPQUFPeEIsRUFBS3R2QyxJQXBCQSxHQXdCWmt4QyxFQUFjLEdBRWxCLFNBQVNDLEVBQXFCQyxHQUc1QixJQUZBLElBQUlDLEdBQVUsRUFFTHY0QyxFQUFJLEVBQUdBLEVBQUlvNEMsRUFBWS8zQyxPQUFRTCxJQUN0QyxHQUFJbzRDLEVBQVlwNEMsR0FBR3M0QyxhQUFlQSxFQUFZLENBQzVDQyxFQUFTdjRDLEVBQ1QsTUFJSixPQUFPdTRDLEVBR1QsU0FBU0MsRUFBYWg1QyxFQUFNaUksR0FJMUIsSUFIQSxJQUFJZ3hDLEVBQWEsR0FDYkMsRUFBYyxHQUVUMTRDLEVBQUksRUFBR0EsRUFBSVIsRUFBS2EsT0FBUUwsSUFBSyxDQUNwQyxJQUFJSixFQUFPSixFQUFLUSxHQUNaWixFQUFLcUksRUFBUXFTLEtBQU9sYSxFQUFLLEdBQUs2SCxFQUFRcVMsS0FBT2xhLEVBQUssR0FDbEQ2MUMsRUFBUWdELEVBQVdyNUMsSUFBTyxFQUMxQms1QyxFQUFhLEdBQUd4NEMsT0FBT1YsRUFBSSxLQUFLVSxPQUFPMjFDLEdBQzNDZ0QsRUFBV3I1QyxHQUFNcTJDLEVBQVEsRUFDekIsSUFBSXZzQyxFQUFRbXZDLEVBQXFCQyxHQUM3Qmp1QyxFQUFNLENBQ1JzdUMsSUFBSy80QyxFQUFLLEdBQ1ZnNUMsTUFBT2g1QyxFQUFLLEdBQ1ppNUMsVUFBV2o1QyxFQUFLLEtBR0gsSUFBWHNKLEdBQ0ZrdkMsRUFBWWx2QyxHQUFPNHZDLGFBQ25CVixFQUFZbHZDLEdBQU82ekIsUUFBUTF5QixJQUUzQit0QyxFQUFZbDVDLEtBQUssQ0FDZm81QyxXQUFZQSxFQUNadmIsUUFBU2djLEVBQVMxdUMsRUFBSzVDLEdBQ3ZCcXhDLFdBQVksSUFJaEJKLEVBQVl4NUMsS0FBS281QyxHQUduQixPQUFPSSxFQUdULFNBQVNNLEVBQW1CdnhDLEdBQzFCLElBQUk2UixFQUFRcEwsU0FBU0MsY0FBYyxTQUMvQjhxQyxFQUFheHhDLEVBQVF3eEMsWUFBYyxHQUV2QyxRQUFnQyxJQUFyQkEsRUFBV0MsTUFBdUIsQ0FDM0MsSUFBSUEsRUFBbUQsS0FFbkRBLElBQ0ZELEVBQVdDLE1BQVFBLEdBUXZCLEdBSkFqNEMsT0FBTzRFLEtBQUtvekMsR0FBWWx5QyxTQUFRLFNBQVVmLEdBQ3hDc1QsRUFBTXpKLGFBQWE3SixFQUFLaXpDLEVBQVdqekMsT0FHUCxtQkFBbkJ5QixFQUFRMHhDLE9BQ2pCMXhDLEVBQVEweEMsT0FBTzcvQixPQUNWLENBQ0wsSUFBSXBTLEVBQVM2d0MsRUFBVXR3QyxFQUFRMHhDLFFBQVUsUUFFekMsSUFBS2p5QyxFQUNILE1BQU0sSUFBSTJFLE1BQU0sMkdBR2xCM0UsRUFBTytPLFlBQVlxRCxHQUdyQixPQUFPQSxFQWNULElBQ004L0IsRUFERkMsR0FDRUQsRUFBWSxHQUNULFNBQWlCbHdDLEVBQU9vd0MsR0FFN0IsT0FEQUYsRUFBVWx3QyxHQUFTb3dDLEVBQ1pGLEVBQVVHLE9BQU9DLFNBQVN6NUMsS0FBSyxRQUkxQyxTQUFTMDVDLEVBQW9CbmdDLEVBQU9wUSxFQUFPd3dDLEVBQVFydkMsR0FDakQsSUFBSXN1QyxFQUFNZSxFQUFTLEdBQUtydkMsRUFBSXV1QyxNQUFRLFVBQVU5NEMsT0FBT3VLLEVBQUl1dUMsTUFBTyxNQUFNOTRDLE9BQU91SyxFQUFJc3VDLElBQUssS0FBT3R1QyxFQUFJc3VDLElBSWpHLEdBQUlyL0IsRUFBTXFnQyxXQUNScmdDLEVBQU1xZ0MsV0FBV0MsUUFBVVAsRUFBWW53QyxFQUFPeXZDLE9BQ3pDLENBQ0wsSUFBSWtCLEVBQVUzckMsU0FBU202QixlQUFlc1EsR0FDbENtQixFQUFheGdDLEVBQU13Z0MsV0FFbkJBLEVBQVc1d0MsSUFDYm9RLEVBQU10RCxZQUFZOGpDLEVBQVc1d0MsSUFHM0I0d0MsRUFBV3o1QyxPQUNiaVosRUFBTTB4QixhQUFhNk8sRUFBU0MsRUFBVzV3QyxJQUV2Q29RLEVBQU1yRCxZQUFZNGpDLElBS3hCLFNBQVNFLEVBQVd6Z0MsRUFBTzdSLEVBQVM0QyxHQUNsQyxJQUFJc3VDLEVBQU10dUMsRUFBSXN1QyxJQUNWQyxFQUFRdnVDLEVBQUl1dUMsTUFDWkMsRUFBWXh1QyxFQUFJd3VDLFVBZXBCLEdBYklELEVBQ0Z0L0IsRUFBTXpKLGFBQWEsUUFBUytvQyxHQUU1QnQvQixFQUFNMUosZ0JBQWdCLFNBR3BCaXBDLEdBQTZCLG9CQUFUbDJDLE9BQ3RCZzJDLEdBQU8sdURBQXVENzRDLE9BQU82QyxLQUFLRSxTQUFTQyxtQkFBbUJDLEtBQUtDLFVBQVU2MUMsTUFBZSxRQU1sSXYvQixFQUFNcWdDLFdBQ1JyZ0MsRUFBTXFnQyxXQUFXQyxRQUFVakIsTUFDdEIsQ0FDTCxLQUFPci9CLEVBQU12RCxZQUNYdUQsRUFBTXRELFlBQVlzRCxFQUFNdkQsWUFHMUJ1RCxFQUFNckQsWUFBWS9ILFNBQVNtNkIsZUFBZXNRLEtBSTlDLElBQUlxQixFQUFZLEtBQ1pDLEVBQW1CLEVBRXZCLFNBQVNsQixFQUFTMXVDLEVBQUs1QyxHQUNyQixJQUFJNlIsRUFDQTRnQyxFQUNBUixFQUVKLEdBQUlqeUMsRUFBUXV5QyxVQUFXLENBQ3JCLElBQUlHLEVBQWFGLElBQ2pCM2dDLEVBQVEwZ0MsSUFBY0EsRUFBWWhCLEVBQW1CdnhDLElBQ3JEeXlDLEVBQVNULEVBQW9CbDJCLEtBQUssS0FBTWpLLEVBQU82Z0MsR0FBWSxHQUMzRFQsRUFBU0QsRUFBb0JsMkIsS0FBSyxLQUFNakssRUFBTzZnQyxHQUFZLFFBRTNEN2dDLEVBQVEwL0IsRUFBbUJ2eEMsR0FDM0J5eUMsRUFBU0gsRUFBV3gyQixLQUFLLEtBQU1qSyxFQUFPN1IsR0FFdENpeUMsRUFBUyxZQXhGYixTQUE0QnBnQyxHQUUxQixHQUF5QixPQUFyQkEsRUFBTTJCLFdBQ1IsT0FBTyxFQUdUM0IsRUFBTTJCLFdBQVdqRixZQUFZc0QsR0FtRnpCOGdDLENBQW1COWdDLElBS3ZCLE9BREE0Z0MsRUFBTzd2QyxHQUNBLFNBQXFCZ3dDLEdBQzFCLEdBQUlBLEVBQVEsQ0FDVixHQUFJQSxFQUFPMUIsTUFBUXR1QyxFQUFJc3VDLEtBQU8wQixFQUFPekIsUUFBVXZ1QyxFQUFJdXVDLE9BQVN5QixFQUFPeEIsWUFBY3h1QyxFQUFJd3VDLFVBQ25GLE9BR0ZxQixFQUFPN3ZDLEVBQU1nd0MsUUFFYlgsS0FLTnY2QyxFQUFPRyxRQUFVLFNBQVVFLEVBQU1pSSxJQUMvQkEsRUFBVUEsR0FBVyxJQUdSdXlDLFdBQTBDLGtCQUF0QnZ5QyxFQUFRdXlDLFlBQ3ZDdnlDLEVBQVF1eUMsZ0JBck9ZLElBQVR4RCxJQU1UQSxFQUFPZ0QsUUFBUXZyQyxRQUFVQyxVQUFZQSxTQUFTb3NDLE1BQVFyc0MsT0FBT3NzQyxPQUd4RC9ELElBZ09ULElBQUlnRSxFQUFrQmhDLEVBRHRCaDVDLEVBQU9BLEdBQVEsR0FDMEJpSSxHQUN6QyxPQUFPLFNBQWdCZ3pDLEdBR3JCLEdBRkFBLEVBQVVBLEdBQVcsR0FFMkIsbUJBQTVDeDVDLE9BQU9lLFVBQVV2QyxTQUFTd0MsS0FBS3c0QyxHQUFuQyxDQUlBLElBQUssSUFBSXo2QyxFQUFJLEVBQUdBLEVBQUl3NkMsRUFBZ0JuNkMsT0FBUUwsSUFBSyxDQUMvQyxJQUNJa0osRUFBUW12QyxFQURLbUMsRUFBZ0J4NkMsSUFFakNvNEMsRUFBWWx2QyxHQUFPNHZDLGFBS3JCLElBRkEsSUFBSTRCLEVBQXFCbEMsRUFBYWlDLEVBQVNoekMsR0FFdENuSCxFQUFLLEVBQUdBLEVBQUtrNkMsRUFBZ0JuNkMsT0FBUUMsSUFBTSxDQUNsRCxJQUVJcTZDLEVBQVN0QyxFQUZLbUMsRUFBZ0JsNkMsSUFJSyxJQUFuQzgzQyxFQUFZdUMsR0FBUTdCLGFBQ3RCVixFQUFZdUMsR0FBUTVkLFVBRXBCcWIsRUFBWXdDLE9BQU9ELEVBQVEsSUFJL0JILEVBQWtCRSxPQ3pRbEJHLEVBQTJCLEdBRy9CLFNBQVNDLEVBQW9CQyxHQUU1QixHQUFHRixFQUF5QkUsR0FDM0IsT0FBT0YsRUFBeUJFLEdBQVV6N0MsUUFHM0MsSUFBSUgsRUFBUzA3QyxFQUF5QkUsR0FBWSxDQUNqRDM3QyxHQUFJMjdDLEVBRUp6N0MsUUFBUyxJQU9WLE9BSEEwN0MsRUFBb0JELEdBQVU1N0MsRUFBUUEsRUFBT0csUUFBU3c3QyxHQUcvQzM3QyxFQUFPRyxRQ25CZnc3QyxFQUFvQi80QyxFQUFLNUMsSUFDeEIsSUFBSTg3QyxFQUFTOTdDLEdBQVVBLEVBQU8rN0MsV0FDN0IsSUFBTS83QyxFQUFnQixRQUN0QixJQUFNQSxFQUVQLE9BREEyN0MsRUFBb0Jyc0MsRUFBRXdzQyxFQUFRLENBQUV6dEMsRUFBR3l0QyxJQUM1QkEsR0NMUkgsRUFBb0Jyc0MsRUFBSSxDQUFDblAsRUFBUzY3QyxLQUNqQyxJQUFJLElBQUluMUMsS0FBT20xQyxFQUNYTCxFQUFvQmo1QyxFQUFFczVDLEVBQVluMUMsS0FBUzgwQyxFQUFvQmo1QyxFQUFFdkMsRUFBUzBHLElBQzVFL0UsT0FBT2lFLGVBQWU1RixFQUFTMEcsRUFBSyxDQUFFa04sWUFBWSxFQUFNRixJQUFLbW9DLEVBQVduMUMsTUNKM0U4MEMsRUFBb0Juc0MsRUFBSSxXQUN2QixHQUEwQixpQkFBZnlzQyxXQUF5QixPQUFPQSxXQUMzQyxJQUNDLE9BQU8xN0MsTUFBUSxJQUFJMjdDLFNBQVMsY0FBYixHQUNkLE1BQU9uMUMsR0FDUixHQUFzQixpQkFBWCtILE9BQXFCLE9BQU9BLFFBTGpCLEdDQXhCNnNDLEVBQW9CajVDLEVBQUksQ0FBQ3dJLEVBQUtpeEMsSUFBU3I2QyxPQUFPZSxVQUFVbUUsZUFBZWxFLEtBQUtvSSxFQUFLaXhDLEcsb0VDQWxFLFNBQVNDLEVBQWVDLEVBQVVDLEdBQy9DRCxFQUFTeDVDLFVBQVlmLE9BQU9taUMsT0FBT3FZLEVBQVd6NUMsV0FDOUN3NUMsRUFBU3g1QyxVQUFVRyxZQUFjcTVDLEVBQ2pDQSxFQUFTRSxVQUFZRCxFQ0tWLElBQUksSUFMSCxDQUVkLE9BQWlCLE9BQ2pCLFdBQW9CLElBTUwsVyxzQkNaQSxTQUFTLElBZXRCLE9BZEEsRUFBV3g2QyxPQUFPdUYsUUFBVSxTQUFVVSxHQUNwQyxJQUFLLElBQUlsSCxFQUFJLEVBQUdBLEVBQUl1RSxVQUFVbEUsT0FBUUwsSUFBSyxDQUN6QyxJQUFJcUQsRUFBU2tCLFVBQVV2RSxHQUV2QixJQUFLLElBQUlnRyxLQUFPM0MsRUFDVnBDLE9BQU9lLFVBQVVtRSxlQUFlbEUsS0FBS29CLEVBQVEyQyxLQUMvQ2tCLEVBQU9sQixHQUFPM0MsRUFBTzJDLElBSzNCLE9BQU9rQixJQUdPdVYsTUFBTS9jLEtBQU02RSxXQ2Y5QixTQUFTbzNDLEVBQVdDLEdBQ2xCLE1BQThCLE1BQXZCQSxFQUFTbmlDLE9BQU8sR0FJekIsU0FBU29pQyxFQUFVcjhDLEVBQU0wSixHQUN2QixJQUFLLElBQUlsSixFQUFJa0osRUFBTytJLEVBQUlqUyxFQUFJLEVBQUcrQixFQUFJdkMsRUFBS2EsT0FBUTRSLEVBQUlsUSxFQUFHL0IsR0FBSyxFQUFHaVMsR0FBSyxFQUNsRXpTLEVBQUtRLEdBQUtSLEVBQUt5UyxHQUdqQnpTLEVBQUsyM0MsTUNFUCxRQVZBLFNBQW1CMkUsRUFBV2hULEdBQzFCLElBQUlnVCxFQUlBLE1BQU0sSUFBSWp3QyxNQU5MLHFCQ0tiLFNBQVNrd0MsRUFBZ0J2MEMsR0FDdkIsTUFBMEIsTUFBbkJBLEVBQUtpUyxPQUFPLEdBQWFqUyxFQUFPLElBQU1BLEVBUS9DLFNBQVN3MEMsRUFBY3gwQyxFQUFNSyxHQUMzQixPQUpGLFNBQXFCTCxFQUFNSyxHQUN6QixPQUE0RCxJQUFyREwsRUFBSzRILGNBQWNtSyxRQUFRMVIsRUFBT3VILGlCQUF1RSxJQUEvQyxNQUFNbUssUUFBUS9SLEVBQUtpUyxPQUFPNVIsRUFBT3hILFNBRzNGNDdDLENBQVl6MEMsRUFBTUssR0FBVUwsRUFBS3FDLE9BQU9oQyxFQUFPeEgsUUFBVW1ILEVBRWxFLFNBQVMwMEMsRUFBbUIxMEMsR0FDMUIsTUFBd0MsTUFBakNBLEVBQUtpUyxPQUFPalMsRUFBS25ILE9BQVMsR0FBYW1ILEVBQUt0RixNQUFNLEdBQUksR0FBS3NGLEVBMEJwRSxTQUFTMjBDLEVBQVd6d0MsR0FDbEIsSUFBSWt3QyxFQUFXbHdDLEVBQVNrd0MsU0FDcEJ2dEIsRUFBUzNpQixFQUFTMmlCLE9BQ2xCK3RCLEVBQU8xd0MsRUFBUzB3QyxLQUNoQjUwQyxFQUFPbzBDLEdBQVksSUFHdkIsT0FGSXZ0QixHQUFxQixNQUFYQSxJQUFnQjdtQixHQUE2QixNQUFyQjZtQixFQUFPNVUsT0FBTyxHQUFhNFUsRUFBUyxJQUFNQSxHQUM1RSt0QixHQUFpQixNQUFUQSxJQUFjNTBDLEdBQTJCLE1BQW5CNDBDLEVBQUszaUMsT0FBTyxHQUFhMmlDLEVBQU8sSUFBTUEsR0FDakU1MEMsRUFHVCxTQUFTLEVBQWVBLEVBQU1zMUIsRUFBTzkyQixFQUFLcTJDLEdBQ3hDLElBQUkzd0MsRUFFZ0IsaUJBQVRsRSxHQUVUa0UsRUF2Q0osU0FBbUJsRSxHQUNqQixJQUFJbzBDLEVBQVdwMEMsR0FBUSxJQUNuQjZtQixFQUFTLEdBQ1QrdEIsRUFBTyxHQUNQRSxFQUFZVixFQUFTcmlDLFFBQVEsTUFFZCxJQUFmK2lDLElBQ0ZGLEVBQU9SLEVBQVMveEMsT0FBT3l5QyxHQUN2QlYsRUFBV0EsRUFBUy94QyxPQUFPLEVBQUd5eUMsSUFHaEMsSUFBSUMsRUFBY1gsRUFBU3JpQyxRQUFRLEtBT25DLE9BTHFCLElBQWpCZ2pDLElBQ0ZsdUIsRUFBU3V0QixFQUFTL3hDLE9BQU8weUMsR0FDekJYLEVBQVdBLEVBQVMveEMsT0FBTyxFQUFHMHlDLElBR3pCLENBQ0xYLFNBQVVBLEVBQ1Z2dEIsT0FBbUIsTUFBWEEsRUFBaUIsR0FBS0EsRUFDOUIrdEIsS0FBZSxNQUFUQSxFQUFlLEdBQUtBLEdBa0JmSSxDQUFVaDFDLElBQ1pzMUIsTUFBUUEsUUFJU3g3QixLQUQxQm9LLEVBQVcsRUFBUyxHQUFJbEUsSUFDWG8wQyxXQUF3Qmx3QyxFQUFTa3dDLFNBQVcsSUFFckRsd0MsRUFBUzJpQixPQUN1QixNQUE5QjNpQixFQUFTMmlCLE9BQU81VSxPQUFPLEtBQVkvTixFQUFTMmlCLE9BQVMsSUFBTTNpQixFQUFTMmlCLFFBRXhFM2lCLEVBQVMyaUIsT0FBUyxHQUdoQjNpQixFQUFTMHdDLEtBQ3FCLE1BQTVCMXdDLEVBQVMwd0MsS0FBSzNpQyxPQUFPLEtBQVkvTixFQUFTMHdDLEtBQU8sSUFBTTF3QyxFQUFTMHdDLE1BRXBFMXdDLEVBQVMwd0MsS0FBTyxRQUdKOTZDLElBQVZ3N0IsUUFBMEN4N0IsSUFBbkJvSyxFQUFTb3hCLFFBQXFCcHhCLEVBQVNveEIsTUFBUUEsSUFHNUUsSUFDRXB4QixFQUFTa3dDLFNBQVdhLFVBQVUvd0MsRUFBU2t3QyxVQUN2QyxNQUFPMTFDLEdBQ1AsTUFBSUEsYUFBYXcyQyxTQUNULElBQUlBLFNBQVMsYUFBZWh4QyxFQUFTa3dDLFNBQXhCLGlGQUViMTFDLEVBb0JWLE9BaEJJRixJQUFLMEYsRUFBUzFGLElBQU1BLEdBRXBCcTJDLEVBRUczd0MsRUFBU2t3QyxTQUU2QixNQUFoQ2x3QyxFQUFTa3dDLFNBQVNuaUMsT0FBTyxLQUNsQy9OLEVBQVNrd0MsU0ZyRmYsU0FBeUJ4MEMsRUFBSS9FLFFBQ2RmLElBQVRlLElBQW9CQSxFQUFPLElBRS9CLElBa0JJczZDLEVBbEJBQyxFQUFXeDFDLEdBQU1BLEVBQUdOLE1BQU0sTUFBUyxHQUNuQysxQyxFQUFheDZDLEdBQVFBLEVBQUt5RSxNQUFNLE1BQVMsR0FFekNnMkMsRUFBVTExQyxHQUFNdTBDLEVBQVd2MEMsR0FDM0IyMUMsRUFBWTE2QyxHQUFRczVDLEVBQVd0NUMsR0FDL0IyNkMsRUFBYUYsR0FBV0MsRUFXNUIsR0FUSTMxQyxHQUFNdTBDLEVBQVd2MEMsR0FFbkJ5MUMsRUFBWUQsRUFDSEEsRUFBUXY4QyxTQUVqQnc4QyxFQUFVMUYsTUFDVjBGLEVBQVlBLEVBQVUvOEMsT0FBTzg4QyxLQUcxQkMsRUFBVXg4QyxPQUFRLE1BQU8sSUFHOUIsR0FBSXc4QyxFQUFVeDhDLE9BQVEsQ0FDcEIsSUFBSW9uQyxFQUFPb1YsRUFBVUEsRUFBVXg4QyxPQUFTLEdBQ3hDczhDLEVBQTRCLE1BQVRsVixHQUF5QixPQUFUQSxHQUEwQixLQUFUQSxPQUVwRGtWLEdBQW1CLEVBSXJCLElBREEsSUFBSU0sRUFBSyxFQUNBajlDLEVBQUk2OEMsRUFBVXg4QyxPQUFRTCxHQUFLLEVBQUdBLElBQUssQ0FDMUMsSUFBSWs5QyxFQUFPTCxFQUFVNzhDLEdBRVIsTUFBVGs5QyxFQUNGckIsRUFBVWdCLEVBQVc3OEMsR0FDSCxPQUFUazlDLEdBQ1RyQixFQUFVZ0IsRUFBVzc4QyxHQUNyQmk5QyxLQUNTQSxJQUNUcEIsRUFBVWdCLEVBQVc3OEMsR0FDckJpOUMsS0FJSixJQUFLRCxFQUFZLEtBQU9DLElBQU1BLEVBQUlKLEVBQVV2b0IsUUFBUSxPQUdsRDBvQixHQUNpQixLQUFqQkgsRUFBVSxJQUNSQSxFQUFVLElBQU9sQixFQUFXa0IsRUFBVSxLQUV4Q0EsRUFBVXZvQixRQUFRLElBRXBCLElBQUlpa0IsRUFBU3NFLEVBQVU5OEMsS0FBSyxLQUk1QixPQUZJNDhDLEdBQTBDLE1BQXRCcEUsRUFBTzF1QyxRQUFRLEtBQVkwdUMsR0FBVSxLQUV0REEsRUU0QmlCLENBQWdCN3NDLEVBQVNrd0MsU0FBVVMsRUFBZ0JULFdBRnZFbHdDLEVBQVNrd0MsU0FBV1MsRUFBZ0JULFNBTWpDbHdDLEVBQVNrd0MsV0FDWmx3QyxFQUFTa3dDLFNBQVcsS0FJakJsd0MsRUFNVCxTQUFTeXhDLElBQ1AsSUFBSUMsRUFBUyxLQWlDVHJ1QixFQUFZLEdBNEJoQixNQUFPLENBQ0xzdUIsVUE1REYsU0FBbUJDLEdBR2pCLE9BREFGLEVBQVNFLEVBQ0YsV0FDREYsSUFBV0UsSUFBWUYsRUFBUyxRQXlEdENHLG9CQXJERixTQUE2Qjd4QyxFQUFVcTJCLEVBQVF5YixFQUFxQnBpQixHQUlsRSxHQUFjLE1BQVZnaUIsRUFBZ0IsQ0FDbEIsSUFBSTdFLEVBQTJCLG1CQUFYNkUsRUFBd0JBLEVBQU8xeEMsRUFBVXEyQixHQUFVcWIsRUFFakQsaUJBQVg3RSxFQUMwQixtQkFBeEJpRixFQUNUQSxFQUFvQmpGLEVBQVFuZCxHQUc1QkEsR0FBUyxHQUlYQSxHQUFvQixJQUFYbWQsUUFHWG5kLEdBQVMsSUFtQ1hxaUIsZUE3QkYsU0FBd0JDLEdBQ3RCLElBQUlDLEdBQVcsRUFFZixTQUFTbnJCLElBQ0htckIsR0FBVUQsRUFBR2poQyxXQUFNLEVBQVFsWSxXQUlqQyxPQURBd3FCLEVBQVU3dkIsS0FBS3N6QixHQUNSLFdBQ0xtckIsR0FBVyxFQUNYNXVCLEVBQVlBLEVBQVV3cUIsUUFBTyxTQUFVMzVDLEdBQ3JDLE9BQU9BLElBQVM0eUIsT0FtQnBCb3JCLGdCQWRGLFdBQ0UsSUFBSyxJQUFJQyxFQUFPdDVDLFVBQVVsRSxPQUFReTlDLEVBQU8sSUFBSW45QyxNQUFNazlDLEdBQU9FLEVBQU8sRUFBR0EsRUFBT0YsRUFBTUUsSUFDL0VELEVBQUtDLEdBQVF4NUMsVUFBVXc1QyxHQUd6Qmh2QixFQUFVaG9CLFNBQVEsU0FBVXlyQixHQUMxQixPQUFPQSxFQUFTL1YsV0FBTSxFQUFRcWhDLFFBWXBDLElBQUlFLElBQWlDLG9CQUFYL3ZDLFNBQTBCQSxPQUFPQyxXQUFZRCxPQUFPQyxTQUFTQyxlQUN2RixTQUFTOHZDLEVBQWdCblYsRUFBUzFOLEdBQ2hDQSxFQUFTbnRCLE9BQU9pd0MsUUFBUXBWLElBd0MxQixJQUFJcVYsRUFBZ0IsV0FDaEJDLEVBQWtCLGFBRXRCLFNBQVNDLElBQ1AsSUFDRSxPQUFPcHdDLE9BQU9xd0MsUUFBUXhoQixPQUFTLEdBQy9CLE1BQU81MkIsR0FHUCxNQUFPLElBU1gsU0FBU3E0QyxFQUFxQmh6QyxRQUNkLElBQVZBLElBQ0ZBLEVBQVEsSUFHVHl5QyxHQUFzRyxHQUFVLEdBQ2pILElBckRJNXRDLEVBcURBb3VDLEVBQWdCdndDLE9BQU9xd0MsUUFDdkJHLElBckQrQixLQUQvQnJ1QyxFQUFLbkMsT0FBT3l3QyxVQUFVQyxXQUNsQnBsQyxRQUFRLGdCQUF1RCxJQUEvQm5KLEVBQUdtSixRQUFRLGlCQUEyRCxJQUFqQ25KLEVBQUdtSixRQUFRLG1CQUFxRCxJQUExQm5KLEVBQUdtSixRQUFRLFlBQXFELElBQWpDbkosRUFBR21KLFFBQVEsbUJBQ3RKdEwsT0FBT3F3QyxTQUFXLGNBQWVyd0MsT0FBT3F3QyxRQXFEM0NNLEtBN0NzRCxJQUFuRDN3QyxPQUFPeXdDLFVBQVVDLFVBQVVwbEMsUUFBUSxZQThDdENzbEMsRUFBU3R6QyxFQUNUdXpDLEVBQXNCRCxFQUFPRSxhQUM3QkEsT0FBdUMsSUFBeEJELEdBQXlDQSxFQUN4REUsRUFBd0JILEVBQU9yQixvQkFDL0JBLE9BQWdELElBQTFCd0IsRUFBbUNmLEVBQWtCZSxFQUMzRUMsRUFBbUJKLEVBQU9LLFVBQzFCQSxPQUFpQyxJQUFyQkQsRUFBOEIsRUFBSUEsRUFDOUNFLEVBQVc1ekMsRUFBTTR6QyxTQUFXakQsRUFBbUJILEVBQWdCeHdDLEVBQU00ekMsV0FBYSxHQUV0RixTQUFTQyxFQUFlQyxHQUN0QixJQUFJQyxFQUFPRCxHQUFnQixHQUN2QnI1QyxFQUFNczVDLEVBQUt0NUMsSUFDWDgyQixFQUFRd2lCLEVBQUt4aUIsTUFFYnlpQixFQUFtQnR4QyxPQUFPdkMsU0FJMUJsRSxFQUhXKzNDLEVBQWlCM0QsU0FDbkIyRCxFQUFpQmx4QixPQUNuQmt4QixFQUFpQm5ELEtBSTVCLE9BREkrQyxJQUFVMzNDLEVBQU93MEMsRUFBY3gwQyxFQUFNMjNDLElBQ2xDLEVBQWUzM0MsRUFBTXMxQixFQUFPOTJCLEdBR3JDLFNBQVN3NUMsSUFDUCxPQUFPNzhCLEtBQUttUSxTQUFTcnpCLFNBQVMsSUFBSW9LLE9BQU8sRUFBR3ExQyxHQUc5QyxJQUFJTyxFQUFvQnRDLElBRXhCLFNBQVNuSSxFQUFTMEssR0FDaEIsRUFBU3BCLEVBQVNvQixHQUVsQnBCLEVBQVFqK0MsT0FBU20rQyxFQUFjbitDLE9BQy9Cby9DLEVBQWtCN0IsZ0JBQWdCVSxFQUFRNXlDLFNBQVU0eUMsRUFBUXZjLFFBRzlELFNBQVM0ZCxFQUFlN3dCLElBcEUxQixTQUFtQ0EsR0FDakMsWUFBdUJ4dEIsSUFBaEJ3dEIsRUFBTWdPLFFBQWlFLElBQTFDNGhCLFVBQVVDLFVBQVVwbEMsUUFBUSxVQXFFMURxbUMsQ0FBMEI5d0IsSUFDOUIrd0IsRUFBVVQsRUFBZXR3QixFQUFNZ08sUUFHakMsU0FBU2dqQixJQUNQRCxFQUFVVCxFQUFlZixNQUczQixJQUFJMEIsR0FBZSxFQUVuQixTQUFTRixFQUFVbjBDLEdBQ2JxMEMsR0FDRkEsR0FBZSxFQUNmL0ssS0FHQXlLLEVBQWtCbEMsb0JBQW9CN3hDLEVBRHpCLE1BQzJDOHhDLEdBQXFCLFNBQVUvTSxHQUNqRkEsRUFDRnVFLEVBQVMsQ0FDUGpULE9BSk8sTUFLUHIyQixTQUFVQSxJQVNwQixTQUFtQnMwQyxHQUNqQixJQUFJQyxFQUFhM0IsRUFBUTV5QyxTQUlyQncwQyxFQUFVQyxFQUFRNW1DLFFBQVEwbUMsRUFBV2o2QyxNQUN4QixJQUFiazZDLElBQWdCQSxFQUFVLEdBQzlCLElBQUlFLEVBQVlELEVBQVE1bUMsUUFBUXltQyxFQUFhaDZDLE1BQzFCLElBQWZvNkMsSUFBa0JBLEVBQVksR0FDbEMsSUFBSUMsRUFBUUgsRUFBVUUsRUFFbEJDLElBQ0ZOLEdBQWUsRUFDZk8sRUFBR0QsSUFuQkNFLENBQVU3MEMsTUF1QmxCLElBQUk4MEMsRUFBa0JwQixFQUFlZixLQUNqQzhCLEVBQVUsQ0FBQ0ssRUFBZ0J4NkMsS0FFL0IsU0FBU3k2QyxFQUFXLzBDLEdBQ2xCLE9BQU95ekMsRUFBV2hELEVBQVd6d0MsR0F1RS9CLFNBQVM0MEMsRUFBR3YrQyxHQUNWeThDLEVBQWM4QixHQUFHditDLEdBV25CLElBQUkyK0MsRUFBZ0IsRUFFcEIsU0FBU0MsRUFBa0JOLEdBR0gsS0FGdEJLLEdBQWlCTCxJQUVvQixJQUFWQSxHQUN6QnB5QyxPQUFPb08saUJBQWlCOGhDLEVBQWV3QixHQUNuQ2YsR0FBeUIzd0MsT0FBT29PLGlCQUFpQitoQyxFQUFpQjBCLElBQzNDLElBQWxCWSxJQUNUenlDLE9BQU9xTyxvQkFBb0I2aEMsRUFBZXdCLEdBQ3RDZixHQUF5QjN3QyxPQUFPcU8sb0JBQW9COGhDLEVBQWlCMEIsSUFJN0UsSUFBSWMsR0FBWSxFQWlDWnRDLEVBQVUsQ0FDWmorQyxPQUFRbStDLEVBQWNuK0MsT0FDdEIwaEMsT0FBUSxNQUNScjJCLFNBQVU4MEMsRUFDVkMsV0FBWUEsRUFDWnZoRCxLQXBJRixTQUFjc0ksRUFBTXMxQixHQUVsQixJQUFJaUYsRUFBUyxPQUNUcjJCLEVBQVcsRUFBZWxFLEVBQU1zMUIsRUFBTzBpQixJQUFhbEIsRUFBUTV5QyxVQUNoRSt6QyxFQUFrQmxDLG9CQUFvQjd4QyxFQUFVcTJCLEVBQVF5YixHQUFxQixTQUFVL00sR0FDckYsR0FBS0EsRUFBTCxDQUNBLElBQUkxZixFQUFPMHZCLEVBQVcvMEMsR0FDbEIxRixFQUFNMEYsRUFBUzFGLElBQ2Y4MkIsRUFBUXB4QixFQUFTb3hCLE1BRXJCLEdBQUkyaEIsRUFNRixHQUxBRCxFQUFjcUMsVUFBVSxDQUN0Qjc2QyxJQUFLQSxFQUNMODJCLE1BQU9BLEdBQ04sS0FBTS9MLEdBRUxndUIsRUFDRjl3QyxPQUFPdkMsU0FBU3FsQixLQUFPQSxNQUNsQixDQUNMLElBQUkrdkIsRUFBWVgsRUFBUTVtQyxRQUFRK2tDLEVBQVE1eUMsU0FBUzFGLEtBQzdDKzZDLEVBQVdaLEVBQVFqK0MsTUFBTSxFQUFHNCtDLEVBQVksR0FDNUNDLEVBQVM3aEQsS0FBS3dNLEVBQVMxRixLQUN2Qm02QyxFQUFVWSxFQUNWL0wsRUFBUyxDQUNQalQsT0FBUUEsRUFDUnIyQixTQUFVQSxTQUtkdUMsT0FBT3ZDLFNBQVNxbEIsS0FBT0EsT0F1RzNCL21CLFFBbEdGLFNBQWlCeEMsRUFBTXMxQixHQUVyQixJQUFJaUYsRUFBUyxVQUNUcjJCLEVBQVcsRUFBZWxFLEVBQU1zMUIsRUFBTzBpQixJQUFhbEIsRUFBUTV5QyxVQUNoRSt6QyxFQUFrQmxDLG9CQUFvQjd4QyxFQUFVcTJCLEVBQVF5YixHQUFxQixTQUFVL00sR0FDckYsR0FBS0EsRUFBTCxDQUNBLElBQUkxZixFQUFPMHZCLEVBQVcvMEMsR0FDbEIxRixFQUFNMEYsRUFBUzFGLElBQ2Y4MkIsRUFBUXB4QixFQUFTb3hCLE1BRXJCLEdBQUkyaEIsRUFNRixHQUxBRCxFQUFjd0MsYUFBYSxDQUN6Qmg3QyxJQUFLQSxFQUNMODJCLE1BQU9BLEdBQ04sS0FBTS9MLEdBRUxndUIsRUFDRjl3QyxPQUFPdkMsU0FBUzFCLFFBQVErbUIsT0FDbkIsQ0FDTCxJQUFJK3ZCLEVBQVlYLEVBQVE1bUMsUUFBUStrQyxFQUFRNXlDLFNBQVMxRixNQUM5QixJQUFmODZDLElBQWtCWCxFQUFRVyxHQUFhcDFDLEVBQVMxRixLQUNwRGd2QyxFQUFTLENBQ1BqVCxPQUFRQSxFQUNScjJCLFNBQVVBLFNBS2R1QyxPQUFPdkMsU0FBUzFCLFFBQVErbUIsUUF1RTVCdXZCLEdBQUlBLEVBQ0pXLE9BL0RGLFdBQ0VYLEdBQUksSUErREpZLFVBNURGLFdBQ0VaLEVBQUcsSUE0REhhLE1BekNGLFNBQWUvRCxRQUNFLElBQVhBLElBQ0ZBLEdBQVMsR0FHWCxJQUFJZ0UsRUFBVTNCLEVBQWtCcEMsVUFBVUQsR0FPMUMsT0FMS3dELElBQ0hELEVBQWtCLEdBQ2xCQyxHQUFZLEdBR1AsV0FNTCxPQUxJQSxJQUNGQSxHQUFZLEVBQ1pELEdBQW1CLElBR2RTLE1Bd0JUQyxPQXBCRixTQUFnQjd1QixHQUNkLElBQUk4dUIsRUFBVzdCLEVBQWtCaEMsZUFBZWpyQixHQUVoRCxPQURBbXVCLEVBQWtCLEdBQ1gsV0FDTEEsR0FBbUIsR0FDbkJXLE9BaUJKLE9BQU9oRCxFQ2hlVCxJQUFJaUQsRUFBd0IsV0FDeEJDLEVBQXVDLG9CQUFmcEcsV0FBNkJBLFdBQStCLG9CQUFYbnRDLE9BQXlCQSxZQUEyQixJQUFYLEVBQUFVLEVBQXlCLEVBQUFBLEVBQVMsR0FleEosU0FBUzh5QyxFQUFtQi8vQyxHQUMxQixJQUFJZ2dELEVBQVcsR0FDZixNQUFPLENBQ0xDLEdBQUksU0FBWUMsR0FDZEYsRUFBU3hpRCxLQUFLMGlELElBRWhCQyxJQUFLLFNBQWFELEdBQ2hCRixFQUFXQSxFQUFTbkksUUFBTyxTQUFVcm5DLEdBQ25DLE9BQU9BLElBQU0wdkMsTUFHakI1dUMsSUFBSyxXQUNILE9BQU90UixHQUVUb1EsSUFBSyxTQUFhZ3dDLEVBQVVDLEdBQzFCcmdELEVBQVFvZ0QsRUFDUkosRUFBUzM2QyxTQUFRLFNBQVU2NkMsR0FDekIsT0FBT0EsRUFBUWxnRCxFQUFPcWdELFFBeUk5QixRQUZZLGlCQTdIWixTQUE0Qmp1QyxFQUFja3VDLEdBQ3hDLElBQUlDLEVBQXVCQyxFQXhDdkJsOEMsRUEwQ0FtOEMsRUFBYyw0QkF6Q1hYLEVBREh4N0MsRUFBTSx5QkFDb0J3N0MsRUFBZXg3QyxJQUFRLEdBQUssR0F5Q0ksTUFFMURpd0MsRUFBd0IsU0FBVW1NLEdBR3BDLFNBQVNuTSxJQUNQLElBQUlvTSxFQUlKLE9BRkFBLEVBQVFELEVBQVczbEMsTUFBTS9jLEtBQU02RSxZQUFjN0UsTUFDdkM0aUQsUUFBVWIsRUFBbUJZLEVBQU05MkMsTUFBTTdKLE9BQ3hDMmdELEVBUFQ5RyxFQUFldEYsRUFBVW1NLEdBVXpCLElBQUlHLEVBQVN0TSxFQUFTajBDLFVBb0N0QixPQWxDQXVnRCxFQUFPNXJCLGdCQUFrQixXQUN2QixJQUFJMm9CLEVBRUosT0FBT0EsRUFBTyxJQUFTNkMsR0FBZXppRCxLQUFLNGlELFFBQVNoRCxHQUd0RGlELEVBQU90bEIsMEJBQTRCLFNBQW1DdWxCLEdBQ3BFLEdBQUk5aUQsS0FBSzZMLE1BQU03SixRQUFVOGdELEVBQVU5Z0QsTUFBTyxDQUN4QyxJQUVJcWdELEVBRkFVLEVBQVcvaUQsS0FBSzZMLE1BQU03SixNQUN0Qm9nRCxFQUFXVSxFQUFVOWdELFFBOURmeXhCLEVBaUVHc3ZCLE1BakVBbDFDLEVBaUVVdTBDLEdBL0RkLElBQU4zdUIsR0FBVyxFQUFJQSxHQUFNLEVBQUk1bEIsRUFFekI0bEIsR0FBTUEsR0FBSzVsQixHQUFNQSxHQThEbEJ3MEMsRUFBYyxHQUVkQSxFQUE4QyxtQkFBekJDLEVBQXNDQSxFQUFxQlMsRUFBVVgsR0FBWVAsRUFRbEYsSUFGcEJRLEdBQWUsSUFHYnJpRCxLQUFLNGlELFFBQVF4d0MsSUFBSTB3QyxFQUFVOWdELE1BQU9xZ0QsSUE3RTlDLElBQWtCNXVCLEVBQUc1bEIsR0FtRmpCZzFDLEVBQU92OUMsT0FBUyxXQUNkLE9BQU90RixLQUFLNkwsTUFBTW1KLFVBR2J1aEMsRUEvQ21CLENBZ0QxQixFQUFBbmEsV0FFRm1hLEVBQVN4eUMsb0JBQXFCdytDLEVBQXdCLElBQTBCRSxHQUFlLHNCQUE2QkYsR0FFNUgsSUFBSS9MLEVBQXdCLFNBQVV3TSxHQUdwQyxTQUFTeE0sSUFDUCxJQUFJeU0sRUFpQkosT0FmQUEsRUFBU0QsRUFBWWptQyxNQUFNL2MsS0FBTTZFLFlBQWM3RSxNQUN4Q285QixNQUFRLENBQ2JwN0IsTUFBT2loRCxFQUFPeHZDLFlBR2hCd3ZDLEVBQU9DLFNBQVcsU0FBVWQsRUFBVUMsR0FHQyxLQUZJLEVBQXRCWSxFQUFPdm9CLGNBRU4ybkIsSUFDbEJZLEVBQU8zTixTQUFTLENBQ2R0ekMsTUFBT2loRCxFQUFPeHZDLGNBS2J3dkMsRUFwQlRwSCxFQUFlckYsRUFBVXdNLEdBdUJ6QixJQUFJRyxFQUFVM00sRUFBU2wwQyxVQWtDdkIsT0FoQ0E2Z0QsRUFBUTVsQiwwQkFBNEIsU0FBbUN1bEIsR0FDckUsSUFBSXBvQixFQUFlb29CLEVBQVVwb0IsYUFDN0IxNkIsS0FBSzA2QixhQUFlQSxRQUFzRG1uQixFQUF3Qm5uQixHQUdwR3lvQixFQUFRdGxCLGtCQUFvQixXQUN0Qjc5QixLQUFLeTZCLFFBQVFnb0IsSUFDZnppRCxLQUFLeTZCLFFBQVFnb0IsR0FBYVIsR0FBR2ppRCxLQUFLa2pELFVBR3BDLElBQUl4b0IsRUFBZTE2QixLQUFLNkwsTUFBTTZ1QixhQUM5QjE2QixLQUFLMDZCLGFBQWVBLFFBQXNEbW5CLEVBQXdCbm5CLEdBR3BHeW9CLEVBQVFwWSxxQkFBdUIsV0FDekIvcUMsS0FBS3k2QixRQUFRZ29CLElBQ2Z6aUQsS0FBS3k2QixRQUFRZ29CLEdBQWFOLElBQUluaUQsS0FBS2tqRCxXQUl2Q0MsRUFBUTF2QyxTQUFXLFdBQ2pCLE9BQUl6VCxLQUFLeTZCLFFBQVFnb0IsR0FDUnppRCxLQUFLeTZCLFFBQVFnb0IsR0FBYW52QyxNQUUxQmMsR0FJWCt1QyxFQUFRNzlDLE9BQVMsV0FDZixPQXBIYTBQLEVBb0hJaFYsS0FBSzZMLE1BQU1tSixTQW5IekIvVCxNQUFNRSxRQUFRNlQsR0FBWUEsRUFBUyxHQUFLQSxHQW1ITGhWLEtBQUtvOUIsTUFBTXA3QixPQXBIdkQsSUFBbUJnVCxHQXVIUndoQyxFQTFEbUIsQ0EyRDFCLEVBQUFwYSxXQUdGLE9BREFvYSxFQUFTdnlDLGVBQWdCdStDLEVBQXdCLElBQTBCQyxHQUFlLFdBQWtCRCxHQUNyRyxDQUNMak0sU0FBVUEsRUFDVkMsU0FBVUEsSSxzQkN6S0MsU0FBUyxFQUE4Qjd5QyxFQUFReS9DLEdBQzVELEdBQWMsTUFBVnovQyxFQUFnQixNQUFPLEdBQzNCLElBRUkyQyxFQUFLaEcsRUFGTGtILEVBQVMsR0FDVDY3QyxFQUFhOWhELE9BQU80RSxLQUFLeEMsR0FHN0IsSUFBS3JELEVBQUksRUFBR0EsRUFBSStpRCxFQUFXMWlELE9BQVFMLElBQ2pDZ0csRUFBTSs4QyxFQUFXL2lELEdBQ2I4aUQsRUFBU3ZwQyxRQUFRdlQsSUFBUSxJQUM3QmtCLEVBQU9sQixHQUFPM0MsRUFBTzJDLElBR3ZCLE9BQU9rQixFLGtCQ1NMODdDLEVBTnFCLFNBQTRCNWdELEdBQ25ELElBQUkrM0IsRUFBVSxJQUVkLE9BREFBLEVBQVF0MkIsWUFNUyxpQkFMVnMyQixFQUtUOG9CLEdBVUk5b0IsRUFOdUIsU0FBNEIvM0IsR0FDckQsSUFBSSszQixFQUFVLElBRWQsT0FEQUEsRUFBUXQyQixZQU1XLFNBTFpzMkIsRUFLVCtvQixHQU1JQyxFQUVKLFNBQVVDLEdBWVIsU0FBU0QsRUFBTzUzQyxHQUNkLElBQUk4MkMsRUEwQkosT0F4QkFBLEVBQVFlLEVBQWlCbmhELEtBQUt2QyxLQUFNNkwsSUFBVTdMLE1BQ3hDbzlCLE1BQVEsQ0FDWnB4QixTQUFVSCxFQUFNK3lDLFFBQVE1eUMsVUFPMUIyMkMsRUFBTWdCLFlBQWEsRUFDbkJoQixFQUFNaUIsaUJBQW1CLEtBRXBCLzNDLEVBQU1nNEMsZ0JBQ1RsQixFQUFNZixTQUFXLzFDLEVBQU0reUMsUUFBUStDLFFBQU8sU0FBVTMxQyxHQUMxQzIyQyxFQUFNZ0IsV0FDUmhCLEVBQU1yTixTQUFTLENBQ2J0cEMsU0FBVUEsSUFHWjIyQyxFQUFNaUIsaUJBQW1CNTNDLE1BS3hCMjJDLEVBdENUOUcsRUFBZTRILEVBQVFDLEdBRXZCRCxFQUFPSyxpQkFBbUIsU0FBMEI1SCxHQUNsRCxNQUFPLENBQ0xwMEMsS0FBTSxJQUNOaW5CLElBQUssSUFDTGcxQixPQUFRLEdBQ1JDLFFBQXNCLE1BQWI5SCxJQWtDYixJQUFJMkcsRUFBU1ksRUFBT25oRCxVQThCcEIsT0E1QkF1Z0QsRUFBT2hsQixrQkFBb0IsV0FDekI3OUIsS0FBSzJqRCxZQUFhLEVBRWQzakQsS0FBSzRqRCxrQkFDUDVqRCxLQUFLczFDLFNBQVMsQ0FDWnRwQyxTQUFVaE0sS0FBSzRqRCxvQkFLckJmLEVBQU85WCxxQkFBdUIsV0FDeEIvcUMsS0FBSzRoRCxVQUFVNWhELEtBQUs0aEQsWUFHMUJpQixFQUFPdjlDLE9BQVMsV0FDZCxPQUFPLGdCQUFvQm0xQixFQUFROGIsU0FBVSxDQUMzQ3YwQyxNQUFPLENBQ0w0OEMsUUFBUzUrQyxLQUFLNkwsTUFBTSt5QyxRQUNwQjV5QyxTQUFVaE0sS0FBS285QixNQUFNcHhCLFNBQ3JCOUQsTUFBT3U3QyxFQUFPSyxpQkFBaUI5akQsS0FBS285QixNQUFNcHhCLFNBQVNrd0MsVUFDbkQySCxjQUFlN2pELEtBQUs2TCxNQUFNZzRDLGdCQUUzQixnQkFBb0JQLEVBQWUvTSxTQUFVLENBQzlDdmhDLFNBQVVoVixLQUFLNkwsTUFBTW1KLFVBQVksS0FDakNoVCxNQUFPaEMsS0FBSzZMLE1BQU0reUMsWUFJZjZFLEVBeEVULENBeUVFLGFBNkNBLFlBNENBLFlBNEhGLElBQUlRLEVBQVUsR0FFVkMsRUFBZSxFQXlCbkIsU0FBU0MsRUFBVWpJLEVBQVVuMEMsUUFDWCxJQUFaQSxJQUNGQSxFQUFVLEtBR1csaUJBQVpBLEdBQXdCOUcsTUFBTUUsUUFBUTRHLE1BQy9DQSxFQUFVLENBQ1JELEtBQU1DLElBSVYsSUFBSXE4QyxFQUFXcjhDLEVBQ1hELEVBQU9zOEMsRUFBU3Q4QyxLQUNoQnU4QyxFQUFpQkQsRUFBUzUyQyxNQUMxQkEsT0FBMkIsSUFBbkI2MkMsR0FBb0NBLEVBQzVDQyxFQUFrQkYsRUFBU2g1QyxPQUMzQkEsT0FBNkIsSUFBcEJrNUMsR0FBcUNBLEVBQzlDQyxFQUFxQkgsRUFBU2o1QyxVQUM5QkEsT0FBbUMsSUFBdkJvNUMsR0FBd0NBLEVBRXhELE1BRFksR0FBR25rRCxPQUFPMEgsR0FDVDA4QyxRQUFPLFNBQVVDLEVBQVMzOEMsR0FDckMsSUFBS0EsR0FBaUIsS0FBVEEsRUFBYSxPQUFPLEtBQ2pDLEdBQUkyOEMsRUFBUyxPQUFPQSxFQUVwQixJQUFJQyxFQS9DUixTQUF1QjU4QyxFQUFNQyxHQUMzQixJQUFJNDhDLEVBQVcsR0FBSzU4QyxFQUFRc0QsSUFBTXRELEVBQVFxRCxPQUFTckQsRUFBUW9ELFVBQ3ZEeTVDLEVBQVlYLEVBQVFVLEtBQWNWLEVBQVFVLEdBQVksSUFDMUQsR0FBSUMsRUFBVTk4QyxHQUFPLE9BQU84OEMsRUFBVTk4QyxHQUN0QyxJQUFJM0IsRUFBTyxHQUVQMHlDLEVBQVMsQ0FDWGdNLE9BRlcsSUFBYS84QyxFQUFNM0IsRUFBTTRCLEdBR3BDNUIsS0FBTUEsR0FRUixPQUxJKzlDLEVBZGEsTUFlZlUsRUFBVTk4QyxHQUFRK3dDLEVBQ2xCcUwsS0FHS3JMLEVBK0JjaU0sQ0FBY2g5QyxFQUFNLENBQ3JDdUQsSUFBS21DLEVBQ0xwQyxPQUFRQSxFQUNSRCxVQUFXQSxJQUVUMDVDLEVBQVNILEVBQWFHLE9BQ3RCMStDLEVBQU91K0MsRUFBYXYrQyxLQUVwQitCLEVBQVEyOEMsRUFBT243QyxLQUFLd3lDLEdBQ3hCLElBQUtoMEMsRUFBTyxPQUFPLEtBQ25CLElBQUk2bUIsRUFBTTdtQixFQUFNLEdBQ1o2OEMsRUFBUzc4QyxFQUFNMUYsTUFBTSxHQUNyQndoRCxFQUFVOUgsSUFBYW50QixFQUMzQixPQUFJdmhCLElBQVV3MkMsRUFBZ0IsS0FDdkIsQ0FDTGw4QyxLQUFNQSxFQUVOaW5CLElBQWMsTUFBVGpuQixHQUF3QixLQUFSaW5CLEVBQWEsSUFBTUEsRUFFeENpMUIsUUFBU0EsRUFFVEQsT0FBUTU5QyxFQUFLcStDLFFBQU8sU0FBVTFOLEVBQU14d0MsRUFBS2tELEdBRXZDLE9BREFzdEMsRUFBS3h3QyxFQUFJNUQsTUFBUXFpRCxFQUFPdjdDLEdBQ2pCc3RDLElBQ04sT0FFSixNQWlCTCxJQUFJa08sRUFFSixTQUFVdEIsR0FHUixTQUFTc0IsSUFDUCxPQUFPdEIsRUFBaUIzbUMsTUFBTS9jLEtBQU02RSxZQUFjN0UsS0FtQ3BELE9BdENBNjdDLEVBQWVtSixFQUFPdEIsR0FNVHNCLEVBQU0xaUQsVUFFWmdELE9BQVMsV0FDZCxJQUFJcTlDLEVBQVEzaUQsS0FFWixPQUFPLGdCQUFvQnk2QixFQUFRK2IsU0FBVSxNQUFNLFNBQVV5TyxHQUMxREEsR0FBd0gsR0FBVSxHQUNuSSxJQUFJajVDLEVBQVcyMkMsRUFBTTkyQyxNQUFNRyxVQUFZaTVDLEVBQVVqNUMsU0FJN0NILEVBQVEsRUFBUyxHQUFJbzVDLEVBQVcsQ0FDbENqNUMsU0FBVUEsRUFDVjlELE1BTFV5NkMsRUFBTTkyQyxNQUFNcTVDLGNBQWdCdkMsRUFBTTkyQyxNQUFNcTVDLGNBQ2xEdkMsRUFBTTkyQyxNQUFNL0QsS0FBT3E4QyxFQUFVbjRDLEVBQVNrd0MsU0FBVXlHLEVBQU05MkMsT0FBU281QyxFQUFVLzhDLFFBT3ZFaTlDLEVBQWN4QyxFQUFNOTJDLE1BQ3BCbUosRUFBV213QyxFQUFZbndDLFNBQ3ZCN1AsRUFBWWdnRCxFQUFZaGdELFVBQ3hCRyxFQUFTNi9DLEVBQVk3L0MsT0FPekIsT0FKSXJFLE1BQU1FLFFBQVE2VCxJQUFpQyxJQUFwQkEsRUFBU3JVLFNBQ3RDcVUsRUFBVyxNQUdOLGdCQUFvQnlsQixFQUFROGIsU0FBVSxDQUMzQ3YwQyxNQUFPNkosR0FDTkEsRUFBTTNELE1BQVE4TSxFQUErQixtQkFBYkEsRUFBdUhBLEVBQVNuSixHQUFTbUosRUFBVzdQLEVBQVksZ0JBQW9CQSxFQUFXMEcsR0FBU3ZHLEVBQVNBLEVBQU91RyxHQUFTLEtBQTJCLG1CQUFibUosRUFBdUhBLEVBQVNuSixHQUFTLFVBSXhabTVDLEVBdkNULENBd0NFLGFBa0pBLFlBeURBLFlBNkNlLGFDMXJCakIsSUFBSUksRUFFSixTQUFVMUIsR0FHUixTQUFTMEIsSUFHUCxJQUZBLElBQUl6QyxFQUVLeEUsRUFBT3Q1QyxVQUFVbEUsT0FBUXk5QyxFQUFPLElBQUluOUMsTUFBTWs5QyxHQUFPRSxFQUFPLEVBQUdBLEVBQU9GLEVBQU1FLElBQy9FRCxFQUFLQyxHQUFReDVDLFVBQVV3NUMsR0FLekIsT0FGQXNFLEVBQVFlLEVBQWlCbmhELEtBQUt3YSxNQUFNMm1DLEVBQWtCLENBQUMxakQsTUFBTUksT0FBT2crQyxLQUFVcCtDLE1BQ3hFNCtDLFFBQVVDLEVBQXFCOEQsRUFBTTkyQyxPQUNwQzgyQyxFQVlULE9BdkJBOUcsRUFBZXVKLEVBQWUxQixHQWNqQjBCLEVBQWM5aUQsVUFFcEJnRCxPQUFTLFdBQ2QsT0FBTyxnQkFBb0JtK0MsRUFBUSxDQUNqQzdFLFFBQVM1K0MsS0FBSzQrQyxRQUNkNXBDLFNBQVVoVixLQUFLNkwsTUFBTW1KLFlBSWxCb3dDLEVBeEJULENBeUJFLGFBK0NBLFlBZUYsSUFBSUMsRUFBb0IsU0FBMkIzOUMsRUFBSWkxQyxHQUNyRCxNQUFxQixtQkFBUGoxQyxFQUFvQkEsRUFBR2kxQyxHQUFtQmoxQyxHQUV0RDQ5QyxFQUFzQixTQUE2QjU5QyxFQUFJaTFDLEdBQ3pELE1BQXFCLGlCQUFQajFDLEVBQWtCLEVBQWVBLEVBQUksS0FBTSxLQUFNaTFDLEdBQW1CajFDLEdBR2hGNjlDLEVBQWlCLFNBQXdCdnBCLEdBQzNDLE9BQU9BLEdBR0wyYSxFQUFhLGtCQUVTLElBQWZBLElBQ1RBLEVBQWE0TyxHQU9mLElBQUlDLEVBQWE3TyxHQUFXLFNBQVVpSixFQUFNNkYsR0FDMUMsSUFBSUMsRUFBVzlGLEVBQUs4RixTQUNoQkMsRUFBVy9GLEVBQUsrRixTQUNoQkMsRUFBV2hHLEVBQUtyWCxRQUNoQnNkLEVBQU8sRUFBOEJqRyxFQUFNLENBQUMsV0FBWSxXQUFZLFlBRXBFcDRDLEVBQVNxK0MsRUFBS3IrQyxPQUVkcUUsRUFBUSxFQUFTLEdBQUlnNkMsRUFBTSxDQUM3QnRkLFFBQVMsU0FBaUJuWixHQUN4QixJQUNNdzJCLEdBQVVBLEVBQVN4MkIsR0FDdkIsTUFBTzAyQixHQUVQLE1BREExMkIsRUFBTW5LLGlCQUNBNmdDLEVBR0gxMkIsRUFBTXRLLGtCQUNNLElBQWpCc0ssRUFBTWpJLFFBQ0wzZixHQUFxQixVQUFYQSxHQXZCakIsU0FBeUI0bkIsR0FDdkIsU0FBVUEsRUFBTXBJLFNBQVdvSSxFQUFNckksUUFBVXFJLEVBQU12SSxTQUFXdUksRUFBTXRJLFVBdUI3RGkvQixDQUFnQjMyQixLQUViQSxFQUFNbkssaUJBQ04wZ0MsUUFjUixPQVBFOTVDLEVBQU1teUIsSUFESnVuQixJQUFtQjVPLEdBQ1Q4TyxHQUVBQyxFQUtQLGdCQUFvQixJQUFLNzVDLE1BVzlCbTZDLEVBQU9yUCxHQUFXLFNBQVVzUCxFQUFPUixHQUNyQyxJQUFJUyxFQUFrQkQsRUFBTTlnRCxVQUN4QkEsT0FBZ0MsSUFBcEIrZ0QsRUFBNkJWLEVBQWFVLEVBQ3RENTdDLEVBQVUyN0MsRUFBTTM3QyxRQUNoQjVDLEVBQUt1K0MsRUFBTXYrQyxHQUNYZytDLEVBQVdPLEVBQU1QLFNBQ2pCRyxFQUFPLEVBQThCSSxFQUFPLENBQUMsWUFBYSxVQUFXLEtBQU0sYUFFL0UsT0FBTyxnQkFBb0IsV0FBMEIsTUFBTSxTQUFVeHJCLEdBQ2xFQSxHQUFxSCxHQUFVLEdBQ2hJLElBQUlta0IsRUFBVW5rQixFQUFRbWtCLFFBQ2xCNXlDLEVBQVdzNUMsRUFBb0JELEVBQWtCMzlDLEVBQUkreUIsRUFBUXp1QixVQUFXeXVCLEVBQVF6dUIsVUFDaEZxbEIsRUFBT3JsQixFQUFXNHlDLEVBQVFtQyxXQUFXLzBDLEdBQVksR0FFakRILEVBQVEsRUFBUyxHQUFJZzZDLEVBQU0sQ0FDN0J4MEIsS0FBTUEsRUFDTnMwQixTQUFVLFdBQ1IsSUFBSTM1QyxFQUFXcTVDLEVBQWtCMzlDLEVBQUkreUIsRUFBUXp1QixXQUNoQzFCLEVBQVVzMEMsRUFBUXQwQyxRQUFVczBDLEVBQVFwL0MsTUFDMUN3TSxNQVdYLE9BTkl1NUMsSUFBbUI1TyxFQUNyQjlxQyxFQUFNbXlCLElBQU15bkIsR0FBZ0JDLEVBRTVCNzVDLEVBQU02NUMsU0FBV0EsRUFHWixnQkFBb0J2Z0QsRUFBVzBHLFNBbUJ0Q3M2QyxFQUFtQixTQUF3Qm5xQixHQUM3QyxPQUFPQSxHQUdMb3FCLEVBQWUsa0JBRVMsSUFBakJBLElBQ1RBLEVBQWVELEdBaUJqQixJQUFJRSxFQUFVRCxHQUFhLFNBQVV4RyxFQUFNNkYsR0FDekMsSUFBSWEsRUFBbUIxRyxFQUFLLGdCQUN4QjJHLE9BQW1DLElBQXJCRCxFQUE4QixPQUFTQSxFQUNyREUsRUFBdUI1RyxFQUFLNkcsZ0JBQzVCQSxPQUEyQyxJQUF6QkQsRUFBa0MsU0FBV0EsRUFDL0RFLEVBQWM5RyxFQUFLOEcsWUFDbkJDLEVBQWdCL0csRUFBS2dILFVBQ3JCcDVDLEVBQVFveUMsRUFBS3B5QyxNQUNicTVDLEVBQWVqSCxFQUFLM0IsU0FDcEI2SSxFQUFlbEgsRUFBSzV6QyxTQUNwQmIsRUFBWXkwQyxFQUFLejBDLFVBQ2pCQyxFQUFTdzBDLEVBQUt4MEMsT0FDZDI3QyxFQUFZbkgsRUFBS2htQyxNQUNqQmxTLEVBQUtrNEMsRUFBS2w0QyxHQUNWZytDLEVBQVc5RixFQUFLOEYsU0FDaEJHLEVBQU8sRUFBOEJqRyxFQUFNLENBQUMsZUFBZ0Isa0JBQW1CLGNBQWUsWUFBYSxRQUFTLFdBQVksV0FBWSxZQUFhLFNBQVUsUUFBUyxLQUFNLGFBRXRMLE9BQU8sZ0JBQW9CLFdBQTBCLE1BQU0sU0FBVW5sQixHQUNsRUEsR0FBd0gsR0FBVSxHQUNuSSxJQUFJa2lCLEVBQWtCbUssR0FBZ0Jyc0IsRUFBUXp1QixTQUMxQ3UwQyxFQUFhK0UsRUFBb0JELEVBQWtCMzlDLEVBQUlpMUMsR0FBa0JBLEdBQ3pFNzBDLEVBQU95NEMsRUFBV3JFLFNBRWxCOEssRUFBY2wvQyxHQUFRQSxFQUFLd0MsUUFBUSw0QkFBNkIsUUFDaEVwQyxFQUFROCtDLEVBQWM3QyxFQUFVeEgsRUFBZ0JULFNBQVUsQ0FDNURwMEMsS0FBTWsvQyxFQUNOeDVDLE1BQU9BLEVBQ1ByQyxVQUFXQSxFQUNYQyxPQUFRQSxJQUNMLEtBQ0Q2eUMsS0FBYzRJLEVBQWVBLEVBQWEzK0MsRUFBT3kwQyxHQUFtQnowQyxHQUNwRTArQyxFQUFZM0ksRUE3Q3BCLFdBQ0UsSUFBSyxJQUFJRSxFQUFPdDVDLFVBQVVsRSxPQUFRc21ELEVBQWEsSUFBSWhtRCxNQUFNazlDLEdBQU9FLEVBQU8sRUFBR0EsRUFBT0YsRUFBTUUsSUFDckY0SSxFQUFXNUksR0FBUXg1QyxVQUFVdzVDLEdBRy9CLE9BQU80SSxFQUFXcE4sUUFBTyxTQUFVdjVDLEdBQ2pDLE9BQU9BLEtBQ05ELEtBQUssS0FzQ3FCNm1ELENBQWVQLEVBQWVGLEdBQW1CRSxFQUN4RS9zQyxFQUFRcWtDLEVBQVcsRUFBUyxHQUFJOEksRUFBVyxHQUFJTCxHQUFlSyxFQUU5RGw3QyxFQUFRLEVBQVMsQ0FDbkIsZUFBZ0JveUMsR0FBWXNJLEdBQWUsS0FDM0NLLFVBQVdBLEVBQ1hodEMsTUFBT0EsRUFDUGxTLEdBQUk2NEMsR0FDSHNGLEdBU0gsT0FOSU0sSUFBcUJDLEVBQ3ZCdjZDLEVBQU1teUIsSUFBTXluQixHQUFnQkMsRUFFNUI3NUMsRUFBTTY1QyxTQUFXQSxFQUdaLGdCQUFvQk0sRUFBTW42QyxTQ3JTckMsUUFBZSxnQkFBb0IsTUNPNUIsU0FBU3M3QyxFQUFnQm55QyxFQUFVb3lDLEdBQ3hDLElBSUl2TyxFQUFTdDNDLE9BQU9taUMsT0FBTyxNQU8zQixPQU5JMXVCLEdBQVUsRUFBQUMsU0FBQSxJQUFhRCxHQUFVLFNBQVV6SyxHQUM3QyxPQUFPQSxLQUNObEQsU0FBUSxTQUFVMFcsR0FFbkI4NkIsRUFBTzk2QixFQUFNelgsS0FURixTQUFnQnlYLEdBQzNCLE9BQU9xcEMsSUFBUyxJQUFBeFEsZ0JBQWU3NEIsR0FBU3FwQyxFQUFNcnBDLEdBQVNBLEVBUW5Dc3BDLENBQU90cEMsTUFFdEI4NkIsRUFrRVQsU0FBU3lPLEVBQVF2cEMsRUFBTzY5QixFQUFNL3ZDLEdBQzVCLE9BQXNCLE1BQWZBLEVBQU0rdkMsR0FBZ0IvdkMsRUFBTSt2QyxHQUFRNzlCLEVBQU1sUyxNQUFNK3ZDLEdBY2xELFNBQVMyTCxFQUFvQnpFLEVBQVcwRSxFQUFrQkMsR0FDL0QsSUFBSUMsRUFBbUJQLEVBQWdCckUsRUFBVTl0QyxVQUM3Q0EsRUEvREMsU0FBNEIyeUMsRUFBTTdsRCxHQUl2QyxTQUFTOGxELEVBQWV0aEQsR0FDdEIsT0FBT0EsS0FBT3hFLEVBQU9BLEVBQUt3RSxHQUFPcWhELEVBQUtyaEQsR0FKeENxaEQsRUFBT0EsR0FBUSxHQUNmN2xELEVBQU9BLEdBQVEsR0FRZixJQWNJeEIsRUFkQXVuRCxFQUFrQnRtRCxPQUFPbWlDLE9BQU8sTUFDaENva0IsRUFBYyxHQUVsQixJQUFLLElBQUlDLEtBQVdKLEVBQ2RJLEtBQVdqbUQsRUFDVGdtRCxFQUFZbm5ELFNBQ2RrbkQsRUFBZ0JFLEdBQVdELEVBQzNCQSxFQUFjLElBR2hCQSxFQUFZdG9ELEtBQUt1b0QsR0FLckIsSUFBSUMsRUFBZSxHQUVuQixJQUFLLElBQUlDLEtBQVdubUQsRUFBTSxDQUN4QixHQUFJK2xELEVBQWdCSSxHQUNsQixJQUFLM25ELEVBQUksRUFBR0EsRUFBSXVuRCxFQUFnQkksR0FBU3RuRCxPQUFRTCxJQUFLLENBQ3BELElBQUk0bkQsRUFBaUJMLEVBQWdCSSxHQUFTM25ELEdBQzlDMG5ELEVBQWFILEVBQWdCSSxHQUFTM25ELElBQU1zbkQsRUFBZU0sR0FJL0RGLEVBQWFDLEdBQVdMLEVBQWVLLEdBSXpDLElBQUszbkQsRUFBSSxFQUFHQSxFQUFJd25ELEVBQVlubkQsT0FBUUwsSUFDbEMwbkQsRUFBYUYsRUFBWXhuRCxJQUFNc25ELEVBQWVFLEVBQVl4bkQsSUFHNUQsT0FBTzBuRCxFQW9CUUcsQ0FBbUJYLEVBQWtCRSxHQW1DcEQsT0FsQ0FubUQsT0FBTzRFLEtBQUs2TyxHQUFVM04sU0FBUSxTQUFVZixHQUN0QyxJQUFJeVgsRUFBUS9JLEVBQVMxTyxHQUNyQixJQUFLLElBQUFzd0MsZ0JBQWU3NEIsR0FBcEIsQ0FDQSxJQUFJcXFDLEVBQVc5aEQsS0FBT2toRCxFQUNsQmEsRUFBVy9oRCxLQUFPb2hELEVBQ2xCWSxFQUFZZCxFQUFpQmxoRCxHQUM3QmlpRCxHQUFZLElBQUEzUixnQkFBZTBSLEtBQWVBLEVBQVV6OEMsTUFBTTI4QyxJQUUxREgsR0FBYUQsSUFBV0csRUFRaEJGLElBQVdELEdBQVlHLEVBTXhCRixHQUFXRCxJQUFXLElBQUF4UixnQkFBZTBSLEtBSTlDdHpDLEVBQVMxTyxJQUFPLElBQUE2dkMsY0FBYXA0QixFQUFPLENBQ2xDMHBDLFNBQVVBLEVBQVM1akMsS0FBSyxLQUFNOUYsR0FDOUJ5cUMsR0FBSUYsRUFBVXo4QyxNQUFNMjhDLEdBQ3BCQyxLQUFNbkIsRUFBUXZwQyxFQUFPLE9BQVEra0MsR0FDN0I0RixNQUFPcEIsRUFBUXZwQyxFQUFPLFFBQVMra0MsTUFYakM5dEMsRUFBUzFPLElBQU8sSUFBQTZ2QyxjQUFhcDRCLEVBQU8sQ0FDbEN5cUMsSUFBSSxJQVZOeHpDLEVBQVMxTyxJQUFPLElBQUE2dkMsY0FBYXA0QixFQUFPLENBQ2xDMHBDLFNBQVVBLEVBQVM1akMsS0FBSyxLQUFNOUYsR0FDOUJ5cUMsSUFBSSxFQUNKQyxLQUFNbkIsRUFBUXZwQyxFQUFPLE9BQVEra0MsR0FDN0I0RixNQUFPcEIsRUFBUXZwQyxFQUFPLFFBQVMra0MsU0FvQjlCOXRDLEVDaklULElBQUkrdkMsRUFBU3hqRCxPQUFPd2pELFFBQVUsU0FBVXA2QyxHQUN0QyxPQUFPcEosT0FBTzRFLEtBQUt3RSxHQUFLMUssS0FBSSxTQUFVc1MsR0FDcEMsT0FBTzVILEVBQUk0SCxPQXlCWG8yQyxHQUErQixTQUFVakYsR0FHM0MsU0FBU2lGLEVBQWdCOThDLEVBQU80dUIsR0FDOUIsSUFBSWtvQixFQUlBaUcsR0FGSmpHLEVBQVFlLEVBQWlCbmhELEtBQUt2QyxLQUFNNkwsRUFBTzR1QixJQUFZejZCLE1BRTlCNG9ELGFBQWEva0MsS0M1QzNCLFNBQWdDZ2xDLEdBQzdDLFFBQWEsSUFBVEEsRUFDRixNQUFNLElBQUlDLGVBQWUsNkRBRzNCLE9BQU9ELEVEdUNzQ0UsQ0FBdUJwRyxJQVVsRSxPQVBBQSxFQUFNdmxCLE1BQVEsQ0FDWjRyQixhQUFjLENBQ1pDLFlBQVksR0FFZEwsYUFBY0EsRUFDZE0sYUFBYSxHQUVSdkcsRUFqQlQ5RyxFQUFlOE0sRUFBaUJqRixHQW9CaEMsSUFBSWIsRUFBUzhGLEVBQWdCcm1ELFVBcUU3QixPQW5FQXVnRCxFQUFPaGxCLGtCQUFvQixXQUN6Qjc5QixLQUFLbXBELFNBQVUsRUFDZm5wRCxLQUFLczFDLFNBQVMsQ0FDWjBULGFBQWMsQ0FDWkMsWUFBWSxNQUtsQnBHLEVBQU85WCxxQkFBdUIsV0FDNUIvcUMsS0FBS21wRCxTQUFVLEdBR2pCUixFQUFnQnJrRCx5QkFBMkIsU0FBa0N3K0MsRUFBV2xELEdBQ3RGLElEaUJtQy96QyxFQUFPNDdDLEVDakJ0Q0QsRUFBbUI1SCxFQUFLNXFDLFNBQ3hCNHpDLEVBQWVoSixFQUFLZ0osYUFFeEIsTUFBTyxDQUNMNXpDLFNBRmdCNHFDLEVBQUtzSixhRGVZcjlDLEVDYmNpM0MsRURhUDJFLEVDYmtCbUIsRURjdkR6QixFQUFnQnQ3QyxFQUFNbUosVUFBVSxTQUFVK0ksR0FDL0MsT0FBTyxJQUFBbzRCLGNBQWFwNEIsRUFBTyxDQUN6QjBwQyxTQUFVQSxFQUFTNWpDLEtBQUssS0FBTTlGLEdBQzlCeXFDLElBQUksRUFDSlksT0FBUTlCLEVBQVF2cEMsRUFBTyxTQUFVbFMsR0FDakM2OEMsTUFBT3BCLEVBQVF2cEMsRUFBTyxRQUFTbFMsR0FDL0I0OEMsS0FBTW5CLEVBQVF2cEMsRUFBTyxPQUFRbFMsU0NwQjZDMDdDLEVBQW9CekUsRUFBVzBFLEVBQWtCb0IsR0FDM0hNLGFBQWEsSUFLakJyRyxFQUFPK0YsYUFBZSxTQUFzQjdxQyxFQUFPNVEsR0FDakQsSUFBSWs4QyxFQUFzQmxDLEVBQWdCbm5ELEtBQUs2TCxNQUFNbUosVUFDakQrSSxFQUFNelgsT0FBTytpRCxJQUVidHJDLEVBQU1sUyxNQUFNNDdDLFVBQ2QxcEMsRUFBTWxTLE1BQU00N0MsU0FBU3Q2QyxHQUduQm5OLEtBQUttcEQsU0FDUG5wRCxLQUFLczFDLFVBQVMsU0FBVWxZLEdBQ3RCLElBQUlwb0IsRUFBVyxFQUFTLEdBQUlvb0IsRUFBTXBvQixVQUdsQyxjQURPQSxFQUFTK0ksRUFBTXpYLEtBQ2YsQ0FDTDBPLFNBQVVBLFFBTWxCNnRDLEVBQU92OUMsT0FBUyxXQUNkLElBQUk2L0MsRUFBY25sRCxLQUFLNkwsTUFDbkJ1d0IsRUFBWStvQixFQUFZaGdELFVBQ3hCbWtELEVBQWVuRSxFQUFZbUUsYUFDM0J6OUMsRUFBUSxFQUE4QnM1QyxFQUFhLENBQUMsWUFBYSxpQkFFakU2RCxFQUFlaHBELEtBQUtvOUIsTUFBTTRyQixhQUMxQmgwQyxFQUFXK3ZDLEVBQU8va0QsS0FBS285QixNQUFNcG9CLFVBQVUvVSxJQUFJcXBELEdBSy9DLGNBSk96OUMsRUFBTXU5QyxjQUNOdjlDLEVBQU02OEMsYUFDTjc4QyxFQUFNNDhDLEtBRUssT0FBZHJzQixFQUNrQixnQkFBb0JtdEIsRUFBdUJoVCxTQUFVLENBQ3ZFdjBDLE1BQU9nbkQsR0FDTmgwQyxHQUdlLGdCQUFvQnUwQyxFQUF1QmhULFNBQVUsQ0FDdkV2MEMsTUFBT2duRCxHQUNPLGdCQUFvQjVzQixFQUFXdndCLEVBQU9tSixLQUdqRDJ6QyxFQTFGMEIsQ0EyRmpDLGFBRUZBLEdBQWdCbmtELFVBeURaLEdBQ0pta0QsR0FBZ0J6a0QsYUE1S0csQ0FDakJpQixVQUFXLE1BQ1hta0QsYUFBYyxTQUFzQnZyQyxHQUNsQyxPQUFPQSxJQTBLWCxZRTVMQSxTQUFTeXJDLEdBQWlCQyxFQUFXQyxHQUNuQyxPQUFPRCxFQUFVbi9DLFFBQVEsSUFBSXRDLE9BQU8sVUFBWTBoRCxFQUFnQixZQUFhLEtBQU0sTUFBTXAvQyxRQUFRLE9BQVEsS0FBS0EsUUFBUSxhQUFjLElDTy9ILElBQUlxL0MsR0FBWSxZQUNaQyxHQUFTLFNBQ1RDLEdBQVcsV0FDWEMsR0FBVSxVQUNWQyxHQUFVLFVBNkZqQkMsR0FBMEIsU0FBVXRHLEdBR3RDLFNBQVNzRyxFQUFXbitDLEVBQU80dUIsR0FDekIsSUFBSWtvQixFQUVKQSxFQUFRZSxFQUFpQm5oRCxLQUFLdkMsS0FBTTZMLEVBQU80dUIsSUFBWXo2QixLQUN2RCxJQUdJaXFELEVBREFiLEVBRmMzdUIsTUFFdUJ3dUIsV0FBYXA5QyxFQUFNNjhDLE1BQVE3OEMsRUFBTXU5QyxPQXVCMUUsT0FyQkF6RyxFQUFNdUgsYUFBZSxLQUVqQnIrQyxFQUFNMjhDLEdBQ0pZLEdBQ0ZhLEVBQWdCTCxHQUNoQmpILEVBQU11SCxhQUFlTCxJQUVyQkksRUFBZ0JILEdBSWhCRyxFQURFcCtDLEVBQU1zK0MsZUFBaUJ0K0MsRUFBTXUrQyxhQUNmVCxHQUVBQyxHQUlwQmpILEVBQU12bEIsTUFBUSxDQUNaaXRCLE9BQVFKLEdBRVZ0SCxFQUFNMkgsYUFBZSxLQUNkM0gsRUEvQlQ5RyxFQUFlbU8sRUFBWXRHLEdBa0MzQnNHLEVBQVcxbEQseUJBQTJCLFNBQWtDczdDLEVBQU0ySyxHQUc1RSxPQUZhM0ssRUFBSzRJLElBRUorQixFQUFVRixTQUFXVixHQUMxQixDQUNMVSxPQUFRVCxJQUlMLE1BbUJULElBQUkvRyxFQUFTbUgsRUFBVzFuRCxVQTBPeEIsT0F4T0F1Z0QsRUFBT2hsQixrQkFBb0IsV0FDekI3OUIsS0FBS3dxRCxjQUFhLEVBQU14cUQsS0FBS2txRCxlQUcvQnJILEVBQU9wYyxtQkFBcUIsU0FBNEJna0IsR0FDdEQsSUFBSUMsRUFBYSxLQUVqQixHQUFJRCxJQUFjenFELEtBQUs2TCxNQUFPLENBQzVCLElBQUl3K0MsRUFBU3JxRCxLQUFLbzlCLE1BQU1pdEIsT0FFcEJycUQsS0FBSzZMLE1BQU0yOEMsR0FDVDZCLElBQVdSLElBQVlRLElBQVdQLEtBQ3BDWSxFQUFhYixJQUdYUSxJQUFXUixJQUFZUSxJQUFXUCxLQUNwQ1ksRUFBYVgsSUFLbkIvcEQsS0FBS3dxRCxjQUFhLEVBQU9FLElBRzNCN0gsRUFBTzlYLHFCQUF1QixXQUM1Qi9xQyxLQUFLMnFELHNCQUdQOUgsRUFBTytILFlBQWMsV0FDbkIsSUFDSW5DLEVBQU1DLEVBQU9VLEVBRGJ5QixFQUFVN3FELEtBQUs2TCxNQUFNZy9DLFFBV3pCLE9BVEFwQyxFQUFPQyxFQUFRVSxFQUFTeUIsRUFFVCxNQUFYQSxHQUFzQyxpQkFBWkEsSUFDNUJwQyxFQUFPb0MsRUFBUXBDLEtBQ2ZDLEVBQVFtQyxFQUFRbkMsTUFFaEJVLE9BQTRCeG5ELElBQW5CaXBELEVBQVF6QixPQUF1QnlCLEVBQVF6QixPQUFTVixHQUdwRCxDQUNMRCxLQUFNQSxFQUNOQyxNQUFPQSxFQUNQVSxPQUFRQSxJQUladkcsRUFBTzJILGFBQWUsU0FBc0JNLEVBQVVKLFFBQ25DLElBQWJJLElBQ0ZBLEdBQVcsR0FHTSxPQUFmSixHQUVGMXFELEtBQUsycUQscUJBRURELElBQWViLEdBQ2pCN3BELEtBQUsrcUQsYUFBYUQsR0FFbEI5cUQsS0FBS2dyRCxlQUVFaHJELEtBQUs2TCxNQUFNcytDLGVBQWlCbnFELEtBQUtvOUIsTUFBTWl0QixTQUFXVCxJQUMzRDVwRCxLQUFLczFDLFNBQVMsQ0FDWitVLE9BQVFWLE1BS2Q5RyxFQUFPa0ksYUFBZSxTQUFzQkQsR0FDMUMsSUFBSTdILEVBQVNqakQsS0FFVDBvRCxFQUFRMW9ELEtBQUs2TCxNQUFNNjhDLE1BQ25CdUMsRUFBWWpyRCxLQUFLeTZCLFFBQVV6NkIsS0FBS3k2QixRQUFRd3VCLFdBQWE2QixFQUVyRDdFLEVBQVFqbUQsS0FBSzZMLE1BQU1xL0MsUUFBVSxDQUFDRCxHQUFhLENBQUMsY0FBcUJqckQsTUFBT2lyRCxHQUN4RUUsRUFBWWxGLEVBQU0sR0FDbEJtRixFQUFpQm5GLEVBQU0sR0FFdkJvRixFQUFXcnJELEtBQUs0cUQsY0FDaEJVLEVBQWVMLEVBQVlJLEVBQVNqQyxPQUFTaUMsRUFBUzNDLE1BR3JEb0MsR0FBYXBDLEdBU2xCMW9ELEtBQUs2TCxNQUFNMC9DLFFBQVFKLEVBQVdDLEdBQzlCcHJELEtBQUt3ckQsYUFBYSxDQUNoQm5CLE9BQVFSLEtBQ1AsV0FDRDVHLEVBQU9wM0MsTUFBTTQvQyxXQUFXTixFQUFXQyxHQUVuQ25JLEVBQU95SSxnQkFBZ0JKLEdBQWMsV0FDbkNySSxFQUFPdUksYUFBYSxDQUNsQm5CLE9BQVFQLEtBQ1AsV0FDRDdHLEVBQU9wM0MsTUFBTTgvQyxVQUFVUixFQUFXQyxhQWxCdENwckQsS0FBS3dyRCxhQUFhLENBQ2hCbkIsT0FBUVAsS0FDUCxXQUNEN0csRUFBT3AzQyxNQUFNOC9DLFVBQVVSLE9BcUI3QnRJLEVBQU9tSSxZQUFjLFdBQ25CLElBQUlZLEVBQVM1ckQsS0FFVHlvRCxFQUFPem9ELEtBQUs2TCxNQUFNNDhDLEtBQ2xCNEMsRUFBV3JyRCxLQUFLNHFELGNBQ2hCTyxFQUFZbnJELEtBQUs2TCxNQUFNcS9DLGFBQVV0cEQsRUFBWSxjQUFxQjVCLE1BRWpFeW9ELEdBU0x6b0QsS0FBSzZMLE1BQU1nZ0QsT0FBT1YsR0FDbEJuckQsS0FBS3dyRCxhQUFhLENBQ2hCbkIsT0FBUU4sS0FDUCxXQUNENkIsRUFBTy8vQyxNQUFNaWdELFVBQVVYLEdBRXZCUyxFQUFPRixnQkFBZ0JMLEVBQVM1QyxNQUFNLFdBQ3BDbUQsRUFBT0osYUFBYSxDQUNsQm5CLE9BQVFULEtBQ1AsV0FDRGdDLEVBQU8vL0MsTUFBTTQ3QyxTQUFTMEQsYUFsQjFCbnJELEtBQUt3ckQsYUFBYSxDQUNoQm5CLE9BQVFULEtBQ1AsV0FDRGdDLEVBQU8vL0MsTUFBTTQ3QyxTQUFTMEQsT0FxQjVCdEksRUFBTzhILG1CQUFxQixXQUNBLE9BQXRCM3FELEtBQUtzcUQsZUFDUHRxRCxLQUFLc3FELGFBQWF5QixTQUNsQi9yRCxLQUFLc3FELGFBQWUsT0FJeEJ6SCxFQUFPMkksYUFBZSxTQUFzQnhMLEVBQVd0a0IsR0FJckRBLEVBQVcxN0IsS0FBS2dzRCxnQkFBZ0J0d0IsR0FDaEMxN0IsS0FBS3MxQyxTQUFTMEssRUFBV3RrQixJQUczQm1uQixFQUFPbUosZ0JBQWtCLFNBQXlCdHdCLEdBQ2hELElBQUl1d0IsRUFBU2pzRCxLQUVUa3NELEdBQVMsRUFjYixPQVpBbHNELEtBQUtzcUQsYUFBZSxTQUFVbDdCLEdBQ3hCODhCLElBQ0ZBLEdBQVMsRUFDVEQsRUFBTzNCLGFBQWUsS0FDdEI1dUIsRUFBU3RNLEtBSWJwdkIsS0FBS3NxRCxhQUFheUIsT0FBUyxXQUN6QkcsR0FBUyxHQUdKbHNELEtBQUtzcUQsY0FHZHpILEVBQU82SSxnQkFBa0IsU0FBeUJiLEVBQVMzSSxHQUN6RGxpRCxLQUFLZ3NELGdCQUFnQjlKLEdBQ3JCLElBQUkvMEMsRUFBT25OLEtBQUs2TCxNQUFNcS9DLFFBQVVsckQsS0FBSzZMLE1BQU1xL0MsUUFBUWp0QyxRQUFVLGNBQXFCamUsTUFDOUVtc0QsRUFBMEMsTUFBWHRCLElBQW9CN3FELEtBQUs2TCxNQUFNdWdELGVBRWxFLEdBQUtqL0MsSUFBUWcvQyxFQUFiLENBS0EsR0FBSW5zRCxLQUFLNkwsTUFBTXVnRCxlQUFnQixDQUM3QixJQUFJQyxFQUFRcnNELEtBQUs2TCxNQUFNcS9DLFFBQVUsQ0FBQ2xyRCxLQUFLc3FELGNBQWdCLENBQUNuOUMsRUFBTW5OLEtBQUtzcUQsY0FDL0RhLEVBQVlrQixFQUFNLEdBQ2xCQyxFQUFvQkQsRUFBTSxHQUU5QnJzRCxLQUFLNkwsTUFBTXVnRCxlQUFlakIsRUFBV21CLEdBR3hCLE1BQVh6QixHQUNGeDFCLFdBQVdyMUIsS0FBS3NxRCxhQUFjTyxRQWI5QngxQixXQUFXcjFCLEtBQUtzcUQsYUFBYyxJQWlCbEN6SCxFQUFPdjlDLE9BQVMsV0FDZCxJQUFJK2tELEVBQVNycUQsS0FBS285QixNQUFNaXRCLE9BRXhCLEdBQUlBLElBQVdWLEdBQ2IsT0FBTyxLQUdULElBQUl4RSxFQUFjbmxELEtBQUs2TCxNQUNuQm1KLEVBQVdtd0MsRUFBWW53QyxTQWdCdkJ1M0MsR0FmTXBILEVBQVlxRCxHQUNGckQsRUFBWWlGLGFBQ1hqRixFQUFZZ0YsY0FDbkJoRixFQUFZaUUsT0FDYmpFLEVBQVl1RCxNQUNidkQsRUFBWXNELEtBQ1R0RCxFQUFZMEYsUUFDTDFGLEVBQVlpSCxlQUNuQmpILEVBQVlvRyxRQUNUcEcsRUFBWXNHLFdBQ2J0RyxFQUFZd0csVUFDZnhHLEVBQVkwRyxPQUNUMUcsRUFBWTJHLFVBQ2IzRyxFQUFZc0MsU0FDYnRDLEVBQVkrRixRQUNWLEVBQThCL0YsRUFBYSxDQUFDLFdBQVksS0FBTSxlQUFnQixnQkFBaUIsU0FBVSxRQUFTLE9BQVEsVUFBVyxpQkFBa0IsVUFBVyxhQUFjLFlBQWEsU0FBVSxZQUFhLFdBQVksYUFFalAsT0FHRSxnQkFBb0JvRSxFQUF1QmhULFNBQVUsQ0FDbkR2MEMsTUFBTyxNQUNjLG1CQUFiZ1QsRUFBMEJBLEVBQVNxMUMsRUFBUWtDLEdBQWMsZUFBbUIsZ0JBQW9CdjNDLEdBQVd1M0MsS0FJbEh2QyxFQXpTcUIsQ0EwUzVCLGFBNExGLFNBQVMsTUExTFRBLEdBQVdobUQsWUFBY3VsRCxFQUN6QlMsR0FBV3hsRCxVQXVMUCxHQUlKd2xELEdBQVc5bEQsYUFBZSxDQUN4QnNrRCxJQUFJLEVBQ0o0QixjQUFjLEVBQ2RELGVBQWUsRUFDZmYsUUFBUSxFQUNSVixPQUFPLEVBQ1BELE1BQU0sRUFDTjhDLFFBQVMsR0FDVEUsV0FBWSxHQUNaRSxVQUFXLEdBQ1hFLE9BQVEsR0FDUkMsVUFBVyxHQUNYckUsU0FBVSxJQUVadUMsR0FBV0wsVUFBWUEsR0FDdkJLLEdBQVdKLE9BQVNBLEdBQ3BCSSxHQUFXSCxTQUFXQSxHQUN0QkcsR0FBV0YsUUFBVUEsR0FDckJFLEdBQVdELFFBQVVBLEdBQ3JCLFlDMWxCQSxJQU1JeUMsR0FBYyxTQUFxQnIvQyxFQUFNcy9DLEdBQzNDLE9BQU90L0MsR0FBUXMvQyxHQUFXQSxFQUFRcmxELE1BQU0sS0FBS0MsU0FBUSxTQUFVa0QsR0FDN0QsT0ZkeUNxOEMsRUVjYnI4QyxRRmRJeUMsRUVjVkcsR0ZiWnUvQyxVQUNWMS9DLEVBQVEwL0MsVUFBVTFTLE9BQU80TSxHQUNhLGlCQUF0QjU1QyxFQUFRNDVDLFVBRXhCNTVDLEVBQVE0NUMsVUFBWTRDLEdBQWlCeDhDLEVBQVE0NUMsVUFBV0EsR0FFeEQ1NUMsRUFBUW1ELGFBQWEsUUFBU3E1QyxHQUFpQng4QyxFQUFRNDVDLFdBQWE1NUMsRUFBUTQ1QyxVQUFVK0YsU0FBVyxHQUFJL0YsS0FQMUYsSUFBcUI1NUMsRUFBUzQ1QyxNRXdGekNnRyxHQUE2QixTQUFVbEosR0FHekMsU0FBU2tKLElBR1AsSUFGQSxJQUFJakssRUFFS3hFLEVBQU90NUMsVUFBVWxFLE9BQVF5OUMsRUFBTyxJQUFJbjlDLE1BQU1rOUMsR0FBT0UsRUFBTyxFQUFHQSxFQUFPRixFQUFNRSxJQUMvRUQsRUFBS0MsR0FBUXg1QyxVQUFVdzVDLEdBZ0h6QixPQTdHQXNFLEVBQVFlLEVBQWlCbmhELEtBQUt3YSxNQUFNMm1DLEVBQWtCLENBQUMxakQsTUFBTUksT0FBT2crQyxLQUFVcCtDLE1BQ3hFNnNELGVBQWlCLENBQ3JCekQsT0FBUSxHQUNSVixNQUFPLEdBQ1BELEtBQU0sSUFHUjlGLEVBQU00SSxRQUFVLFNBQVVKLEVBQVdDLEdBQ25DLElBQUkwQixFQUF3Qm5LLEVBQU1vSyxpQkFBaUI1QixFQUFXQyxHQUMxRGorQyxFQUFPMi9DLEVBQXNCLEdBQzdCN0IsRUFBWTZCLEVBQXNCLEdBRXRDbkssRUFBTXFLLGNBQWM3L0MsRUFBTSxRQUUxQncxQyxFQUFNc0ssU0FBUzkvQyxFQUFNODlDLEVBQVksU0FBVyxRQUFTLFFBRWpEdEksRUFBTTkyQyxNQUFNMC9DLFNBQ2Q1SSxFQUFNOTJDLE1BQU0wL0MsUUFBUUosRUFBV0MsSUFJbkN6SSxFQUFNOEksV0FBYSxTQUFVTixFQUFXQyxHQUN0QyxJQUFJOEIsRUFBeUJ2SyxFQUFNb0ssaUJBQWlCNUIsRUFBV0MsR0FDM0RqK0MsRUFBTysvQyxFQUF1QixHQUc5QnpvRCxFQUZZeW9ELEVBQXVCLEdBRWhCLFNBQVcsUUFFbEN2SyxFQUFNc0ssU0FBUzkvQyxFQUFNMUksRUFBTSxVQUV2QmsrQyxFQUFNOTJDLE1BQU00L0MsWUFDZDlJLEVBQU05MkMsTUFBTTQvQyxXQUFXTixFQUFXQyxJQUl0Q3pJLEVBQU1nSixVQUFZLFNBQVVSLEVBQVdDLEdBQ3JDLElBQUkrQixFQUF5QnhLLEVBQU1vSyxpQkFBaUI1QixFQUFXQyxHQUMzRGorQyxFQUFPZ2dELEVBQXVCLEdBRzlCMW9ELEVBRlkwb0QsRUFBdUIsR0FFaEIsU0FBVyxRQUVsQ3hLLEVBQU1xSyxjQUFjNy9DLEVBQU0xSSxHQUUxQmsrQyxFQUFNc0ssU0FBUzkvQyxFQUFNMUksRUFBTSxRQUV2QmsrQyxFQUFNOTJDLE1BQU04L0MsV0FDZGhKLEVBQU05MkMsTUFBTTgvQyxVQUFVUixFQUFXQyxJQUlyQ3pJLEVBQU1rSixPQUFTLFNBQVVWLEdBQ3ZCLElBQ0loK0MsRUFEeUJ3MUMsRUFBTW9LLGlCQUFpQjVCLEdBQ2xCLEdBRWxDeEksRUFBTXFLLGNBQWM3L0MsRUFBTSxVQUUxQncxQyxFQUFNcUssY0FBYzcvQyxFQUFNLFNBRTFCdzFDLEVBQU1zSyxTQUFTOS9DLEVBQU0sT0FBUSxRQUV6QncxQyxFQUFNOTJDLE1BQU1nZ0QsUUFDZGxKLEVBQU05MkMsTUFBTWdnRCxPQUFPVixJQUl2QnhJLEVBQU1tSixVQUFZLFNBQVVYLEdBQzFCLElBQ0loK0MsRUFEeUJ3MUMsRUFBTW9LLGlCQUFpQjVCLEdBQ2xCLEdBRWxDeEksRUFBTXNLLFNBQVM5L0MsRUFBTSxPQUFRLFVBRXpCdzFDLEVBQU05MkMsTUFBTWlnRCxXQUNkbkosRUFBTTkyQyxNQUFNaWdELFVBQVVYLElBSTFCeEksRUFBTThFLFNBQVcsU0FBVTBELEdBQ3pCLElBQ0loK0MsRUFEeUJ3MUMsRUFBTW9LLGlCQUFpQjVCLEdBQ2xCLEdBRWxDeEksRUFBTXFLLGNBQWM3L0MsRUFBTSxRQUUxQncxQyxFQUFNc0ssU0FBUzkvQyxFQUFNLE9BQVEsUUFFekJ3MUMsRUFBTTkyQyxNQUFNNDdDLFVBQ2Q5RSxFQUFNOTJDLE1BQU00N0MsU0FBUzBELElBSXpCeEksRUFBTW9LLGlCQUFtQixTQUFVNUIsRUFBV0MsR0FDNUMsT0FBT3pJLEVBQU05MkMsTUFBTXEvQyxRQUFVLENBQUN2SSxFQUFNOTJDLE1BQU1xL0MsUUFBUWp0QyxRQUFTa3RDLEdBQ3pELENBQUNBLEVBQVdDLElBR2hCekksRUFBTXlLLGNBQWdCLFNBQVUzb0QsR0FDOUIsSUFBSTRvRCxFQUFhMUssRUFBTTkyQyxNQUFNd2hELFdBQ3pCQyxFQUEyQyxpQkFBZkQsRUFFNUJFLEVBQWdCRCxHQURQQSxHQUFzQkQsRUFBYUEsRUFBYSxJQUFNLElBQ1o1b0QsRUFBTzRvRCxFQUFXNW9ELEdBR3pFLE1BQU8sQ0FDTDhvRCxjQUFlQSxFQUNmOUcsZ0JBSm9CNkcsRUFBcUJDLEVBQWdCLFVBQVlGLEVBQVc1b0QsRUFBTyxVQUt2RitvRCxjQUprQkYsRUFBcUJDLEVBQWdCLFFBQVVGLEVBQVc1b0QsRUFBTyxVQVFoRmsrQyxFQXRIVDlHLEVBQWUrUSxFQUFlbEosR0F5SDlCLElBQUliLEVBQVMrSixFQUFjdHFELFVBNkQzQixPQTNEQXVnRCxFQUFPb0ssU0FBVyxTQUFrQjkvQyxFQUFNMUksRUFBTWdwRCxHQUM5QyxJQUFJN0csRUFBWTVtRCxLQUFLb3RELGNBQWMzb0QsR0FBTWdwRCxFQUFRLGFBRzdDRCxFQURzQnh0RCxLQUFLb3RELGNBQWMsU0FDTEksY0FFM0IsV0FBVC9vRCxHQUErQixTQUFWZ3BELEdBQW9CRCxJQUMzQzVHLEdBQWEsSUFBTTRHLEdBS1AsV0FBVkMsR0FFRnRnRCxHQUFRQSxFQUFLZ2pDLFVBR1h5VyxJQUNGNW1ELEtBQUs2c0QsZUFBZXBvRCxHQUFNZ3BELEdBQVM3RyxFQWhPekIsU0FBa0J6NUMsRUFBTXMvQyxHQUMvQnQvQyxHQUFRcy9DLEdBQVdBLEVBQVFybEQsTUFBTSxLQUFLQyxTQUFRLFNBQVVrRCxHQUM3RCxPQ1hzQ3E4QyxFRFdicjhDLFFDWEl5QyxFRFdWRyxHQ1ZUdS9DLFVBQVcxL0MsRUFBUTAvQyxVQUFVcitDLElBQUl1NEMsR0NGaEMsU0FBa0I1NUMsRUFBUzQ1QyxHQUN4QyxPQUFJNTVDLEVBQVEwL0MsWUFBb0I5RixHQUFhNTVDLEVBQVEwL0MsVUFBVTE3QixTQUFTNDFCLElBQ2tDLEtBQWxHLEtBQU81NUMsRUFBUTQ1QyxVQUFVK0YsU0FBVzMvQyxFQUFRNDVDLFdBQWEsS0FBSy9zQyxRQUFRLElBQU0rc0MsRUFBWSxLREE5QjhHLENBQVMxZ0QsRUFBUzQ1QyxLQUE2QyxpQkFBdEI1NUMsRUFBUTQ1QyxVQUF3QjU1QyxFQUFRNDVDLFVBQVk1NUMsRUFBUTQ1QyxVQUFZLElBQU1BLEVBQWU1NUMsRUFBUW1ELGFBQWEsU0FBVW5ELEVBQVE0NUMsV0FBYTU1QyxFQUFRNDVDLFVBQVUrRixTQUFXLElBQU0sSUFBTS9GLEtBRHhSLElBQWtCNTVDLEVBQVM0NUMsS0QyT3BDK0csQ0FBVXhnRCxFQUFNeTVDLEtBSXBCL0QsRUFBT21LLGNBQWdCLFNBQXVCNy9DLEVBQU0xSSxHQUNsRCxJQUFJbXBELEVBQXdCNXRELEtBQUs2c0QsZUFBZXBvRCxHQUM1QzhvRCxFQUFnQkssRUFBc0J4ekMsS0FDdENxc0MsRUFBa0JtSCxFQUFzQjFCLE9BQ3hDc0IsRUFBZ0JJLEVBQXNCN3JELEtBQzFDL0IsS0FBSzZzRCxlQUFlcG9ELEdBQVEsR0FFeEI4b0QsR0FDRmYsR0FBWXIvQyxFQUFNb2dELEdBR2hCOUcsR0FDRitGLEdBQVlyL0MsRUFBTXM1QyxHQUdoQitHLEdBQ0ZoQixHQUFZci9DLEVBQU1xZ0QsSUFJdEIzSyxFQUFPdjlDLE9BQVMsV0FDZCxJQUFJNi9DLEVBQWNubEQsS0FBSzZMLE1BRW5CQSxHQURJczVDLEVBQVlrSSxXQUNSLEVBQThCbEksRUFBYSxDQUFDLGdCQUV4RCxPQUFvQixnQkFBb0IsR0FBWSxFQUFTLEdBQUl0NUMsRUFBTyxDQUN0RTAvQyxRQUFTdnJELEtBQUt1ckQsUUFDZEksVUFBVzNyRCxLQUFLMnJELFVBQ2hCRixXQUFZenJELEtBQUt5ckQsV0FDakJJLE9BQVE3ckQsS0FBSzZyRCxPQUNiQyxVQUFXOXJELEtBQUs4ckQsVUFDaEJyRSxTQUFVem5ELEtBQUt5bkQsYUFJWm1GLEVBdkx3QixDQXdML0IsYUFFRkEsR0FBYzFvRCxhQUFlLENBQzNCbXBELFdBQVksSUFFZFQsR0FBY3BvRCxVQWlJVCxHQUNMLFksY0duWmEsSUFBSSxLQUxILENBRWQsT0FBaUIsT0FDakIsV0FBb0IsSUFNcEIsU0FBZSxhQUFrQixHLGdtQ0NOakMsSUFBTTZSLEdBQWEsU0FBQXhLLEdBRWpCLE9BRHNCZ2lELG1CQUF1QmhpRCxFQUFNbUosVUFDOUIsSUFBTSxNQUlSODRDLEcsMnZCQUVULFdBQ0ZDLEVBQWdCL3RELEtBQUs2TCxNQUFNMUcsVUFFakMsT0FDRSxnQkFBQzYvQyxFQUFELENBQ0VsOUMsS0FBTTlILEtBQUs2TCxNQUFNL0QsS0FDakIwRixNQUFPeE4sS0FBSzZMLE1BQU0yQixNQUNsQndILFNBQVUsU0FBRW5KLEdBQUYsT0FDUixnQkFBQyxHQUFELENBQ0ErNkMsVUFBV29ILGFBQ1g3b0QsVUFBV2tSLElBRVR4SyxFQUFNM0QsT0FDSixnQkFBQyxHQUFELENBQ0VtbEQsV0FBVyxPQUNYeEMsUUFBUyxLQUVWLGdCQUFDa0QsRUFBRCxNQUFtQixFQUFLbGlELE1BQVdBLGMscUJBbkJMZ2lELGEsVUNKaEMsSUFBSSxLQUxILENBRWQsT0FBaUIsT0FDakIsV0FBb0IsSUFNTCxZLGNDSkYsSUFBSSxLQUxILENBRWQsT0FBaUIsT0FDakIsV0FBb0IsSUFNTCxZQ0lmLElBQUlJLEdBQWdCLFNBQVNsL0MsRUFBR2hCLEdBSTVCLE9BSEFrZ0QsR0FBZ0Ixc0QsT0FBTzJzRCxnQkFDbEIsQ0FBRWxTLFVBQVcsY0FBZ0IvNkMsT0FBUyxTQUFVOE4sRUFBR2hCLEdBQUtnQixFQUFFaXRDLFVBQVlqdUMsSUFDdkUsU0FBVWdCLEVBQUdoQixHQUFLLElBQUssSUFBSWd1QixLQUFLaHVCLEVBQU9BLEVBQUV0SCxlQUFlczFCLEtBQUlodEIsRUFBRWd0QixHQUFLaHVCLEVBQUVndUIsTUFDcERodEIsRUFBR2hCLElBR3JCLFNBQVNvZ0QsR0FBVXAvQyxFQUFHaEIsR0FFekIsU0FBU3FnRCxJQUFPcHVELEtBQUt5QyxZQUFjc00sRUFEbkNrL0MsR0FBY2wvQyxFQUFHaEIsR0FFakJnQixFQUFFek0sVUFBa0IsT0FBTnlMLEVBQWF4TSxPQUFPbWlDLE9BQU8zMUIsSUFBTXFnRCxFQUFHOXJELFVBQVl5TCxFQUFFekwsVUFBVyxJQUFJOHJELEdDekI1RSxTQUFTQyxHQUFXNTZCLEdBQ3ZCLE1BQW9CLG1CQUFOQSxFQ0RsQixJQUFJNjZCLElBQXNELEVBQy9DLEdBQVMsQ0FDaEJDLGFBQVMzc0QsRUFDVCwwQ0FBMENJLEdBQ2xDQSxJQUMwQixJQUFJbUssT0FDcUc0RixNQUt2SXU4QyxHQUFzRHRzRCxHQUUxRCw0Q0FDSSxPQUFPc3NELEtDZFIsU0FBU0UsR0FBZ0J2c0QsR0FDNUJvekIsWUFBVyxXQUFjLE1BQU1wekIsSUFBUSxHQ0NwQyxJQUFJd3NELEdBQVEsQ0FDZkMsUUFBUSxFQUNSNXNELEtBQU0sU0FBVUUsS0FDaEJ1bkMsTUFBTyxTQUFVdG5DLEdBQ2IsR0FBSSx5Q0FDQSxNQUFNQSxFQUdOdXNELEdBQWdCdnNELElBR3hCMHNELFNBQVUsY0NiSHh0RCxHQUF3QixXQUFlLE9BQU9GLE1BQU1FLFNBQVcsU0FBV3N5QixHQUFLLE9BQU9BLEdBQXlCLGlCQUFiQSxFQUFFOXlCLFFBQTVFLEdDQTVCLFNBQVNpdUQsR0FBU243QixHQUNyQixPQUFhLE9BQU5BLEdBQTJCLGlCQUFOQSxFQ0RoQyxJQVlXbzdCLEdBWmlDLFdBQ3hDLFNBQVNDLEVBQXdCQyxHQU03QixPQUxBNWlELE1BQU01SixLQUFLdkMsTUFDWEEsS0FBS29wQyxRQUFVMmxCLEVBQ1hBLEVBQU9wdUQsT0FBUyw0Q0FBOENvdUQsRUFBTzl1RCxLQUFJLFNBQVVnQyxFQUFLM0IsR0FBSyxPQUFPQSxFQUFJLEVBQUksS0FBTzJCLEVBQUlsQyxjQUFlTSxLQUFLLFFBQVUsR0FDekpMLEtBQUswQyxLQUFPLHNCQUNaMUMsS0FBSyt1RCxPQUFTQSxFQUNQL3VELEtBR1gsT0FEQTh1RCxFQUF3QnhzRCxVQUEwQmYsT0FBT21pQyxPQUFPdjNCLE1BQU03SixXQUMvRHdzRCxFQVZpQyxHQ0l4Q0UsR0FBOEIsV0FDOUIsU0FBU0EsRUFBYUMsR0FDbEJqdkQsS0FBSzB1RCxRQUFTLEVBQ2QxdUQsS0FBS2t2RCxpQkFBbUIsS0FDeEJsdkQsS0FBS212RCxlQUFpQixLQUNsQkYsSUFDQWp2RCxLQUFLb3ZELGtCQUFtQixFQUN4QnB2RCxLQUFLcXZELGFBQWVKLEdBeUg1QixPQXRIQUQsRUFBYTFzRCxVQUFVMnNELFlBQWMsV0FDakMsSUFBSUYsRUFDSixJQUFJL3VELEtBQUswdUQsT0FBVCxDQUdBLElBQUlZLEVBQUt0dkQsS0FBTWt2RCxFQUFtQkksRUFBR0osaUJBQWtCRSxFQUFtQkUsRUFBR0YsaUJBQWtCQyxFQUFlQyxFQUFHRCxhQUFjRixFQUFpQkcsRUFBR0gsZUFJbkosR0FIQW52RCxLQUFLMHVELFFBQVMsRUFDZDF1RCxLQUFLa3ZELGlCQUFtQixLQUN4Qmx2RCxLQUFLbXZELGVBQWlCLEtBQ2xCRCxhQUE0QkYsRUFDNUJFLEVBQWlCbFYsT0FBT2g2QyxXQUV2QixHQUF5QixPQUFyQmt2RCxFQUNMLElBQUssSUFBSTFsRCxFQUFRLEVBQUdBLEVBQVEwbEQsRUFBaUJ2dUQsU0FBVTZJLEVBQ3BDMGxELEVBQWlCMWxELEdBQ3ZCd3dDLE9BQU9oNkMsTUFHeEIsR0FBSXF1RCxHQUFXZ0IsR0FBZSxDQUN0QkQsSUFDQXB2RCxLQUFLcXZELGtCQUFlenRELEdBRXhCLElBQ0l5dEQsRUFBYTlzRCxLQUFLdkMsTUFFdEIsTUFBT3dHLEdBQ0h1b0QsRUFBU3ZvRCxhQUFhcW9ELEdBQXNCVSxHQUE0Qi9vRCxFQUFFdW9ELFFBQVUsQ0FBQ3ZvRCxJQUc3RixHQUFJckYsR0FBUWd1RCxHQUNSLENBQUkzbEQsR0FBUyxFQUViLElBRkEsSUFDSXpJLEVBQU1vdUQsRUFBZXh1RCxTQUNoQjZJLEVBQVF6SSxHQUFLLENBQ2xCLElBQUl5dUQsRUFBTUwsRUFBZTNsRCxHQUN6QixHQUFJb2xELEdBQVNZLEdBQ1QsSUFDSUEsRUFBSVAsY0FFUixNQUFPem9ELEdBQ0h1b0QsRUFBU0EsR0FBVSxHQUNmdm9ELGFBQWFxb0QsR0FDYkUsRUFBU0EsRUFBTzN1RCxPQUFPbXZELEdBQTRCL29ELEVBQUV1b0QsU0FHckRBLEVBQU92dkQsS0FBS2dILEtBTWhDLEdBQUl1b0QsRUFDQSxNQUFNLElBQUlGLEdBQW9CRSxLQUd0Q0MsRUFBYTFzRCxVQUFVK0wsSUFBTSxTQUFVb2hELEdBQ25DLElBQUlDLEVBQWVELEVBQ25CLElBQUtBLEVBQ0QsT0FBT1QsRUFBYVcsTUFFeEIsY0FBZUYsR0FDWCxJQUFLLFdBQ0RDLEVBQWUsSUFBSVYsRUFBYVMsR0FDcEMsSUFBSyxTQUNELEdBQUlDLElBQWlCMXZELE1BQVEwdkQsRUFBYWhCLFFBQThDLG1CQUE3QmdCLEVBQWFULFlBQ3BFLE9BQU9TLEVBRU4sR0FBSTF2RCxLQUFLMHVELE9BRVYsT0FEQWdCLEVBQWFULGNBQ05TLEVBRU4sS0FBTUEsYUFBd0JWLEdBQWUsQ0FDOUMsSUFBSVksRUFBTUYsR0FDVkEsRUFBZSxJQUFJVixHQUNORyxlQUFpQixDQUFDUyxHQUVuQyxNQUNKLFFBQ0ksTUFBTSxJQUFJempELE1BQU0seUJBQTJCc2pELEVBQVcsMkJBRzlELElBQUlQLEVBQW1CUSxFQUFhUixpQkFDcEMsR0FBeUIsT0FBckJBLEVBQ0FRLEVBQWFSLGlCQUFtQmx2RCxVQUUvQixHQUFJa3ZELGFBQTRCRixFQUFjLENBQy9DLEdBQUlFLElBQXFCbHZELEtBQ3JCLE9BQU8wdkQsRUFFWEEsRUFBYVIsaUJBQW1CLENBQUNBLEVBQWtCbHZELFVBRWxELEtBQXdDLElBQXBDa3ZELEVBQWlCcjFDLFFBQVE3WixNQUk5QixPQUFPMHZELEVBSFBSLEVBQWlCMXZELEtBQUtRLE1BSzFCLElBQUk2dkQsRUFBZ0I3dkQsS0FBS212RCxlQU96QixPQU5zQixPQUFsQlUsRUFDQTd2RCxLQUFLbXZELGVBQWlCLENBQUNPLEdBR3ZCRyxFQUFjcndELEtBQUtrd0QsR0FFaEJBLEdBRVhWLEVBQWExc0QsVUFBVTAzQyxPQUFTLFNBQVUwVixHQUN0QyxJQUFJRyxFQUFnQjd2RCxLQUFLbXZELGVBQ3pCLEdBQUlVLEVBQWUsQ0FDZixJQUFJQyxFQUFvQkQsRUFBY2gyQyxRQUFRNjFDLElBQ25CLElBQXZCSSxHQUNBRCxFQUFjM1UsT0FBTzRVLEVBQW1CLEtBSXBEZCxFQUFhVyxNQUFTLFNBQVVsQixHQUU1QixPQURBQSxFQUFNQyxRQUFTLEVBQ1JELEVBRlUsQ0FHbkIsSUFBSU8sR0FDQ0EsRUFoSXNCLEdBbUlqQyxTQUFTTyxHQUE0QlIsR0FDakMsT0FBT0EsRUFBT3ZLLFFBQU8sU0FBVXVMLEVBQU05dEQsR0FBTyxPQUFPOHRELEVBQUszdkQsT0FBUTZCLGFBQWU0c0QsR0FBdUI1c0QsRUFBSThzRCxPQUFTOXNELEtBQVMsSUN4SXpILElBQUkrdEQsR0FBNkIsV0FDcEMsTUFBeUIsbUJBQVgzdUQsT0FDTUEsT0FBTyxnQkFDckIsa0JBQWtDNGhCLEtBQUttUSxTQUhULEdDT3BDNjhCLEdBQTRCLFNBQVVDLEdBRXRDLFNBQVNELEVBQVdFLEVBQW1CNW1CLEVBQU9vbEIsR0FDMUMsSUFBSWhNLEVBQVF1TixFQUFPM3RELEtBQUt2QyxPQUFTQSxLQUtqQyxPQUpBMmlELEVBQU15TixlQUFpQixLQUN2QnpOLEVBQU0wTixpQkFBa0IsRUFDeEIxTixFQUFNMk4sb0JBQXFCLEVBQzNCM04sRUFBTTROLFdBQVksRUFDVjFyRCxVQUFVbEUsUUFDZCxLQUFLLEVBQ0RnaUQsRUFBTTZOLFlBQWMvQixHQUNwQixNQUNKLEtBQUssRUFDRCxJQUFLMEIsRUFBbUIsQ0FDcEJ4TixFQUFNNk4sWUFBYy9CLEdBQ3BCLE1BRUosR0FBaUMsaUJBQXRCMEIsRUFBZ0MsQ0FDbkNBLGFBQTZCRixHQUM3QnROLEVBQU0yTixtQkFBcUJILEVBQWtCRyxtQkFDN0MzTixFQUFNNk4sWUFBY0wsRUFDcEJBLEVBQWtCOWhELElBQUlzMEMsS0FHdEJBLEVBQU0yTixvQkFBcUIsRUFDM0IzTixFQUFNNk4sWUFBYyxJQUFJQyxHQUFlOU4sRUFBT3dOLElBRWxELE1BRVIsUUFDSXhOLEVBQU0yTixvQkFBcUIsRUFDM0IzTixFQUFNNk4sWUFBYyxJQUFJQyxHQUFlOU4sRUFBT3dOLEVBQW1CNW1CLEVBQU9vbEIsR0FHaEYsT0FBT2hNLEVBb0RYLE9BckZBLEdBQWtCc04sRUFBWUMsR0FtQzlCRCxFQUFXM3RELFVBQVUwdEQsSUFBc0IsV0FBYyxPQUFPaHdELE1BQ2hFaXdELEVBQVd2c0IsT0FBUyxTQUFVNWhDLEVBQU15bkMsRUFBT29sQixHQUN2QyxJQUFJK0IsRUFBYSxJQUFJVCxFQUFXbnVELEVBQU15bkMsRUFBT29sQixHQUU3QyxPQURBK0IsRUFBV0osb0JBQXFCLEVBQ3pCSSxHQUVYVCxFQUFXM3RELFVBQVVSLEtBQU8sU0FBVUUsR0FDN0JoQyxLQUFLdXdELFdBQ052d0QsS0FBSzJ3RCxNQUFNM3VELElBR25CaXVELEVBQVczdEQsVUFBVWluQyxNQUFRLFNBQVV0bkMsR0FDOUJqQyxLQUFLdXdELFlBQ052d0QsS0FBS3V3RCxXQUFZLEVBQ2pCdndELEtBQUs0d0QsT0FBTzN1RCxLQUdwQmd1RCxFQUFXM3RELFVBQVVxc0QsU0FBVyxXQUN2QjN1RCxLQUFLdXdELFlBQ052d0QsS0FBS3V3RCxXQUFZLEVBQ2pCdndELEtBQUs2d0QsY0FHYlosRUFBVzN0RCxVQUFVMnNELFlBQWMsV0FDM0JqdkQsS0FBSzB1RCxTQUdUMXVELEtBQUt1d0QsV0FBWSxFQUNqQkwsRUFBTzV0RCxVQUFVMnNELFlBQVkxc0QsS0FBS3ZDLFFBRXRDaXdELEVBQVczdEQsVUFBVXF1RCxNQUFRLFNBQVUzdUQsR0FDbkNoQyxLQUFLd3dELFlBQVkxdUQsS0FBS0UsSUFFMUJpdUQsRUFBVzN0RCxVQUFVc3VELE9BQVMsU0FBVTN1RCxHQUNwQ2pDLEtBQUt3d0QsWUFBWWpuQixNQUFNdG5DLEdBQ3ZCakMsS0FBS2l2RCxlQUVUZ0IsRUFBVzN0RCxVQUFVdXVELFVBQVksV0FDN0I3d0QsS0FBS3d3RCxZQUFZN0IsV0FDakIzdUQsS0FBS2l2RCxlQUVUZ0IsRUFBVzN0RCxVQUFVd3VELHVCQUF5QixXQUMxQyxJQUFJNUIsRUFBbUJsdkQsS0FBS2t2RCxpQkFNNUIsT0FMQWx2RCxLQUFLa3ZELGlCQUFtQixLQUN4Qmx2RCxLQUFLaXZELGNBQ0xqdkQsS0FBSzB1RCxRQUFTLEVBQ2QxdUQsS0FBS3V3RCxXQUFZLEVBQ2pCdndELEtBQUtrdkQsaUJBQW1CQSxFQUNqQmx2RCxNQUVKaXdELEVBdEZvQixDQXVGN0JqQixJQUVFeUIsR0FBZ0MsU0FBVVAsR0FFMUMsU0FBU08sRUFBZU0sRUFBbUJDLEVBQWdCem5CLEVBQU9vbEIsR0FDOUQsSUFFSTdzRCxFQUZBNmdELEVBQVF1TixFQUFPM3RELEtBQUt2QyxPQUFTQSxLQUNqQzJpRCxFQUFNb08sa0JBQW9CQSxFQUUxQixJQUFJdDJCLEVBQVVrb0IsRUFvQmQsT0FuQkkwTCxHQUFXMkMsR0FDWGx2RCxFQUFPa3ZELEVBRUZBLElBQ0xsdkQsRUFBT2t2RCxFQUFlbHZELEtBQ3RCeW5DLEVBQVF5bkIsRUFBZXpuQixNQUN2Qm9sQixFQUFXcUMsRUFBZXJDLFNBQ3RCcUMsSUFBbUJ2QyxLQUVmSixJQURKNXpCLEVBQVVsNUIsT0FBT21pQyxPQUFPc3RCLElBQ0QvQixjQUNuQnRNLEVBQU10MEMsSUFBSW9zQixFQUFRdzBCLFlBQVlwckMsS0FBSzRXLElBRXZDQSxFQUFRdzBCLFlBQWN0TSxFQUFNc00sWUFBWXByQyxLQUFLOCtCLEtBR3JEQSxFQUFNN3ZDLFNBQVcybkIsRUFDakJrb0IsRUFBTWdPLE1BQVE3dUQsRUFDZDZnRCxFQUFNaU8sT0FBU3JuQixFQUNmb1osRUFBTWtPLFVBQVlsQyxFQUNYaE0sRUEwR1gsT0FuSUEsR0FBa0I4TixFQUFnQlAsR0EyQmxDTyxFQUFlbnVELFVBQVVSLEtBQU8sU0FBVUUsR0FDdEMsSUFBS2hDLEtBQUt1d0QsV0FBYXZ3RCxLQUFLMndELE1BQU8sQ0FDL0IsSUFBSUksRUFBb0Ivd0QsS0FBSyt3RCxrQkFDeEIsMENBQWlEQSxFQUFrQlQsbUJBRy9EdHdELEtBQUtpeEQsZ0JBQWdCRixFQUFtQi93RCxLQUFLMndELE1BQU8zdUQsSUFDekRoQyxLQUFLaXZELGNBSExqdkQsS0FBS2t4RCxhQUFhbHhELEtBQUsyd0QsTUFBTzN1RCxLQU8xQ3l1RCxFQUFlbnVELFVBQVVpbkMsTUFBUSxTQUFVdG5DLEdBQ3ZDLElBQUtqQyxLQUFLdXdELFVBQVcsQ0FDakIsSUFBSVEsRUFBb0Ivd0QsS0FBSyt3RCxrQkFDekJJLEVBQXdDLHlDQUM1QyxHQUFJbnhELEtBQUs0d0QsT0FDQU8sR0FBMENKLEVBQWtCVCxvQkFLN0R0d0QsS0FBS2l4RCxnQkFBZ0JGLEVBQW1CL3dELEtBQUs0d0QsT0FBUTN1RCxHQUNyRGpDLEtBQUtpdkQsZ0JBTExqdkQsS0FBS2t4RCxhQUFhbHhELEtBQUs0d0QsT0FBUTN1RCxHQUMvQmpDLEtBQUtpdkQsb0JBT1IsR0FBSzhCLEVBQWtCVCxtQkFRcEJhLEdBQ0FKLEVBQWtCWCxlQUFpQm51RCxFQUNuQzh1RCxFQUFrQlYsaUJBQWtCLEdBR3BDN0IsR0FBZ0J2c0QsR0FFcEJqQyxLQUFLaXZELGtCQWZ1QyxDQUU1QyxHQURBanZELEtBQUtpdkQsY0FDRGtDLEVBQ0EsTUFBTWx2RCxFQUVWdXNELEdBQWdCdnNELE1BYzVCd3VELEVBQWVudUQsVUFBVXFzRCxTQUFXLFdBQ2hDLElBQUloTSxFQUFRM2lELEtBQ1osSUFBS0EsS0FBS3V3RCxVQUFXLENBQ2pCLElBQUlRLEVBQW9CL3dELEtBQUsrd0Qsa0JBQzdCLEdBQUkvd0QsS0FBSzZ3RCxVQUFXLENBQ2hCLElBQUlPLEVBQWtCLFdBQWMsT0FBT3pPLEVBQU1rTyxVQUFVdHVELEtBQUtvZ0QsRUFBTTd2QyxXQUNqRSwwQ0FBaURpK0MsRUFBa0JULG9CQUtwRXR3RCxLQUFLaXhELGdCQUFnQkYsRUFBbUJLLEdBQ3hDcHhELEtBQUtpdkQsZ0JBTExqdkQsS0FBS2t4RCxhQUFhRSxHQUNsQnB4RCxLQUFLaXZELG9CQVFUanZELEtBQUtpdkQsZ0JBSWpCd0IsRUFBZW51RCxVQUFVNHVELGFBQWUsU0FBVWxULEVBQUloOEMsR0FDbEQsSUFDSWc4QyxFQUFHejdDLEtBQUt2QyxLQUFLOFMsU0FBVTlRLEdBRTNCLE1BQU9DLEdBRUgsR0FEQWpDLEtBQUtpdkQsY0FDRCx5Q0FDQSxNQUFNaHRELEVBR051c0QsR0FBZ0J2c0QsS0FJNUJ3dUQsRUFBZW51RCxVQUFVMnVELGdCQUFrQixTQUFVSSxFQUFRclQsRUFBSWg4QyxHQUM3RCxJQUFLLHlDQUNELE1BQU0sSUFBSW1LLE1BQU0sWUFFcEIsSUFDSTZ4QyxFQUFHejdDLEtBQUt2QyxLQUFLOFMsU0FBVTlRLEdBRTNCLE1BQU9DLEdBQ0gsT0FBSSwwQ0FDQW92RCxFQUFPakIsZUFBaUJudUQsRUFDeEJvdkQsRUFBT2hCLGlCQUFrQixHQUNsQixJQUdQN0IsR0FBZ0J2c0QsSUFDVCxHQUdmLE9BQU8sR0FFWHd1RCxFQUFlbnVELFVBQVUrc0QsYUFBZSxXQUNwQyxJQUFJMEIsRUFBb0Ivd0QsS0FBSyt3RCxrQkFDN0Ivd0QsS0FBSzhTLFNBQVcsS0FDaEI5UyxLQUFLK3dELGtCQUFvQixLQUN6QkEsRUFBa0I5QixlQUVmd0IsRUFwSXdCLENBcUlqQ1IsSUNyT1MsR0FBMkIsV0FBZSxNQUF5QixtQkFBWDV1RCxRQUF5QkEsT0FBT2l3RCxZQUFjLGVBQTNFLEdDQS9CLFNBQVNDLEdBQVM5OUIsR0FDckIsT0FBT0EsRUNPSixTQUFTKzlCLEdBQWNDLEdBQzFCLE9BQW1CLElBQWZBLEVBQUk5d0QsT0FDRzR3RCxHQUVRLElBQWZFLEVBQUk5d0QsT0FDRzh3RCxFQUFJLEdBRVIsU0FBZS8yQyxHQUNsQixPQUFPKzJDLEVBQUlqTixRQUFPLFNBQVVtRCxFQUFNM0osR0FBTSxPQUFPQSxFQUFHMkosS0FBVWp0QyxJQ1hwRSxJQUFJZzNDLEdBQTRCLFdBQzVCLFNBQVNBLEVBQVd2dUIsR0FDaEJuakMsS0FBSzJ4RCxXQUFZLEVBQ2J4dUIsSUFDQW5qQyxLQUFLNHhELFdBQWF6dUIsR0E2RjFCLE9BMUZBdXVCLEVBQVdwdkQsVUFBVXV2RCxLQUFPLFNBQVVDLEdBQ2xDLElBQUlSLEVBQWEsSUFBSUksRUFHckIsT0FGQUosRUFBVzN0RCxPQUFTM0QsS0FDcEJzeEQsRUFBV1EsU0FBV0EsRUFDZlIsR0FFWEksRUFBV3B2RCxVQUFVNmdDLFVBQVksU0FBVTZ0QixFQUFnQnpuQixFQUFPb2xCLEdBQzlELElBQUltRCxFQUFXOXhELEtBQUs4eEQsU0FDaEJDLEVDakJMLFNBQXNCQyxFQUFnQnpvQixFQUFPb2xCLEdBQ2hELEdBQUlxRCxFQUFnQixDQUNoQixHQUFJQSxhQUEwQi9CLEdBQzFCLE9BQU8rQixFQUVYLEdBQUlBLEVBQWVoQyxJQUNmLE9BQU9nQyxFQUFlaEMsTUFHOUIsT0FBS2dDLEdBQW1Cem9CLEdBQVVvbEIsRUFHM0IsSUFBSXNCLEdBQVcrQixFQUFnQnpvQixFQUFPb2xCLEdBRmxDLElBQUlzQixHQUFXeEIsSURPWHdELENBQWFqQixFQUFnQnpuQixFQUFPb2xCLEdBUy9DLEdBUkltRCxFQUNBQyxFQUFLMWpELElBQUl5akQsRUFBU3Z2RCxLQUFLd3ZELEVBQU0veEQsS0FBSzJELFNBR2xDb3VELEVBQUsxakQsSUFBSXJPLEtBQUsyRCxRQUFXLDJDQUFpRG91RCxFQUFLekIsbUJBQzNFdHdELEtBQUs0eEQsV0FBV0csR0FDaEIveEQsS0FBS2t5RCxjQUFjSCxJQUV2QiwwQ0FDSUEsRUFBS3pCLHFCQUNMeUIsRUFBS3pCLG9CQUFxQixFQUN0QnlCLEVBQUsxQixpQkFDTCxNQUFNMEIsRUFBSzNCLGVBSXZCLE9BQU8yQixHQUVYTCxFQUFXcHZELFVBQVU0dkQsY0FBZ0IsU0FBVUgsR0FDM0MsSUFDSSxPQUFPL3hELEtBQUs0eEQsV0FBV0csR0FFM0IsTUFBTzl2RCxHQUNDLDJDQUNBOHZELEVBQUsxQixpQkFBa0IsRUFDdkIwQixFQUFLM0IsZUFBaUJudUQsR0U3Qy9CLFNBQXdCa3dELEdBQzNCLEtBQU9BLEdBQVUsQ0FDYixJQUFJN0MsRUFBSzZDLEVBQVVDLEVBQVc5QyxFQUFHWixPQUFROEIsRUFBY2xCLEVBQUdrQixZQUFhRCxFQUFZakIsRUFBR2lCLFVBQ3RGLEdBQUk2QixHQUFZN0IsRUFDWixPQUFPLEVBR1A0QixFQURLM0IsR0FBZUEsYUFBdUJQLEdBQ2hDTyxFQUdBLEtBR25CLE9BQU8sRUZrQ0s2QixDQUFlTixHQUNmQSxFQUFLeG9CLE1BQU10bkMsR0FHWHFuQyxRQUFRZ3BCLEtBQUtyd0QsS0FJekJ5dkQsRUFBV3B2RCxVQUFVK0UsUUFBVSxTQUFVdkYsRUFBTXl3RCxHQUMzQyxJQUFJNVAsRUFBUTNpRCxLQUVaLE9BQU8sSUFEUHV5RCxFQUFjQyxHQUFlRCxLQUNOLFNBQVVFLEVBQVNDLEdBQ3RDLElBQUloRCxFQUNKQSxFQUFlL00sRUFBTXhmLFdBQVUsU0FBVW5oQyxHQUNyQyxJQUNJRixFQUFLRSxHQUVULE1BQU9DLEdBQ0h5d0QsRUFBT3p3RCxHQUNIeXRELEdBQ0FBLEVBQWFULGlCQUd0QnlELEVBQVFELE9BR25CZixFQUFXcHZELFVBQVVzdkQsV0FBYSxTQUFVbEIsR0FDeEMsSUFBSS9zRCxFQUFTM0QsS0FBSzJELE9BQ2xCLE9BQU9BLEdBQVVBLEVBQU93L0IsVUFBVXV0QixJQUV0Q2dCLEVBQVdwdkQsVUFBVSxJQUFxQixXQUN0QyxPQUFPdEMsTUFFWDB4RCxFQUFXcHZELFVBQVVxd0QsS0FBTyxXQUV4QixJQURBLElBQUlDLEVBQWEsR0FDUmh5RCxFQUFLLEVBQUdBLEVBQUtpRSxVQUFVbEUsT0FBUUMsSUFDcENneUQsRUFBV2h5RCxHQUFNaUUsVUFBVWpFLEdBRS9CLE9BQTBCLElBQXRCZ3lELEVBQVdqeUQsT0FDSlgsS0FFSnd4RCxHQUFjb0IsRUFBZHBCLENBQTBCeHhELE9BRXJDMHhELEVBQVdwdkQsVUFBVXV3RCxVQUFZLFNBQVVOLEdBQ3ZDLElBQUk1UCxFQUFRM2lELEtBRVosT0FBTyxJQURQdXlELEVBQWNDLEdBQWVELEtBQ04sU0FBVUUsRUFBU0MsR0FDdEMsSUFBSTF3RCxFQUNKMmdELEVBQU14ZixXQUFVLFNBQVUxUCxHQUFLLE9BQU96eEIsRUFBUXl4QixLQUFNLFNBQVV4eEIsR0FBTyxPQUFPeXdELEVBQU96d0QsTUFBUyxXQUFjLE9BQU93d0QsRUFBUXp3RCxVQUdqSTB2RCxFQUFXaHVCLE9BQVMsU0FBVVAsR0FDMUIsT0FBTyxJQUFJdXVCLEVBQVd2dUIsSUFFbkJ1dUIsRUFqR29CLEdBb0cvQixTQUFTYyxHQUFlRCxHQUlwQixHQUhLQSxJQUNEQSxFQUFjLFlBQWtCaEUsVUFFL0JnRSxFQUNELE1BQU0sSUFBSXBtRCxNQUFNLHlCQUVwQixPQUFPb21ELEVHaEhKLFNBQVNPLEtBQ1osTUFBc0IsbUJBQVh6eEQsUUFBMEJBLE9BQU9DLFNBR3JDRCxPQUFPQyxTQUZILGFBSVIsSUFBSSxHQUF5Qnd4RCxLQ056QkMsR0FBYyxTQUFXdC9CLEdBQUssT0FBT0EsR0FBeUIsaUJBQWJBLEVBQUU5eUIsUUFBb0MsbUJBQU44eUIsR0NBckYsU0FBU3UvQixHQUFVaHhELEdBQ3RCLFFBQVNBLEdBQW9DLG1CQUFwQkEsRUFBTW1oQyxXQUFrRCxtQkFBZm5oQyxFQUFNNHBDLEtDRXJFLFNBQVNqcEMsR0FBSytYLEVBQU91NEMsR0FDeEIsT0FBS0EsRUNJRixTQUFtQnY0QyxFQUFPdTRDLEdBQzdCLEdBQWEsTUFBVHY0QyxFQUFlLENBQ2YsR0NURCxTQUE2QkEsR0FDaEMsT0FBT0EsR0FBNkMsbUJBQTdCQSxFQUFNLElEUXJCdzRDLENBQW9CeDRDLEdBQ3BCLE9FUkwsU0FBNEJBLEVBQU91NEMsR0FDdEMsT0FBTyxJQUFJdkIsSUFBVyxTQUFVaEIsR0FDNUIsSUFBSWxCLEVBQU0sSUFBSVIsR0FTZCxPQVJBUSxFQUFJbmhELElBQUk0a0QsRUFBVUUsVUFBUyxXQUN2QixJQUFJN0IsRUFBYTUyQyxFQUFNLE1BQ3ZCODBDLEVBQUluaEQsSUFBSWlqRCxFQUFXbnVCLFVBQVUsQ0FDekJyaEMsS0FBTSxTQUFVRSxHQUFTd3RELEVBQUluaEQsSUFBSTRrRCxFQUFVRSxVQUFTLFdBQWMsT0FBT3pDLEVBQVc1dUQsS0FBS0UsUUFDekZ1bkMsTUFBTyxTQUFVdG5DLEdBQU91dEQsRUFBSW5oRCxJQUFJNGtELEVBQVVFLFVBQVMsV0FBYyxPQUFPekMsRUFBV25uQixNQUFNdG5DLFFBQ3pGMHNELFNBQVUsV0FBY2EsRUFBSW5oRCxJQUFJNGtELEVBQVVFLFVBQVMsV0FBYyxPQUFPekMsRUFBVy9CLHVCQUdwRmEsS0ZISTRELENBQW1CMTRDLEVBQU91NEMsR0FFaEMsR0FBSUQsR0FBVXQ0QyxHQUNmLE9HWkwsU0FBeUJBLEVBQU91NEMsR0FDbkMsT0FBTyxJQUFJdkIsSUFBVyxTQUFVaEIsR0FDNUIsSUFBSWxCLEVBQU0sSUFBSVIsR0FXZCxPQVZBUSxFQUFJbmhELElBQUk0a0QsRUFBVUUsVUFBUyxXQUN2QixPQUFPejRDLEVBQU1reEIsTUFBSyxTQUFVNXBDLEdBQ3hCd3RELEVBQUluaEQsSUFBSTRrRCxFQUFVRSxVQUFTLFdBQ3ZCekMsRUFBVzV1RCxLQUFLRSxHQUNoQnd0RCxFQUFJbmhELElBQUk0a0QsRUFBVUUsVUFBUyxXQUFjLE9BQU96QyxFQUFXL0Isc0JBRWhFLFNBQVUxc0QsR0FDVHV0RCxFQUFJbmhELElBQUk0a0QsRUFBVUUsVUFBUyxXQUFjLE9BQU96QyxFQUFXbm5CLE1BQU10bkMsY0FHbEV1dEQsS0hESTZELENBQWdCMzRDLEVBQU91NEMsR0FFN0IsR0FBSUYsR0FBWXI0QyxHQUNqQixPSWZMLFNBQXVCQSxFQUFPdTRDLEdBQ2pDLE9BQU8sSUFBSXZCLElBQVcsU0FBVWhCLEdBQzVCLElBQUlsQixFQUFNLElBQUlSLEdBQ1YxdUQsRUFBSSxFQVdSLE9BVkFrdkQsRUFBSW5oRCxJQUFJNGtELEVBQVVFLFVBQVMsV0FDbkI3eUQsSUFBTW9hLEVBQU0vWixRQUloQit2RCxFQUFXNXVELEtBQUs0WSxFQUFNcGEsTUFDakJvd0QsRUFBV2hDLFFBQ1pjLEVBQUluaEQsSUFBSXJPLEtBQUttekQsYUFMYnpDLEVBQVcvQixlQVFaYSxLSkNJOEQsQ0FBYzU0QyxFQUFPdTRDLEdBRTNCLEdLbEJOLFNBQW9CdjRDLEdBQ3ZCLE9BQU9BLEdBQTJDLG1CQUEzQkEsRUFBTSxJTGlCaEI2NEMsQ0FBVzc0QyxJQUEyQixpQkFBVkEsRUFDakMsT01qQkwsU0FBMEJBLEVBQU91NEMsR0FDcEMsSUFBS3Y0QyxFQUNELE1BQU0sSUFBSXZPLE1BQU0sMkJBRXBCLE9BQU8sSUFBSXVsRCxJQUFXLFNBQVVoQixHQUM1QixJQUNJcHZELEVBREFrdUQsRUFBTSxJQUFJUixHQWlDZCxPQS9CQVEsRUFBSW5oRCxLQUFJLFdBQ0EvTSxHQUF1QyxtQkFBcEJBLEVBQVNtYyxRQUM1Qm5jLEVBQVNtYyxZQUdqQit4QyxFQUFJbmhELElBQUk0a0QsRUFBVUUsVUFBUyxXQUN2Qjd4RCxFQUFXb1osRUFBTSxNQUNqQjgwQyxFQUFJbmhELElBQUk0a0QsRUFBVUUsVUFBUyxXQUN2QixJQUFJekMsRUFBV2hDLE9BQWYsQ0FHQSxJQUFJMXNELEVBQ0FELEVBQ0osSUFDSSxJQUFJODJDLEVBQVN2M0MsRUFBU1EsT0FDdEJFLEVBQVE2MkMsRUFBTzcyQyxNQUNmRCxFQUFPODJDLEVBQU85MkMsS0FFbEIsTUFBT0UsR0FFSCxZQURBeXVELEVBQVdubkIsTUFBTXRuQyxHQUdqQkYsRUFDQTJ1RCxFQUFXL0IsWUFHWCtCLEVBQVc1dUQsS0FBS0UsR0FDaEJoQyxLQUFLbXpELHFCQUlWM0QsS05yQklnRSxDQUFpQjk0QyxFQUFPdTRDLEdBR3ZDLE1BQU0sSUFBSW53RCxXQUFxQixPQUFWNFgsVUFBeUJBLEdBQVNBLEdBQVMsc0JEWnJEKzRDLENBQVUvNEMsRUFBT3U0QyxHQU5wQnY0QyxhQUFpQmczQyxHQUNWaDNDLEVBRUosSUFBSWczQyxHUUNNLFNBQVU3WSxHQUMvQixHQUFNQSxHQUErQyxtQkFBOUJBLEVBQU8sSUFDMUIsT0NWcUNsdUMsRURVUmt1QyxFQ1QxQixTQUFVNlgsR0FDYixJQUFJZ0QsRUFBTS9vRCxFQUFJLE1BQ2QsR0FBNkIsbUJBQWxCK29ELEVBQUl2d0IsVUFDWCxNQUFNLElBQUlyZ0MsVUFBVSxrRUFHcEIsT0FBTzR3RCxFQUFJdndCLFVBQVV1dEIsSURLeEIsR0FBSXFDLEdBQVlsYSxHQUNqQixPRWRnQ3RzQyxFRmNSc3NDLEVFYnJCLFNBQVU2WCxHQUNiLElBQUssSUFBSXB3RCxFQUFJLEVBQUdTLEVBQU13TCxFQUFNNUwsT0FBUUwsRUFBSVMsSUFBUTJ2RCxFQUFXaEMsT0FBUXB1RCxJQUMvRG93RCxFQUFXNXVELEtBQUt5SyxFQUFNak0sSUFFMUJvd0QsRUFBVy9CLFlGV1YsR0FBSXFFLEdBQVVuYSxHQUNmLE9HaEJrQzhhLEVIZ0JSOWEsRUdmdkIsU0FBVTZYLEdBUWIsT0FQQWlELEVBQVEvbkIsTUFBSyxTQUFVNXBDLEdBQ2QwdUQsRUFBV2hDLFNBQ1pnQyxFQUFXNXVELEtBQUtFLEdBQ2hCMHVELEVBQVcvQixlQUVoQixTQUFVMXNELEdBQU8sT0FBT3l1RCxFQUFXbm5CLE1BQU10bkMsTUFDdkMycEMsS0FBSyxLQUFNNGlCLElBQ1RrQyxHSFNOLEdBQU03WCxHQUE2QyxtQkFBNUJBLEVBQU8sSUFDL0IsT0luQm1DK2EsRUptQlIvYSxFSWxCeEIsU0FBVTZYLEdBRWIsSUFEQSxJQUFJcHZELEVBQVdzeUQsRUFBUyxRQUNyQixDQUNDLElBQUkxekQsT0FBTyxFQUNYLElBQ0lBLEVBQU9vQixFQUFTUSxPQUVwQixNQUFPRyxHQUVILE9BREF5dUQsRUFBV25uQixNQUFNdG5DLEdBQ1Z5dUQsRUFFWCxHQUFJeHdELEVBQUs2QixLQUFNLENBQ1gydUQsRUFBVy9CLFdBQ1gsTUFHSixHQURBK0IsRUFBVzV1RCxLQUFLNUIsRUFBSzhCLE9BQ2pCMHVELEVBQVdoQyxPQUNYLE1BVVIsTUFQK0IsbUJBQXBCcHRELEVBQVNtYyxRQUNoQml6QyxFQUFXcmlELEtBQUksV0FDUC9NLEVBQVNtYyxRQUNUbmMsRUFBU21jLFlBSWRpekMsR0pOUCxJSXRCbUNrRCxFREFERCxFRERGcG5ELEVEQ0s1QixFRHNCakMzSSxFQUFRNHNELEdBQVMvVixHQUFVLG9CQUFzQixJQUFNQSxFQUFTLElBR3BFLE1BQU0sSUFBSS8xQyxVQUZBLGdCQUFrQmQsRUFBbEIsNkZSaEJZNnhELENBQVluNUMsSSxjYUQ3QixJQUFJLEtBTEgsQ0FFZCxPQUFpQixPQUNqQixXQUFvQixJQU1wQixTQUFlLGFBQWtCLEcsYUNKcEIsSUFBSSxLQUxILENBRWQsT0FBaUIsT0FDakIsV0FBb0IsSUFNcEIsU0FBZSxhQUFrQixHQ1RqQyxJQUFNbzVDLEdBQVEsU0FBQzV6RCxFQUFNc0osR0FBUCxPQUFrQix1QkFBS2xELElBQUtrRCxFQUFPbzlDLFVBQVdvSCxtQkFBdUIsdUJBQUtwSCxVQUFXb0gsYUFFbkcsa0JBQWUsR0FFYixJQUZxQyxJQUF0QitGLEVBQXNCLEVBQXRCQSxPQUFRQyxFQUFjLEVBQWRBLFNBQ25Cem5ELEVBQVEsR0FDSmpNLEVBQUUsRUFBR0EsRUFBSXl6RCxFQUFRenpELElBQ3ZCaU0sRUFBTWpNLElBQUssRUFFYixPQUNFLHVCQUFLc1osTUFBTyxDQUFDbzZDLFNBQVVBLEdBQVdwTixVQUFXb0gsY0FDM0Msd0JBQU1wSCxVQUFXb0gsV0FBakIsZUFDQ3poRCxFQUFNdE0sSUFBSTZ6RCxNLHF6QkNQakIsSUFBTUcsR0FBVyxTQUFDQyxHQUNoQixPQUFPQSxFQUFLeHhELE1BQVF3eEQsRUFBS0MsU0FBV0QsRUFBS0UsVUFHdEJDLEcsc3BCQUVuQixXQUFZeG9ELEdBQU8sYSw0RkFBQSxVQUNqQixjQUFNQSxJQUVEdXhCLE1BQVEsQ0FDWGszQixNQUFPLEdBQ1BDLFFBQVEsR0FHVixFQUFLQyxRQUFVLEVBQUtBLFFBQVEzd0MsS0FBYixPQUNmLEVBQUs0d0MsaUJBQW1CLEVBQUtBLGlCQUFpQjV3QyxLQUF0QixPQVRQLEUseURBWUMsV0FDbEI3akIsS0FBSzB2RCxhQUFlL3NELEdBQUszQyxLQUFLNkwsTUFBTTZvRCxhQUFhQyxlQUM5Q3h4QixXQUFVLFNBQUFteEIsR0FDVCxFQUFLaGYsU0FBUyxDQUNaZ2YsTUFBT0EsRUFBTXphLE9BQU9vYSxJQUNwQk0sUUFBUSxTLDZDQU1kdjBELEtBQUswdkQsYUFBYVQsZ0IsZ0NBSWxCanZELEtBQUs2TCxNQUFNK3lDLFFBQVFwL0MsS0FBSyx3Qix1Q0FHVDR2QixHQUNmQSxFQUFNbkssaUJBRU4sSUFBTW9NLEVBQU9qQyxFQUFNeEssY0FBY2d3QyxhQUFhLFFBQzlDNTBELEtBQUs2TCxNQUFNK3lDLFFBQVFwL0MsS0FBSzZ4QixLLCtCQUdoQixXQTBCUixPQUNFLHVCQUFLdTFCLFVBQVdvSCxjQUNkLHVCQUFLcEgsVUFBV29ILFdBQ2QsMEJBQVF6bEIsUUFBU3ZvQyxLQUFLdzBELFNBQXRCLGdDQUVGLHVCQUFLNU4sVUFBV29ILG1CQUNaaHVELEtBQUtvOUIsTUFBTW0zQixRQVpmLHVCQUFLM04sVUFBV29ILG1CQUNkLDhFQVlBLGdCQUFDLEdBQUQsQ0FBaUI3b0QsVUFBVSxNQUFNeWhELFVBQVdvSCxVQUN6Q2h1RCxLQUFLbzlCLE1BQU1rM0IsTUFBTXIwRCxLQWpDUCxTQUFDaTBELEVBQU0xcUQsR0FDeEIsT0FDRSxnQkFBQyxHQUFELENBQWVxaEQsUUFBUyxJQUFLdmtELElBQUs0dEQsRUFBS3gwRCxHQUFJMnRELFdBQVcsWUFDcEQsdUJBQUt6RyxVQUFXb0gsU0FDZCx1QkFBS3BILFVBQVdvSCxTQUFja0csRUFBS3h4RCxNQUNuQyx1QkFBS2trRCxVQUFXb0gsbUJBQ2hCLHFCQUFHemxCLFFBQVMsRUFBS2tzQixpQkFBa0JwakMsS0FBSSxpQkFBWTZpQyxFQUFLeDBELEtBQ3RELHVCQUFLa25ELFVBQVdvSCxTQUFjNkcsSUFBS1gsRUFBS0UsYUFHMUMsdUJBQUt4TixVQUFXb0gsWUFBaUJrRyxFQUFLQyxTQUN0QyxnQkFBQyxHQUFELENBQVdILFNBQVMsT0FBT0QsT0FBUUcsRUFBS1kseUIscUJBbkRMakgsYSxVQ0ZsQyxJQUFJLEtBTEgsQ0FFZCxPQUFpQixPQUNqQixXQUFvQixJQU1wQixTQUFlLGFBQWtCLEcsbTVCQ05ad0csRywydkJBR2pCLE9BQ0UsdUJBQUt6TixVQUFXb0gsY0FDZCx1QkFBS3BILFVBQVdvSCxtQkFDZCxnQkFBQzNILEVBQUQsQ0FBU08sVUFBV29ILFFBQVl0bUQsR0FBRyxjQUFjKytDLGdCQUFnQixVQUFqRSxrRCxxQkFOcUNvSCxhLFVDRWxDLElBQUksS0FMSCxDQUVkLE9BQWlCLE9BQ2pCLFdBQW9CLElBTXBCLFNBQWUsYUFBa0IsRyxxekJDVGpDLElBQUlrSCxHQUFZLEVBTVZDLEdBQVMsQ0FDYixhQUNBLGFBQ0EsYUFDQSxhQUNBLGNBR21CQyxHLHNwQkFDbkIsV0FBWXBwRCxHQUFPLGEsNEZBQUEsVUFDakIsY0FBTUEsSUFFRHV4QixNQUFRLENBQ1gxNkIsS0FBTSxHQUNOeXhELFFBQVMsR0FDVFcsVUFBVyxJQUNYVixTQUFVLElBR1osRUFBS2MsaUJBQW1CLEVBQUtBLGlCQUFpQnJ4QyxLQUF0QixPQUN4QixFQUFLc3hDLG9CQUFzQixFQUFLQSxvQkFBb0J0eEMsS0FBekIsT0FDM0IsRUFBS3V4QyxtQkFBcUIsRUFBS0EsbUJBQW1CdnhDLEtBQXhCLE9BQzFCLEVBQUt3eEMsU0FBVyxFQUFLQSxTQUFTeHhDLEtBQWQsT0FDaEIsRUFBS2tvQyxPQUFTLEVBQUtBLE9BQU9sb0MsS0FBWixPQWRHLEUsc0RBaUJGdUwsR0FDZnB2QixLQUFLczFDLFNBQVMsQ0FDWjV5QyxLQUFNMHNCLEVBQU01bkIsT0FBT3hGLFUsMENBSUhvdEIsR0FDbEJwdkIsS0FBS3MxQyxTQUFTLENBQ1o2ZSxRQUFTL2tDLEVBQU01bkIsT0FBT3hGLFUseUNBSVBvdEIsR0FDakJwdkIsS0FBS3MxQyxTQUFTLENBQ1p3ZixVQUFXMWxDLEVBQU01bkIsT0FBT3hGLFUsdUNBSVhveUQsR0FDZnAwRCxLQUFLczFDLFNBQVMsQ0FDWjhlLGUsaUNBS0YsSUFBSTd3RCxFQUFPaEMsT0FBT3VGLE9BQU8sR0FBSTlHLEtBQUtvOUIsT0FDbEM3NUIsRUFBSzdELEdBdkRBcTFELEtBd0RMLzBELEtBQUs2TCxNQUFNNm9ELGFBQWFGLFFBQVFqeEQsR0FDaEN2RCxLQUFLNkwsTUFBTSt5QyxRQUFRcC9DLEtBQUssaUIsK0JBSXhCUSxLQUFLNkwsTUFBTSt5QyxRQUFRcC9DLEtBQUssaUIsK0JBR2pCLFdBWVAsT0FDRSx1QkFBS29uRCxVQUFXb0gsY0FDZCx5QkFBT3BILFVBQVdvSCxVQUFsQixRQUFxQyx5QkFBT3BILFVBQVdvSCxTQUFjc0gsU0FBVXQxRCxLQUFLazFELGlCQUFrQmx6RCxNQUFPaEMsS0FBS285QixNQUFNMTZCLFFBQ3hILHlCQUFPa2tELFVBQVdvSCxVQUFsQixXQUF3Qyw0QkFBVXNILFNBQVV0MUQsS0FBS20xRCxvQkFBcUJuekQsTUFBT2hDLEtBQUtvOUIsTUFBTSsyQixXQUV4RywwQ0FFQSx1QkFBS3ZOLFVBQVdvSCx1QkFDZCw2QkFDRSx5QkFBT3NILFNBQVV0MUQsS0FBS28xRCxtQkFBb0Izd0QsS0FBSyxRQUFRekMsTUFBTSxJQUFJOFIsUUFBa0MsTUFBekI5VCxLQUFLbzlCLE1BQU0wM0IsWUFEdkYsS0FLQSw2QkFDRSx5QkFBT1EsU0FBVXQxRCxLQUFLbzFELG1CQUFvQjN3RCxLQUFLLFFBQVF6QyxNQUFNLElBQUk4UixRQUFrQyxNQUF6QjlULEtBQUtvOUIsTUFBTTAzQixZQUR2RixLQUtBLDZCQUNFLHlCQUFPUSxTQUFVdDFELEtBQUtvMUQsbUJBQW9CM3dELEtBQUssUUFBUXpDLE1BQU0sSUFBSThSLFFBQWtDLE1BQXpCOVQsS0FBS285QixNQUFNMDNCLFlBRHZGLEtBS0EsNkJBQ0UseUJBQU9RLFNBQVV0MUQsS0FBS28xRCxtQkFBb0Izd0QsS0FBSyxRQUFRekMsTUFBTSxJQUFJOFIsUUFBa0MsTUFBekI5VCxLQUFLbzlCLE1BQU0wM0IsWUFEdkYsS0FLQSw2QkFDRSx5QkFBT1EsU0FBVXQxRCxLQUFLbzFELG1CQUFvQjN3RCxLQUFLLFFBQVF6QyxNQUFNLElBQUk4UixRQUFrQyxNQUF6QjlULEtBQUtvOUIsTUFBTTAzQixZQUR2RixNQU1GLHVCQUFLbE8sVUFBV29ILFdBQ2QsNkNBRUNnSCxHQUFPLzBELEtBL0NNLFNBQUNzMUQsRUFBTy9yRCxHQUMxQixJQUFNMUIsRUFBTyx5Q0FFYixPQUNFLHVCQUFLOCtDLFVBQVdvSCxrQkFBdUIxbkQsSUFBS2tELEdBQzFDLHVCQUFLKytCLFFBQVMsRUFBS2tzQixpQkFBaUI1d0MsS0FBSyxFQUEzQixVQUFvQy9iLEVBQXBDLFlBQTRDeXRELElBQVVWLElBQUcsVUFBSy9zRCxFQUFMLFlBQWF5dEQsU0E0Q3BGLHVCQUFLM08sVUFBV29ILGdCQUNaaHVELEtBQUtvOUIsTUFBTWczQixVQUFZLHVCQUFLUyxJQUFLNzBELEtBQUtvOUIsTUFBTWczQixhQUlsRCx1QkFBS3hOLFVBQVdvSCxvQkFDZCwwQkFBUXpsQixRQUFTdm9DLEtBQUtxMUQsVUFBdEIsbURBQ0EsMEJBQVE5c0IsUUFBU3ZvQyxLQUFLK3JELFFBQXRCLGdELHFCQS9Hb0M4QixhLFNDVGpDLElBQUksS0FMSCxDQUVkLE9BQWlCLE9BQ2pCLFdBQW9CLElBTXBCLFNBQWUsYUFBa0IsRyxvekJDUFoySCxHLHNwQkFFbkIsV0FBWTNwRCxHQUFPLGEsNEZBQUEsVUFDakIsY0FBTUEsSUFFRHV4QixNQUFRLENBQ1g4MkIsS0FBTSxHQUNOSyxRQUFRLEdBTE8sRSx5REFTQyxXQUVaNzBELEVBQUtNLEtBQUs2TCxNQUFNM0QsTUFBTTY3QyxPQUFPcmtELEdBRW5DTSxLQUFLMHZELGFBQWUvc0QsR0FBSzNDLEtBQUs2TCxNQUFNNm9ELGFBQWFlLGNBQWMvMUQsSUFDNUR5akMsV0FBVSxTQUFBK3dCLEdBQ1QsRUFBSzVlLFNBQVMsQ0FDWjRlLE9BQ0FLLFFBQVEsUyw2Q0FNZHYwRCxLQUFLMHZELGFBQWFULGdCLCtCQUlsQixPQUNFLHVCQUFLckksVUFBV29ILGNBQ2Qsc0JBQUlwSCxVQUFXb0gsV0FBZ0JodUQsS0FBS285QixNQUFNODJCLEtBQUt4eEQsTUFDL0MsdUJBQUtra0QsVUFBV29ILFNBQWM2RyxJQUFLNzBELEtBQUtvOUIsTUFBTTgyQixLQUFLRSxXQUNuRCx1QkFBS3hOLFVBQVdvSCxZQUFpQmh1RCxLQUFLbzlCLE1BQU04MkIsS0FBS0MsU0FDakQsZ0JBQUMsR0FBRCxDQUFXSCxTQUFTLE9BQU9ELE9BQVEvekQsS0FBS285QixNQUFNODJCLEtBQUtZLGtCLHFCQWxDVjE0QixhLFVDR3BDLElBQUksS0FMSCxDQUVkLE9BQWlCLE9BQ2pCLFdBQW9CLElBTXBCLFNBQWUsYUFBa0IsRyx1OUJDS2pDLElDWmVBLEdEWVRzNEIsR0FBZSxJLHlMRVpqQixPQUFPZ0IsTUFBTTNtQyxzQkFDVjZjLE1BQUssU0FBQStwQixHQUFRLE9BQUlBLEVBQVNDLFksb0NBR2pCbDJELEdBRVosT0FBT2cyRCxNQUFNM21DLGlCQUFxQnJ2QixFQUFJLENBQ3BDbTJELE9BQVEsUUFDUGpxQixNQUFLLFNBQUErcEIsR0FDTixPQUFPQSxFQUFTQyxZLDhCQUlaMUIsR0FHTixPQUZBNXFCLFFBQVFqbUIsSUFBSSxXQUFZNndDLEdBRWpCd0IsTUFBTTNtQyxpQkFBcUJtbEMsRUFBS3gwRCxHQUFJLENBQ3pDbTJELE9BQVEsTUFDUjVoRCxLQUFNNVEsS0FBS0MsVUFBVTR3RCxLQUNwQnRvQixNQUFLLFNBQUErcEIsR0FDTnJzQixRQUFRam1CLElBQUksV0FBWXN5QyxXLHdCRk5URyxHLHNwQkFDbkIsYUFBZSxhLDRGQUFBLFVBQ2IsZ0JBRUsxNEIsTUFBUSxHQUhBLEUsOENBT2IsT0FDRSwyQkFDRSxnQkFBQ2dvQixFQUFELENBQWUzRixTQUF3RCxVQUNyRSwyQkFDRSx1QkFBS21ILFVBQVdvSCxjQUNkLDJCQUNFLGdCQUFDRixHQUFELENBQ0U0RyxhQUFjQSxHQUNkdnZELFVBQVc4dkQsR0FDWG50RCxLQUFLLHVCQUNQLGdCQUFDZ21ELEdBQUQsQ0FDRTNvRCxVQUFXNHdELEdBQ1h2b0QsT0FBSyxFQUNMMUYsS0FBSyxNQUNQLGdCQUFDZ21ELEdBQUQsQ0FDRTRHLGFBQWNBLEdBQ2R2dkQsVUFBV2t2RCxHQUNYN21ELE9BQUssRUFDTDFGLEtBQUssZ0JBQ1AsZ0JBQUNnbUQsR0FBRCxDQUNFNEcsYUFBY0EsR0FDZHZ2RCxVQUFXcXdELEdBQ1gxdEQsS0FBSyx5QixxQkE5QlVzMEIsYUNQN0Isa0JBQW1CNGlCLFdBQ25CendDLE9BQU9vTyxpQkFBaUIsUUFBUSxXQUM5QnFpQyxVQUFVZ1gsY0FBY0MsU0FBUyxXQUFXcnFCLE1BQUssU0FBQXNxQixHQUMvQzVzQixRQUFRam1CLElBQUksa0JBQW1CNnlDLE1BRGpDLE9BRVMsU0FBQUMsR0FDUDdzQixRQUFRam1CLElBQUksMkJBQTRCOHlDLFNBWmpDLzVCLEdBZ0JSMDVCLEdBZkxNLFNBQ0UsZ0JBQUNoNkIsR0FBRCxNQUNBNXRCLFNBQVM2bkQsZUFBZSxTIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuXzI1TDVSTlpkZkxqNmx1dlJlNWNnNC0ge1xcbiAgbWluLWhlaWdodDogMTAwdmg7XFxuICB3aWR0aDogMTAwJTtcXG4gIHBhZGRpbmc6IDIwcHg7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuLl8yV2ZoM2Q1clNtWVlnaHUzUHJtRUhGIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxufVxcbi5fMzZwRFl2YXdmNWI0aVlpR0dlN1lIaiB7XFxuICBib3JkZXI6IHNvbGlkIDJweCB3aGl0ZTtcXG4gIHBhZGRpbmc6IDIwcHg7XFxufVxcbi5fMldmaDNkNXJTbVlZZ2h1M1BybUVIRiBpbWcge1xcbiAgd2lkdGg6IDEwMHB4O1xcbiAgaGVpZ2h0OiAxMDBweDtcXG4gIG1hcmdpbi1yaWdodDogMnB4O1xcbn1cXG4uXzE2bFYxaG14VEN0S1VUMnBxZlQtTGkge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDIwMHB4O1xcbiAgaGVpZ2h0OiAyMDBweDtcXG4gIGJhY2tncm91bmQ6IGdyZXk7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XFxufVxcbi5fMTZsVjFobXhUQ3RLVVQycHFmVC1MaSBpbWcge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxufVxcbi5fMnhxQUV6dlZwWWxIcWsxWk10ZUV5USB7XFxuICBwYWRkaW5nOiAxMHB4IDA7XFxufVxcbi5fMnhxQUV6dlZwWWxIcWsxWk10ZUV5USBidXR0b24ge1xcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbn1cXG4uXzJZblF3S0RmQzhUcHFtTk9UUHlrMngge1xcbiAgdmVydGljYWwtYWxpZ246IHRvcDtcXG4gIG1hcmdpbi1yaWdodDogMTBweDtcXG59XFxuLl8za0Z1Z2JtUDFqY192QUZXUmRoMnU4IHtcXG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XFxufVxcbi5fM2MtdlpTdnBwWTlpRGV5WmpwU21zbiB7XFxuICBwYWRkaW5nOiAxMHB4IDA7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly9zcmMvYWRkLWNha2UuY29tcG9uZW50LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGlCQUFpQjtFQUNqQixXQUFXO0VBQ1gsYUFBYTtFQUNiLFdBQVc7QUFDYjtBQUNBO0VBQ0UscUJBQXFCO0VBQ3JCLHNCQUFzQjtBQUN4QjtBQUNBO0VBQ0UsdUJBQXVCO0VBQ3ZCLGFBQWE7QUFDZjtBQUNBO0VBQ0UsWUFBWTtFQUNaLGFBQWE7RUFDYixpQkFBaUI7QUFDbkI7QUFDQTtFQUNFLHFCQUFxQjtFQUNyQixZQUFZO0VBQ1osYUFBYTtFQUNiLGdCQUFnQjtFQUNoQixzQkFBc0I7RUFDdEIsaUJBQWlCO0FBQ25CO0FBQ0E7RUFDRSxXQUFXO0VBQ1gsWUFBWTtBQUNkO0FBQ0E7RUFDRSxlQUFlO0FBQ2pCO0FBQ0E7RUFDRSxrQkFBa0I7QUFDcEI7QUFDQTtFQUNFLG1CQUFtQjtFQUNuQixrQkFBa0I7QUFDcEI7QUFDQTtFQUNFLG1CQUFtQjtBQUNyQjtBQUNBO0VBQ0UsZUFBZTtBQUNqQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuY29udGFpbmVyIHtcXG4gIG1pbi1oZWlnaHQ6IDEwMHZoO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nOiAyMHB4O1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcbi5pbWFnZUNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbn1cXG4uaW1hZ2VzIHtcXG4gIGJvcmRlcjogc29saWQgMnB4IHdoaXRlO1xcbiAgcGFkZGluZzogMjBweDtcXG59XFxuLmltYWdlQ29udGFpbmVyIGltZyB7XFxuICB3aWR0aDogMTAwcHg7XFxuICBoZWlnaHQ6IDEwMHB4O1xcbiAgbWFyZ2luLXJpZ2h0OiAycHg7XFxufVxcbi5jaG9zZW5JbWFnZSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aWR0aDogMjAwcHg7XFxuICBoZWlnaHQ6IDIwMHB4O1xcbiAgYmFja2dyb3VuZDogZ3JleTtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuICBtYXJnaW4tbGVmdDogMTBweDtcXG59XFxuLmNob3NlbkltYWdlIGltZyB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuLmJ1dHRvbkNvbnRhaW5lciB7XFxuICBwYWRkaW5nOiAxMHB4IDA7XFxufVxcbi5idXR0b25Db250YWluZXIgYnV0dG9uIHtcXG4gIG1hcmdpbi1yaWdodDogMTBweDtcXG59XFxuLmxhYmVsIHtcXG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XFxuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxufVxcbi5pbnB1dCB7XFxuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xcbn1cXG4ueXVtRmFjdG9yQ29udGFpbmVyIHtcXG4gIHBhZGRpbmc6IDEwcHggMDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwiY29udGFpbmVyXCI6IFwiXzI1TDVSTlpkZkxqNmx1dlJlNWNnNC1cIixcblx0XCJpbWFnZUNvbnRhaW5lclwiOiBcIl8yV2ZoM2Q1clNtWVlnaHUzUHJtRUhGXCIsXG5cdFwiaW1hZ2VzXCI6IFwiXzM2cERZdmF3ZjViNGlZaUdHZTdZSGpcIixcblx0XCJjaG9zZW5JbWFnZVwiOiBcIl8xNmxWMWhteFRDdEtVVDJwcWZULUxpXCIsXG5cdFwiYnV0dG9uQ29udGFpbmVyXCI6IFwiXzJ4cUFFenZWcFlsSHFrMVpNdGVFeVFcIixcblx0XCJsYWJlbFwiOiBcIl8yWW5Rd0tEZkM4VHBxbU5PVFB5azJ4XCIsXG5cdFwiaW5wdXRcIjogXCJfM2tGdWdibVAxamNfdkFGV1JkaDJ1OFwiLFxuXHRcInl1bUZhY3RvckNvbnRhaW5lclwiOiBcIl8zYy12WlN2cHBZOWlEZXlaanBTbXNuXCJcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiYm9keSB7XFxuICBiYWNrZ3JvdW5kOiBwZWFjaHB1ZmY7XFxuICBmb250LWZhbWlseTogaGVsdmV0aWNhO1xcbn1cXG5cXG5idXR0b24ge1xcbiAgZm9udC1mYW1pbHk6ICdHcmVhdCBWaWJlcycsIGN1cnNpdmU7XFxuICBiYWNrZ3JvdW5kOiBkZWVwcGluaztcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIHBhZGRpbmc6IC41ZW0gLjdlbTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGZvbnQtc2l6ZTogMmVtO1xcbn1cXG5cXG4uXzExQ29FOFhDRUJPZ1I2UzRieGVhRUsge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly9zcmMvYXBwLmNvbXBvbmVudC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxxQkFBcUI7RUFDckIsc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsbUNBQW1DO0VBQ25DLG9CQUFvQjtFQUNwQixZQUFZO0VBQ1osa0JBQWtCO0VBQ2xCLGtCQUFrQjtFQUNsQixZQUFZO0VBQ1osY0FBYztBQUNoQjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixXQUFXO0FBQ2JcIixcInNvdXJjZXNDb250ZW50XCI6W1wiOmdsb2JhbChib2R5KSB7XFxuICBiYWNrZ3JvdW5kOiBwZWFjaHB1ZmY7XFxuICBmb250LWZhbWlseTogaGVsdmV0aWNhO1xcbn1cXG5cXG5idXR0b24ge1xcbiAgZm9udC1mYW1pbHk6ICdHcmVhdCBWaWJlcycsIGN1cnNpdmU7XFxuICBiYWNrZ3JvdW5kOiBkZWVwcGluaztcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIHBhZGRpbmc6IC41ZW0gLjdlbTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGZvbnQtc2l6ZTogMmVtO1xcbn1cXG5cXG4uY29udGFpbmVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJjb250YWluZXJcIjogXCJfMTFDb0U4WENFQk9nUjZTNGJ4ZWFFS1wiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5leGFtcGxlLWVudGVyIHtcXG4gIG9wYWNpdHk6IDAuMDE7XFxufVxcblxcbi5leGFtcGxlLWVudGVyLmV4YW1wbGUtZW50ZXItYWN0aXZlIHtcXG4gIG9wYWNpdHk6IDE7XFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDUwMG1zIGVhc2UtaW47XFxufVxcblxcbi5leGFtcGxlLWxlYXZlIHtcXG4gIG9wYWNpdHk6IDE7XFxufVxcblxcbi5leGFtcGxlLWxlYXZlLmV4YW1wbGUtbGVhdmUtYWN0aXZlIHtcXG4gIG9wYWNpdHk6IDAuMDE7XFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDMwMG1zIGVhc2UtaW47XFxufVxcbi5mYWRlLWVudGVyIHtcXG4gIG9wYWNpdHk6IDA7XFxuICB6LWluZGV4OiAxO1xcbn1cXG5cXG4uZmFkZS1lbnRlci5mYWRlLWVudGVyLWFjdGl2ZSB7XFxuICBvcGFjaXR5OiAxO1xcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAyNTBtcyBlYXNlLWluO1xcbn1cXG5cXG5cXG4ucGFnZS1lbnRlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBvcGFjaXR5OiAwO1xcbn1cXG5cXG4ucGFnZS1lbnRlci1kb25lIHtcXG4gIG9wYWNpdHk6IDE7XFxufVxcblxcbi5wYWdlLWVudGVyLnBhZ2UtZW50ZXItYWN0aXZlIHtcXG4gIG9wYWNpdHk6IDE7XFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDQwMG1zIGxpbmVhcjtcXG59XFxuXFxuLnBhZ2UtZXhpdCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG5cXG4ucGFnZS1leGl0LnBhZ2UtZXhpdC1hY3RpdmUge1xcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSA0MDBtcyBsaW5lYXI7XFxuICBvcGFjaXR5OiAwO1xcbn1cXG5cXG4ubGlzdGl0ZW0tZW50ZXJ7XFxuICBvcGFjaXR5OiAwO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMHZoKTtcXG59XFxuLmxpc3RpdGVtLWVudGVyLWFjdGl2ZSB7XFxuICBvcGFjaXR5OiAxO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApO1xcbiAgdHJhbnNpdGlvbjogYWxsIDQwMG1zIGxpbmVhcjtcXG59XFxuXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovL3NyYy9hcHAuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UsVUFBVTtFQUNWLGlDQUFpQztBQUNuQzs7QUFFQTtFQUNFLFVBQVU7QUFDWjs7QUFFQTtFQUNFLGFBQWE7RUFDYixpQ0FBaUM7QUFDbkM7QUFDQTtFQUNFLFVBQVU7RUFDVixVQUFVO0FBQ1o7O0FBRUE7RUFDRSxVQUFVO0VBQ1YsaUNBQWlDO0FBQ25DOzs7QUFHQTtFQUNFLGtCQUFrQjtFQUNsQixNQUFNO0VBQ04sVUFBVTtBQUNaOztBQUVBO0VBQ0UsVUFBVTtBQUNaOztBQUVBO0VBQ0UsVUFBVTtFQUNWLGdDQUFnQztBQUNsQzs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixNQUFNO0VBQ04sVUFBVTtBQUNaOztBQUVBO0VBQ0UsZ0NBQWdDO0VBQ2hDLFVBQVU7QUFDWjs7QUFFQTtFQUNFLFVBQVU7RUFDViw0QkFBNEI7QUFDOUI7QUFDQTtFQUNFLFVBQVU7RUFDVix3QkFBd0I7RUFDeEIsNEJBQTRCO0FBQzlCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIjpnbG9iYWwoLmV4YW1wbGUtZW50ZXIpIHtcXG4gIG9wYWNpdHk6IDAuMDE7XFxufVxcblxcbjpnbG9iYWwoLmV4YW1wbGUtZW50ZXIuZXhhbXBsZS1lbnRlci1hY3RpdmUpIHtcXG4gIG9wYWNpdHk6IDE7XFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDUwMG1zIGVhc2UtaW47XFxufVxcblxcbjpnbG9iYWwoLmV4YW1wbGUtbGVhdmUpIHtcXG4gIG9wYWNpdHk6IDE7XFxufVxcblxcbjpnbG9iYWwoLmV4YW1wbGUtbGVhdmUuZXhhbXBsZS1sZWF2ZS1hY3RpdmUpIHtcXG4gIG9wYWNpdHk6IDAuMDE7XFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDMwMG1zIGVhc2UtaW47XFxufVxcbjpnbG9iYWwoLmZhZGUtZW50ZXIpIHtcXG4gIG9wYWNpdHk6IDA7XFxuICB6LWluZGV4OiAxO1xcbn1cXG5cXG46Z2xvYmFsKC5mYWRlLWVudGVyLmZhZGUtZW50ZXItYWN0aXZlKSB7XFxuICBvcGFjaXR5OiAxO1xcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAyNTBtcyBlYXNlLWluO1xcbn1cXG5cXG5cXG46Z2xvYmFsKC5wYWdlLWVudGVyKSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBvcGFjaXR5OiAwO1xcbn1cXG5cXG46Z2xvYmFsKC5wYWdlLWVudGVyLWRvbmUpIHtcXG4gIG9wYWNpdHk6IDE7XFxufVxcblxcbjpnbG9iYWwoLnBhZ2UtZW50ZXIucGFnZS1lbnRlci1hY3RpdmUpIHtcXG4gIG9wYWNpdHk6IDE7XFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDQwMG1zIGxpbmVhcjtcXG59XFxuXFxuOmdsb2JhbCgucGFnZS1leGl0KSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG5cXG46Z2xvYmFsKC5wYWdlLWV4aXQucGFnZS1leGl0LWFjdGl2ZSkge1xcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSA0MDBtcyBsaW5lYXI7XFxuICBvcGFjaXR5OiAwO1xcbn1cXG5cXG46Z2xvYmFsKC5saXN0aXRlbS1lbnRlcil7XFxuICBvcGFjaXR5OiAwO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMHZoKTtcXG59XFxuOmdsb2JhbCgubGlzdGl0ZW0tZW50ZXItYWN0aXZlKSB7XFxuICBvcGFjaXR5OiAxO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApO1xcbiAgdHJhbnNpdGlvbjogYWxsIDQwMG1zIGxpbmVhcjtcXG59XFxuXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLl8zZUIxemNsR2otbWQwQ2xaQkxtRDY1IHtcXG4gIGJhY2tncm91bmQ6IGJpc3F1ZTtcXG4gIG1pbi1oZWlnaHQ6IDEwMHZoO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nOiAyMHB4O1xcbn1cXG4uXzJfUWhqTWJaVkhGSmZROVktRlJXd1Mge1xcbiAgZm9udC1zaXplOiAyZW07XFxuICBwYWRkaW5nOiAxMHB4IDA7XFxuICBmb250LWZhbWlseTogJ0dyZWF0IFZpYmVzJywgY3Vyc2l2ZTtcXG59XFxuLnFnYmNZX2JPaV8zTVo3MFkwUmpJMSB7XFxuICBmb250LXNpemU6IDE2cHg7XFxuICBwYWRkaW5nOiAyMHB4IDA7XFxufVxcbi5fMzR3QkI5TkhCZWFGOTh1OWlhc250YSB7XFxuICB3aWR0aDogNTAlO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vc3JjL2Nha2UtZGV0YWlsLmNvbXBvbmVudC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxrQkFBa0I7RUFDbEIsaUJBQWlCO0VBQ2pCLFdBQVc7RUFDWCxhQUFhO0FBQ2Y7QUFDQTtFQUNFLGNBQWM7RUFDZCxlQUFlO0VBQ2YsbUNBQW1DO0FBQ3JDO0FBQ0E7RUFDRSxlQUFlO0VBQ2YsZUFBZTtBQUNqQjtBQUNBO0VBQ0UsVUFBVTtBQUNaXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5jb250YWluZXIge1xcbiAgYmFja2dyb3VuZDogYmlzcXVlO1xcbiAgbWluLWhlaWdodDogMTAwdmg7XFxuICB3aWR0aDogMTAwJTtcXG4gIHBhZGRpbmc6IDIwcHg7XFxufVxcbi5oZWFkZXIge1xcbiAgZm9udC1zaXplOiAyZW07XFxuICBwYWRkaW5nOiAxMHB4IDA7XFxuICBmb250LWZhbWlseTogJ0dyZWF0IFZpYmVzJywgY3Vyc2l2ZTtcXG59XFxuLmNvbW1lbnQge1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgcGFkZGluZzogMjBweCAwO1xcbn1cXG4uaW1hZ2Uge1xcbiAgd2lkdGg6IDUwJTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwiY29udGFpbmVyXCI6IFwiXzNlQjF6Y2xHai1tZDBDbFpCTG1ENjVcIixcblx0XCJoZWFkZXJcIjogXCJfMl9RaGpNYlpWSEZKZlE5WS1GUld3U1wiLFxuXHRcImNvbW1lbnRcIjogXCJxZ2JjWV9iT2lfM01aNzBZMFJqSTFcIixcblx0XCJpbWFnZVwiOiBcIl8zNHdCQjlOSEJlYUY5OHU5aWFzbnRhXCJcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLkw5Rkw5WWIyYkl2Y1Z5azRsV2NlRSB7XFxuICBiYWNrZ3JvdW5kOiBiaXNxdWU7XFxuICBtaW4taGVpZ2h0OiAxMDB2aDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZzogMjBweDtcXG59XFxuXFxuLl8yOE1aNklRdjhpTlJfQTdmZTdaMUZaIHtcXG4gIHBhZGRpbmc6IDIwcHggMDtcXG59XFxuXFxuLl8yU1Z3Z3Z2cjdlZzUzejg3V1JFQVhXIHtcXG4gIGJvcmRlcjogc29saWQgMnB4IHBpbms7XFxuICBwYWRkaW5nOiAyMHB4O1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXFxuLl8yb3FBNDE0cTRYUTVfekhmS095ZHJ3IHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtd3JhcDogd3JhcDtcXG59XFxuXFxuLl8yQjQ1SFc5N1JnNGRVR3BQOHFWRjNYIHtcXG4gIGJhY2tncm91bmQ6IHdoaXRlO1xcbiAgcGFkZGluZzogMTBweDtcXG4gIHdpZHRoOiAyNC4xJTtcXG4gIG1hcmdpbjogNXB4O1xcbiAgYm9yZGVyOiBzb2xpZCAycHggZGVlcHBpbms7XFxufVxcblxcbi5oeDVtVnlpcldZX1NIdEVCc19KaFUge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBwYWRkaW5nOiAxMHB4IDA7XFxufVxcblxcbi5fMVNMSi1hMUJBQklMWkx5WVFsbDd5TCB7XFxuICBwYWRkaW5nOiAxMHB4IDA7XFxuICBmb250LXNpemU6IDE0cHg7XFxufVxcblxcbi5fMkl0aUZ1S2xfOHJSeE9tbm84bGpZRiB7XFxuICBwYWRkaW5nLXRvcDogODAlO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuXFxuLl8zTEw2eFZwUjJNV1N0UXd3X0swWkRiIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgbGVmdDogMDtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgbWluLWhlaWdodDogMTAwJTtcXG4gIGJhY2tncm91bmQ6IGdyZXk7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly9zcmMvY2FrZS1saXN0LmNvbXBvbmVudC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxrQkFBa0I7RUFDbEIsaUJBQWlCO0VBQ2pCLFdBQVc7RUFDWCxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxlQUFlO0FBQ2pCOztBQUVBO0VBQ0Usc0JBQXNCO0VBQ3RCLGFBQWE7RUFDYixhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsYUFBYTtFQUNiLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxpQkFBaUI7RUFDakIsYUFBYTtFQUNiLFlBQVk7RUFDWixXQUFXO0VBQ1gsMEJBQTBCO0FBQzVCOztBQUVBO0VBQ0UsaUJBQWlCO0VBQ2pCLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixrQkFBa0I7RUFDbEIsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLFdBQVc7RUFDWCxPQUFPO0VBQ1AsTUFBTTtFQUNOLFFBQVE7RUFDUixnQkFBZ0I7RUFDaEIsZ0JBQWdCO0FBQ2xCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5jb250YWluZXIge1xcbiAgYmFja2dyb3VuZDogYmlzcXVlO1xcbiAgbWluLWhlaWdodDogMTAwdmg7XFxuICB3aWR0aDogMTAwJTtcXG4gIHBhZGRpbmc6IDIwcHg7XFxufVxcblxcbi5oZWFkZXIge1xcbiAgcGFkZGluZzogMjBweCAwO1xcbn1cXG5cXG4ubGlzdENvbnRhaW5lciB7XFxuICBib3JkZXI6IHNvbGlkIDJweCBwaW5rO1xcbiAgcGFkZGluZzogMjBweDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcblxcbi5pdGVtcyB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxufVxcblxcbi5jYXJkIHtcXG4gIGJhY2tncm91bmQ6IHdoaXRlO1xcbiAgcGFkZGluZzogMTBweDtcXG4gIHdpZHRoOiAyNC4xJTtcXG4gIG1hcmdpbjogNXB4O1xcbiAgYm9yZGVyOiBzb2xpZCAycHggZGVlcHBpbms7XFxufVxcblxcbi5uYW1lIHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgcGFkZGluZzogMTBweCAwO1xcbn1cXG5cXG4uY29tbWVudCB7XFxuICBwYWRkaW5nOiAxMHB4IDA7XFxuICBmb250LXNpemU6IDE0cHg7XFxufVxcblxcbi5pbWFnZUNvbnRhaW5lciB7XFxuICBwYWRkaW5nLXRvcDogODAlO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuXFxuLmltYWdlIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgbGVmdDogMDtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgbWluLWhlaWdodDogMTAwJTtcXG4gIGJhY2tncm91bmQ6IGdyZXk7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImNvbnRhaW5lclwiOiBcIkw5Rkw5WWIyYkl2Y1Z5azRsV2NlRVwiLFxuXHRcImhlYWRlclwiOiBcIl8yOE1aNklRdjhpTlJfQTdmZTdaMUZaXCIsXG5cdFwibGlzdENvbnRhaW5lclwiOiBcIl8yU1Z3Z3Z2cjdlZzUzejg3V1JFQVhXXCIsXG5cdFwiaXRlbXNcIjogXCJfMm9xQTQxNHE0WFE1X3pIZktPeWRyd1wiLFxuXHRcImNhcmRcIjogXCJfMkI0NUhXOTdSZzRkVUdwUDhxVkYzWFwiLFxuXHRcIm5hbWVcIjogXCJoeDVtVnlpcldZX1NIdEVCc19KaFVcIixcblx0XCJjb21tZW50XCI6IFwiXzFTTEotYTFCQUJJTFpMeVlRbGw3eUxcIixcblx0XCJpbWFnZUNvbnRhaW5lclwiOiBcIl8ySXRpRnVLbF84clJ4T21ubzhsallGXCIsXG5cdFwiaW1hZ2VcIjogXCJfM0xMNnhWcFIyTVdTdFF3d19LMFpEYlwiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5fMXA5aUgxLTBUZjA2b25QLXZkQ241cSB7XFxuICBiYWNrZ3JvdW5kOiBwaW5rO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgbWluLWhlaWdodDogMTAwdmg7XFxuICB3aWR0aDogMTAwJTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBcXG59XFxuLl8yMk5wcE5BQXF2RmR0aGVzWjQ3b3VxIHtcXG4gIG1hcmdpbjogYXV0bztcXG59XFxuLl8za3ZVd3hMMlp6Z0ZKSnYyS1RFMGd5IHtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGZvbnQtc2l6ZTogM2VtO1xcbiAgZm9udC1mYW1pbHk6ICdHcmVhdCBWaWJlcycsIGN1cnNpdmU7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG59XFxuLl8za3ZVd3hMMlp6Z0ZKSnYyS1RFMGd5OmhvdmVyLFxcbi5fM2t2VXd4TDJaemdGSkp2MktURTBneTphY3RpdmUge1xcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly9zcmMvaG9tZS5jb21wb25lbnQuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsZ0JBQWdCO0VBQ2hCLFlBQVk7RUFDWixpQkFBaUI7RUFDakIsV0FBVztFQUNYLGFBQWE7O0FBRWY7QUFDQTtFQUNFLFlBQVk7QUFDZDtBQUNBO0VBQ0UsWUFBWTtFQUNaLGNBQWM7RUFDZCxtQ0FBbUM7RUFDbkMsaUJBQWlCO0VBQ2pCLHFCQUFxQjtBQUN2QjtBQUNBOztFQUVFLDBCQUEwQjtBQUM1QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuY29udGFpbmVyIHtcXG4gIGJhY2tncm91bmQ6IHBpbms7XFxuICBjb2xvcjogd2hpdGU7XFxuICBtaW4taGVpZ2h0OiAxMDB2aDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIFxcbn1cXG4uaW5uZXJDb250YWluZXIge1xcbiAgbWFyZ2luOiBhdXRvO1xcbn1cXG4ubGluayB7XFxuICBjb2xvcjogd2hpdGU7XFxuICBmb250LXNpemU6IDNlbTtcXG4gIGZvbnQtZmFtaWx5OiAnR3JlYXQgVmliZXMnLCBjdXJzaXZlO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcbi5saW5rOmhvdmVyLFxcbi5saW5rOmFjdGl2ZSB7XFxuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwiY29udGFpbmVyXCI6IFwiXzFwOWlIMS0wVGYwNm9uUC12ZENuNXFcIixcblx0XCJpbm5lckNvbnRhaW5lclwiOiBcIl8yMk5wcE5BQXF2RmR0aGVzWjQ3b3VxXCIsXG5cdFwibGlua1wiOiBcIl8za3ZVd3hMMlp6Z0ZKSnYyS1RFMGd5XCJcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLyogaHR0cDovL21leWVyd2ViLmNvbS9lcmljL3Rvb2xzL2Nzcy9yZXNldC8gXFxuICAgdjIuMCB8IDIwMTEwMTI2XFxuICAgTGljZW5zZTogbm9uZSAocHVibGljIGRvbWFpbilcXG4qL1xcblxcbmh0bWwsIGJvZHksIGRpdiwgc3BhbiwgYXBwbGV0LCBvYmplY3QsIGlmcmFtZSxcXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBwLCBibG9ja3F1b3RlLCBwcmUsXFxuYSwgYWJiciwgYWNyb255bSwgYWRkcmVzcywgYmlnLCBjaXRlLCBjb2RlLFxcbmRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCxcXG5zbWFsbCwgc3RyaWtlLCBzdHJvbmcsIHN1Yiwgc3VwLCB0dCwgdmFyLFxcbmIsIHUsIGksIGNlbnRlcixcXG5kbCwgZHQsIGRkLCBvbCwgdWwsIGxpLFxcbmZpZWxkc2V0LCBmb3JtLCBsYWJlbCwgbGVnZW5kLFxcbnRhYmxlLCBjYXB0aW9uLCB0Ym9keSwgdGZvb3QsIHRoZWFkLCB0ciwgdGgsIHRkLFxcbmFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGVtYmVkLCBcXG5maWd1cmUsIGZpZ2NhcHRpb24sIGZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIFxcbm1lbnUsIG5hdiwgb3V0cHV0LCBydWJ5LCBzZWN0aW9uLCBzdW1tYXJ5LFxcbnRpbWUsIG1hcmssIGF1ZGlvLCB2aWRlbyB7XFxuXFx0bWFyZ2luOiAwO1xcblxcdHBhZGRpbmc6IDA7XFxuXFx0Ym9yZGVyOiAwO1xcblxcdGZvbnQtc2l6ZTogMTAwJTtcXG5cXHRmb250OiBpbmhlcml0O1xcblxcdHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcXG59XFxuLyogSFRNTDUgZGlzcGxheS1yb2xlIHJlc2V0IGZvciBvbGRlciBicm93c2VycyAqL1xcbmFydGljbGUsIGFzaWRlLCBkZXRhaWxzLCBmaWdjYXB0aW9uLCBmaWd1cmUsIFxcbmZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIG1lbnUsIG5hdiwgc2VjdGlvbiB7XFxuXFx0ZGlzcGxheTogYmxvY2s7XFxufVxcbmJvZHkge1xcblxcdGxpbmUtaGVpZ2h0OiAxO1xcbn1cXG5vbCwgdWwge1xcblxcdGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcbmJsb2NrcXVvdGUsIHEge1xcblxcdHF1b3Rlczogbm9uZTtcXG59XFxuYmxvY2txdW90ZTpiZWZvcmUsIGJsb2NrcXVvdGU6YWZ0ZXIsXFxucTpiZWZvcmUsIHE6YWZ0ZXIge1xcblxcdGNvbnRlbnQ6ICcnO1xcblxcdGNvbnRlbnQ6IG5vbmU7XFxufVxcbnRhYmxlIHtcXG5cXHRib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xcblxcdGJvcmRlci1zcGFjaW5nOiAwO1xcbn1cXG5odG1sIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbiosICo6YmVmb3JlLCAqOmFmdGVyIHtcXG4gIGJveC1zaXppbmc6IGluaGVyaXQ7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly9zcmMvcmVzZXQuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBOzs7Q0FHQzs7QUFFRDs7Ozs7Ozs7Ozs7OztDQWFDLFNBQVM7Q0FDVCxVQUFVO0NBQ1YsU0FBUztDQUNULGVBQWU7Q0FDZixhQUFhO0NBQ2Isd0JBQXdCO0FBQ3pCO0FBQ0EsZ0RBQWdEO0FBQ2hEOztDQUVDLGNBQWM7QUFDZjtBQUNBO0NBQ0MsY0FBYztBQUNmO0FBQ0E7Q0FDQyxnQkFBZ0I7QUFDakI7QUFDQTtDQUNDLFlBQVk7QUFDYjtBQUNBOztDQUVDLFdBQVc7Q0FDWCxhQUFhO0FBQ2Q7QUFDQTtDQUNDLHlCQUF5QjtDQUN6QixpQkFBaUI7QUFDbEI7QUFDQTtFQUNFLHNCQUFzQjtBQUN4QjtBQUNBO0VBQ0UsbUJBQW1CO0FBQ3JCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8qIGh0dHA6Ly9tZXllcndlYi5jb20vZXJpYy90b29scy9jc3MvcmVzZXQvIFxcbiAgIHYyLjAgfCAyMDExMDEyNlxcbiAgIExpY2Vuc2U6IG5vbmUgKHB1YmxpYyBkb21haW4pXFxuKi9cXG5cXG5odG1sLCBib2R5LCBkaXYsIHNwYW4sIGFwcGxldCwgb2JqZWN0LCBpZnJhbWUsXFxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgcCwgYmxvY2txdW90ZSwgcHJlLFxcbmEsIGFiYnIsIGFjcm9ueW0sIGFkZHJlc3MsIGJpZywgY2l0ZSwgY29kZSxcXG5kZWwsIGRmbiwgZW0sIGltZywgaW5zLCBrYmQsIHEsIHMsIHNhbXAsXFxuc21hbGwsIHN0cmlrZSwgc3Ryb25nLCBzdWIsIHN1cCwgdHQsIHZhcixcXG5iLCB1LCBpLCBjZW50ZXIsXFxuZGwsIGR0LCBkZCwgb2wsIHVsLCBsaSxcXG5maWVsZHNldCwgZm9ybSwgbGFiZWwsIGxlZ2VuZCxcXG50YWJsZSwgY2FwdGlvbiwgdGJvZHksIHRmb290LCB0aGVhZCwgdHIsIHRoLCB0ZCxcXG5hcnRpY2xlLCBhc2lkZSwgY2FudmFzLCBkZXRhaWxzLCBlbWJlZCwgXFxuZmlndXJlLCBmaWdjYXB0aW9uLCBmb290ZXIsIGhlYWRlciwgaGdyb3VwLCBcXG5tZW51LCBuYXYsIG91dHB1dCwgcnVieSwgc2VjdGlvbiwgc3VtbWFyeSxcXG50aW1lLCBtYXJrLCBhdWRpbywgdmlkZW8ge1xcblxcdG1hcmdpbjogMDtcXG5cXHRwYWRkaW5nOiAwO1xcblxcdGJvcmRlcjogMDtcXG5cXHRmb250LXNpemU6IDEwMCU7XFxuXFx0Zm9udDogaW5oZXJpdDtcXG5cXHR2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XFxufVxcbi8qIEhUTUw1IGRpc3BsYXktcm9sZSByZXNldCBmb3Igb2xkZXIgYnJvd3NlcnMgKi9cXG5hcnRpY2xlLCBhc2lkZSwgZGV0YWlscywgZmlnY2FwdGlvbiwgZmlndXJlLCBcXG5mb290ZXIsIGhlYWRlciwgaGdyb3VwLCBtZW51LCBuYXYsIHNlY3Rpb24ge1xcblxcdGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5ib2R5IHtcXG5cXHRsaW5lLWhlaWdodDogMTtcXG59XFxub2wsIHVsIHtcXG5cXHRsaXN0LXN0eWxlOiBub25lO1xcbn1cXG5ibG9ja3F1b3RlLCBxIHtcXG5cXHRxdW90ZXM6IG5vbmU7XFxufVxcbmJsb2NrcXVvdGU6YmVmb3JlLCBibG9ja3F1b3RlOmFmdGVyLFxcbnE6YmVmb3JlLCBxOmFmdGVyIHtcXG5cXHRjb250ZW50OiAnJztcXG5cXHRjb250ZW50OiBub25lO1xcbn1cXG50YWJsZSB7XFxuXFx0Ym9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcXG5cXHRib3JkZXItc3BhY2luZzogMDtcXG59XFxuaHRtbCB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG4qLCAqOmJlZm9yZSwgKjphZnRlciB7XFxuICBib3gtc2l6aW5nOiBpbmhlcml0O1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIvKiBNYXN0ZXIgU3R5bGVzICovXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsa0JBQWtCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8qIE1hc3RlciBTdHlsZXMgKi9cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuXzJ5b2dENGNSTC1WdzdObmVuOTRvMXcge1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vc3JjL3RyYW5zaXRpb24tcm91dGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0FBQ0FcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmNvbnRhaW5lciB7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImNvbnRhaW5lclwiOiBcIl8yeW9nRDRjUkwtVnc3Tm5lbjk0bzF3XCJcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLktpVk1wWHZSelJ3TzZ4LTRyLUVSSCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcbi5fOEFpZzlJMTJtcDZmaTdlZEJqVmRvIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiAyZW07XFxuICBoZWlnaHQ6IDJlbTtcXG4gIGZvbnQtc2l6ZTogMC44ZW07XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbn1cXG4uXzJkVlgxQ0lYMUpDVkRwOUhDRnBtQmcge1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG59XFxuLl8yb2tKeHYtallZOU1oWjVpQ3hPMWltIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGRlZXBwaW5rO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgaGVpZ2h0OiAxZW07XFxuICBtYXJnaW46IDA7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBsZWZ0OiAuNWVtO1xcbiAgdG9wOiAuNmVtO1xcbiAgdHJhbnNmb3JtOiByb3RhdGUoLTQ1ZGVnKTtcXG4gIHRyYW5zZm9ybS1vcmlnaW46NTAlIDUwJTtcXG4gIFxcbiAgd2lkdGg6IDFlbTtcXG59XFxuXFxuLl8yb2tKeHYtallZOU1oWjVpQ3hPMWltOmJlZm9yZSxcXG4uXzJva0p4di1qWVk5TWhaNWlDeE8xaW06YWZ0ZXIge1xcbiAgY29udGVudDonJztcXG4gIGJhY2tncm91bmQtY29sb3I6IGRlZXBwaW5rO1xcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgaGVpZ2h0OiAxZW07XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB3aWR0aDogMWVtO1xcbn1cXG5cXG4uXzJva0p4di1qWVk5TWhaNWlDeE8xaW06YmVmb3JlIHtcXG4gIHRvcDogLS41ZW07XFxuICBsZWZ0OiAwO1xcbn1cXG5cXG4uXzJva0p4di1qWVk5TWhaNWlDeE8xaW06YWZ0ZXIge1xcbiAgbGVmdDogLjVlbTtcXG4gIHRvcDogMDtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovL3NyYy95dW0tcmF0aW5nLmNvbXBvbmVudC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxxQkFBcUI7QUFDdkI7QUFDQTtFQUNFLHFCQUFxQjtFQUNyQixVQUFVO0VBQ1YsV0FBVztFQUNYLGdCQUFnQjtFQUNoQixrQkFBa0I7RUFDbEIsc0JBQXNCO0FBQ3hCO0FBQ0E7RUFDRSxzQkFBc0I7QUFDeEI7QUFDQTtFQUNFLDBCQUEwQjtFQUMxQixxQkFBcUI7RUFDckIsV0FBVztFQUNYLFNBQVM7RUFDVCxrQkFBa0I7RUFDbEIsVUFBVTtFQUNWLFNBQVM7RUFDVCx5QkFBeUI7RUFDekIsd0JBQXdCOztFQUV4QixVQUFVO0FBQ1o7O0FBRUE7O0VBRUUsVUFBVTtFQUNWLDBCQUEwQjtFQUMxQixrQkFBa0I7RUFDbEIsV0FBVztFQUNYLGtCQUFrQjtFQUNsQixVQUFVO0FBQ1o7O0FBRUE7RUFDRSxVQUFVO0VBQ1YsT0FBTztBQUNUOztBQUVBO0VBQ0UsVUFBVTtFQUNWLE1BQU07QUFDUlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuLmhlYXJ0Q29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiAyZW07XFxuICBoZWlnaHQ6IDJlbTtcXG4gIGZvbnQtc2l6ZTogMC44ZW07XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbn1cXG4ucmF0aW5nIHtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxufVxcbi5oZWFydCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBkZWVwcGluaztcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGhlaWdodDogMWVtO1xcbiAgbWFyZ2luOiAwO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogLjVlbTtcXG4gIHRvcDogLjZlbTtcXG4gIHRyYW5zZm9ybTogcm90YXRlKC00NWRlZyk7XFxuICB0cmFuc2Zvcm0tb3JpZ2luOjUwJSA1MCU7XFxuICBcXG4gIHdpZHRoOiAxZW07XFxufVxcblxcbi5oZWFydDpiZWZvcmUsXFxuLmhlYXJ0OmFmdGVyIHtcXG4gIGNvbnRlbnQ6Jyc7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBkZWVwcGluaztcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIGhlaWdodDogMWVtO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgd2lkdGg6IDFlbTtcXG59XFxuXFxuLmhlYXJ0OmJlZm9yZSB7XFxuICB0b3A6IC0uNWVtO1xcbiAgbGVmdDogMDtcXG59XFxuXFxuLmhlYXJ0OmFmdGVyIHtcXG4gIGxlZnQ6IC41ZW07XFxuICB0b3A6IDA7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImNvbnRhaW5lclwiOiBcIktpVk1wWHZSelJ3TzZ4LTRyLUVSSFwiLFxuXHRcImhlYXJ0Q29udGFpbmVyXCI6IFwiXzhBaWc5STEybXA2Zmk3ZWRCalZkb1wiLFxuXHRcInJhdGluZ1wiOiBcIl8yZFZYMUNJWDFKQ1ZEcDlIQ0ZwbUJnXCIsXG5cdFwiaGVhcnRcIjogXCJfMm9rSnh2LWpZWTlNaFo1aUN4TzFpbVwiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSkge1xuICB2YXIgX2l0ZW0gPSBfc2xpY2VkVG9BcnJheShpdGVtLCA0KSxcbiAgICAgIGNvbnRlbnQgPSBfaXRlbVsxXSxcbiAgICAgIGNzc01hcHBpbmcgPSBfaXRlbVszXTtcblxuICBpZiAodHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgJycpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwidmFyIGlzYXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcGF0aFRvUmVnZXhwXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW11cbiAgdmFyIGtleSA9IDBcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLydcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF1cbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXVxuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXhcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGhcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdXG4gICAgdmFyIHByZWZpeCA9IHJlc1syXVxuICAgIHZhciBuYW1lID0gcmVzWzNdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF1cbiAgICB2YXIgZ3JvdXAgPSByZXNbNV1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl1cbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN11cblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gICAgICBwYXRoID0gJydcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXhcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyXG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwXG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pXG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpXG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucywgb3B0aW9ucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnLCBmbGFncyhvcHRpb25zKSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJydcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fVxuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fVxuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXVxuICAgICAgdmFyIHNlZ21lbnRcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKVxuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKVxuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXNcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZylcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKVxuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIHJvdXRlID0gJydcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpXG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJ1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pXG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKVxuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlclxuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nXG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnXG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJ1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMVxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24geShhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1pZighYWEpdGhyb3cgRXJyb3IoeSgyMjcpKTt2YXIgYmE9bmV3IFNldCxjYT17fTtmdW5jdGlvbiBkYShhLGIpe2VhKGEsYik7ZWEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGVhKGEsYil7Y2FbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWJhLmFkZChiW2FdKX1cbnZhciBmYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksaGE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGlhPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG5qYT17fSxrYT17fTtmdW5jdGlvbiBsYShhKXtpZihpYS5jYWxsKGthLGEpKXJldHVybiEwO2lmKGlhLmNhbGwoamEsYSkpcmV0dXJuITE7aWYoaGEudGVzdChhKSlyZXR1cm4ga2FbYV09ITA7amFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gbWEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBuYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxtYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEIoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciBEPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0RbYl09bmV3IEIoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgb2E9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBwYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxcbnBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbkQueGxpbmtIcmVmPW5ldyBCKFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHFhKGEsYixjLGQpe3ZhciBlPUQuaGFzT3duUHJvcGVydHkoYik/RFtiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KG5hKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9sYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIHJhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHNhPTYwMTAzLHRhPTYwMTA2LHVhPTYwMTA3LHdhPTYwMTA4LHhhPTYwMTE0LHlhPTYwMTA5LHphPTYwMTEwLEFhPTYwMTEyLEJhPTYwMTEzLENhPTYwMTIwLERhPTYwMTE1LEVhPTYwMTE2LEZhPTYwMTIxLEdhPTYwMTI4LEhhPTYwMTI5LElhPTYwMTMwLEphPTYwMTMxO1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIEU9U3ltYm9sLmZvcjtzYT1FKFwicmVhY3QuZWxlbWVudFwiKTt0YT1FKFwicmVhY3QucG9ydGFsXCIpO3VhPUUoXCJyZWFjdC5mcmFnbWVudFwiKTt3YT1FKFwicmVhY3Quc3RyaWN0X21vZGVcIik7eGE9RShcInJlYWN0LnByb2ZpbGVyXCIpO3lhPUUoXCJyZWFjdC5wcm92aWRlclwiKTt6YT1FKFwicmVhY3QuY29udGV4dFwiKTtBYT1FKFwicmVhY3QuZm9yd2FyZF9yZWZcIik7QmE9RShcInJlYWN0LnN1c3BlbnNlXCIpO0NhPUUoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpO0RhPUUoXCJyZWFjdC5tZW1vXCIpO0VhPUUoXCJyZWFjdC5sYXp5XCIpO0ZhPUUoXCJyZWFjdC5ibG9ja1wiKTtFKFwicmVhY3Quc2NvcGVcIik7R2E9RShcInJlYWN0Lm9wYXF1ZS5pZFwiKTtIYT1FKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtJYT1FKFwicmVhY3Qub2Zmc2NyZWVuXCIpO0phPUUoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpfVxudmFyIEthPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBMYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9S2EmJmFbS2FdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIE1hO2Z1bmN0aW9uIE5hKGEpe2lmKHZvaWQgMD09PU1hKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO01hPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitNYSthfXZhciBPYT0hMTtcbmZ1bmN0aW9uIFBhKGEsYil7aWYoIWF8fE9hKXJldHVyblwiXCI7T2E9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGspe3ZhciBkPWt9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChrKXtkPWt9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChrKXtkPWt9YSgpfX1jYXRjaChrKXtpZihrJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGsuc3RhY2spe2Zvcih2YXIgZT1rLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pcmV0dXJuXCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTt3aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7T2E9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9OYShhKTpcIlwifVxuZnVuY3Rpb24gUWEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE5hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTmEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE5hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTmEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPVBhKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPVBhKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAyMjpyZXR1cm4gYT1QYShhLnR5cGUuX3JlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9UGEoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBSYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHVhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHRhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSB4YTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB3YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEJhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIENhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHphOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIHlhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIEFhOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO1xucmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSBEYTpyZXR1cm4gUmEoYS50eXBlKTtjYXNlIEZhOnJldHVybiBSYShhLl9yZW5kZXIpO2Nhc2UgRWE6Yj1hLl9wYXlsb2FkO2E9YS5faW5pdDt0cnl7cmV0dXJuIFJhKGEoYikpfWNhdGNoKGMpe319cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiAkYShhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnFhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBhYihhLGIpeyRhKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/YmIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmYmIoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gYmIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9ZnVuY3Rpb24gZGIoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZWIoYSxiKXthPW0oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1kYihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcih5KDkxKSk7cmV0dXJuIG0oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IoeSg5MikpO2lmKEFycmF5LmlzQXJyYXkoYykpe2lmKCEoMT49Yy5sZW5ndGgpKXRocm93IEVycm9yKHkoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfXZhciBrYj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBsYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIG1iKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9sYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBuYixvYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1rYi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtuYj1uYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtuYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1uYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBwYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHFiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHJiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhxYikuZm9yRWFjaChmdW5jdGlvbihhKXtyYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3FiW2JdPXFiW2FdfSl9KTtmdW5jdGlvbiBzYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cWIuaGFzT3duUHJvcGVydHkoYSkmJnFiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHRiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXNiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHViPW0oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB2YihhLGIpe2lmKGIpe2lmKHViW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IoeSg2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IoeSg2MikpO319XG5mdW5jdGlvbiB3YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcih5KDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYihhLGIsYyxkLGUpe3JldHVybiBhKGIsYyxkLGUpfWZ1bmN0aW9uIEliKCl7fXZhciBKYj1HYixLYj0hMSxMYj0hMTtmdW5jdGlvbiBNYigpe2lmKG51bGwhPT16Ynx8bnVsbCE9PUFiKUliKCksRmIoKX1cbmZ1bmN0aW9uIE5iKGEsYixjKXtpZihMYilyZXR1cm4gYShiLGMpO0xiPSEwO3RyeXtyZXR1cm4gSmIoYSxiLGMpfWZpbmFsbHl7TGI9ITEsTWIoKX19XG5mdW5jdGlvbiBPYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKG51bGw9PT1jKXJldHVybiBudWxsO3ZhciBkPURiKGMpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBjKXRocm93IEVycm9yKHkoMjMxLGIsdHlwZW9mIGMpKTtyZXR1cm4gY312YXIgUGI9ITE7aWYoZmEpdHJ5e3ZhciBRYj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoUWIsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe1BiPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLFFiLFFiKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixRYixRYil9Y2F0Y2goYSl7UGI9ITF9ZnVuY3Rpb24gUmIoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG4pe3RoaXMub25FcnJvcihuKX19dmFyIFNiPSExLFRiPW51bGwsVWI9ITEsVmI9bnVsbCxXYj17b25FcnJvcjpmdW5jdGlvbihhKXtTYj0hMDtUYj1hfX07ZnVuY3Rpb24gWGIoYSxiLGMsZCxlLGYsZyxoLGspe1NiPSExO1RiPW51bGw7UmIuYXBwbHkoV2IsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIFliKGEsYixjLGQsZSxmLGcsaCxrKXtYYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoU2Ipe2lmKFNiKXt2YXIgbD1UYjtTYj0hMTtUYj1udWxsfWVsc2UgdGhyb3cgRXJyb3IoeSgxOTgpKTtVYnx8KFViPSEwLFZiPWwpfX1mdW5jdGlvbiBaYihhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZmxhZ3MmMTAyNikmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uICRiKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gYWMoYSl7aWYoWmIoYSkhPT1hKXRocm93IEVycm9yKHkoMTg4KSk7fVxuZnVuY3Rpb24gYmMoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9WmIoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IoeSgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gYWMoZSksYTtpZihmPT09ZClyZXR1cm4gYWMoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcih5KDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHkoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IoeSgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHkoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBjYyhhKXthPWJjKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gZGMoYSxiKXtmb3IodmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWI7KXtpZihiPT09YXx8Yj09PWMpcmV0dXJuITA7Yj1iLnJldHVybn1yZXR1cm4hMX12YXIgZWMsZmMsZ2MsaGMsaWM9ITEsamM9W10sa2M9bnVsbCxsYz1udWxsLG1jPW51bGwsbmM9bmV3IE1hcCxvYz1uZXcgTWFwLHBjPVtdLHFjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIHJjKGEsYixjLGQsZSl7cmV0dXJue2Jsb2NrZWRPbjphLGRvbUV2ZW50TmFtZTpiLGV2ZW50U3lzdGVtRmxhZ3M6Y3wxNixuYXRpdmVFdmVudDplLHRhcmdldENvbnRhaW5lcnM6W2RdfX1mdW5jdGlvbiBzYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmtjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpsYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjptYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6bmMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6b2MuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiB0YyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXJjKGIsYyxkLGUsZiksbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZmYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB1YyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBrYz10YyhrYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gbGM9dGMobGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIG1jPXRjKG1jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7bmMuc2V0KGYsdGMobmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLG9jLnNldChmLHRjKG9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIHZjKGEpe3ZhciBiPXdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9WmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9JGIoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7aGMoYS5sYW5lUHJpb3JpdHksZnVuY3Rpb24oKXtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7Z2MoYyl9KX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuaHlkcmF0ZSl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9XG5mdW5jdGlvbiB4YyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9eWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWMpcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJmZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIHpjKGEsYixjKXt4YyhhKSYmYy5kZWxldGUoYil9XG5mdW5jdGlvbiBBYygpe2ZvcihpYz0hMTswPGpjLmxlbmd0aDspe3ZhciBhPWpjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1DYihhLmJsb2NrZWRPbik7bnVsbCE9PWEmJmVjKGEpO2JyZWFrfWZvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPXljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1jKXthLmJsb2NrZWRPbj1jO2JyZWFrfWIuc2hpZnQoKX1udWxsPT09YS5ibG9ja2VkT24mJmpjLnNoaWZ0KCl9bnVsbCE9PWtjJiZ4YyhrYykmJihrYz1udWxsKTtudWxsIT09bGMmJnhjKGxjKSYmKGxjPW51bGwpO251bGwhPT1tYyYmeGMobWMpJiYobWM9bnVsbCk7bmMuZm9yRWFjaCh6Yyk7b2MuZm9yRWFjaCh6Yyl9XG5mdW5jdGlvbiBCYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsaWN8fChpYz0hMCxyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxBYykpKX1cbmZ1bmN0aW9uIENjKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIEJjKGIsYSl9aWYoMDxqYy5sZW5ndGgpe0JjKGpjWzBdLGEpO2Zvcih2YXIgYz0xO2M8amMubGVuZ3RoO2MrKyl7dmFyIGQ9amNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1rYyYmQmMoa2MsYSk7bnVsbCE9PWxjJiZCYyhsYyxhKTtudWxsIT09bWMmJkJjKG1jLGEpO25jLmZvckVhY2goYik7b2MuZm9yRWFjaChiKTtmb3IoYz0wO2M8cGMubGVuZ3RoO2MrKylkPXBjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxwYy5sZW5ndGgmJihjPXBjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KXZjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmcGMuc2hpZnQoKX1cbmZ1bmN0aW9uIERjKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIEVjPXthbmltYXRpb25lbmQ6RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpEYyhcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LEZjPXt9LEdjPXt9O1xuZmEmJihHYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBFYy5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBFYy50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIEhjKGEpe2lmKEZjW2FdKXJldHVybiBGY1thXTtpZighRWNbYV0pcmV0dXJuIGE7dmFyIGI9RWNbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gR2MpcmV0dXJuIEZjW2FdPWJbY107cmV0dXJuIGF9XG52YXIgSWM9SGMoXCJhbmltYXRpb25lbmRcIiksSmM9SGMoXCJhbmltYXRpb25pdGVyYXRpb25cIiksS2M9SGMoXCJhbmltYXRpb25zdGFydFwiKSxMYz1IYyhcInRyYW5zaXRpb25lbmRcIiksTWM9bmV3IE1hcCxOYz1uZXcgTWFwLE9jPVtcImFib3J0XCIsXCJhYm9ydFwiLEljLFwiYW5pbWF0aW9uRW5kXCIsSmMsXCJhbmltYXRpb25JdGVyYXRpb25cIixLYyxcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcblwibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIixcInBsYXlpbmdcIixcInBsYXlpbmdcIixcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiLFwic2Vla2luZ1wiLFwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLExjLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBQYyhhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXTtlPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO05jLnNldChkLGIpO01jLnNldChkLGUpO2RhKGUsW2RdKX19dmFyIFFjPXIudW5zdGFibGVfbm93O1FjKCk7dmFyIEY9ODtcbmZ1bmN0aW9uIFJjKGEpe2lmKDAhPT0oMSZhKSlyZXR1cm4gRj0xNSwxO2lmKDAhPT0oMiZhKSlyZXR1cm4gRj0xNCwyO2lmKDAhPT0oNCZhKSlyZXR1cm4gRj0xMyw0O3ZhciBiPTI0JmE7aWYoMCE9PWIpcmV0dXJuIEY9MTIsYjtpZigwIT09KGEmMzIpKXJldHVybiBGPTExLDMyO2I9MTkyJmE7aWYoMCE9PWIpcmV0dXJuIEY9MTAsYjtpZigwIT09KGEmMjU2KSlyZXR1cm4gRj05LDI1NjtiPTM1ODQmYTtpZigwIT09YilyZXR1cm4gRj04LGI7aWYoMCE9PShhJjQwOTYpKXJldHVybiBGPTcsNDA5NjtiPTQxODYxMTImYTtpZigwIT09YilyZXR1cm4gRj02LGI7Yj02MjkxNDU2MCZhO2lmKDAhPT1iKXJldHVybiBGPTUsYjtpZihhJjY3MTA4ODY0KXJldHVybiBGPTQsNjcxMDg4NjQ7aWYoMCE9PShhJjEzNDIxNzcyOCkpcmV0dXJuIEY9MywxMzQyMTc3Mjg7Yj04MDUzMDYzNjgmYTtpZigwIT09YilyZXR1cm4gRj0yLGI7aWYoMCE9PSgxMDczNzQxODI0JmEpKXJldHVybiBGPTEsMTA3Mzc0MTgyNDtcbkY9ODtyZXR1cm4gYX1mdW5jdGlvbiBTYyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gMTU7Y2FzZSA5ODpyZXR1cm4gMTA7Y2FzZSA5NzpjYXNlIDk2OnJldHVybiA4O2Nhc2UgOTU6cmV0dXJuIDI7ZGVmYXVsdDpyZXR1cm4gMH19ZnVuY3Rpb24gVGMoYSl7c3dpdGNoKGEpe2Nhc2UgMTU6Y2FzZSAxNDpyZXR1cm4gOTk7Y2FzZSAxMzpjYXNlIDEyOmNhc2UgMTE6Y2FzZSAxMDpyZXR1cm4gOTg7Y2FzZSA5OmNhc2UgODpjYXNlIDc6Y2FzZSA2OmNhc2UgNDpjYXNlIDU6cmV0dXJuIDk3O2Nhc2UgMzpjYXNlIDI6Y2FzZSAxOnJldHVybiA5NTtjYXNlIDA6cmV0dXJuIDkwO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzNTgsYSkpO319XG5mdW5jdGlvbiBVYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiBGPTA7dmFyIGQ9MCxlPTAsZj1hLmV4cGlyZWRMYW5lcyxnPWEuc3VzcGVuZGVkTGFuZXMsaD1hLnBpbmdlZExhbmVzO2lmKDAhPT1mKWQ9ZixlPUY9MTU7ZWxzZSBpZihmPWMmMTM0MjE3NzI3LDAhPT1mKXt2YXIgaz1mJn5nOzAhPT1rPyhkPVJjKGspLGU9Rik6KGgmPWYsMCE9PWgmJihkPVJjKGgpLGU9RikpfWVsc2UgZj1jJn5nLDAhPT1mPyhkPVJjKGYpLGU9Rik6MCE9PWgmJihkPVJjKGgpLGU9Rik7aWYoMD09PWQpcmV0dXJuIDA7ZD0zMS1WYyhkKTtkPWMmKCgwPmQ/MDoxPDxkKTw8MSktMTtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZnKSl7UmMoYik7aWYoZTw9RilyZXR1cm4gYjtGPWV9Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1WYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIFdjKGEpe2E9YS5wZW5kaW5nTGFuZXMmLTEwNzM3NDE4MjU7cmV0dXJuIDAhPT1hP2E6YSYxMDczNzQxODI0PzEwNzM3NDE4MjQ6MH1mdW5jdGlvbiBYYyhhLGIpe3N3aXRjaChhKXtjYXNlIDE1OnJldHVybiAxO2Nhc2UgMTQ6cmV0dXJuIDI7Y2FzZSAxMjpyZXR1cm4gYT1ZYygyNCZ+YiksMD09PWE/WGMoMTAsYik6YTtjYXNlIDEwOnJldHVybiBhPVljKDE5MiZ+YiksMD09PWE/WGMoOCxiKTphO2Nhc2UgODpyZXR1cm4gYT1ZYygzNTg0Jn5iKSwwPT09YSYmKGE9WWMoNDE4NjExMiZ+YiksMD09PWEmJihhPTUxMikpLGE7Y2FzZSAyOnJldHVybiBiPVljKDgwNTMwNjM2OCZ+YiksMD09PWImJihiPTI2ODQzNTQ1NiksYn10aHJvdyBFcnJvcih5KDM1OCxhKSk7fWZ1bmN0aW9uIFljKGEpe3JldHVybiBhJi1hfWZ1bmN0aW9uIFpjKGEpe2Zvcih2YXIgYj1bXSxjPTA7MzE+YztjKyspYi5wdXNoKGEpO3JldHVybiBifVxuZnVuY3Rpb24gJGMoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iO3ZhciBkPWItMTthLnN1c3BlbmRlZExhbmVzJj1kO2EucGluZ2VkTGFuZXMmPWQ7YT1hLmV2ZW50VGltZXM7Yj0zMS1WYyhiKTthW2JdPWN9dmFyIFZjPU1hdGguY2x6MzI/TWF0aC5jbHozMjphZCxiZD1NYXRoLmxvZyxjZD1NYXRoLkxOMjtmdW5jdGlvbiBhZChhKXtyZXR1cm4gMD09PWE/MzI6MzEtKGJkKGEpL2NkfDApfDB9dmFyIGRkPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZWQ9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksZmQ9ITA7ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7S2J8fEliKCk7dmFyIGU9aGQsZj1LYjtLYj0hMDt0cnl7SGIoZSxhLGIsYyxkKX1maW5hbGx5eyhLYj1mKXx8TWIoKX19ZnVuY3Rpb24gaWQoYSxiLGMsZCl7ZWQoZGQsaGQuYmluZChudWxsLGEsYixjLGQpKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQpe2lmKGZkKXt2YXIgZTtpZigoZT0wPT09KGImNCkpJiYwPGpjLmxlbmd0aCYmLTE8cWMuaW5kZXhPZihhKSlhPXJjKG51bGwsYSxiLGMsZCksamMucHVzaChhKTtlbHNle3ZhciBmPXljKGEsYixjLGQpO2lmKG51bGw9PT1mKWUmJnNjKGEsZCk7ZWxzZXtpZihlKXtpZigtMTxxYy5pbmRleE9mKGEpKXthPXJjKGYsYSxiLGMsZCk7amMucHVzaChhKTtyZXR1cm59aWYodWMoZixhLGIsYyxkKSlyZXR1cm47c2MoYSxkKX1qZChhLGIsZCxudWxsLGMpfX19fVxuZnVuY3Rpb24geWMoYSxiLGMsZCl7dmFyIGU9eGIoZCk7ZT13YyhlKTtpZihudWxsIT09ZSl7dmFyIGY9WmIoZSk7aWYobnVsbD09PWYpZT1udWxsO2Vsc2V7dmFyIGc9Zi50YWc7aWYoMTM9PT1nKXtlPSRiKGYpO2lmKG51bGwhPT1lKXJldHVybiBlO2U9bnVsbH1lbHNlIGlmKDM9PT1nKXtpZihmLnN0YXRlTm9kZS5oeWRyYXRlKXJldHVybiAzPT09Zi50YWc/Zi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2U9bnVsbH1lbHNlIGYhPT1lJiYoZT1udWxsKX19amQoYSxiLGQsZSxjKTtyZXR1cm4gbnVsbH12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7XG5mdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31tKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1tKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9bSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9bSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9bSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPW0oe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1tKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPW0oe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1tKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPW0oe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPW0oe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1tKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1tKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1mYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtmYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9ZmEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1mYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihmYSl7dmFyIHhlO2lmKGZhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7YT1yZTtpZihLYilhKGIpO2Vsc2V7S2I9ITA7dHJ5e0diKGEsYil9ZmluYWxseXtLYj0hMSxNYigpfX19fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2UsSWU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIEplKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFJZS5jYWxsKGIsY1tkXSl8fCFIZShhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIEtlKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIExlKGEsYil7dmFyIGM9S2UoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9S2UoYyl9fWZ1bmN0aW9uIE1lKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TWUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTmUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gT2UoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBQZT1mYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmT2UoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSmUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuUGMoXCJjYW5jZWwgY2FuY2VsIGNsaWNrIGNsaWNrIGNsb3NlIGNsb3NlIGNvbnRleHRtZW51IGNvbnRleHRNZW51IGNvcHkgY29weSBjdXQgY3V0IGF1eGNsaWNrIGF1eENsaWNrIGRibGNsaWNrIGRvdWJsZUNsaWNrIGRyYWdlbmQgZHJhZ0VuZCBkcmFnc3RhcnQgZHJhZ1N0YXJ0IGRyb3AgZHJvcCBmb2N1c2luIGZvY3VzIGZvY3Vzb3V0IGJsdXIgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSxcbjApO1BjKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO1BjKE9jLDIpO2Zvcih2YXIgVmU9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLFdlPTA7V2U8VmUubGVuZ3RoO1dlKyspTmMuc2V0KFZlW1dlXSwwKTtlYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO1xuZWEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtlYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2VhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZGEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2RhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtkYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmRhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIgWGU9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLFllPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KFhlKSk7XG5mdW5jdGlvbiBaZShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztZYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtaZShlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO1plKGUsaCxsKTtmPWt9fX1pZihVYil0aHJvdyBhPVZiLFViPSExLFZiPW51bGwsYTt9XG5mdW5jdGlvbiBHKGEsYil7dmFyIGM9JGUoYiksZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KGFmKGIsYSwyLCExKSxjLmFkZChkKSl9dmFyIGJmPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gY2YoYSl7YVtiZl18fChhW2JmXT0hMCxiYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1llLmhhcyhiKXx8ZGYoYiwhMSxhLG51bGwpO2RmKGIsITAsYSxudWxsKX0pKX1cbmZ1bmN0aW9uIGRmKGEsYixjLGQpe3ZhciBlPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTowLGY9YztcInNlbGVjdGlvbmNoYW5nZVwiPT09YSYmOSE9PWMubm9kZVR5cGUmJihmPWMub3duZXJEb2N1bWVudCk7aWYobnVsbCE9PWQmJiFiJiZZZS5oYXMoYSkpe2lmKFwic2Nyb2xsXCIhPT1hKXJldHVybjtlfD0yO2Y9ZH12YXIgZz0kZShmKSxoPWErXCJfX1wiKyhiP1wiY2FwdHVyZVwiOlwiYnViYmxlXCIpO2cuaGFzKGgpfHwoYiYmKGV8PTQpLGFmKGYsYSxlLGIpLGcuYWRkKGgpKX1cbmZ1bmN0aW9uIGFmKGEsYixjLGQpe3ZhciBlPU5jLmdldChiKTtzd2l0Y2godm9pZCAwPT09ZT8yOmUpe2Nhc2UgMDplPWdkO2JyZWFrO2Nhc2UgMTplPWlkO2JyZWFrO2RlZmF1bHQ6ZT1oZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshUGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gamQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz13YyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59TmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPU1jLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCx4PWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOng9XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6eD1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgSWM6Y2FzZSBKYzpjYXNlIEtjOms9SGQ7YnJlYWs7Y2FzZSBMYzprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB3PTAhPT0oYiY0KSx6PSF3JiZcInNjcm9sbFwiPT09YSx1PXc/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dz1bXTtmb3IodmFyIHQ9ZCxxO251bGwhPT1cbnQ7KXtxPXQ7dmFyIHY9cS5zdGF0ZU5vZGU7NT09PXEudGFnJiZudWxsIT09diYmKHE9dixudWxsIT09dSYmKHY9T2IodCx1KSxudWxsIT12JiZ3LnB1c2goZWYodCx2LHEpKSkpO2lmKHopYnJlYWs7dD10LnJldHVybn0wPHcubGVuZ3RoJiYoaD1uZXcgayhoLHgsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6d30pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJjA9PT0oYiYxNikmJih4PWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJih3Yyh4KXx8eFtmZl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZih4PWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLHg9eD93Yyh4KTpudWxsLG51bGwhPT1cbngmJih6PVpiKHgpLHghPT16fHw1IT09eC50YWcmJjYhPT14LnRhZykpeD1udWxsfWVsc2Ugaz1udWxsLHg9ZDtpZihrIT09eCl7dz1CZDt2PVwib25Nb3VzZUxlYXZlXCI7dT1cIm9uTW91c2VFbnRlclwiO3Q9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl3PVRkLHY9XCJvblBvaW50ZXJMZWF2ZVwiLHU9XCJvblBvaW50ZXJFbnRlclwiLHQ9XCJwb2ludGVyXCI7ej1udWxsPT1rP2g6dWUoayk7cT1udWxsPT14P2g6dWUoeCk7aD1uZXcgdyh2LHQrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD16O2gucmVsYXRlZFRhcmdldD1xO3Y9bnVsbDt3YyhlKT09PWQmJih3PW5ldyB3KHUsdCtcImVudGVyXCIseCxjLGUpLHcudGFyZ2V0PXEsdy5yZWxhdGVkVGFyZ2V0PXosdj13KTt6PXY7aWYoayYmeCliOnt3PWs7dT14O3Q9MDtmb3IocT13O3E7cT1nZihxKSl0Kys7cT0wO2Zvcih2PXU7djt2PWdmKHYpKXErKztmb3IoOzA8dC1xOyl3PWdmKHcpLHQtLTtmb3IoOzA8cS10Oyl1PVxuZ2YodSkscS0tO2Zvcig7dC0tOyl7aWYodz09PXV8fG51bGwhPT11JiZ3PT09dS5hbHRlcm5hdGUpYnJlYWsgYjt3PWdmKHcpO3U9Z2YodSl9dz1udWxsfWVsc2Ugdz1udWxsO251bGwhPT1rJiZoZihnLGgsayx3LCExKTtudWxsIT09eCYmbnVsbCE9PXomJmhmKGcseix4LHcsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIEo9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSlKPUZlO2Vsc2V7Sj1EZTt2YXIgSz1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKEo9RWUpO2lmKEomJihKPUooYSxkKSkpe25lKGcsSixjLGUpO2JyZWFrIGF9SyYmSyhhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKEs9aC5fd3JhcHBlclN0YXRlKSYmXG5LLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmJiKGgsXCJudW1iZXJcIixoLnZhbHVlKX1LPWQ/dWUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKG1lKEspfHxcInRydWVcIj09PUsuY29udGVudEVkaXRhYmxlKVFlPUssUmU9ZCxTZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlNlPVJlPVFlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlRlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpUZT0hMTtVZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFBlKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VWUoZyxjLGUpfXZhciBRO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBMPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpMPVwib25Db21wb3NpdGlvbkVuZFwiO2JyZWFrIGI7XG5jYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpMPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9TD12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoTD1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihMPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO0wmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PUw/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1MJiZpZSYmKFE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSxLPW9lKGQsTCksMDxLLmxlbmd0aCYmKEw9bmV3IExkKEwsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpMLGxpc3RlbmVyczpLfSksUT9MLmRhdGE9UTooUT1oZShjKSxudWxsIT09USYmKEwuZGF0YT1RKSkpKTtpZihRPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLDA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcblwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPVEpfXNlKGcsYil9KX1mdW5jdGlvbiBlZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG9lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9T2IoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQoZWYoYSxmLGUpKSxmPU9iKGEsYiksbnVsbCE9ZiYmZC5wdXNoKGVmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gZ2YoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIGhmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9T2IoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQoZWYoYyxrLGgpKSk6ZXx8KGs9T2IoYyxmKSxudWxsIT1rJiZnLnB1c2goZWYoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX1mdW5jdGlvbiBqZigpe312YXIga2Y9bnVsbCxsZj1udWxsO2Z1bmN0aW9uIG1mKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uIG5mKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgb2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAscGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO2Z1bmN0aW9uIHFmKGEpezE9PT1hLm5vZGVUeXBlP2EudGV4dENvbnRlbnQ9XCJcIjo5PT09YS5ub2RlVHlwZSYmKGE9YS5ib2R5LG51bGwhPWEmJihhLnRleHRDb250ZW50PVwiXCIpKX1cbmZ1bmN0aW9uIHJmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfWZ1bmN0aW9uIHNmKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciB0Zj0wO2Z1bmN0aW9uIHVmKGEpe3JldHVybnskJHR5cGVvZjpHYSx0b1N0cmluZzphLHZhbHVlT2Y6YX19dmFyIHZmPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLHdmPVwiX19yZWFjdEZpYmVyJFwiK3ZmLHhmPVwiX19yZWFjdFByb3BzJFwiK3ZmLGZmPVwiX19yZWFjdENvbnRhaW5lciRcIit2Zix5Zj1cIl9fcmVhY3RFdmVudHMkXCIrdmY7XG5mdW5jdGlvbiB3YyhhKXt2YXIgYj1hW3dmXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1tmZl18fGNbd2ZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9c2YoYSk7bnVsbCE9PWE7KXtpZihjPWFbd2ZdKXJldHVybiBjO2E9c2YoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENiKGEpe2E9YVt3Zl18fGFbZmZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB1ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IoeSgzMykpO31mdW5jdGlvbiBEYihhKXtyZXR1cm4gYVt4Zl18fG51bGx9XG5mdW5jdGlvbiAkZShhKXt2YXIgYj1hW3lmXTt2b2lkIDA9PT1iJiYoYj1hW3lmXT1uZXcgU2V0KTtyZXR1cm4gYn12YXIgemY9W10sQWY9LTE7ZnVuY3Rpb24gQmYoYSl7cmV0dXJue2N1cnJlbnQ6YX19ZnVuY3Rpb24gSChhKXswPkFmfHwoYS5jdXJyZW50PXpmW0FmXSx6ZltBZl09bnVsbCxBZi0tKX1mdW5jdGlvbiBJKGEsYil7QWYrKzt6ZltBZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBDZj17fSxNPUJmKENmKSxOPUJmKCExKSxEZj1DZjtcbmZ1bmN0aW9uIEVmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gQ2Y7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gRmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBHZigpe0goTik7SChNKX1mdW5jdGlvbiBIZihhLGIsYyl7aWYoTS5jdXJyZW50IT09Q2YpdGhyb3cgRXJyb3IoeSgxNjgpKTtJKE0sYik7SShOLGMpfVxuZnVuY3Rpb24gSWYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih5KDEwOCxSYShiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBtKHt9LGMsZCl9ZnVuY3Rpb24gSmYoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fENmO0RmPU0uY3VycmVudDtJKE0sYSk7SShOLE4uY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gS2YoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHkoMTY5KSk7Yz8oYT1JZihhLGIsRGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxIKE4pLEgoTSksSShNLGEpKTpIKE4pO0koTixjKX1cbnZhciBMZj1udWxsLE1mPW51bGwsTmY9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksT2Y9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLFBmPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssUWY9ci51bnN0YWJsZV9zaG91bGRZaWVsZCxSZj1yLnVuc3RhYmxlX3JlcXVlc3RQYWludCxTZj1yLnVuc3RhYmxlX25vdyxUZj1yLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLFVmPXIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksVmY9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxXZj1yLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFhmPXIudW5zdGFibGVfTG93UHJpb3JpdHksWWY9ci51bnN0YWJsZV9JZGxlUHJpb3JpdHksWmY9e30sJGY9dm9pZCAwIT09UmY/UmY6ZnVuY3Rpb24oKXt9LGFnPW51bGwsYmc9bnVsbCxjZz0hMSxkZz1TZigpLE89MUU0PmRnP1NmOmZ1bmN0aW9uKCl7cmV0dXJuIFNmKCktZGd9O1xuZnVuY3Rpb24gZWcoKXtzd2l0Y2goVGYoKSl7Y2FzZSBVZjpyZXR1cm4gOTk7Y2FzZSBWZjpyZXR1cm4gOTg7Y2FzZSBXZjpyZXR1cm4gOTc7Y2FzZSBYZjpyZXR1cm4gOTY7Y2FzZSBZZjpyZXR1cm4gOTU7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMzMikpO319ZnVuY3Rpb24gZmcoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIFVmO2Nhc2UgOTg6cmV0dXJuIFZmO2Nhc2UgOTc6cmV0dXJuIFdmO2Nhc2UgOTY6cmV0dXJuIFhmO2Nhc2UgOTU6cmV0dXJuIFlmO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMzIpKTt9fWZ1bmN0aW9uIGdnKGEsYil7YT1mZyhhKTtyZXR1cm4gTmYoYSxiKX1mdW5jdGlvbiBoZyhhLGIsYyl7YT1mZyhhKTtyZXR1cm4gT2YoYSxiLGMpfWZ1bmN0aW9uIGlnKCl7aWYobnVsbCE9PWJnKXt2YXIgYT1iZztiZz1udWxsO1BmKGEpfWpnKCl9XG5mdW5jdGlvbiBqZygpe2lmKCFjZyYmbnVsbCE9PWFnKXtjZz0hMDt2YXIgYT0wO3RyeXt2YXIgYj1hZztnZyg5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7YWc9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09YWcmJihhZz1hZy5zbGljZShhKzEpKSxPZihVZixpZyksYzt9ZmluYWxseXtjZz0hMX19fXZhciBrZz1yYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBsZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW0oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgbWc9QmYobnVsbCksbmc9bnVsbCxvZz1udWxsLHBnPW51bGw7ZnVuY3Rpb24gcWcoKXtwZz1vZz1uZz1udWxsfVxuZnVuY3Rpb24gcmcoYSl7dmFyIGI9bWcuY3VycmVudDtIKG1nKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHNnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKChhLmNoaWxkTGFuZXMmYik9PT1iKWlmKG51bGw9PT1jfHwoYy5jaGlsZExhbmVzJmIpPT09YilicmVhaztlbHNlIGMuY2hpbGRMYW5lc3w9YjtlbHNlIGEuY2hpbGRMYW5lc3w9YixudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9Yik7YT1hLnJldHVybn19ZnVuY3Rpb24gdGcoYSxiKXtuZz1hO3BnPW9nPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYodWc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gdmcoYSxiKXtpZihwZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpcGc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07aWYobnVsbD09PW9nKXtpZihudWxsPT09bmcpdGhyb3cgRXJyb3IoeSgzMDgpKTtvZz1iO25nLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YixyZXNwb25kZXJzOm51bGx9fWVsc2Ugb2c9b2cubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIHdnPSExO2Z1bmN0aW9uIHhnKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsZmlyc3RCYXNlVXBkYXRlOm51bGwsbGFzdEJhc2VVcGRhdGU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHlnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIHpnKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fWZ1bmN0aW9uIEFnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hKXthPWEuc2hhcmVkO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9fVxuZnVuY3Rpb24gQmcoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIENnKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7d2c9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbj1hLmFsdGVybmF0ZTtpZihudWxsIT09bil7bj1uLnVwZGF0ZVF1ZXVlO3ZhciBBPW4ubGFzdEJhc2VVcGRhdGU7QSE9PWcmJihudWxsPT09QT9uLmZpcnN0QmFzZVVwZGF0ZT1sOkEubmV4dD1sLG4ubGFzdEJhc2VVcGRhdGU9ayl9fWlmKG51bGwhPT1mKXtBPWUuYmFzZVN0YXRlO2c9MDtuPWw9az1udWxsO2Rve2g9Zi5sYW5lO3ZhciBwPWYuZXZlbnRUaW1lO2lmKChkJmgpPT09aCl7bnVsbCE9PW4mJihuPW4ubmV4dD17ZXZlbnRUaW1lOnAsbGFuZTowLHRhZzpmLnRhZyxwYXlsb2FkOmYucGF5bG9hZCxjYWxsYmFjazpmLmNhbGxiYWNrLFxubmV4dDpudWxsfSk7YTp7dmFyIEM9YSx4PWY7aD1iO3A9Yztzd2l0Y2goeC50YWcpe2Nhc2UgMTpDPXgucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyl7QT1DLmNhbGwocCxBLGgpO2JyZWFrIGF9QT1DO2JyZWFrIGE7Y2FzZSAzOkMuZmxhZ3M9Qy5mbGFncyYtNDA5N3w2NDtjYXNlIDA6Qz14LnBheWxvYWQ7aD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQz9DLmNhbGwocCxBLGgpOkM7aWYobnVsbD09PWh8fHZvaWQgMD09PWgpYnJlYWsgYTtBPW0oe30sQSxoKTticmVhayBhO2Nhc2UgMjp3Zz0hMH19bnVsbCE9PWYuY2FsbGJhY2smJihhLmZsYWdzfD0zMixoPWUuZWZmZWN0cyxudWxsPT09aD9lLmVmZmVjdHM9W2ZdOmgucHVzaChmKSl9ZWxzZSBwPXtldmVudFRpbWU6cCxsYW5lOmgsdGFnOmYudGFnLHBheWxvYWQ6Zi5wYXlsb2FkLGNhbGxiYWNrOmYuY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bj8obD1uPXAsaz1BKTpuPW4ubmV4dD1wLGd8PWg7Zj1mLm5leHQ7aWYobnVsbD09PVxuZilpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSBmPWgubmV4dCxoLm5leHQ9bnVsbCxlLmxhc3RCYXNlVXBkYXRlPWgsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpO251bGw9PT1uJiYoaz1BKTtlLmJhc2VTdGF0ZT1rO2UuZmlyc3RCYXNlVXBkYXRlPWw7ZS5sYXN0QmFzZVVwZGF0ZT1uO0RnfD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9QX19ZnVuY3Rpb24gRWcoYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlKXRocm93IEVycm9yKHkoMTkxLGUpKTtlLmNhbGwoZCl9fX12YXIgRmc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7XG5mdW5jdGlvbiBHZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgS2c9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/WmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtKZyhhLGUsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO0pnKGEsZSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1IZygpLGQ9SWcoYSksZT16ZyhjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPVxuYik7QWcoYSxlKTtKZyhhLGQsYyl9fTtmdW5jdGlvbiBMZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFKZShjLGQpfHwhSmUoZSxmKTohMH1cbmZ1bmN0aW9uIE1nKGEsYixjKXt2YXIgZD0hMSxlPUNmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXZnKGYpOihlPUZmKGIpP0RmOk0uY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0VmKGEsZSk6Q2YpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1LZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIE5nKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIE9nKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9Rmc7eGcoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD12ZyhmKTooZj1GZihiKT9EZjpNLmN1cnJlbnQsZS5jb250ZXh0PUVmKGEsZikpO0NnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihHZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxDZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00KX12YXIgUGc9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFFnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcih5KDE0NyxhKSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1GZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcih5KDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcih5KDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gUmcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgRXJyb3IoeSgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIpKTt9XG5mdW5jdGlvbiBTZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmZsYWdzPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVRnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzPTIsXG5jKTpkO2IuZmxhZ3M9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZmxhZ3M9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVVnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPVFnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1WZyhjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1RZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1cbldnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBuKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1YZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIEEoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVVnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjPVZnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPVFnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSB0YTpyZXR1cm4gYj1XZyhiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoUGcoYil8fExhKGIpKXJldHVybiBiPVhnKGIsXG5hLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7UmcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBwKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09dWE/bihhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIHRhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKFBnKGMpfHxMYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpuKGEsYixjLGQsbnVsbCk7UmcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fFxubnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PXVhP24oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIHRhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKFBnKGQpfHxMYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxuKGIsYSxkLGUsbnVsbCk7UmcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHQ9bnVsbCx1PWcsej1nPTAscT1udWxsO251bGwhPT11JiZ6PGgubGVuZ3RoO3orKyl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgbj1wKGUsdSxoW3pdLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PVxubi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHopO251bGw9PT10P2w9bjp0LnNpYmxpbmc9bjt0PW47dT1xfWlmKHo9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLGw7aWYobnVsbD09PXUpe2Zvcig7ejxoLmxlbmd0aDt6KyspdT1BKGUsaFt6XSxrKSxudWxsIT09dSYmKGc9Zih1LGcseiksbnVsbD09PXQ/bD11OnQuc2libGluZz11LHQ9dSk7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpO3o8aC5sZW5ndGg7eisrKXE9Qyh1LGUseixoW3pdLGspLG51bGwhPT1xJiYoYSYmbnVsbCE9PXEuYWx0ZXJuYXRlJiZ1LmRlbGV0ZShudWxsPT09cS5rZXk/ejpxLmtleSksZz1mKHEsZyx6KSxudWxsPT09dD9sPXE6dC5zaWJsaW5nPXEsdD1xKTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIHcoZSxnLGgsayl7dmFyIGw9TGEoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IoeSgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1cbmgpdGhyb3cgRXJyb3IoeSgxNTEpKTtmb3IodmFyIHQ9bD1udWxsLHU9Zyx6PWc9MCxxPW51bGwsbj1oLm5leHQoKTtudWxsIT09dSYmIW4uZG9uZTt6Kyssbj1oLm5leHQoKSl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgdz1wKGUsdSxuLnZhbHVlLGspO2lmKG51bGw9PT13KXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PXcuYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKHcsZyx6KTtudWxsPT09dD9sPXc6dC5zaWJsaW5nPXc7dD13O3U9cX1pZihuLmRvbmUpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1BKGUsbi52YWx1ZSxrKSxudWxsIT09biYmKGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1DKHUsZSx6LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJlxudS5kZWxldGUobnVsbD09PW4ua2V5P3o6bi5rZXkpLGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09dWEmJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2Ugc2E6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKXtzd2l0Y2goay50YWcpe2Nhc2UgNzppZihmLnR5cGU9PT11YSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1icmVhaztkZWZhdWx0OmlmKGsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO1xuZD1lKGssZi5wcm9wcyk7ZC5yZWY9UWcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWMoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT11YT8oZD1YZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9VmcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9UWcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHRhOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPVxuV2coZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9VWcoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoUGcoZikpcmV0dXJuIHgoYSxkLGYsaCk7aWYoTGEoZikpcmV0dXJuIHcoYSxkLGYsaCk7bCYmUmcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMjI6Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp0aHJvdyBFcnJvcih5KDE1MixSYShhLnR5cGUpfHxcIkNvbXBvbmVudFwiKSk7fXJldHVybiBjKGEsZCl9fXZhciBZZz1TZyghMCksWmc9U2coITEpLCRnPXt9LGFoPUJmKCRnKSxiaD1CZigkZyksY2g9QmYoJGcpO1xuZnVuY3Rpb24gZGgoYSl7aWYoYT09PSRnKXRocm93IEVycm9yKHkoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gZWgoYSxiKXtJKGNoLGIpO0koYmgsYSk7SShhaCwkZyk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTptYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9bWIoYixhKX1IKGFoKTtJKGFoLGIpfWZ1bmN0aW9uIGZoKCl7SChhaCk7SChiaCk7SChjaCl9ZnVuY3Rpb24gZ2goYSl7ZGgoY2guY3VycmVudCk7dmFyIGI9ZGgoYWguY3VycmVudCk7dmFyIGM9bWIoYixhLnR5cGUpO2IhPT1jJiYoSShiaCxhKSxJKGFoLGMpKX1mdW5jdGlvbiBoaChhKXtiaC5jdXJyZW50PT09YSYmKEgoYWgpLEgoYmgpKX12YXIgUD1CZigwKTtcbmZ1bmN0aW9uIGloKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9dmFyIGpoPW51bGwsa2g9bnVsbCxsaD0hMTtcbmZ1bmN0aW9uIG1oKGEsYil7dmFyIGM9bmgoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZmxhZ3M9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIG9oKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBwaChhKXtpZihsaCl7dmFyIGI9a2g7aWYoYil7dmFyIGM9YjtpZighb2goYSxiKSl7Yj1yZihjLm5leHRTaWJsaW5nKTtpZighYnx8IW9oKGEsYikpe2EuZmxhZ3M9YS5mbGFncyYtMTAyNXwyO2xoPSExO2poPWE7cmV0dXJufW1oKGpoLGMpfWpoPWE7a2g9cmYoYi5maXJzdENoaWxkKX1lbHNlIGEuZmxhZ3M9YS5mbGFncyYtMTAyNXwyLGxoPSExLGpoPWF9fWZ1bmN0aW9uIHFoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtqaD1hfVxuZnVuY3Rpb24gcmgoYSl7aWYoYSE9PWpoKXJldHVybiExO2lmKCFsaClyZXR1cm4gcWgoYSksbGg9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFuZihiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9a2g7YjspbWgoYSxiKSxiPXJmKGIubmV4dFNpYmxpbmcpO3FoKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IoeSgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7a2g9cmYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ31raD1udWxsfX1lbHNlIGtoPWpoP3JmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gc2goKXtraD1qaD1udWxsO2xoPSExfXZhciB0aD1bXTtmdW5jdGlvbiB1aCgpe2Zvcih2YXIgYT0wO2E8dGgubGVuZ3RoO2ErKyl0aFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO3RoLmxlbmd0aD0wfXZhciB2aD1yYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLHdoPXJhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLHhoPTAsUj1udWxsLFM9bnVsbCxUPW51bGwseWg9ITEsemg9ITE7ZnVuY3Rpb24gQWgoKXt0aHJvdyBFcnJvcih5KDMyMSkpO31mdW5jdGlvbiBCaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gQ2goYSxiLGMsZCxlLGYpe3hoPWY7Uj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7dmguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9EaDpFaDthPWMoZCxlKTtpZih6aCl7Zj0wO2Rve3poPSExO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IoeSgzMDEpKTtmKz0xO1Q9Uz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDt2aC5jdXJyZW50PUZoO2E9YyhkLGUpfXdoaWxlKHpoKX12aC5jdXJyZW50PUdoO2I9bnVsbCE9PVMmJm51bGwhPT1TLm5leHQ7eGg9MDtUPVM9Uj1udWxsO3loPSExO2lmKGIpdGhyb3cgRXJyb3IoeSgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBIaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZT1UPWE6VD1ULm5leHQ9YTtyZXR1cm4gVH1cbmZ1bmN0aW9uIEloKCl7aWYobnVsbD09PVMpe3ZhciBhPVIuYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPVMubmV4dDt2YXIgYj1udWxsPT09VD9SLm1lbW9pemVkU3RhdGU6VC5uZXh0O2lmKG51bGwhPT1iKVQ9YixTPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih5KDMxMCkpO1M9YTthPXttZW1vaXplZFN0YXRlOlMubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Uy5iYXNlU3RhdGUsYmFzZVF1ZXVlOlMuYmFzZVF1ZXVlLHF1ZXVlOlMucXVldWUsbmV4dDpudWxsfTtudWxsPT09VD9SLm1lbW9pemVkU3RhdGU9VD1hOlQ9VC5uZXh0PWF9cmV0dXJuIFR9ZnVuY3Rpb24gSmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBLaChhKXt2YXIgYj1JaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih5KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPVMsZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5sYW5lO2lmKCh4aCZsKT09PWwpbnVsbCE9PWgmJihoPWgubmV4dD17bGFuZTowLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7ZWxzZXt2YXIgbj17bGFuZTpsLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsXG5lYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1oPyhnPWg9bixmPWQpOmg9aC5uZXh0PW47Ui5sYW5lc3w9bDtEZ3w9bH1rPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWUpO251bGw9PT1oP2Y9ZDpoLm5leHQ9ZztIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fCh1Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZjtiLmJhc2VRdWV1ZT1oO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gTGgoYSl7dmFyIGI9SWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IoeSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KHVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19XG5mdW5jdGlvbiBNaChhLGIsYyl7dmFyIGQ9Yi5fZ2V0VmVyc2lvbjtkPWQoYi5fc291cmNlKTt2YXIgZT1iLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5O2lmKG51bGwhPT1lKWE9ZT09PWQ7ZWxzZSBpZihhPWEubXV0YWJsZVJlYWRMYW5lcyxhPSh4aCZhKT09PWEpYi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1kLHRoLnB1c2goYik7aWYoYSlyZXR1cm4gYyhiLl9zb3VyY2UpO3RoLnB1c2goYik7dGhyb3cgRXJyb3IoeSgzNTApKTt9XG5mdW5jdGlvbiBOaChhLGIsYyxkKXt2YXIgZT1VO2lmKG51bGw9PT1lKXRocm93IEVycm9yKHkoMzQ5KSk7dmFyIGY9Yi5fZ2V0VmVyc2lvbixnPWYoYi5fc291cmNlKSxoPXZoLmN1cnJlbnQsaz1oLnVzZVN0YXRlKGZ1bmN0aW9uKCl7cmV0dXJuIE1oKGUsYixjKX0pLGw9a1sxXSxuPWtbMF07az1UO3ZhciBBPWEubWVtb2l6ZWRTdGF0ZSxwPUEucmVmcyxDPXAuZ2V0U25hcHNob3QseD1BLnNvdXJjZTtBPUEuc3Vic2NyaWJlO3ZhciB3PVI7YS5tZW1vaXplZFN0YXRlPXtyZWZzOnAsc291cmNlOmIsc3Vic2NyaWJlOmR9O2gudXNlRWZmZWN0KGZ1bmN0aW9uKCl7cC5nZXRTbmFwc2hvdD1jO3Auc2V0U25hcHNob3Q9bDt2YXIgYT1mKGIuX3NvdXJjZSk7aWYoIUhlKGcsYSkpe2E9YyhiLl9zb3VyY2UpO0hlKG4sYSl8fChsKGEpLGE9SWcodyksZS5tdXRhYmxlUmVhZExhbmVzfD1hJmUucGVuZGluZ0xhbmVzKTthPWUubXV0YWJsZVJlYWRMYW5lcztlLmVudGFuZ2xlZExhbmVzfD1hO2Zvcih2YXIgZD1cbmUuZW50YW5nbGVtZW50cyxoPWE7MDxoOyl7dmFyIGs9MzEtVmMoaCksdj0xPDxrO2Rba118PWE7aCY9fnZ9fX0sW2MsYixkXSk7aC51c2VFZmZlY3QoZnVuY3Rpb24oKXtyZXR1cm4gZChiLl9zb3VyY2UsZnVuY3Rpb24oKXt2YXIgYT1wLmdldFNuYXBzaG90LGM9cC5zZXRTbmFwc2hvdDt0cnl7YyhhKGIuX3NvdXJjZSkpO3ZhciBkPUlnKHcpO2UubXV0YWJsZVJlYWRMYW5lc3w9ZCZlLnBlbmRpbmdMYW5lc31jYXRjaChxKXtjKGZ1bmN0aW9uKCl7dGhyb3cgcTt9KX19KX0sW2IsZF0pO0hlKEMsYykmJkhlKHgsYikmJkhlKEEsZCl8fChhPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkpoLGxhc3RSZW5kZXJlZFN0YXRlOm59LGEuZGlzcGF0Y2g9bD1PaC5iaW5kKG51bGwsUixhKSxrLnF1ZXVlPWEsay5iYXNlUXVldWU9bnVsbCxuPU1oKGUsYixjKSxrLm1lbW9pemVkU3RhdGU9ay5iYXNlU3RhdGU9bik7cmV0dXJuIG59XG5mdW5jdGlvbiBQaChhLGIsYyl7dmFyIGQ9SWgoKTtyZXR1cm4gTmgoZCxhLGIsYyl9ZnVuY3Rpb24gUWgoYSl7dmFyIGI9SGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6SmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPU9oLmJpbmQobnVsbCxSLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBSaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1SLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGx9LFIudXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gU2goYSl7dmFyIGI9SGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX1mdW5jdGlvbiBUaCgpe3JldHVybiBJaCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gVWgoYSxiLGMsZCl7dmFyIGU9SGgoKTtSLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1SaCgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gVmgoYSxiLGMsZCl7dmFyIGU9SWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Uyl7dmFyIGc9Uy5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZCaChkLGcuZGVwcykpe1JoKGIsYyxmLGQpO3JldHVybn19Ui5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9UmgoMXxiLGMsZixkKX1mdW5jdGlvbiBXaChhLGIpe3JldHVybiBVaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIFhoKGEsYil7cmV0dXJuIFZoKDUxNiw0LGEsYil9ZnVuY3Rpb24gWWgoYSxiKXtyZXR1cm4gVmgoNCwyLGEsYil9ZnVuY3Rpb24gWmgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1cbmZ1bmN0aW9uICRoKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVmgoNCwyLFpoLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIGFpKCl7fWZ1bmN0aW9uIGJpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIGNpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gZGkoYSxiKXt2YXIgYz1lZygpO2dnKDk4PmM/OTg6YyxmdW5jdGlvbigpe2EoITApfSk7Z2coOTc8Yz85NzpjLGZ1bmN0aW9uKCl7dmFyIGM9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2EoITEpLGIoKX1maW5hbGx5e3doLnRyYW5zaXRpb249Y319KX1cbmZ1bmN0aW9uIE9oKGEsYixjKXt2YXIgZD1IZygpLGU9SWcoYSksZj17bGFuZTplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LGc9Yi5wZW5kaW5nO251bGw9PT1nP2YubmV4dD1mOihmLm5leHQ9Zy5uZXh0LGcubmV4dD1mKTtiLnBlbmRpbmc9ZjtnPWEuYWx0ZXJuYXRlO2lmKGE9PT1SfHxudWxsIT09ZyYmZz09PVIpemg9eWg9ITA7ZWxzZXtpZigwPT09YS5sYW5lcyYmKG51bGw9PT1nfHwwPT09Zy5sYW5lcykmJihnPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZykpdHJ5e3ZhciBoPWIubGFzdFJlbmRlcmVkU3RhdGUsaz1nKGgsYyk7Zi5lYWdlclJlZHVjZXI9ZztmLmVhZ2VyU3RhdGU9aztpZihIZShrLGgpKXJldHVybn1jYXRjaChsKXt9ZmluYWxseXt9SmcoYSxlLGQpfX1cbnZhciBHaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6QWgsdXNlQ29udGV4dDpBaCx1c2VFZmZlY3Q6QWgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpBaCx1c2VMYXlvdXRFZmZlY3Q6QWgsdXNlTWVtbzpBaCx1c2VSZWR1Y2VyOkFoLHVzZVJlZjpBaCx1c2VTdGF0ZTpBaCx1c2VEZWJ1Z1ZhbHVlOkFoLHVzZURlZmVycmVkVmFsdWU6QWgsdXNlVHJhbnNpdGlvbjpBaCx1c2VNdXRhYmxlU291cmNlOkFoLHVzZU9wYXF1ZUlkZW50aWZpZXI6QWgsdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxEaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtIaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpXaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVWgoNCwyLFpoLmJpbmQobnVsbCxcbmIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBVaCg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPUhoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUhoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9T2guYmluZChudWxsLFIsYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOlNoLHVzZVN0YXRlOlFoLHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1RaChhKSxjPWJbMF0sZD1iWzFdO1doKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjtcbndoLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1RaCghMSksYj1hWzBdO2E9ZGkuYmluZChudWxsLGFbMV0pO1NoKGEpO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1IaCgpO2QubWVtb2l6ZWRTdGF0ZT17cmVmczp7Z2V0U25hcHNob3Q6YixzZXRTbmFwc2hvdDpudWxsfSxzb3VyY2U6YSxzdWJzY3JpYmU6Y307cmV0dXJuIE5oKGQsYSxiLGMpfSx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7aWYobGgpe3ZhciBhPSExLGI9dWYoZnVuY3Rpb24oKXthfHwoYT0hMCxjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKSk7dGhyb3cgRXJyb3IoeSgzNTUpKTt9KSxjPVFoKGIpWzFdOzA9PT0oUi5tb2RlJjIpJiYoUi5mbGFnc3w9NTE2LFJoKDUsZnVuY3Rpb24oKXtjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKX0sXG52b2lkIDAsbnVsbCkpO3JldHVybiBifWI9XCJyOlwiKyh0ZisrKS50b1N0cmluZygzNik7UWgoYik7cmV0dXJuIGJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRWg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6JGgsdXNlTGF5b3V0RWZmZWN0OlloLHVzZU1lbW86Y2ksdXNlUmVkdWNlcjpLaCx1c2VSZWY6VGgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpfSx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9S2goSmgpLGM9YlswXSxkPWJbMV07WGgoZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1LaChKaClbMF07cmV0dXJuW1RoKCkuY3VycmVudCxcbmFdfSx1c2VNdXRhYmxlU291cmNlOlBoLHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpWzBdfSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LEZoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOiRoLHVzZUxheW91dEVmZmVjdDpZaCx1c2VNZW1vOmNpLHVzZVJlZHVjZXI6TGgsdXNlUmVmOlRoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKX0sdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPUxoKEpoKSxjPWJbMF0sZD1iWzFdO1hoKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9TGgoSmgpWzBdO3JldHVybltUaCgpLmN1cnJlbnQsXG5hXX0sdXNlTXV0YWJsZVNvdXJjZTpQaCx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKVswXX0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxlaT1yYS5SZWFjdEN1cnJlbnRPd25lcix1Zz0hMTtmdW5jdGlvbiBmaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1pnKGIsbnVsbCxjLGQpOllnKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIGdpKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjt0ZyhiLGUpO2Q9Q2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhdWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tNTE3LGEubGFuZXMmPX5lLGhpKGEsYixlKTtiLmZsYWdzfD0xO2ZpKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFqaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxraShhLGIsZyxkLGUsZik7YT1WZyhjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoMD09PShlJmYpJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOkplLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIGhpKGEsYixmKTtiLmZsYWdzfD0xO2E9VGcoZyxkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBraShhLGIsYyxkLGUsZil7aWYobnVsbCE9PWEmJkplKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZilpZih1Zz0hMSwwIT09KGYmZSkpMCE9PShhLmZsYWdzJjE2Mzg0KSYmKHVnPSEwKTtlbHNlIHJldHVybiBiLmxhbmVzPWEubGFuZXMsaGkoYSxiLGYpO3JldHVybiBsaShhLGIsYyxkLGYpfVxuZnVuY3Rpb24gbWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5jaGlsZHJlbixmPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO2lmKFwiaGlkZGVuXCI9PT1kLm1vZGV8fFwidW5zdGFibGUtZGVmZXItd2l0aG91dC1oaWRpbmdcIj09PWQubW9kZSlpZigwPT09KGIubW9kZSY0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowfSxuaShiLGMpO2Vsc2UgaWYoMCE9PShjJjEwNzM3NDE4MjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjB9LG5pKGIsbnVsbCE9PWY/Zi5iYXNlTGFuZXM6Yyk7ZWxzZSByZXR1cm4gYT1udWxsIT09Zj9mLmJhc2VMYW5lc3xjOmMsYi5sYW5lcz1iLmNoaWxkTGFuZXM9MTA3Mzc0MTgyNCxiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczphfSxuaShiLGEpLG51bGw7ZWxzZSBudWxsIT09Zj8oZD1mLmJhc2VMYW5lc3xjLGIubWVtb2l6ZWRTdGF0ZT1udWxsKTpkPWMsbmkoYixkKTtmaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIG9pKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTEyOH1mdW5jdGlvbiBsaShhLGIsYyxkLGUpe3ZhciBmPUZmKGMpP0RmOk0uY3VycmVudDtmPUVmKGIsZik7dGcoYixlKTtjPUNoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTUxNyxhLmxhbmVzJj1+ZSxoaShhLGIsZSk7Yi5mbGFnc3w9MTtmaShhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHBpKGEsYixjLGQsZSl7aWYoRmYoYykpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTt0ZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxNZyhiLGMsZCksT2coYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9dmcobCk6KGw9RmYoYyk/RGY6TS5jdXJyZW50LGw9RWYoYixsKSk7dmFyIG49Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7QXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk5nKGIsZyxkLGwpO3dnPSExO3ZhciBwPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXA7Q2coYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHAhPT1rfHxOLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbiYmKEdnKGIsYyxuLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD13Z3x8TGcoYixjLGgsZCxwLGssbCkpPyhBfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSxkPSExKX1lbHNle2c9Yi5zdGF0ZU5vZGU7eWcoYSxiKTtoPWIubWVtb2l6ZWRQcm9wcztsPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpsZyhiLnR5cGUsaCk7Zy5wcm9wcz1sO0E9Yi5wZW5kaW5nUHJvcHM7cD1nLmNvbnRleHQ7az1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az12ZyhrKTooaz1GZihjKT9EZjpNLmN1cnJlbnQsaz1FZihiLGspKTt2YXIgQz1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQ3x8XG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PUF8fHAhPT1rKSYmTmcoYixnLGQsayk7d2c9ITE7cD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1wO0NnKGIsZCxnLGUpO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTtoIT09QXx8cCE9PXh8fE4uY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBDJiYoR2coYixjLEMsZCkseD1iLm1lbW9pemVkU3RhdGUpLChsPXdnfHxMZyhiLGMsbCxkLHAseCxrKSk/KG58fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsXG54LGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseCxrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT14KSxnLnByb3BzPWQsZy5zdGF0ZT14LGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8XG5oPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGQ9ITEpfXJldHVybiBxaShhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBxaShhLGIsYyxkLGUsZil7b2koYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmS2YoYixjLCExKSxoaShhLGIsZik7ZD1iLnN0YXRlTm9kZTtlaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmZsYWdzfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVlnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WWcoYixudWxsLGgsZikpOmZpKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJktmKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gcmkoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9IZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZIZihhLGIuY29udGV4dCwhMSk7ZWgoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIHNpPXtkZWh5ZHJhdGVkOm51bGwscmV0cnlMYW5lOjB9O1xuZnVuY3Rpb24gdGkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9UC5jdXJyZW50LGY9ITEsZzsoZz0wIT09KGIuZmxhZ3MmNjQpKXx8KGc9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtnPyhmPSEwLGIuZmxhZ3MmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWQuZmFsbGJhY2t8fCEwPT09ZC51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGV8PTEpO0koUCxlJjEpO2lmKG51bGw9PT1hKXt2b2lkIDAhPT1kLmZhbGxiYWNrJiZwaChiKTthPWQuY2hpbGRyZW47ZT1kLmZhbGxiYWNrO2lmKGYpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sYi5tZW1vaXplZFN0YXRlPXNpLGE7aWYoXCJudW1iZXJcIj09PXR5cGVvZiBkLnVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sXG5iLm1lbW9pemVkU3RhdGU9c2ksYi5sYW5lcz0zMzU1NDQzMixhO2M9dmkoe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46YX0sYi5tb2RlLGMsbnVsbCk7Yy5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1jfWlmKG51bGwhPT1hLm1lbW9pemVkU3RhdGUpe2lmKGYpcmV0dXJuIGQ9d2koYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3tiYXNlTGFuZXM6Y306e2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaSxkO2M9eGkoYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9aWYoZilyZXR1cm4gZD13aShhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/e2Jhc2VMYW5lczpjfTpcbntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8Y30sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2ksZDtjPXhpKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWZ1bmN0aW9uIHVpKGEsYixjLGQpe3ZhciBlPWEubW9kZSxmPWEuY2hpbGQ7Yj17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmJ9OzA9PT0oZSYyKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPWIpOmY9dmkoYixlLDAsbnVsbCk7Yz1YZyhjLGUsZCxudWxsKTtmLnJldHVybj1hO2MucmV0dXJuPWE7Zi5zaWJsaW5nPWM7YS5jaGlsZD1mO3JldHVybiBjfVxuZnVuY3Rpb24geGkoYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDthPWUuc2libGluZztjPVRnKGUse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Y30pOzA9PT0oYi5tb2RlJjIpJiYoYy5sYW5lcz1kKTtjLnJldHVybj1iO2Muc2libGluZz1udWxsO251bGwhPT1hJiYoYS5uZXh0RWZmZWN0PW51bGwsYS5mbGFncz04LGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWEpO3JldHVybiBiLmNoaWxkPWN9XG5mdW5jdGlvbiB3aShhLGIsYyxkLGUpe3ZhciBmPWIubW9kZSxnPWEuY2hpbGQ7YT1nLnNpYmxpbmc7dmFyIGg9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpjfTswPT09KGYmMikmJmIuY2hpbGQhPT1nPyhjPWIuY2hpbGQsYy5jaGlsZExhbmVzPTAsYy5wZW5kaW5nUHJvcHM9aCxnPWMubGFzdEVmZmVjdCxudWxsIT09Zz8oYi5maXJzdEVmZmVjdD1jLmZpcnN0RWZmZWN0LGIubGFzdEVmZmVjdD1nLGcubmV4dEVmZmVjdD1udWxsKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsKTpjPVRnKGcsaCk7bnVsbCE9PWE/ZD1UZyhhLGQpOihkPVhnKGQsZixlLG51bGwpLGQuZmxhZ3N8PTIpO2QucmV0dXJuPWI7Yy5yZXR1cm49YjtjLnNpYmxpbmc9ZDtiLmNoaWxkPWM7cmV0dXJuIGR9ZnVuY3Rpb24geWkoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7c2coYS5yZXR1cm4sYil9XG5mdW5jdGlvbiB6aShhLGIsYyxkLGUsZil7dmFyIGc9YS5tZW1vaXplZFN0YXRlO251bGw9PT1nP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmUsbGFzdEVmZmVjdDpmfTooZy5pc0JhY2t3YXJkcz1iLGcucmVuZGVyaW5nPW51bGwsZy5yZW5kZXJpbmdTdGFydFRpbWU9MCxnLmxhc3Q9ZCxnLnRhaWw9YyxnLnRhaWxNb2RlPWUsZy5sYXN0RWZmZWN0PWYpfVxuZnVuY3Rpb24gQWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtmaShhLGIsZC5jaGlsZHJlbixjKTtkPVAuY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmeWkoYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpeWkoYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShQLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1paChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3ppKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWloKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX16aShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6emkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGhpKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtEZ3w9Yi5sYW5lcztpZigwIT09KGMmYi5jaGlsZExhbmVzKSl7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHkoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVRnKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1UZyhhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXJldHVybiBudWxsfXZhciBCaSxDaSxEaSxFaTtcbkJpPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtDaT1mdW5jdGlvbigpe307XG5EaT1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7ZGgoYWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWViKGEsZSk7ZD1lYihhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9bSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPW0oe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWdiKGEsZSk7ZD1nYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX12YihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PVxubCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGNhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHxcbihjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxjKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihjYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRyhcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOlwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1HYT9rLnRvU3RyaW5nKCk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLFxuYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0VpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O2Z1bmN0aW9uIEZpKGEsYil7aWYoIWxoKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBHaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClyaChiKT9iLmZsYWdzfD00OmQuaHlkcmF0ZXx8KGIuZmxhZ3N8PTI1Nik7Q2koYik7cmV0dXJuIG51bGw7Y2FzZSA1OmhoKGIpO3ZhciBlPWRoKGNoLmN1cnJlbnQpO2M9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlEaShhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1cbmIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7cmV0dXJuIG51bGx9YT1kaChhaC5jdXJyZW50KTtpZihyaChiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFt3Zl09YjtkW3hmXT1mO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGQpO0coXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoYT0wO2E8WGUubGVuZ3RoO2ErKylHKFhlW2FdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixkKTtHKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihkLGYpLEcoXCJpbnZhbGlkXCIsZCl9dmIoYyxmKTthPW51bGw7Zm9yKHZhciBnIGluIGYpZi5oYXNPd25Qcm9wZXJ0eShnKSYmKGU9ZltnXSxcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgZT9kLnRleHRDb250ZW50IT09ZSYmKGE9W1wiY2hpbGRyZW5cIixlXSk6XCJudW1iZXJcIj09PXR5cGVvZiBlJiZkLnRleHRDb250ZW50IT09XCJcIitlJiYoYT1bXCJjaGlsZHJlblwiLFwiXCIrZV0pOmNhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1lJiZcIm9uU2Nyb2xsXCI9PT1nJiZHKFwic2Nyb2xsXCIsZCkpO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShkKTtjYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGQpO2piKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPVxuamYpfWQ9YTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7YT09PWtiLmh0bWwmJihhPWxiKGMpKTthPT09a2IuaHRtbD9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2Fbd2ZdPWI7YVt4Zl09ZDtCaShhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7Zz13YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGEpO0coXCJjbG9zZVwiLGEpO1xuZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPFhlLmxlbmd0aDtlKyspRyhYZVtlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixhKTtHKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RyhcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1lYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPVxuZ2IoYSxkKTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXZiKGMsZSk7dmFyIGg9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj90YihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmb2IoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWN8fFwiXCIhPT1rKSYmcGIoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJnBiKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoY2EuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRyhcInNjcm9sbFwiLGEpOm51bGwhPWsmJnFhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7Y2IoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX1tZihjLGQpJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRWkoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7XG5jPWRoKGNoLmN1cnJlbnQpO2RoKGFoLmN1cnJlbnQpO3JoKGIpPyhkPWIuc3RhdGVOb2RlLGM9Yi5tZW1vaXplZFByb3BzLGRbd2ZdPWIsZC5ub2RlVmFsdWUhPT1jJiYoYi5mbGFnc3w9NCkpOihkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFt3Zl09YixiLnN0YXRlTm9kZT1kKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtjPSExO251bGw9PT1hP3ZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5mYWxsYmFjayYmcmgoYik6Yz1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKGQmJiFjJiYwIT09KGIubW9kZSYyKSlpZihudWxsPT09YSYmITAhPT1iLm1lbW9pemVkUHJvcHMudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fDAhPT0oUC5jdXJyZW50JjEpKTA9PT1WJiYoVj0zKTtlbHNle2lmKDA9PT1WfHwzPT09VilWPVxuNDtudWxsPT09VXx8MD09PShEZyYxMzQyMTc3MjcpJiYwPT09KEhpJjEzNDIxNzcyNyl8fElpKFUsVyl9aWYoZHx8YyliLmZsYWdzfD00O3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZmgoKSxDaShiKSxudWxsPT09YSYmY2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksbnVsbDtjYXNlIDEwOnJldHVybiByZyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDE5OkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Zj0wIT09KGIuZmxhZ3MmNjQpO2c9ZC5yZW5kZXJpbmc7aWYobnVsbD09PWcpaWYoZilGaShkLCExKTtlbHNle2lmKDAhPT1WfHxudWxsIT09YSYmMCE9PShhLmZsYWdzJjY0KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1paChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9NjQ7RmkoZCwhMSk7Zj1nLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoYi51cGRhdGVRdWV1ZT1mLGIuZmxhZ3N8PTQpO1xubnVsbD09PWQubGFzdEVmZmVjdCYmKGIuZmlyc3RFZmZlY3Q9bnVsbCk7Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdDtkPWM7Zm9yKGM9Yi5jaGlsZDtudWxsIT09YzspZj1jLGE9ZCxmLmZsYWdzJj0yLGYubmV4dEVmZmVjdD1udWxsLGYuZmlyc3RFZmZlY3Q9bnVsbCxmLmxhc3RFZmZlY3Q9bnVsbCxnPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsXG5mLmRlcGVuZGVuY2llcz1udWxsPT09YT9udWxsOntsYW5lczphLmxhbmVzLGZpcnN0Q29udGV4dDphLmZpcnN0Q29udGV4dH0pLGM9Yy5zaWJsaW5nO0koUCxQLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1hPWEuc2libGluZ31udWxsIT09ZC50YWlsJiZPKCk+SmkmJihiLmZsYWdzfD02NCxmPSEwLEZpKGQsITEpLGIubGFuZXM9MzM1NTQ0MzIpfWVsc2V7aWYoIWYpaWYoYT1paChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9NjQsZj0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5mbGFnc3w9NCksRmkoZCwhMCksbnVsbD09PWQudGFpbCYmXCJoaWRkZW5cIj09PWQudGFpbE1vZGUmJiFnLmFsdGVybmF0ZSYmIWxoKXJldHVybiBiPWIubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3QsbnVsbCE9PWImJihiLm5leHRFZmZlY3Q9bnVsbCksbnVsbH1lbHNlIDIqTygpLWQucmVuZGVyaW5nU3RhcnRUaW1lPkppJiYxMDczNzQxODI0IT09YyYmKGIuZmxhZ3N8PVxuNjQsZj0hMCxGaShkLCExKSxiLmxhbmVzPTMzNTU0NDMyKTtkLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWQubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZC5sYXN0PWcpfXJldHVybiBudWxsIT09ZC50YWlsPyhjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT1PKCksYy5zaWJsaW5nPW51bGwsYj1QLmN1cnJlbnQsSShQLGY/YiYxfDI6YiYxKSxjKTpudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gS2koKSxudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSE9PShudWxsIT09Yi5tZW1vaXplZFN0YXRlKSYmXCJ1bnN0YWJsZS1kZWZlci13aXRob3V0LWhpZGluZ1wiIT09ZC5tb2RlJiYoYi5mbGFnc3w9NCksbnVsbH10aHJvdyBFcnJvcih5KDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIExpKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkZmKGEudHlwZSkmJkdmKCk7dmFyIGI9YS5mbGFncztyZXR1cm4gYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtiPWEuZmxhZ3M7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih5KDI4NSkpO2EuZmxhZ3M9YiYtNDA5N3w2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIGhoKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gSChQKSxiPWEuZmxhZ3MsYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKFApLG51bGw7Y2FzZSA0OnJldHVybiBmaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gcmcoYSksbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIEtpKCksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIE1pKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVFhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplfX1mdW5jdGlvbiBOaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgT2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gUGkoYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7UWl8fChRaT0hMCxSaT1kKTtOaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFNpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtOaShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09VGk/VGk9bmV3IFNldChbdGhpc10pOlRpLmFkZCh0aGlzKSxOaShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY312YXIgVWk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7XG5mdW5jdGlvbiBWaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtXaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9ZnVuY3Rpb24gWGkoYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpyZXR1cm47Y2FzZSAxOmlmKGIuZmxhZ3MmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzpsZyhiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifXJldHVybjtjYXNlIDM6Yi5mbGFncyYyNTYmJnFmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3JldHVybjtjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31cbmZ1bmN0aW9uIFlpKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpiPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3tpZigzPT09KGEudGFnJjMpKXt2YXIgZD1hLmNyZWF0ZTthLmRlc3Ryb3k9ZCgpfWE9YS5uZXh0fXdoaWxlKGEhPT1iKX1iPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3t2YXIgZT1hO2Q9ZS5uZXh0O2U9ZS50YWc7MCE9PShlJjQpJiYwIT09KGUmMSkmJihaaShjLGEpLCRpKGMsYSkpO2E9ZH13aGlsZShhIT09Yil9cmV0dXJuO2Nhc2UgMTphPWMuc3RhdGVOb2RlO2MuZmxhZ3MmNCYmKG51bGw9PT1iP2EuY29tcG9uZW50RGlkTW91bnQoKTooZD1jLmVsZW1lbnRUeXBlPT09Yy50eXBlP2IubWVtb2l6ZWRQcm9wczpsZyhjLnR5cGUsYi5tZW1vaXplZFByb3BzKSxhLmNvbXBvbmVudERpZFVwZGF0ZShkLFxuYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpKSk7Yj1jLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZFZyhjLGIsYSk7cmV0dXJuO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWMuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTphPWMuY2hpbGQuc3RhdGVOb2RlfUVnKGMsYixhKX1yZXR1cm47Y2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZmxhZ3MmNCYmbWYoYy50eXBlLGMubWVtb2l6ZWRQcm9wcykmJmEuZm9jdXMoKTtyZXR1cm47Y2FzZSA2OnJldHVybjtjYXNlIDQ6cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbD09PWMubWVtb2l6ZWRTdGF0ZSYmKGM9Yy5hbHRlcm5hdGUsbnVsbCE9PWMmJihjPWMubWVtb2l6ZWRTdGF0ZSxudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGwhPT1jJiZDYyhjKSkpKTtcbnJldHVybjtjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMDpjYXNlIDIxOmNhc2UgMjM6Y2FzZSAyNDpyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9XG5mdW5jdGlvbiBhaihhLGIpe2Zvcih2YXIgYz1hOzspe2lmKDU9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoYilkPWQuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuc2V0UHJvcGVydHk/ZC5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpkLmRpc3BsYXk9XCJub25lXCI7ZWxzZXtkPWMuc3RhdGVOb2RlO3ZhciBlPWMubWVtb2l6ZWRQcm9wcy5zdHlsZTtlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbDtkLnN0eWxlLmRpc3BsYXk9c2IoXCJkaXNwbGF5XCIsZSl9fWVsc2UgaWYoNj09PWMudGFnKWMuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iP1wiXCI6Yy5tZW1vaXplZFByb3BzO2Vsc2UgaWYoKDIzIT09Yy50YWcmJjI0IT09Yy50YWd8fG51bGw9PT1jLm1lbW9pemVkU3RhdGV8fGM9PT1hKSYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1cbmEpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWEpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBiaihhLGIpe2lmKE1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgTWYub25Db21taXRGaWJlclVubW91bnQpdHJ5e01mLm9uQ29tbWl0RmliZXJVbm1vdW50KExmLGIpfWNhdGNoKGYpe31zd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGM9YT1hLm5leHQ7ZG97dmFyIGQ9YyxlPWQuZGVzdHJveTtkPWQudGFnO2lmKHZvaWQgMCE9PWUpaWYoMCE9PShkJjQpKVppKGIsYyk7ZWxzZXtkPWI7dHJ5e2UoKX1jYXRjaChmKXtXaShkLGYpfX1jPWMubmV4dH13aGlsZShjIT09YSl9YnJlYWs7Y2FzZSAxOlZpKGIpO2E9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2EucHJvcHM9Yi5tZW1vaXplZFByb3BzLGEuc3RhdGU9Yi5tZW1vaXplZFN0YXRlLGEuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChmKXtXaShiLFxuZil9YnJlYWs7Y2FzZSA1OlZpKGIpO2JyZWFrO2Nhc2UgNDpjaihhLGIpfX1mdW5jdGlvbiBkaihhKXthLmFsdGVybmF0ZT1udWxsO2EuY2hpbGQ9bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EucmV0dXJuPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIGVqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gZmooYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoZWooYikpYnJlYWsgYTtiPWIucmV0dXJufXRocm93IEVycm9yKHkoMTYwKSk7fXZhciBjPWI7Yj1jLnN0YXRlTm9kZTtzd2l0Y2goYy50YWcpe2Nhc2UgNTp2YXIgZD0hMTticmVhaztjYXNlIDM6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHkoMTYxKSk7fWMuZmxhZ3MmMTYmJihwYihiLFwiXCIpLGMuZmxhZ3MmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxlaihjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmZsYWdzJjIpY29udGludWUgYjtpZihudWxsPT09XG5jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5mbGFncyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP2dqKGEsYyxiKTpoaihhLGMsYil9XG5mdW5jdGlvbiBnaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9amYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoZ2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylnaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBoaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKGhqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspaGooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gY2ooYSxiKXtmb3IodmFyIGM9YixkPSExLGUsZjs7KXtpZighZCl7ZD1jLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWQpdGhyb3cgRXJyb3IoeSgxNjApKTtlPWQuc3RhdGVOb2RlO3N3aXRjaChkLnRhZyl7Y2FzZSA1OmY9ITE7YnJlYWsgYTtjYXNlIDM6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhO2Nhc2UgNDplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGF9ZD1kLnJldHVybn1kPSEwfWlmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKXthOmZvcih2YXIgZz1hLGg9YyxrPWg7OylpZihiaihnLGspLG51bGwhPT1rLmNoaWxkJiY0IT09ay50YWcpay5jaGlsZC5yZXR1cm49ayxrPWsuY2hpbGQ7ZWxzZXtpZihrPT09aClicmVhayBhO2Zvcig7bnVsbD09PWsuc2libGluZzspe2lmKG51bGw9PT1rLnJldHVybnx8ay5yZXR1cm49PT1oKWJyZWFrIGE7az1rLnJldHVybn1rLnNpYmxpbmcucmV0dXJuPWsucmV0dXJuO2s9ay5zaWJsaW5nfWY/KGc9ZSxoPWMuc3RhdGVOb2RlLFxuOD09PWcubm9kZVR5cGU/Zy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGgpOmcucmVtb3ZlQ2hpbGQoaCkpOmUucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWMudGFnKXtpZihudWxsIT09Yy5jaGlsZCl7ZT1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Y9ITA7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoYmooYSxjKSxudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm47ND09PWMudGFnJiYoZD0hMSl9Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBpaihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6dmFyIGM9Yi51cGRhdGVRdWV1ZTtjPW51bGwhPT1jP2MubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1jKXt2YXIgZD1jPWMubmV4dDtkbyAzPT09KGQudGFnJjMpJiYoYT1kLmRlc3Ryb3ksZC5kZXN0cm95PXZvaWQgMCx2b2lkIDAhPT1hJiZhKCkpLGQ9ZC5uZXh0O3doaWxlKGQhPT1jKX1yZXR1cm47Y2FzZSAxOnJldHVybjtjYXNlIDU6Yz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXtkPWIubWVtb2l6ZWRQcm9wczt2YXIgZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1t4Zl09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmJGEoYyxkKTt3YihhLGUpO2I9d2IoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9XG4yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/dGIoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP29iKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9wYihjLGgpOnFhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjphYihjLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGMsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmE9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsZj1kLnZhbHVlLG51bGwhPWY/ZmIoYywhIWQubXVsdGlwbGUsZiwhMSk6YSE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP2ZiKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTpmYihjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fXJldHVybjtjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPVxuYi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yz1iLnN0YXRlTm9kZTtjLmh5ZHJhdGUmJihjLmh5ZHJhdGU9ITEsQ2MoYy5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSYmKGpqPU8oKSxhaihiLmNoaWxkLCEwKSk7a2ooYik7cmV0dXJuO2Nhc2UgMTk6a2ooYik7cmV0dXJuO2Nhc2UgMTc6cmV0dXJuO2Nhc2UgMjM6Y2FzZSAyNDphaihiLG51bGwhPT1iLm1lbW9pemVkU3RhdGUpO3JldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31mdW5jdGlvbiBraihhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBVaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWxqLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gbWooYSxiKXtyZXR1cm4gbnVsbCE9PWEmJihhPWEubWVtb2l6ZWRTdGF0ZSxudWxsPT09YXx8bnVsbCE9PWEuZGVoeWRyYXRlZCk/KGI9Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1iJiZudWxsPT09Yi5kZWh5ZHJhdGVkKTohMX12YXIgbmo9TWF0aC5jZWlsLG9qPXJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIscGo9cmEuUmVhY3RDdXJyZW50T3duZXIsWD0wLFU9bnVsbCxZPW51bGwsVz0wLHFqPTAscmo9QmYoMCksVj0wLHNqPW51bGwsdGo9MCxEZz0wLEhpPTAsdWo9MCx2aj1udWxsLGpqPTAsSmk9SW5maW5pdHk7ZnVuY3Rpb24gd2ooKXtKaT1PKCkrNTAwfXZhciBaPW51bGwsUWk9ITEsUmk9bnVsbCxUaT1udWxsLHhqPSExLHlqPW51bGwsemo9OTAsQWo9W10sQmo9W10sQ2o9bnVsbCxEaj0wLEVqPW51bGwsRmo9LTEsR2o9MCxIaj0wLElqPW51bGwsSmo9ITE7ZnVuY3Rpb24gSGcoKXtyZXR1cm4gMCE9PShYJjQ4KT9PKCk6LTEhPT1Gaj9GajpGaj1PKCl9XG5mdW5jdGlvbiBJZyhhKXthPWEubW9kZTtpZigwPT09KGEmMikpcmV0dXJuIDE7aWYoMD09PShhJjQpKXJldHVybiA5OT09PWVnKCk/MToyOzA9PT1HaiYmKEdqPXRqKTtpZigwIT09a2cudHJhbnNpdGlvbil7MCE9PUhqJiYoSGo9bnVsbCE9PXZqP3ZqLnBlbmRpbmdMYW5lczowKTthPUdqO3ZhciBiPTQxODYxMTImfkhqO2ImPS1iOzA9PT1iJiYoYT00MTg2MTEyJn5hLGI9YSYtYSwwPT09YiYmKGI9ODE5MikpO3JldHVybiBifWE9ZWcoKTswIT09KFgmNCkmJjk4PT09YT9hPVhjKDEyLEdqKTooYT1TYyhhKSxhPVhjKGEsR2opKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpnKGEsYixjKXtpZig1MDxEail0aHJvdyBEaj0wLEVqPW51bGwsRXJyb3IoeSgxODUpKTthPUtqKGEsYik7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7JGMoYSxiLGMpO2E9PT1VJiYoSGl8PWIsND09PVYmJklpKGEsVykpO3ZhciBkPWVnKCk7MT09PWI/MCE9PShYJjgpJiYwPT09KFgmNDgpP0xqKGEpOihNaihhLGMpLDA9PT1YJiYod2ooKSxpZygpKSk6KDA9PT0oWCY0KXx8OTghPT1kJiY5OSE9PWR8fChudWxsPT09Q2o/Q2o9bmV3IFNldChbYV0pOkNqLmFkZChhKSksTWooYSxjKSk7dmo9YX1mdW5jdGlvbiBLaihhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9XG5mdW5jdGlvbiBNaihhLGIpe2Zvcih2YXIgYz1hLmNhbGxiYWNrTm9kZSxkPWEuc3VzcGVuZGVkTGFuZXMsZT1hLnBpbmdlZExhbmVzLGY9YS5leHBpcmF0aW9uVGltZXMsZz1hLnBlbmRpbmdMYW5lczswPGc7KXt2YXIgaD0zMS1WYyhnKSxrPTE8PGgsbD1mW2hdO2lmKC0xPT09bCl7aWYoMD09PShrJmQpfHwwIT09KGsmZSkpe2w9YjtSYyhrKTt2YXIgbj1GO2ZbaF09MTA8PW4/bCsyNTA6Njw9bj9sKzVFMzotMX19ZWxzZSBsPD1iJiYoYS5leHBpcmVkTGFuZXN8PWspO2cmPX5rfWQ9VWMoYSxhPT09VT9XOjApO2I9RjtpZigwPT09ZCludWxsIT09YyYmKGMhPT1aZiYmUGYoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MCk7ZWxzZXtpZihudWxsIT09Yyl7aWYoYS5jYWxsYmFja1ByaW9yaXR5PT09YilyZXR1cm47YyE9PVpmJiZQZihjKX0xNT09PWI/KGM9TGouYmluZChudWxsLGEpLG51bGw9PT1hZz8oYWc9W2NdLGJnPU9mKFVmLGpnKSk6YWcucHVzaChjKSxcbmM9WmYpOjE0PT09Yj9jPWhnKDk5LExqLmJpbmQobnVsbCxhKSk6KGM9VGMoYiksYz1oZyhjLE5qLmJpbmQobnVsbCxhKSkpO2EuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gTmooYSl7Rmo9LTE7SGo9R2o9MDtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGI9YS5jYWxsYmFja05vZGU7aWYoT2ooKSYmYS5jYWxsYmFja05vZGUhPT1iKXJldHVybiBudWxsO3ZhciBjPVVjKGEsYT09PVU/VzowKTtpZigwPT09YylyZXR1cm4gbnVsbDt2YXIgZD1jO3ZhciBlPVg7WHw9MTY7dmFyIGY9UGooKTtpZihVIT09YXx8VyE9PWQpd2ooKSxRaihhLGQpO2RvIHRyeXtSaigpO2JyZWFrfWNhdGNoKGgpe1NqKGEsaCl9d2hpbGUoMSk7cWcoKTtvai5jdXJyZW50PWY7WD1lO251bGwhPT1ZP2Q9MDooVT1udWxsLFc9MCxkPVYpO2lmKDAhPT0odGomSGkpKVFqKGEsMCk7ZWxzZSBpZigwIT09ZCl7Mj09PWQmJihYfD02NCxhLmh5ZHJhdGUmJihhLmh5ZHJhdGU9ITEscWYoYS5jb250YWluZXJJbmZvKSksYz1XYyhhKSwwIT09YyYmKGQ9VGooYSxjKSkpO2lmKDE9PT1kKXRocm93IGI9c2osUWooYSwwKSxJaShhLGMpLE1qKGEsTygpKSxiO2EuZmluaXNoZWRXb3JrPVxuYS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9Yztzd2l0Y2goZCl7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcih5KDM0NSkpO2Nhc2UgMjpVaihhKTticmVhaztjYXNlIDM6SWkoYSxjKTtpZigoYyY2MjkxNDU2MCk9PT1jJiYoZD1qais1MDAtTygpLDEwPGQpKXtpZigwIT09VWMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmYykhPT1jKXtIZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9b2YoVWouYmluZChudWxsLGEpLGQpO2JyZWFrfVVqKGEpO2JyZWFrO2Nhc2UgNDpJaShhLGMpO2lmKChjJjQxODYxMTIpPT09YylicmVhaztkPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGM7KXt2YXIgZz0zMS1WYyhjKTtmPTE8PGc7Zz1kW2ddO2c+ZSYmKGU9Zyk7YyY9fmZ9Yz1lO2M9TygpLWM7Yz0oMTIwPmM/MTIwOjQ4MD5jPzQ4MDoxMDgwPmM/MTA4MDoxOTIwPmM/MTkyMDozRTM+Yz8zRTM6NDMyMD5cbmM/NDMyMDoxOTYwKm5qKGMvMTk2MCkpLWM7aWYoMTA8Yyl7YS50aW1lb3V0SGFuZGxlPW9mKFVqLmJpbmQobnVsbCxhKSxjKTticmVha31VaihhKTticmVhaztjYXNlIDU6VWooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMyOSkpO319TWooYSxPKCkpO3JldHVybiBhLmNhbGxiYWNrTm9kZT09PWI/TmouYmluZChudWxsLGEpOm51bGx9ZnVuY3Rpb24gSWkoYSxiKXtiJj1+dWo7YiY9fkhpO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtVmMoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fVxuZnVuY3Rpb24gTGooYSl7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO09qKCk7aWYoYT09PVUmJjAhPT0oYS5leHBpcmVkTGFuZXMmVykpe3ZhciBiPVc7dmFyIGM9VGooYSxiKTswIT09KHRqJkhpKSYmKGI9VWMoYSxiKSxjPVRqKGEsYikpfWVsc2UgYj1VYyhhLDApLGM9VGooYSxiKTswIT09YS50YWcmJjI9PT1jJiYoWHw9NjQsYS5oeWRyYXRlJiYoYS5oeWRyYXRlPSExLHFmKGEuY29udGFpbmVySW5mbykpLGI9V2MoYSksMCE9PWImJihjPVRqKGEsYikpKTtpZigxPT09Yyl0aHJvdyBjPXNqLFFqKGEsMCksSWkoYSxiKSxNaihhLE8oKSksYzthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1VqKGEpO01qKGEsTygpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFZqKCl7aWYobnVsbCE9PUNqKXt2YXIgYT1DajtDaj1udWxsO2EuZm9yRWFjaChmdW5jdGlvbihhKXthLmV4cGlyZWRMYW5lc3w9MjQmYS5wZW5kaW5nTGFuZXM7TWooYSxPKCkpfSl9aWcoKX1mdW5jdGlvbiBXaihhLGIpe3ZhciBjPVg7WHw9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBYaihhLGIpe3ZhciBjPVg7WCY9LTI7WHw9ODt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBuaShhLGIpe0kocmoscWopO3FqfD1iO3RqfD1ifWZ1bmN0aW9uIEtpKCl7cWo9cmouY3VycmVudDtIKHJqKX1cbmZ1bmN0aW9uIFFqKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLHBmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJkdmKCk7YnJlYWs7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7YnJlYWs7Y2FzZSA1OmhoKGQpO2JyZWFrO2Nhc2UgNDpmaCgpO2JyZWFrO2Nhc2UgMTM6SChQKTticmVhaztjYXNlIDE5OkgoUCk7YnJlYWs7Y2FzZSAxMDpyZyhkKTticmVhaztjYXNlIDIzOmNhc2UgMjQ6S2koKX1jPWMucmV0dXJufVU9YTtZPVRnKGEuY3VycmVudCxudWxsKTtXPXFqPXRqPWI7Vj0wO3NqPW51bGw7dWo9SGk9RGc9MH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG97dmFyIGM9WTt0cnl7cWcoKTt2aC5jdXJyZW50PUdoO2lmKHloKXtmb3IodmFyIGQ9Ui5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH15aD0hMX14aD0wO1Q9Uz1SPW51bGw7emg9ITE7cGouY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Y9MTtzaj1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVc7aC5mbGFnc3w9MjA0ODtoLmZpcnN0RWZmZWN0PWgubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1rJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLnRoZW4pe3ZhciBsPWs7aWYoMD09PShoLm1vZGUmMikpe3ZhciBuPWguYWx0ZXJuYXRlO24/KGgudXBkYXRlUXVldWU9bi51cGRhdGVRdWV1ZSxoLm1lbW9pemVkU3RhdGU9bi5tZW1vaXplZFN0YXRlLGgubGFuZXM9bi5sYW5lcyk6XG4oaC51cGRhdGVRdWV1ZT1udWxsLGgubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgQT0wIT09KFAuY3VycmVudCYxKSxwPWc7ZG97dmFyIEM7aWYoQz0xMz09PXAudGFnKXt2YXIgeD1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXgpQz1udWxsIT09eC5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIHc9cC5tZW1vaXplZFByb3BzO0M9dm9pZCAwPT09dy5mYWxsYmFjaz8hMTohMCE9PXcudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6QT8hMTohMH19aWYoQyl7dmFyIHo9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09eil7dmFyIHU9bmV3IFNldDt1LmFkZChsKTtwLnVwZGF0ZVF1ZXVlPXV9ZWxzZSB6LmFkZChsKTtpZigwPT09KHAubW9kZSYyKSl7cC5mbGFnc3w9NjQ7aC5mbGFnc3w9MTYzODQ7aC5mbGFncyY9LTI5ODE7aWYoMT09PWgudGFnKWlmKG51bGw9PT1oLmFsdGVybmF0ZSloLnRhZz0xNztlbHNle3ZhciB0PXpnKC0xLDEpO3QudGFnPTI7QWcoaCx0KX1oLmxhbmVzfD0xO2JyZWFrIGF9az1cbnZvaWQgMDtoPWI7dmFyIHE9Zi5waW5nQ2FjaGU7bnVsbD09PXE/KHE9Zi5waW5nQ2FjaGU9bmV3IE9pLGs9bmV3IFNldCxxLnNldChsLGspKTooaz1xLmdldChsKSx2b2lkIDA9PT1rJiYoaz1uZXcgU2V0LHEuc2V0KGwsaykpKTtpZighay5oYXMoaCkpe2suYWRkKGgpO3ZhciB2PVlqLmJpbmQobnVsbCxmLGwsaCk7bC50aGVuKHYsdil9cC5mbGFnc3w9NDA5NjtwLmxhbmVzPWI7YnJlYWsgYX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKTtrPUVycm9yKChSYShoLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIpfTUhPT1WJiYoVj0yKTtrPU1pKGssaCk7cD1cbmc7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6Zj1rO3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgSj1QaShwLGYsYik7QmcocCxKKTticmVhayBhO2Nhc2UgMTpmPWs7dmFyIEs9cC50eXBlLFE9cC5zdGF0ZU5vZGU7aWYoMD09PShwLmZsYWdzJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBLLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PVEmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBRLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKFEpKSkpe3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgTD1TaShwLGYsYik7QmcocCxMKTticmVhayBhfX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKX1aaihjKX1jYXRjaCh2YSl7Yj12YTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfVxuZnVuY3Rpb24gUGooKXt2YXIgYT1vai5jdXJyZW50O29qLmN1cnJlbnQ9R2g7cmV0dXJuIG51bGw9PT1hP0doOmF9ZnVuY3Rpb24gVGooYSxiKXt2YXIgYz1YO1h8PTE2O3ZhciBkPVBqKCk7VT09PWEmJlc9PT1ifHxRaihhLGIpO2RvIHRyeXthaygpO2JyZWFrfWNhdGNoKGUpe1NqKGEsZSl9d2hpbGUoMSk7cWcoKTtYPWM7b2ouY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHkoMjYxKSk7VT1udWxsO1c9MDtyZXR1cm4gVn1mdW5jdGlvbiBhaygpe2Zvcig7bnVsbCE9PVk7KWJrKFkpfWZ1bmN0aW9uIFJqKCl7Zm9yKDtudWxsIT09WSYmIVFmKCk7KWJrKFkpfWZ1bmN0aW9uIGJrKGEpe3ZhciBiPWNrKGEuYWx0ZXJuYXRlLGEscWopO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9aaihhKTpZPWI7cGouY3VycmVudD1udWxsfVxuZnVuY3Rpb24gWmooYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYyMDQ4KSl7Yz1HaShjLGIscWopO2lmKG51bGwhPT1jKXtZPWM7cmV0dXJufWM9YjtpZigyNCE9PWMudGFnJiYyMyE9PWMudGFnfHxudWxsPT09Yy5tZW1vaXplZFN0YXRlfHwwIT09KHFqJjEwNzM3NDE4MjQpfHwwPT09KGMubW9kZSY0KSl7Zm9yKHZhciBkPTAsZT1jLmNoaWxkO251bGwhPT1lOylkfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxlPWUuc2libGluZztjLmNoaWxkTGFuZXM9ZH1udWxsIT09YSYmMD09PShhLmZsYWdzJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PWIuZmlyc3RFZmZlY3QpLG51bGwhPT1iLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yi5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCksMTxiLmZsYWdzJiYobnVsbCE9PVxuYS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWI6YS5maXJzdEVmZmVjdD1iLGEubGFzdEVmZmVjdD1iKSl9ZWxzZXtjPUxpKGIpO2lmKG51bGwhPT1jKXtjLmZsYWdzJj0yMDQ3O1k9YztyZXR1cm59bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZmxhZ3N8PTIwNDgpfWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09ViYmKFY9NSl9ZnVuY3Rpb24gVWooYSl7dmFyIGI9ZWcoKTtnZyg5OSxkay5iaW5kKG51bGwsYSxiKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBkayhhLGIpe2RvIE9qKCk7d2hpbGUobnVsbCE9PXlqKTtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcms7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHkoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDt2YXIgZD1jLmxhbmVzfGMuY2hpbGRMYW5lcyxlPWQsZj1hLnBlbmRpbmdMYW5lcyZ+ZTthLnBlbmRpbmdMYW5lcz1lO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWU7YS5tdXRhYmxlUmVhZExhbmVzJj1lO2EuZW50YW5nbGVkTGFuZXMmPWU7ZT1hLmVudGFuZ2xlbWVudHM7Zm9yKHZhciBnPWEuZXZlbnRUaW1lcyxoPWEuZXhwaXJhdGlvblRpbWVzOzA8Zjspe3ZhciBrPTMxLVZjKGYpLGw9MTw8aztlW2tdPTA7Z1trXT0tMTtoW2tdPS0xO2YmPX5sfW51bGwhPT1cbkNqJiYwPT09KGQmMjQpJiZDai5oYXMoYSkmJkNqLmRlbGV0ZShhKTthPT09VSYmKFk9VT1udWxsLFc9MCk7MTxjLmZsYWdzP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZD1jLmZpcnN0RWZmZWN0KTpkPWM6ZD1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1kKXtlPVg7WHw9MzI7cGouY3VycmVudD1udWxsO2tmPWZkO2c9TmUoKTtpZihPZShnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyloPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOmlmKGg9KGg9Zy5vd25lckRvY3VtZW50KSYmaC5kZWZhdWx0Vmlld3x8d2luZG93LChsPWguZ2V0U2VsZWN0aW9uJiZoLmdldFNlbGVjdGlvbigpKSYmMCE9PWwucmFuZ2VDb3VudCl7aD1sLmFuY2hvck5vZGU7Zj1sLmFuY2hvck9mZnNldDtrPWwuZm9jdXNOb2RlO2w9bC5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxrLm5vZGVUeXBlfWNhdGNoKHZhKXtoPW51bGw7XG5icmVhayBhfXZhciBuPTAsQT0tMSxwPS0xLEM9MCx4PTAsdz1nLHo9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB1Ozspe3chPT1ofHwwIT09ZiYmMyE9PXcubm9kZVR5cGV8fChBPW4rZik7dyE9PWt8fDAhPT1sJiYzIT09dy5ub2RlVHlwZXx8KHA9bitsKTszPT09dy5ub2RlVHlwZSYmKG4rPXcubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh1PXcuZmlyc3RDaGlsZCkpYnJlYWs7ej13O3c9dX1mb3IoOzspe2lmKHc9PT1nKWJyZWFrIGI7ej09PWgmJisrQz09PWYmJihBPW4pO3o9PT1rJiYrK3g9PT1sJiYocD1uKTtpZihudWxsIT09KHU9dy5uZXh0U2libGluZykpYnJlYWs7dz16O3o9dy5wYXJlbnROb2RlfXc9dX1oPS0xPT09QXx8LTE9PT1wP251bGw6e3N0YXJ0OkEsZW5kOnB9fWVsc2UgaD1udWxsO2g9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1udWxsO2xmPXtmb2N1c2VkRWxlbTpnLHNlbGVjdGlvblJhbmdlOmh9O2ZkPSExO0lqPW51bGw7Smo9ITE7Wj1kO2RvIHRyeXtlaygpfWNhdGNoKHZhKXtpZihudWxsPT09XG5aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO0lqPW51bGw7Wj1kO2RvIHRyeXtmb3IoZz1hO251bGwhPT1aOyl7dmFyIHQ9Wi5mbGFnczt0JjE2JiZwYihaLnN0YXRlTm9kZSxcIlwiKTtpZih0JjEyOCl7dmFyIHE9Wi5hbHRlcm5hdGU7aWYobnVsbCE9PXEpe3ZhciB2PXEucmVmO251bGwhPT12JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHY/dihudWxsKTp2LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaCh0JjEwMzgpe2Nhc2UgMjpmaihaKTtaLmZsYWdzJj0tMzticmVhaztjYXNlIDY6ZmooWik7Wi5mbGFncyY9LTM7aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSAxMDI0OlouZmxhZ3MmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpaLmZsYWdzJj0tMTAyNTtpaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDQ6aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSA4Omg9WjtjaihnLGgpO3ZhciBKPWguYWx0ZXJuYXRlO2RqKGgpO251bGwhPT1cbkomJmRqKEopfVo9Wi5uZXh0RWZmZWN0fX1jYXRjaCh2YSl7aWYobnVsbD09PVopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7dj1sZjtxPU5lKCk7dD12LmZvY3VzZWRFbGVtO2c9di5zZWxlY3Rpb25SYW5nZTtpZihxIT09dCYmdCYmdC5vd25lckRvY3VtZW50JiZNZSh0Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHQpKXtudWxsIT09ZyYmT2UodCkmJihxPWcuc3RhcnQsdj1nLmVuZCx2b2lkIDA9PT12JiYodj1xKSxcInNlbGVjdGlvblN0YXJ0XCJpbiB0Pyh0LnNlbGVjdGlvblN0YXJ0PXEsdC5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odix0LnZhbHVlLmxlbmd0aCkpOih2PShxPXQub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZxLmRlZmF1bHRWaWV3fHx3aW5kb3csdi5nZXRTZWxlY3Rpb24mJih2PXYuZ2V0U2VsZWN0aW9uKCksaD10LnRleHRDb250ZW50Lmxlbmd0aCxKPU1hdGgubWluKGcuc3RhcnQsaCksZz12b2lkIDA9PT1cbmcuZW5kP0o6TWF0aC5taW4oZy5lbmQsaCksIXYuZXh0ZW5kJiZKPmcmJihoPWcsZz1KLEo9aCksaD1MZSh0LEopLGY9TGUodCxnKSxoJiZmJiYoMSE9PXYucmFuZ2VDb3VudHx8di5hbmNob3JOb2RlIT09aC5ub2RlfHx2LmFuY2hvck9mZnNldCE9PWgub2Zmc2V0fHx2LmZvY3VzTm9kZSE9PWYubm9kZXx8di5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSYmKHE9cS5jcmVhdGVSYW5nZSgpLHEuc2V0U3RhcnQoaC5ub2RlLGgub2Zmc2V0KSx2LnJlbW92ZUFsbFJhbmdlcygpLEo+Zz8odi5hZGRSYW5nZShxKSx2LmV4dGVuZChmLm5vZGUsZi5vZmZzZXQpKToocS5zZXRFbmQoZi5ub2RlLGYub2Zmc2V0KSx2LmFkZFJhbmdlKHEpKSkpKSk7cT1bXTtmb3Iodj10O3Y9di5wYXJlbnROb2RlOykxPT09di5ub2RlVHlwZSYmcS5wdXNoKHtlbGVtZW50OnYsbGVmdDp2LnNjcm9sbExlZnQsdG9wOnYuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHQuZm9jdXMmJnQuZm9jdXMoKTtmb3IodD1cbjA7dDxxLmxlbmd0aDt0Kyspdj1xW3RdLHYuZWxlbWVudC5zY3JvbGxMZWZ0PXYubGVmdCx2LmVsZW1lbnQuc2Nyb2xsVG9wPXYudG9wfWZkPSEha2Y7bGY9a2Y9bnVsbDthLmN1cnJlbnQ9YztaPWQ7ZG8gdHJ5e2Zvcih0PWE7bnVsbCE9PVo7KXt2YXIgSz1aLmZsYWdzO0smMzYmJllpKHQsWi5hbHRlcm5hdGUsWik7aWYoSyYxMjgpe3E9dm9pZCAwO3ZhciBRPVoucmVmO2lmKG51bGwhPT1RKXt2YXIgTD1aLnN0YXRlTm9kZTtzd2l0Y2goWi50YWcpe2Nhc2UgNTpxPUw7YnJlYWs7ZGVmYXVsdDpxPUx9XCJmdW5jdGlvblwiPT09dHlwZW9mIFE/UShxKTpRLmN1cnJlbnQ9cX19Wj1aLm5leHRFZmZlY3R9fWNhdGNoKHZhKXtpZihudWxsPT09Wil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTtaPW51bGw7JGYoKTtYPWV9ZWxzZSBhLmN1cnJlbnQ9YztpZih4ail4aj0hMSx5aj1hLHpqPWI7ZWxzZSBmb3IoWj1kO251bGwhPT1aOyliPVxuWi5uZXh0RWZmZWN0LFoubmV4dEVmZmVjdD1udWxsLFouZmxhZ3MmOCYmKEs9WixLLnNpYmxpbmc9bnVsbCxLLnN0YXRlTm9kZT1udWxsKSxaPWI7ZD1hLnBlbmRpbmdMYW5lczswPT09ZCYmKFRpPW51bGwpOzE9PT1kP2E9PT1Faj9EaisrOihEaj0wLEVqPWEpOkRqPTA7Yz1jLnN0YXRlTm9kZTtpZihNZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIE1mLm9uQ29tbWl0RmliZXJSb290KXRyeXtNZi5vbkNvbW1pdEZpYmVyUm9vdChMZixjLHZvaWQgMCw2ND09PShjLmN1cnJlbnQuZmxhZ3MmNjQpKX1jYXRjaCh2YSl7fU1qKGEsTygpKTtpZihRaSl0aHJvdyBRaT0hMSxhPVJpLFJpPW51bGwsYTtpZigwIT09KFgmOCkpcmV0dXJuIG51bGw7aWcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGVrKCl7Zm9yKDtudWxsIT09Wjspe3ZhciBhPVouYWx0ZXJuYXRlO0pqfHxudWxsPT09SWp8fCgwIT09KFouZmxhZ3MmOCk/ZGMoWixJaikmJihKaj0hMCk6MTM9PT1aLnRhZyYmbWooYSxaKSYmZGMoWixJaikmJihKaj0hMCkpO3ZhciBiPVouZmxhZ3M7MCE9PShiJjI1NikmJlhpKGEsWik7MD09PShiJjUxMil8fHhqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpO1o9Wi5uZXh0RWZmZWN0fX1mdW5jdGlvbiBPaigpe2lmKDkwIT09emope3ZhciBhPTk3PHpqPzk3OnpqO3pqPTkwO3JldHVybiBnZyhhLGZrKX1yZXR1cm4hMX1mdW5jdGlvbiAkaShhLGIpe0FqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1mdW5jdGlvbiBaaShhLGIpe0JqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1cbmZ1bmN0aW9uIGZrKCl7aWYobnVsbD09PXlqKXJldHVybiExO3ZhciBhPXlqO3lqPW51bGw7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMzMSkpO3ZhciBiPVg7WHw9MzI7dmFyIGM9Qmo7Qmo9W107Zm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKz0yKXt2YXIgZT1jW2RdLGY9Y1tkKzFdLGc9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcpdHJ5e2coKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWM9QWo7QWo9W107Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrPTIpe2U9Y1tkXTtmPWNbZCsxXTt0cnl7dmFyIGg9ZS5jcmVhdGU7ZS5kZXN0cm95PWgoKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWZvcihoPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09aDspYT1oLm5leHRFZmZlY3QsaC5uZXh0RWZmZWN0PW51bGwsaC5mbGFncyY4JiYoaC5zaWJsaW5nPVxubnVsbCxoLnN0YXRlTm9kZT1udWxsKSxoPWE7WD1iO2lnKCk7cmV0dXJuITB9ZnVuY3Rpb24gZ2soYSxiLGMpe2I9TWkoYyxiKTtiPVBpKGEsYiwxKTtBZyhhLGIpO2I9SGcoKTthPUtqKGEsMSk7bnVsbCE9PWEmJigkYyhhLDEsYiksTWooYSxiKSl9XG5mdW5jdGlvbiBXaShhLGIpe2lmKDM9PT1hLnRhZylnayhhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe2drKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKGQpKSl7YT1NaShiLGEpO3ZhciBlPVNpKGMsYSwxKTtBZyhjLGUpO2U9SGcoKTtjPUtqKGMsMSk7aWYobnVsbCE9PWMpJGMoYywxLGUpLE1qKGMsZSk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhkKSkpdHJ5e2QuY29tcG9uZW50RGlkQ2F0Y2goYixhKX1jYXRjaChmKXt9YnJlYWt9fWM9Yy5yZXR1cm59fVxuZnVuY3Rpb24gWWooYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPUhnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZjO1U9PT1hJiYoVyZjKT09PWMmJig0PT09Vnx8Mz09PVYmJihXJjYyOTE0NTYwKT09PVcmJjUwMD5PKCktamo/UWooYSwwKTp1anw9Yyk7TWooYSxiKX1mdW5jdGlvbiBsaihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPWEubW9kZSwwPT09KGImMik/Yj0xOjA9PT0oYiY0KT9iPTk5PT09ZWcoKT8xOjI6KDA9PT1HaiYmKEdqPXRqKSxiPVljKDYyOTE0NTYwJn5HaiksMD09PWImJihiPTQxOTQzMDQpKSk7Yz1IZygpO2E9S2ooYSxiKTtudWxsIT09YSYmKCRjKGEsYixjKSxNaihhLGMpKX12YXIgY2s7XG5jaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5sYW5lcztpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8Ti5jdXJyZW50KXVnPSEwO2Vsc2UgaWYoMCE9PShjJmQpKXVnPTAhPT0oYS5mbGFncyYxNjM4NCk/ITA6ITE7ZWxzZXt1Zz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpyaShiKTtzaCgpO2JyZWFrO2Nhc2UgNTpnaChiKTticmVhaztjYXNlIDE6RmYoYi50eXBlKSYmSmYoYik7YnJlYWs7Y2FzZSA0OmVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTt2YXIgZT1iLnR5cGUuX2NvbnRleHQ7SShtZyxlLl9jdXJyZW50VmFsdWUpO2UuX2N1cnJlbnRWYWx1ZT1kO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIHRpKGEsYixjKTtJKFAsUC5jdXJyZW50JjEpO2I9aGkoYSxiLGMpO3JldHVybiBudWxsIT09XG5iP2Iuc2libGluZzpudWxsfUkoUCxQLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZiLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyY2NCkpe2lmKGQpcmV0dXJuIEFpKGEsYixjKTtiLmZsYWdzfD02NH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0koUCxQLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIGIubGFuZXM9MCxtaShhLGIsYyl9cmV0dXJuIGhpKGEsYixjKX1lbHNlIHVnPSExO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9RWYoYixNLmN1cnJlbnQpO3RnKGIsYyk7ZT1DaChudWxsLGIsZCxhLGUsYyk7Yi5mbGFnc3w9MTtpZihcIm9iamVjdFwiPT09XG50eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoRmYoZCkpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3hnKGIpO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZHZyhiLGQsZyxhKTtlLnVwZGF0ZXI9S2c7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFscz1iO09nKGIsZCxhLGMpO2I9cWkobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsZmkobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO2E6e251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO1xuYT1iLnBlbmRpbmdQcm9wcztmPWUuX2luaXQ7ZT1mKGUuX3BheWxvYWQpO2IudHlwZT1lO2Y9Yi50YWc9aGsoZSk7YT1sZyhlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1saShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9cGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1naShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWlpKG51bGwsYixlLGxnKGUudHlwZSxhKSxkLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IoeSgzMDYsZSxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxsaShhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxwaShhLGIsZCxlLGMpO2Nhc2UgMzpyaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHkoMjgyKSk7XG5kPWIucGVuZGluZ1Byb3BzO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7eWcoYSxiKTtDZyhiLGQsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKXNoKCksYj1oaShhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGY9ZS5oeWRyYXRlKWtoPXJmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksamg9YixmPWxoPSEwO2lmKGYpe2E9ZS5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhO2lmKG51bGwhPWEpZm9yKGU9MDtlPGEubGVuZ3RoO2UrPTIpZj1hW2VdLGYuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9YVtlKzFdLHRoLnB1c2goZik7Yz1aZyhiLG51bGwsZCxjKTtmb3IoYi5jaGlsZD1jO2M7KWMuZmxhZ3M9Yy5mbGFncyYtM3wxMDI0LGM9Yy5zaWJsaW5nfWVsc2UgZmkoYSxiLGQsYyksc2goKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBnaChiKSxudWxsPT09YSYmXG5waChiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLG5mKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZuZihkLGYpJiYoYi5mbGFnc3w9MTYpLG9pKGEsYiksZmkoYSxiLGcsYyksYi5jaGlsZDtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZwaChiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHRpKGEsYixjKTtjYXNlIDQ6cmV0dXJuIGVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPVlnKGIsbnVsbCxkLGMpOmZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxnaShhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG5jKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7dmFyIGg9Yi50eXBlLl9jb250ZXh0O0kobWcsaC5fY3VycmVudFZhbHVlKTtoLl9jdXJyZW50VmFsdWU9ZjtpZihudWxsIT09ZylpZihoPWcudmFsdWUsZj1IZShoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDAsMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhTi5jdXJyZW50KXtiPWhpKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPVxuay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihsPXpnKC0xLGMmLWMpLGwudGFnPTIsQWcoaCxsKSk7aC5sYW5lc3w9YztsPWguYWx0ZXJuYXRlO251bGwhPT1sJiYobC5sYW5lc3w9Yyk7c2coaC5yZXR1cm4sYyk7ay5sYW5lc3w9YzticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1nfWZpKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLHRnKGIsYyksZT12ZyhlLFxuZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmZsYWdzfD0xLGZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1sZyhlLGIucGVuZGluZ1Byb3BzKSxmPWxnKGUudHlwZSxmKSxpaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4ga2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksYi50YWc9MSxGZihkKT8oYT0hMCxKZihiKSk6YT0hMSx0ZyhiLGMpLE1nKGIsZCxlKSxPZyhiLGQsZSxjKSxxaShudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIEFpKGEsYixjKTtjYXNlIDIzOnJldHVybiBtaShhLGIsYyk7Y2FzZSAyNDpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHkoMTU2LGIudGFnKSk7XG59O2Z1bmN0aW9uIGlrKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5mbGFncz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRMYW5lcz10aGlzLmxhbmVzPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBuaChhLGIsYyxkKXtyZXR1cm4gbmV3IGlrKGEsYixjLGQpfWZ1bmN0aW9uIGppKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9XG5mdW5jdGlvbiBoayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gamkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PUFhKXJldHVybiAxMTtpZihhPT09RGEpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gVGcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1uaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLnR5cGU9YS50eXBlLGMuZmxhZ3M9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBWZyhhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpamkoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgdWE6cmV0dXJuIFhnKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgSGE6Zz04O2V8PTE2O2JyZWFrO2Nhc2Ugd2E6Zz04O2V8PTE7YnJlYWs7Y2FzZSB4YTpyZXR1cm4gYT1uaCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPXhhLGEudHlwZT14YSxhLmxhbmVzPWYsYTtjYXNlIEJhOnJldHVybiBhPW5oKDEzLGMsYixlKSxhLnR5cGU9QmEsYS5lbGVtZW50VHlwZT1CYSxhLmxhbmVzPWYsYTtjYXNlIENhOnJldHVybiBhPW5oKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUNhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHZpKGMsZSxmLGIpO2Nhc2UgSmE6cmV0dXJuIGE9bmgoMjQsYyxiLGUpLGEuZWxlbWVudFR5cGU9SmEsYS5sYW5lcz1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09XG50eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgeWE6Zz0xMDticmVhayBhO2Nhc2UgemE6Zz05O2JyZWFrIGE7Y2FzZSBBYTpnPTExO2JyZWFrIGE7Y2FzZSBEYTpnPTE0O2JyZWFrIGE7Y2FzZSBFYTpnPTE2O2Q9bnVsbDticmVhayBhO2Nhc2UgRmE6Zz0yMjticmVhayBhfXRocm93IEVycm9yKHkoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9bmgoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IubGFuZXM9ZjtyZXR1cm4gYn1mdW5jdGlvbiBYZyhhLGIsYyxkKXthPW5oKDcsYSxkLGIpO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiB2aShhLGIsYyxkKXthPW5oKDIzLGEsZCxiKTthLmVsZW1lbnRUeXBlPUlhO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiBVZyhhLGIsYyl7YT1uaCg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBXZyhhLGIsYyl7Yj1uaCg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGprKGEsYixjKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPVpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPVpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPVpjKDApO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1udWxsfVxuZnVuY3Rpb24ga2soYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp0YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGxrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUhnKCksZz1JZyhlKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbHM7Yjp7aWYoWmIoYykhPT1jfHwxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgxNzApKTt2YXIgaD1jO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmg9aC5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihGZihoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHkoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEZmKGspKXtjPUlmKGMsayxoKTticmVhayBhfX1jPWh9ZWxzZSBjPUNmO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9emcoZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09XG5kJiYoYi5jYWxsYmFjaz1kKTtBZyhlLGIpO0pnKGUsZyxmKTtyZXR1cm4gZ31mdW5jdGlvbiBtayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIG5rKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBvayhhLGIpe25rKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZuayhhLGIpfWZ1bmN0aW9uIHBrKCl7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBxayhhLGIsYyl7dmFyIGQ9bnVsbCE9YyYmbnVsbCE9Yy5oeWRyYXRpb25PcHRpb25zJiZjLmh5ZHJhdGlvbk9wdGlvbnMubXV0YWJsZVNvdXJjZXN8fG51bGw7Yz1uZXcgamsoYSxiLG51bGwhPWMmJiEwPT09Yy5oeWRyYXRlKTtiPW5oKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtjLmN1cnJlbnQ9YjtiLnN0YXRlTm9kZT1jO3hnKGIpO2FbZmZdPWMuY3VycmVudDtjZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKXtiPWRbYV07dmFyIGU9Yi5fZ2V0VmVyc2lvbjtlPWUoYi5fc291cmNlKTtudWxsPT1jLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE/Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVtiLGVdOmMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKGIsZSl9dGhpcy5faW50ZXJuYWxSb290PWN9XG5xay5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe2xrKGEsdGhpcy5faW50ZXJuYWxSb290LG51bGwsbnVsbCl9O3FrLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290LGI9YS5jb250YWluZXJJbmZvO2xrKG51bGwsYSxudWxsLGZ1bmN0aW9uKCl7YltmZl09bnVsbH0pfTtmdW5jdGlvbiByayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9XG5mdW5jdGlvbiBzayhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IHFrKGEsMCxiP3toeWRyYXRlOiEwfTp2b2lkIDApfVxuZnVuY3Rpb24gdGsoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1tayhnKTtoLmNhbGwoYSl9fWxrKGIsZyxhLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9c2soYyxkKTtnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9bWsoZyk7ay5jYWxsKGEpfX1YaihmdW5jdGlvbigpe2xrKGIsZyxhLGUpfSl9cmV0dXJuIG1rKGcpfWVjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCk7SmcoYSw0LGIpO29rKGEsNCl9fTtmYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpO0pnKGEsNjcxMDg4NjQsYik7b2soYSw2NzEwODg2NCl9fTtcbmdjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCksYz1JZyhhKTtKZyhhLGMsYik7b2soYSxjKX19O2hjPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGIoKX07XG55Yj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmFiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1EYihkKTtpZighZSl0aHJvdyBFcnJvcih5KDkwKSk7V2EoZCk7YWIoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZmYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0diPVdqO1xuSGI9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1YO1h8PTQ7dHJ5e3JldHVybiBnZyg5OCxhLmJpbmQobnVsbCxiLGMsZCxlKSl9ZmluYWxseXtYPWYsMD09PVgmJih3aigpLGlnKCkpfX07SWI9ZnVuY3Rpb24oKXswPT09KFgmNDkpJiYoVmooKSxPaigpKX07SmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO1h8PTI7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19O2Z1bmN0aW9uIHVrKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIGtrKGEsYixudWxsLGMpfXZhciB2az17RXZlbnRzOltDYix1ZSxEYixFYixGYixPaix7Y3VycmVudDohMX1dfSx3az17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6d2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNy4wLjFcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHhrPXtidW5kbGVUeXBlOndrLmJ1bmRsZVR5cGUsdmVyc2lvbjp3ay52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6d2sucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp3ay5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpyYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9Y2MoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOndrLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbnBrLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGx9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgeWs9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF5ay5pc0Rpc2FibGVkJiZ5ay5zdXBwb3J0c0ZpYmVyKXRyeXtMZj15ay5pbmplY3QoeGspLE1mPXlrfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD12aztleHBvcnRzLmNyZWF0ZVBvcnRhbD11aztcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IoeSgxODgpKTt0aHJvdyBFcnJvcih5KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWNjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO2lmKDAhPT0oYyY0OCkpcmV0dXJuIGEoYik7WHw9MTt0cnl7aWYoYSlyZXR1cm4gZ2coOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7WD1jLGlnKCl9fTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiB0ayhudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIHRrKG51bGwsYSxiLCExLGMpfTtleHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIXJrKGEpKXRocm93IEVycm9yKHkoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhYaihmdW5jdGlvbigpe3RrKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVtmZl09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPVdqO2V4cG9ydHMudW5zdGFibGVfY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHVrKGEsYiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCl9O1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighcmsoYykpdGhyb3cgRXJyb3IoeSgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFscyl0aHJvdyBFcnJvcih5KDM4KSk7cmV0dXJuIHRrKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjFcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4xXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj02MDEwMyxwPTYwMTA2O2V4cG9ydHMuRnJhZ21lbnQ9NjAxMDc7ZXhwb3J0cy5TdHJpY3RNb2RlPTYwMTA4O2V4cG9ydHMuUHJvZmlsZXI9NjAxMTQ7dmFyIHE9NjAxMDkscj02MDExMCx0PTYwMTEyO2V4cG9ydHMuU3VzcGVuc2U9NjAxMTM7dmFyIHU9NjAxMTUsdj02MDExNjtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciB3PVN5bWJvbC5mb3I7bj13KFwicmVhY3QuZWxlbWVudFwiKTtwPXcoXCJyZWFjdC5wb3J0YWxcIik7ZXhwb3J0cy5GcmFnbWVudD13KFwicmVhY3QuZnJhZ21lbnRcIik7ZXhwb3J0cy5TdHJpY3RNb2RlPXcoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTtleHBvcnRzLlByb2ZpbGVyPXcoXCJyZWFjdC5wcm9maWxlclwiKTtxPXcoXCJyZWFjdC5wcm92aWRlclwiKTtyPXcoXCJyZWFjdC5jb250ZXh0XCIpO3Q9dyhcInJlYWN0LmZvcndhcmRfcmVmXCIpO2V4cG9ydHMuU3VzcGVuc2U9dyhcInJlYWN0LnN1c3BlbnNlXCIpO3U9dyhcInJlYWN0Lm1lbW9cIik7dj13KFwicmVhY3QubGF6eVwiKX12YXIgeD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiB5KGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT14JiZhW3hdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9ZnVuY3Rpb24geihhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1cbnZhciBBPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxCPXt9O2Z1bmN0aW9uIEMoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX1DLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0MucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcih6KDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtDLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIEQoKXt9RC5wcm90b3R5cGU9Qy5wcm90b3R5cGU7ZnVuY3Rpb24gRShhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1CO3RoaXMudXBkYXRlcj1jfHxBfXZhciBGPUUucHJvdG90eXBlPW5ldyBEO0YuY29uc3RydWN0b3I9RTtsKEYsQy5wcm90b3R5cGUpO0YuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEc9e2N1cnJlbnQ6bnVsbH0sSD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEk9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEooYSxiLGMpe3ZhciBlLGQ9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSC5jYWxsKGIsZSkmJiFJLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWRbZV0mJihkW2VdPWdbZV0pO3JldHVybnskJHR5cGVvZjpuLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpkLF9vd25lcjpHLmN1cnJlbnR9fVxuZnVuY3Rpb24gSyhhLGIpe3JldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTChhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bn1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE09L1xcLysvZztmdW5jdGlvbiBOKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gTyhhLGIsYyxlLGQpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBuOmNhc2UgcDpoPSEwfX1pZihoKXJldHVybiBoPWEsZD1kKGgpLGE9XCJcIj09PWU/XCIuXCIrTihoLDApOmUsQXJyYXkuaXNBcnJheShkKT8oYz1cIlwiLG51bGwhPWEmJihjPWEucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSxPKGQsYixjLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9ZCYmKEwoZCkmJihkPUsoZCxjKyghZC5rZXl8fGgmJmgua2V5PT09ZC5rZXk/XCJcIjooXCJcIitkLmtleSkucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGQpKSwxO2g9MDtlPVwiXCI9PT1lP1wiLlwiOmUrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGc9XG4wO2c8YS5sZW5ndGg7ZysrKXtrPWFbZ107dmFyIGY9ZStOKGssZyk7aCs9TyhrLGIsYyxmLGQpfWVsc2UgaWYoZj15KGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1lK04oayxnKyspLGgrPU8oayxiLGMsZixkKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9XCJcIithLEVycm9yKHooMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikpO3JldHVybiBofWZ1bmN0aW9uIFAoYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W10sZD0wO08oYSxlLFwiXCIsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYi5jYWxsKGMsYSxkKyspfSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBRKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7YS5fc3RhdHVzPTA7YS5fcmVzdWx0PWI7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KX1pZigxPT09YS5fc3RhdHVzKXJldHVybiBhLl9yZXN1bHQ7dGhyb3cgYS5fcmVzdWx0O312YXIgUj17Y3VycmVudDpudWxsfTtmdW5jdGlvbiBTKCl7dmFyIGE9Ui5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKHooMzIxKSk7cmV0dXJuIGF9dmFyIFQ9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6UixSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7dHJhbnNpdGlvbjowfSxSZWFjdEN1cnJlbnRPd25lcjpHLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07XG5leHBvcnRzLkNoaWxkcmVuPXttYXA6UCxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtQKGEsZnVuY3Rpb24oKXtiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sYyl9LGNvdW50OmZ1bmN0aW9uKGEpe3ZhciBiPTA7UChhLGZ1bmN0aW9uKCl7YisrfSk7cmV0dXJuIGJ9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIFAoYSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pfHxbXX0sb25seTpmdW5jdGlvbihhKXtpZighTChhKSl0aHJvdyBFcnJvcih6KDE0MykpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9QztleHBvcnRzLlB1cmVDb21wb25lbnQ9RTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPVQ7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoeigyNjcsYSkpO3ZhciBlPWwoe30sYS5wcm9wcyksZD1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Ry5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilILmNhbGwoYixmKSYmIUkuaGFzT3duUHJvcGVydHkoZikmJihlW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO2Zvcih2YXIgbT0wO208ZjttKyspZ1ttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWd9cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLnR5cGUsXG5rZXk6ZCxyZWY6ayxwcm9wczplLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6cixfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnEsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PUo7ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPUouYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtleHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnQscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PUw7XG5leHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYsX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpRfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnUsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUNvbnRleHQoYSxiKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFMoKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX07XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlUmVkdWNlcihhLGIsYyl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlU3RhdGUoYSl9O2V4cG9ydHMudmVyc2lvbj1cIjE3LjAuMVwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMjAuMVxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZixnLGgsaztpZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgdD1udWxsLHU9bnVsbCx3PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXQpdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dCghMCxhKTt0PW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh3LDApLGI7fX07Zj1mdW5jdGlvbihhKXtudWxsIT09dD9zZXRUaW1lb3V0KGYsMCxhKToodD1hLHNldFRpbWVvdXQodywwKSl9O2c9ZnVuY3Rpb24oYSxiKXt1PXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dCh1KX07ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiExfTtrPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHg9d2luZG93LnNldFRpbWVvdXQseT13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIHo9XG53aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgeiYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIil9dmFyIEE9ITEsQj1udWxsLEM9LTEsRD01LEU9MDtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PVxuRX07az1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6RD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEY9bmV3IE1lc3NhZ2VDaGFubmVsLEc9Ri5wb3J0MjtGLnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe2lmKG51bGwhPT1CKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0U9YStEO3RyeXtCKCEwLGEpP0cucG9zdE1lc3NhZ2UobnVsbCk6KEE9ITEsQj1udWxsKX1jYXRjaChiKXt0aHJvdyBHLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEE9ITF9O2Y9ZnVuY3Rpb24oYSl7Qj1hO0F8fChBPSEwLEcucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7Qz1cbngoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3koQyk7Qz0tMX19ZnVuY3Rpb24gSChhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxJKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBKKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBLKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPkkobixjKSl2b2lkIDAhPT1yJiYwPkkocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPkkocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEkoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIEw9W10sTT1bXSxOPTEsTz1udWxsLFA9MyxRPSExLFI9ITEsUz0hMTtcbmZ1bmN0aW9uIFQoYSl7Zm9yKHZhciBiPUooTSk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylLKE0pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpSyhNKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEgoTCxiKTtlbHNlIGJyZWFrO2I9SihNKX19ZnVuY3Rpb24gVShhKXtTPSExO1QoYSk7aWYoIVIpaWYobnVsbCE9PUooTCkpUj0hMCxmKFYpO2Vsc2V7dmFyIGI9SihNKTtudWxsIT09YiYmZyhVLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFYoYSxiKXtSPSExO1MmJihTPSExLGgoKSk7UT0hMDt2YXIgYz1QO3RyeXtUKGIpO2ZvcihPPUooTCk7bnVsbCE9PU8mJighKE8uZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkKCkpOyl7dmFyIGQ9Ty5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7Ty5jYWxsYmFjaz1udWxsO1A9Ty5wcmlvcml0eUxldmVsO3ZhciBlPWQoTy5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP08uY2FsbGJhY2s9ZTpPPT09SihMKSYmSyhMKTtUKGIpfWVsc2UgSyhMKTtPPUooTCl9aWYobnVsbCE9PU8pdmFyIG09ITA7ZWxzZXt2YXIgbj1KKE0pO251bGwhPT1uJiZnKFUsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e089bnVsbCxQPWMsUT0hMX19dmFyIFc9aztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O1xuZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtSfHxRfHwoUj0hMCxmKFYpKX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBQfTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEooTCl9O1xuZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChQKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1QfXZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7UD1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9VztleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVA7UD1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7UD1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOk4rKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLEgoTSxhKSxudWxsPT09SihMKSYmYT09PUooTSkmJihTP2goKTpTPSEwLGcoVSxjLWQpKSk6KGEuc29ydEluZGV4PWUsSChMLGEpLFJ8fFF8fChSPSEwLGYoVikpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1QO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtQPWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHRpZihfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdKSB7XG5cdFx0cmV0dXJuIF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0uZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IG1vZHVsZVsnZGVmYXVsdCddIDpcblx0XHQoKSA9PiBtb2R1bGU7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufSIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuL3Jlc2V0LmNzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRobmFtZSkge1xuICByZXR1cm4gcGF0aG5hbWUuY2hhckF0KDApID09PSAnLyc7XG59XG5cbi8vIEFib3V0IDEuNXggZmFzdGVyIHRoYW4gdGhlIHR3by1hcmcgdmVyc2lvbiBvZiBBcnJheSNzcGxpY2UoKVxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCwgayA9IGkgKyAxLCBuID0gbGlzdC5sZW5ndGg7IGsgPCBuOyBpICs9IDEsIGsgKz0gMSkge1xuICAgIGxpc3RbaV0gPSBsaXN0W2tdO1xuICB9XG5cbiAgbGlzdC5wb3AoKTtcbn1cblxuLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBoZWF2aWx5IG9uIG5vZGUncyB1cmwucGFyc2VcbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZSh0bywgZnJvbSkge1xuICBpZiAoZnJvbSA9PT0gdW5kZWZpbmVkKSBmcm9tID0gJyc7XG5cbiAgdmFyIHRvUGFydHMgPSAodG8gJiYgdG8uc3BsaXQoJy8nKSkgfHwgW107XG4gIHZhciBmcm9tUGFydHMgPSAoZnJvbSAmJiBmcm9tLnNwbGl0KCcvJykpIHx8IFtdO1xuXG4gIHZhciBpc1RvQWJzID0gdG8gJiYgaXNBYnNvbHV0ZSh0byk7XG4gIHZhciBpc0Zyb21BYnMgPSBmcm9tICYmIGlzQWJzb2x1dGUoZnJvbSk7XG4gIHZhciBtdXN0RW5kQWJzID0gaXNUb0FicyB8fCBpc0Zyb21BYnM7XG5cbiAgaWYgKHRvICYmIGlzQWJzb2x1dGUodG8pKSB7XG4gICAgLy8gdG8gaXMgYWJzb2x1dGVcbiAgICBmcm9tUGFydHMgPSB0b1BhcnRzO1xuICB9IGVsc2UgaWYgKHRvUGFydHMubGVuZ3RoKSB7XG4gICAgLy8gdG8gaXMgcmVsYXRpdmUsIGRyb3AgdGhlIGZpbGVuYW1lXG4gICAgZnJvbVBhcnRzLnBvcCgpO1xuICAgIGZyb21QYXJ0cyA9IGZyb21QYXJ0cy5jb25jYXQodG9QYXJ0cyk7XG4gIH1cblxuICBpZiAoIWZyb21QYXJ0cy5sZW5ndGgpIHJldHVybiAnLyc7XG5cbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2g7XG4gIGlmIChmcm9tUGFydHMubGVuZ3RoKSB7XG4gICAgdmFyIGxhc3QgPSBmcm9tUGFydHNbZnJvbVBhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJyB8fCBsYXN0ID09PSAnJztcbiAgfSBlbHNlIHtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gZmFsc2U7XG4gIH1cblxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gZnJvbVBhcnRzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IGZyb21QYXJ0c1tpXTtcblxuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW11c3RFbmRBYnMpIGZvciAoOyB1cC0tOyB1cCkgZnJvbVBhcnRzLnVuc2hpZnQoJy4uJyk7XG5cbiAgaWYgKFxuICAgIG11c3RFbmRBYnMgJiZcbiAgICBmcm9tUGFydHNbMF0gIT09ICcnICYmXG4gICAgKCFmcm9tUGFydHNbMF0gfHwgIWlzQWJzb2x1dGUoZnJvbVBhcnRzWzBdKSlcbiAgKVxuICAgIGZyb21QYXJ0cy51bnNoaWZ0KCcnKTtcblxuICB2YXIgcmVzdWx0ID0gZnJvbVBhcnRzLmpvaW4oJy8nKTtcblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiByZXN1bHQuc3Vic3RyKC0xKSAhPT0gJy8nKSByZXN1bHQgKz0gJy8nO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVQYXRobmFtZTtcbiIsInZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xudmFyIHByZWZpeCA9ICdJbnZhcmlhbnQgZmFpbGVkJztcbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzUHJvZHVjdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4KTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCArIFwiOiBcIiArIChtZXNzYWdlIHx8ICcnKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGludmFyaWFudDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCByZXNvbHZlUGF0aG5hbWUgZnJvbSAncmVzb2x2ZS1wYXRobmFtZSc7XG5pbXBvcnQgdmFsdWVFcXVhbCBmcm9tICd2YWx1ZS1lcXVhbCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBwYXRoLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihwcmVmaXgudG9Mb3dlckNhc2UoKSkgPT09IDAgJiYgJy8/IycuaW5kZXhPZihwYXRoLmNoYXJBdChwcmVmaXgubGVuZ3RoKSkgIT09IC0xO1xufVxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcblxuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuXG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbiAgcmV0dXJuIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb247XG5cbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9IHBhcnNlUGF0aChwYXRoKTtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9IGVsc2Uge1xuICAgIC8vIE9uZS1hcmcgZm9ybTogcHVzaChsb2NhdGlvbilcbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBwYXRoKTtcbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gcmVzb2x2ZVBhdGhuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59XG5mdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaCAmJiBhLmtleSA9PT0gYi5rZXkgJiYgdmFsdWVFcXVhbChhLnN0YXRlLCBiLnN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHNldFByb21wdChuZXh0UHJvbXB0KSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcm9tcHQgPT0gbnVsbCwgJ0EgaGlzdG9yeSBzdXBwb3J0cyBvbmx5IG9uZSBwcm9tcHQgYXQgYSB0aW1lJykgOiB2b2lkIDA7XG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpIDogdm9pZCAwO1xuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXR1cm4gZmFsc2UgZnJvbSBhIHRyYW5zaXRpb24gaG9vayB0byBjYW5jZWwgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdCAhPT0gZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNldFByb21wdDogc2V0UHJvbXB0LFxuICAgIGNvbmZpcm1UcmFuc2l0aW9uVG86IGNvbmZpcm1UcmFuc2l0aW9uVG8sXG4gICAgYXBwZW5kTGlzdGVuZXI6IGFwcGVuZExpc3RlbmVyLFxuICAgIG5vdGlmeUxpc3RlbmVyczogbm90aWZ5TGlzdGVuZXJzXG4gIH07XG59XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG5cbmZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn1cblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxuZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSBzdXBwb3J0c0hpc3RvcnkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gIXN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IF9wcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpKSByZXR1cm47XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICAgIG5leHRLZXlzLnB1c2gobG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBhbGxLZXlzID0gbmV4dEtleXM7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG52YXIgSGFzaENoYW5nZUV2ZW50JDEgPSAnaGFzaGNoYW5nZSc7XG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgc3RyaXBMZWFkaW5nU2xhc2gocGF0aCk7XG4gICAgfSxcbiAgICBkZWNvZGVQYXRoOiBmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xuICAgIH1cbiAgfSxcbiAgbm9zbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IHN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9LFxuICBzbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RyaXBIYXNoKHVybCkge1xuICB2YXIgaGFzaEluZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyB1cmwgOiB1cmwuc2xpY2UoMCwgaGFzaEluZGV4KTtcbn1cblxuZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59XG5cbmZ1bmN0aW9uIHB1c2hIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZUhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uoc3RyaXBIYXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKSArICcjJyArIHBhdGgpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMkaGFzaFR5cGUgPSBfcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdm9pZCAwID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVBhdGgoZ2V0SGFzaFBhdGgoKSk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gIHZhciBpZ25vcmVQYXRoID0gbnVsbDtcblxuICBmdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbCQkMShhLCBiKSB7XG4gICAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgcHJvcGVybHktZW5jb2RlZCBoYXNoLlxuICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgbG9jYXRpb25zQXJlRXF1YWwkJDEocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09IGNyZWF0ZVBhdGgobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKHRvTG9jYXRpb24pKTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGZyb21Mb2NhdGlvbikpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9IC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuXG5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbY3JlYXRlUGF0aChpbml0aWFsTG9jYXRpb24pXTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICB2YXIgYmFzZVRhZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKTtcbiAgICB2YXIgaHJlZiA9ICcnO1xuXG4gICAgaWYgKGJhc2VUYWcgJiYgYmFzZVRhZy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkge1xuICAgICAgaHJlZiA9IHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhyZWYgKyAnIycgKyBlbmNvZGVQYXRoKGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbikpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFBVU0gsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHB1c2hIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG5leHRQYXRocyA9IGFsbFBhdGhzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJykgOiB2b2lkIDA7XG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoY2FuR29XaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJykgOiB2b2lkIDA7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IF9wcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB2b2lkIDAgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBfcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBjcmVhdGVQYXRoO1xuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcHJldkluZGV4ID0gaGlzdG9yeS5pbmRleDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBwcmV2SW5kZXggKyAxO1xuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuXG4gICAgICBpZiAobmV4dEVudHJpZXMubGVuZ3RoID4gbmV4dEluZGV4KSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnNwbGljZShuZXh0SW5kZXgsIG5leHRFbnRyaWVzLmxlbmd0aCAtIG5leHRJbmRleCwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgZW50cmllczogbmV4dEVudHJpZXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIGhpc3RvcnkuZW50cmllc1toaXN0b3J5LmluZGV4XSA9IGxvY2F0aW9uO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmIChvaykge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIGluZGV4OiBuZXh0SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNaW1pYyB0aGUgYmVoYXZpb3Igb2YgRE9NIGhpc3RvcmllcyBieVxuICAgICAgICAvLyBjYXVzaW5nIGEgcmVuZGVyIGFmdGVyIGEgY2FuY2VsbGVkIFBPUC5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBlbnRyaWVzLmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBlbnRyaWVzW2luZGV4XSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgY2FuR286IGNhbkdvLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIHBhcnNlUGF0aCwgY3JlYXRlUGF0aCB9O1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG52YXIgTUFYX1NJR05FRF8zMV9CSVRfSU5UID0gMTA3Mzc0MTgyMztcbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDoge307XG5cbmZ1bmN0aW9uIGdldFVuaXF1ZUlkKCkge1xuICB2YXIga2V5ID0gJ19fZ2xvYmFsX3VuaXF1ZV9pZF9fJztcbiAgcmV0dXJuIGNvbW1vbmpzR2xvYmFsW2tleV0gPSAoY29tbW9uanNHbG9iYWxba2V5XSB8fCAwKSArIDE7XG59XG5cbmZ1bmN0aW9uIG9iamVjdElzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVtaXR0ZXIodmFsdWUpIHtcbiAgdmFyIGhhbmRsZXJzID0gW107XG4gIHJldHVybiB7XG4gICAgb246IGZ1bmN0aW9uIG9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfSxcbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gaCAhPT0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyKHZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWFjdENvbnRleHQoZGVmYXVsdFZhbHVlLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4LCBfQ29uc3VtZXIkY29udGV4dFR5cGU7XG5cbiAgdmFyIGNvbnRleHRQcm9wID0gJ19fY3JlYXRlLXJlYWN0LWNvbnRleHQtJyArIGdldFVuaXF1ZUlkKCkgKyAnX18nO1xuXG4gIHZhciBQcm92aWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKCkge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfdGhpcyA9IF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMuZW1pdHRlciA9IGNyZWF0ZUV2ZW50RW1pdHRlcihfdGhpcy5wcm9wcy52YWx1ZSk7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IFByb3ZpZGVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltjb250ZXh0UHJvcF0gPSB0aGlzLmVtaXR0ZXIsIF9yZWY7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlICE9PSBuZXh0UHJvcHMudmFsdWUpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gbmV4dFByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgY2hhbmdlZEJpdHM7XG5cbiAgICAgICAgaWYgKG9iamVjdElzKG9sZFZhbHVlLCBuZXdWYWx1ZSkpIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSB0eXBlb2YgY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09ICdmdW5jdGlvbicgPyBjYWxjdWxhdGVDaGFuZ2VkQml0cyhvbGRWYWx1ZSwgbmV3VmFsdWUpIDogTUFYX1NJR05FRF8zMV9CSVRfSU5UO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHdhcm5pbmcoKGNoYW5nZWRCaXRzICYgTUFYX1NJR05FRF8zMV9CSVRfSU5UKSA9PT0gY2hhbmdlZEJpdHMsICdjYWxjdWxhdGVDaGFuZ2VkQml0czogRXhwZWN0ZWQgdGhlIHJldHVybiB2YWx1ZSB0byBiZSBhICcgKyAnMzEtYml0IGludGVnZXIuIEluc3RlYWQgcmVjZWl2ZWQ6ICcgKyBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hhbmdlZEJpdHMgfD0gMDtcblxuICAgICAgICAgIGlmIChjaGFuZ2VkQml0cyAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLnNldChuZXh0UHJvcHMudmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBQcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IChfUHJvdmlkZXIkY2hpbGRDb250ZXggPSB7fSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4KTtcblxuICB2YXIgQ29uc3VtZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQyKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoQ29uc3VtZXIsIF9Db21wb25lbnQyKTtcblxuICAgIGZ1bmN0aW9uIENvbnN1bWVyKCkge1xuICAgICAgdmFyIF90aGlzMjtcblxuICAgICAgX3RoaXMyID0gX0NvbXBvbmVudDIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMyLnN0YXRlID0ge1xuICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgIH07XG5cbiAgICAgIF90aGlzMi5vblVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgICAgdmFyIG9ic2VydmVkQml0cyA9IF90aGlzMi5vYnNlcnZlZEJpdHMgfCAwO1xuXG4gICAgICAgIGlmICgob2JzZXJ2ZWRCaXRzICYgY2hhbmdlZEJpdHMpICE9PSAwKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXMyO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8yID0gQ29uc3VtZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBuZXh0UHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub24odGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSB0aGlzLnByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9mZih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0uZ2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBvbmx5Q2hpbGQodGhpcy5wcm9wcy5jaGlsZHJlbikodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb25zdW1lcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIENvbnN1bWVyLmNvbnRleHRUeXBlcyA9IChfQ29uc3VtZXIkY29udGV4dFR5cGUgPSB7fSwgX0NvbnN1bWVyJGNvbnRleHRUeXBlW2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QsIF9Db25zdW1lciRjb250ZXh0VHlwZSk7XG4gIHJldHVybiB7XG4gICAgUHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgIENvbnN1bWVyOiBDb25zdW1lclxuICB9O1xufVxuXG52YXIgaW5kZXggPSBSZWFjdC5jcmVhdGVDb250ZXh0IHx8IGNyZWF0ZVJlYWN0Q29udGV4dDtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCwgY3JlYXRlUGF0aCB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBjcmVhdGVDb250ZXh0IGZyb20gJ21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gJ3BhdGgtdG8tcmVnZXhwJztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuXG4vLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5cbnZhciBjcmVhdGVOYW1lZENvbnRleHQgPSBmdW5jdGlvbiBjcmVhdGVOYW1lZENvbnRleHQobmFtZSkge1xuICB2YXIgY29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbiAgY29udGV4dC5kaXNwbGF5TmFtZSA9IG5hbWU7XG4gIHJldHVybiBjb250ZXh0O1xufTtcblxudmFyIGhpc3RvcnlDb250ZXh0ID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZU5hbWVkQ29udGV4dChcIlJvdXRlci1IaXN0b3J5XCIpO1xuXG4vLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5cbnZhciBjcmVhdGVOYW1lZENvbnRleHQkMSA9IGZ1bmN0aW9uIGNyZWF0ZU5hbWVkQ29udGV4dChuYW1lKSB7XG4gIHZhciBjb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuICBjb250ZXh0LmRpc3BsYXlOYW1lID0gbmFtZTtcbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG52YXIgY29udGV4dCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVOYW1lZENvbnRleHQkMShcIlJvdXRlclwiKTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHV0dGluZyBoaXN0b3J5IG9uIGNvbnRleHQuXG4gKi9cblxudmFyIFJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIFJvdXRlci5jb21wdXRlUm9vdE1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZVJvb3RNYXRjaChwYXRobmFtZSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBcIi9cIixcbiAgICAgIHVybDogXCIvXCIsXG4gICAgICBwYXJhbXM6IHt9LFxuICAgICAgaXNFeGFjdDogcGF0aG5hbWUgPT09IFwiL1wiXG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBSb3V0ZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxvY2F0aW9uOiBwcm9wcy5oaXN0b3J5LmxvY2F0aW9uXG4gICAgfTsgLy8gVGhpcyBpcyBhIGJpdCBvZiBhIGhhY2suIFdlIGhhdmUgdG8gc3RhcnQgbGlzdGVuaW5nIGZvciBsb2NhdGlvblxuICAgIC8vIGNoYW5nZXMgaGVyZSBpbiB0aGUgY29uc3RydWN0b3IgaW4gY2FzZSB0aGVyZSBhcmUgYW55IDxSZWRpcmVjdD5zXG4gICAgLy8gb24gdGhlIGluaXRpYWwgcmVuZGVyLiBJZiB0aGVyZSBhcmUsIHRoZXkgd2lsbCByZXBsYWNlL3B1c2ggd2hlblxuICAgIC8vIHRoZXkgbW91bnQgYW5kIHNpbmNlIGNETSBmaXJlcyBpbiBjaGlsZHJlbiBiZWZvcmUgcGFyZW50cywgd2UgbWF5XG4gICAgLy8gZ2V0IGEgbmV3IGxvY2F0aW9uIGJlZm9yZSB0aGUgPFJvdXRlcj4gaXMgbW91bnRlZC5cblxuICAgIF90aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgICBfdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbnVsbDtcblxuICAgIGlmICghcHJvcHMuc3RhdGljQ29udGV4dCkge1xuICAgICAgX3RoaXMudW5saXN0ZW4gPSBwcm9wcy5oaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgICAgaWYgKF90aGlzLl9pc01vdW50ZWQpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbG9jYXRpb247XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuX2lzTW91bnRlZCA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5fcGVuZGluZ0xvY2F0aW9uKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgbG9jYXRpb246IHRoaXMuX3BlbmRpbmdMb2NhdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnVubGlzdGVuKSB0aGlzLnVubGlzdGVuKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZToge1xuICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLnN0YXRlLmxvY2F0aW9uLFxuICAgICAgICBtYXRjaDogUm91dGVyLmNvbXB1dGVSb290TWF0Y2godGhpcy5zdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSksXG4gICAgICAgIHN0YXRpY0NvbnRleHQ6IHRoaXMucHJvcHMuc3RhdGljQ29udGV4dFxuICAgICAgfVxuICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoaGlzdG9yeUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIHx8IG51bGwsXG4gICAgICB2YWx1ZTogdGhpcy5wcm9wcy5oaXN0b3J5XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByZXZQcm9wcy5oaXN0b3J5ID09PSB0aGlzLnByb3BzLmhpc3RvcnksIFwiWW91IGNhbm5vdCBjaGFuZ2UgPFJvdXRlciBoaXN0b3J5PlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHN0b3JlcyBsb2NhdGlvbiBpbiBtZW1vcnkuXG4gKi9cblxudmFyIE1lbW9yeVJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShNZW1vcnlSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lbW9yeVJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlTWVtb3J5SGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1lbW9yeVJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbW9yeVJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBNZW1vcnlSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGluaXRpYWxFbnRyaWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaW5pdGlhbEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbiAgfTtcblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciBMaWZlY3ljbGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTGlmZWN5Y2xlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaWZlY3ljbGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IExpZmVjeWNsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VudCkgdGhpcy5wcm9wcy5vbk1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVwZGF0ZSkgdGhpcy5wcm9wcy5vblVwZGF0ZS5jYWxsKHRoaXMsIHRoaXMsIHByZXZQcm9wcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Vbm1vdW50KSB0aGlzLnByb3BzLm9uVW5tb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIExpZmVjeWNsZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXkgZnJvbSBhIHNjcmVlbi5cbiAqL1xuXG5mdW5jdGlvbiBQcm9tcHQoX3JlZikge1xuICB2YXIgbWVzc2FnZSA9IF9yZWYubWVzc2FnZSxcbiAgICAgIF9yZWYkd2hlbiA9IF9yZWYud2hlbixcbiAgICAgIHdoZW4gPSBfcmVmJHdoZW4gPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJHdoZW47XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxQcm9tcHQ+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgaWYgKCF3aGVuIHx8IGNvbnRleHQuc3RhdGljQ29udGV4dCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIG1ldGhvZCA9IGNvbnRleHQuaGlzdG9yeS5ibG9jaztcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUsIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoc2VsZikge1xuICAgICAgICBzZWxmLnJlbGVhc2UgPSBtZXRob2QobWVzc2FnZSk7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKHNlbGYsIHByZXZQcm9wcykge1xuICAgICAgICBpZiAocHJldlByb3BzLm1lc3NhZ2UgIT09IG1lc3NhZ2UpIHtcbiAgICAgICAgICBzZWxmLnJlbGVhc2UoKTtcbiAgICAgICAgICBzZWxmLnJlbGVhc2UgPSBtZXRob2QobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvblVubW91bnQ6IGZ1bmN0aW9uIG9uVW5tb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgfSxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICB9KTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIG1lc3NhZ2VUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zdHJpbmddKTtcbiAgUHJvbXB0LnByb3BUeXBlcyA9IHtcbiAgICB3aGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBtZXNzYWdlOiBtZXNzYWdlVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBjYWNoZSA9IHt9O1xudmFyIGNhY2hlTGltaXQgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50ID0gMDtcblxuZnVuY3Rpb24gY29tcGlsZVBhdGgocGF0aCkge1xuICBpZiAoY2FjaGVbcGF0aF0pIHJldHVybiBjYWNoZVtwYXRoXTtcbiAgdmFyIGdlbmVyYXRvciA9IHBhdGhUb1JlZ2V4cC5jb21waWxlKHBhdGgpO1xuXG4gIGlmIChjYWNoZUNvdW50IDwgY2FjaGVMaW1pdCkge1xuICAgIGNhY2hlW3BhdGhdID0gZ2VuZXJhdG9yO1xuICAgIGNhY2hlQ291bnQrKztcbiAgfVxuXG4gIHJldHVybiBnZW5lcmF0b3I7XG59XG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIGdlbmVyYXRpbmcgYSBVUkwgcGF0aG5hbWUgZnJvbSBhIHBhdGggYW5kIHBhcmFtZXRlcnMuXG4gKi9cblxuXG5mdW5jdGlvbiBnZW5lcmF0ZVBhdGgocGF0aCwgcGFyYW1zKSB7XG4gIGlmIChwYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXRoID0gXCIvXCI7XG4gIH1cblxuICBpZiAocGFyYW1zID09PSB2b2lkIDApIHtcbiAgICBwYXJhbXMgPSB7fTtcbiAgfVxuXG4gIHJldHVybiBwYXRoID09PSBcIi9cIiA/IHBhdGggOiBjb21waWxlUGF0aChwYXRoKShwYXJhbXMsIHtcbiAgICBwcmV0dHk6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG5hdmlnYXRpbmcgcHJvZ3JhbW1hdGljYWxseSB3aXRoIGEgY29tcG9uZW50LlxuICovXG5cbmZ1bmN0aW9uIFJlZGlyZWN0KF9yZWYpIHtcbiAgdmFyIGNvbXB1dGVkTWF0Y2ggPSBfcmVmLmNvbXB1dGVkTWF0Y2gsXG4gICAgICB0byA9IF9yZWYudG8sXG4gICAgICBfcmVmJHB1c2ggPSBfcmVmLnB1c2gsXG4gICAgICBwdXNoID0gX3JlZiRwdXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkcHVzaDtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJlZGlyZWN0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBoaXN0b3J5ID0gY29udGV4dC5oaXN0b3J5LFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gY29udGV4dC5zdGF0aWNDb250ZXh0O1xuICAgIHZhciBtZXRob2QgPSBwdXNoID8gaGlzdG9yeS5wdXNoIDogaGlzdG9yeS5yZXBsYWNlO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGNvbXB1dGVkTWF0Y2ggPyB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBnZW5lcmF0ZVBhdGgodG8sIGNvbXB1dGVkTWF0Y2gucGFyYW1zKSA6IF9leHRlbmRzKHt9LCB0bywge1xuICAgICAgcGF0aG5hbWU6IGdlbmVyYXRlUGF0aCh0by5wYXRobmFtZSwgY29tcHV0ZWRNYXRjaC5wYXJhbXMpXG4gICAgfSkgOiB0byk7IC8vIFdoZW4gcmVuZGVyaW5nIGluIGEgc3RhdGljIGNvbnRleHQsXG4gICAgLy8gc2V0IHRoZSBuZXcgbG9jYXRpb24gaW1tZWRpYXRlbHkuXG5cbiAgICBpZiAoc3RhdGljQ29udGV4dCkge1xuICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudCgpIHtcbiAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwcmV2UHJvcHMudG8pO1xuXG4gICAgICAgIGlmICghbG9jYXRpb25zQXJlRXF1YWwocHJldkxvY2F0aW9uLCBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICAgICAgICBrZXk6IHByZXZMb2NhdGlvbi5rZXlcbiAgICAgICAgfSkpKSB7XG4gICAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRvOiB0b1xuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSZWRpcmVjdC5wcm9wVHlwZXMgPSB7XG4gICAgcHVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZnJvbTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlJDEgPSB7fTtcbnZhciBjYWNoZUxpbWl0JDEgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50JDEgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aCQxKHBhdGgsIG9wdGlvbnMpIHtcbiAgdmFyIGNhY2hlS2V5ID0gXCJcIiArIG9wdGlvbnMuZW5kICsgb3B0aW9ucy5zdHJpY3QgKyBvcHRpb25zLnNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhDYWNoZSA9IGNhY2hlJDFbY2FjaGVLZXldIHx8IChjYWNoZSQxW2NhY2hlS2V5XSA9IHt9KTtcbiAgaWYgKHBhdGhDYWNoZVtwYXRoXSkgcmV0dXJuIHBhdGhDYWNoZVtwYXRoXTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlZ2V4cCA9IHBhdGhUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKTtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICByZWdleHA6IHJlZ2V4cCxcbiAgICBrZXlzOiBrZXlzXG4gIH07XG5cbiAgaWYgKGNhY2hlQ291bnQkMSA8IGNhY2hlTGltaXQkMSkge1xuICAgIHBhdGhDYWNoZVtwYXRoXSA9IHJlc3VsdDtcbiAgICBjYWNoZUNvdW50JDErKztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgVVJMIHBhdGhuYW1lIHRvIGEgcGF0aC5cbiAqL1xuXG5cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkob3B0aW9ucykpIHtcbiAgICBvcHRpb25zID0ge1xuICAgICAgcGF0aDogb3B0aW9uc1xuICAgIH07XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgcGF0aCA9IF9vcHRpb25zLnBhdGgsXG4gICAgICBfb3B0aW9ucyRleGFjdCA9IF9vcHRpb25zLmV4YWN0LFxuICAgICAgZXhhY3QgPSBfb3B0aW9ucyRleGFjdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRleGFjdCxcbiAgICAgIF9vcHRpb25zJHN0cmljdCA9IF9vcHRpb25zLnN0cmljdCxcbiAgICAgIHN0cmljdCA9IF9vcHRpb25zJHN0cmljdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRzdHJpY3QsXG4gICAgICBfb3B0aW9ucyRzZW5zaXRpdmUgPSBfb3B0aW9ucy5zZW5zaXRpdmUsXG4gICAgICBzZW5zaXRpdmUgPSBfb3B0aW9ucyRzZW5zaXRpdmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc2Vuc2l0aXZlO1xuICB2YXIgcGF0aHMgPSBbXS5jb25jYXQocGF0aCk7XG4gIHJldHVybiBwYXRocy5yZWR1Y2UoZnVuY3Rpb24gKG1hdGNoZWQsIHBhdGgpIHtcbiAgICBpZiAoIXBhdGggJiYgcGF0aCAhPT0gXCJcIikgcmV0dXJuIG51bGw7XG4gICAgaWYgKG1hdGNoZWQpIHJldHVybiBtYXRjaGVkO1xuXG4gICAgdmFyIF9jb21waWxlUGF0aCA9IGNvbXBpbGVQYXRoJDEocGF0aCwge1xuICAgICAgZW5kOiBleGFjdCxcbiAgICAgIHN0cmljdDogc3RyaWN0LFxuICAgICAgc2Vuc2l0aXZlOiBzZW5zaXRpdmVcbiAgICB9KSxcbiAgICAgICAgcmVnZXhwID0gX2NvbXBpbGVQYXRoLnJlZ2V4cCxcbiAgICAgICAga2V5cyA9IF9jb21waWxlUGF0aC5rZXlzO1xuXG4gICAgdmFyIG1hdGNoID0gcmVnZXhwLmV4ZWMocGF0aG5hbWUpO1xuICAgIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICAgIHZhciB1cmwgPSBtYXRjaFswXSxcbiAgICAgICAgdmFsdWVzID0gbWF0Y2guc2xpY2UoMSk7XG4gICAgdmFyIGlzRXhhY3QgPSBwYXRobmFtZSA9PT0gdXJsO1xuICAgIGlmIChleGFjdCAmJiAhaXNFeGFjdCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAvLyB0aGUgcGF0aCB1c2VkIHRvIG1hdGNoXG4gICAgICB1cmw6IHBhdGggPT09IFwiL1wiICYmIHVybCA9PT0gXCJcIiA/IFwiL1wiIDogdXJsLFxuICAgICAgLy8gdGhlIG1hdGNoZWQgcG9ydGlvbiBvZiB0aGUgVVJMXG4gICAgICBpc0V4YWN0OiBpc0V4YWN0LFxuICAgICAgLy8gd2hldGhlciBvciBub3Qgd2UgbWF0Y2hlZCBleGFjdGx5XG4gICAgICBwYXJhbXM6IGtleXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBrZXksIGluZGV4KSB7XG4gICAgICAgIG1lbW9ba2V5Lm5hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICB9LCB7fSlcbiAgICB9O1xuICB9LCBudWxsKTtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIHJldHVybiBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIHBhdGgpIHtcbiAgdmFyIHZhbHVlID0gY2hpbGRyZW4ocHJvcHMpO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHZhbHVlICE9PSB1bmRlZmluZWQsIFwiWW91IHJldHVybmVkIGB1bmRlZmluZWRgIGZyb20gdGhlIGBjaGlsZHJlbmAgZnVuY3Rpb24gb2YgXCIgKyAoXCI8Um91dGVcIiArIChwYXRoID8gXCIgcGF0aD1cXFwiXCIgKyBwYXRoICsgXCJcXFwiXCIgOiBcIlwiKSArIFwiPiwgYnV0IHlvdSBcIikgKyBcInNob3VsZCBoYXZlIHJldHVybmVkIGEgUmVhY3QgZWxlbWVudCBvciBgbnVsbGBcIikgOiB2b2lkIDA7XG4gIHJldHVybiB2YWx1ZSB8fCBudWxsO1xufVxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBzaW5nbGUgcGF0aCBhbmQgcmVuZGVyaW5nLlxuICovXG5cblxudmFyIFJvdXRlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0ZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUm91dGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0JDEpIHtcbiAgICAgICFjb250ZXh0JDEgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZT4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF90aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQkMS5sb2NhdGlvbjtcbiAgICAgIHZhciBtYXRjaCA9IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggPyBfdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoIC8vIDxTd2l0Y2g+IGFscmVhZHkgY29tcHV0ZWQgdGhlIG1hdGNoIGZvciB1c1xuICAgICAgOiBfdGhpcy5wcm9wcy5wYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfdGhpcy5wcm9wcykgOiBjb250ZXh0JDEubWF0Y2g7XG5cbiAgICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCBjb250ZXh0JDEsIHtcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBtYXRjaDogbWF0Y2hcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudCxcbiAgICAgICAgICByZW5kZXIgPSBfdGhpcyRwcm9wcy5yZW5kZXI7IC8vIFByZWFjdCB1c2VzIGFuIGVtcHR5IGFycmF5IGFzIGNoaWxkcmVuIGJ5XG4gICAgICAvLyBkZWZhdWx0LCBzbyB1c2UgbnVsbCBpZiB0aGF0J3MgdGhlIGNhc2UuXG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJiBjaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY2hpbGRyZW4gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBwcm9wc1xuICAgICAgfSwgcHJvcHMubWF0Y2ggPyBjaGlsZHJlbiA/IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgX3RoaXMucHJvcHMucGF0aCkgOiBjaGlsZHJlbihwcm9wcykgOiBjaGlsZHJlbiA6IGNvbXBvbmVudCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcykgOiByZW5kZXIgPyByZW5kZXIocHJvcHMpIDogbnVsbCA6IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgX3RoaXMucHJvcHMucGF0aCkgOiBjaGlsZHJlbihwcm9wcykgOiBudWxsKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUm91dGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGUucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudChwcm9wcywgcHJvcE5hbWUpIHtcbiAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gJiYgIWlzVmFsaWRFbGVtZW50VHlwZShwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJJbnZhbGlkIHByb3AgJ2NvbXBvbmVudCcgc3VwcGxpZWQgdG8gJ1JvdXRlJzogdGhlIHByb3AgaXMgbm90IGEgdmFsaWQgUmVhY3QgY29tcG9uZW50XCIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHBhdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpXSksXG4gICAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2xcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSAmJiB0aGlzLnByb3BzLmNvbXBvbmVudCksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgY29tcG9uZW50PiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSByZW5kZXI+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSByZW5kZXI+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5sb2NhdGlvbiAmJiAhcHJldlByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09IFwiL1wiID8gcGF0aCA6IFwiL1wiICsgcGF0aDtcbn1cblxuZnVuY3Rpb24gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpICsgbG9jYXRpb24ucGF0aG5hbWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcbiAgdmFyIGJhc2UgPSBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpO1xuICBpZiAobG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZihiYXNlKSAhPT0gMCkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLnN1YnN0cihiYXNlLmxlbmd0aClcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVSTChsb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIGxvY2F0aW9uID09PSBcInN0cmluZ1wiID8gbG9jYXRpb24gOiBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbn1cblxuZnVuY3Rpb24gc3RhdGljSGFuZGxlcihtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90ICVzIHdpdGggPFN0YXRpY1JvdXRlcj5cIiwgbWV0aG9kTmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG4vKipcbiAqIFRoZSBwdWJsaWMgdG9wLWxldmVsIEFQSSBmb3IgYSBcInN0YXRpY1wiIDxSb3V0ZXI+LCBzby1jYWxsZWQgYmVjYXVzZSBpdFxuICogY2FuJ3QgYWN0dWFsbHkgY2hhbmdlIHRoZSBjdXJyZW50IGxvY2F0aW9uLiBJbnN0ZWFkLCBpdCBqdXN0IHJlY29yZHNcbiAqIGxvY2F0aW9uIGNoYW5nZXMgaW4gYSBjb250ZXh0IG9iamVjdC4gVXNlZnVsIG1haW5seSBpbiB0ZXN0aW5nIGFuZFxuICogc2VydmVyLXJlbmRlcmluZyBzY2VuYXJpb3MuXG4gKi9cblxuXG52YXIgU3RhdGljUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFN0YXRpY1JvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3RhdGljUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuaGFuZGxlUHVzaCA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIF90aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sIFwiUFVTSFwiKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlUmVwbGFjZSA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIF90aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sIFwiUkVQTEFDRVwiKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTGlzdGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUJsb2NrID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdGF0aWNSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5uYXZpZ2F0ZVRvID0gZnVuY3Rpb24gbmF2aWdhdGVUbyhsb2NhdGlvbiwgYWN0aW9uKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgX3RoaXMkcHJvcHMkYmFzZW5hbWUgPSBfdGhpcyRwcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9PT0gdm9pZCAwID8gXCJcIiA6IF90aGlzJHByb3BzJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wcyRjb250ZXh0ID0gX3RoaXMkcHJvcHMuY29udGV4dCxcbiAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMkY29udGV4dDtcbiAgICBjb250ZXh0LmFjdGlvbiA9IGFjdGlvbjtcbiAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgY29udGV4dC51cmwgPSBjcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzMiRiYXNlbmFtZSA9PT0gdm9pZCAwID8gXCJcIiA6IF90aGlzJHByb3BzMiRiYXNlbmFtZSxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGNvbnRleHQgPSBfdGhpcyRwcm9wczIuY29udGV4dCxcbiAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzMiRjb250ZXh0ID09PSB2b2lkIDAgPyB7fSA6IF90aGlzJHByb3BzMiRjb250ZXh0LFxuICAgICAgICBfdGhpcyRwcm9wczIkbG9jYXRpb24gPSBfdGhpcyRwcm9wczIubG9jYXRpb24sXG4gICAgICAgIGxvY2F0aW9uID0gX3RoaXMkcHJvcHMyJGxvY2F0aW9uID09PSB2b2lkIDAgPyBcIi9cIiA6IF90aGlzJHByb3BzMiRsb2NhdGlvbixcbiAgICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzMiwgW1wiYmFzZW5hbWVcIiwgXCJjb250ZXh0XCIsIFwibG9jYXRpb25cIl0pO1xuXG4gICAgdmFyIGhpc3RvcnkgPSB7XG4gICAgICBjcmVhdGVIcmVmOiBmdW5jdGlvbiBjcmVhdGVIcmVmKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSArIGNyZWF0ZVVSTChwYXRoKSk7XG4gICAgICB9LFxuICAgICAgYWN0aW9uOiBcIlBPUFwiLFxuICAgICAgbG9jYXRpb246IHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSksXG4gICAgICBwdXNoOiB0aGlzLmhhbmRsZVB1c2gsXG4gICAgICByZXBsYWNlOiB0aGlzLmhhbmRsZVJlcGxhY2UsXG4gICAgICBnbzogc3RhdGljSGFuZGxlcihcImdvXCIpLFxuICAgICAgZ29CYWNrOiBzdGF0aWNIYW5kbGVyKFwiZ29CYWNrXCIpLFxuICAgICAgZ29Gb3J3YXJkOiBzdGF0aWNIYW5kbGVyKFwiZ29Gb3J3YXJkXCIpLFxuICAgICAgbGlzdGVuOiB0aGlzLmhhbmRsZUxpc3RlbixcbiAgICAgIGJsb2NrOiB0aGlzLmhhbmRsZUJsb2NrXG4gICAgfTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBoaXN0b3J5OiBoaXN0b3J5LFxuICAgICAgc3RhdGljQ29udGV4dDogY29udGV4dFxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gU3RhdGljUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPFN0YXRpY1JvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IFN0YXRpY1JvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5cbnZhciBTd2l0Y2ggPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2goKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN3aXRjaC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8U3dpdGNoPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dC5sb2NhdGlvbjtcbiAgICAgIHZhciBlbGVtZW50LCBtYXRjaDsgLy8gV2UgdXNlIFJlYWN0LkNoaWxkcmVuLmZvckVhY2ggaW5zdGVhZCBvZiBSZWFjdC5DaGlsZHJlbi50b0FycmF5KCkuZmluZCgpXG4gICAgICAvLyBoZXJlIGJlY2F1c2UgdG9BcnJheSBhZGRzIGtleXMgdG8gYWxsIGNoaWxkIGVsZW1lbnRzIGFuZCB3ZSBkbyBub3Qgd2FudFxuICAgICAgLy8gdG8gdHJpZ2dlciBhbiB1bm1vdW50L3JlbW91bnQgZm9yIHR3byA8Um91dGU+cyB0aGF0IHJlbmRlciB0aGUgc2FtZVxuICAgICAgLy8gY29tcG9uZW50IGF0IGRpZmZlcmVudCBVUkxzLlxuXG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKF90aGlzLnByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKG1hdGNoID09IG51bGwgJiYgUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgICAgZWxlbWVudCA9IGNoaWxkO1xuICAgICAgICAgIHZhciBwYXRoID0gY2hpbGQucHJvcHMucGF0aCB8fCBjaGlsZC5wcm9wcy5mcm9tO1xuICAgICAgICAgIG1hdGNoID0gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgX2V4dGVuZHMoe30sIGNoaWxkLnByb3BzLCB7XG4gICAgICAgICAgICBwYXRoOiBwYXRoXG4gICAgICAgICAgfSkpIDogY29udGV4dC5tYXRjaDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jbG9uZUVsZW1lbnQoZWxlbWVudCwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGNvbXB1dGVkTWF0Y2g6IG1hdGNoXG4gICAgICB9KSA6IG51bGw7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFN3aXRjaDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTd2l0Y2gucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBBIHB1YmxpYyBoaWdoZXItb3JkZXIgY29tcG9uZW50IHRvIGFjY2VzcyB0aGUgaW1wZXJhdGl2ZSBBUElcbiAqL1xuXG5mdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvbmVudCkge1xuICB2YXIgZGlzcGxheU5hbWUgPSBcIndpdGhSb3V0ZXIoXCIgKyAoQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lKSArIFwiKVwiO1xuXG4gIHZhciBDID0gZnVuY3Rpb24gQyhwcm9wcykge1xuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50UmVmID0gcHJvcHMud3JhcHBlZENvbXBvbmVudFJlZixcbiAgICAgICAgcmVtYWluaW5nUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wid3JhcHBlZENvbXBvbmVudFJlZlwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxcIiArIGRpc3BsYXlOYW1lICsgXCIgLz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHJlbWFpbmluZ1Byb3BzLCBjb250ZXh0LCB7XG4gICAgICAgIHJlZjogd3JhcHBlZENvbXBvbmVudFJlZlxuICAgICAgfSkpO1xuICAgIH0pO1xuICB9O1xuXG4gIEMuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgQy5XcmFwcGVkQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBDLnByb3BUeXBlcyA9IHtcbiAgICAgIHdyYXBwZWRDb21wb25lbnRSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGhvaXN0U3RhdGljcyhDLCBDb21wb25lbnQpO1xufVxuXG52YXIgdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQ7XG5mdW5jdGlvbiB1c2VIaXN0b3J5KCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlSGlzdG9yeSgpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KGhpc3RvcnlDb250ZXh0KTtcbn1cbmZ1bmN0aW9uIHVzZUxvY2F0aW9uKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlTG9jYXRpb24oKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KS5sb2NhdGlvbjtcbn1cbmZ1bmN0aW9uIHVzZVBhcmFtcygpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVBhcmFtcygpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHZhciBtYXRjaCA9IHVzZUNvbnRleHQoY29udGV4dCkubWF0Y2g7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoLnBhcmFtcyA6IHt9O1xufVxuZnVuY3Rpb24gdXNlUm91dGVNYXRjaChwYXRoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VSb3V0ZU1hdGNoKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgdmFyIGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgdmFyIG1hdGNoID0gdXNlQ29udGV4dChjb250ZXh0KS5tYXRjaDtcbiAgcmV0dXJuIHBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIHBhdGgpIDogbWF0Y2g7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgZ2xvYmFsID0gd2luZG93O1xuICAgIHZhciBrZXkgPSBcIl9fcmVhY3Rfcm91dGVyX2J1aWxkX19cIjtcbiAgICB2YXIgYnVpbGROYW1lcyA9IHtcbiAgICAgIGNqczogXCJDb21tb25KU1wiLFxuICAgICAgZXNtOiBcIkVTIG1vZHVsZXNcIixcbiAgICAgIHVtZDogXCJVTURcIlxuICAgIH07XG5cbiAgICBpZiAoZ2xvYmFsW2tleV0gJiYgZ2xvYmFsW2tleV0gIT09IFwiZXNtXCIpIHtcbiAgICAgIHZhciBpbml0aWFsQnVpbGROYW1lID0gYnVpbGROYW1lc1tnbG9iYWxba2V5XV07XG4gICAgICB2YXIgc2Vjb25kYXJ5QnVpbGROYW1lID0gYnVpbGROYW1lc1tcImVzbVwiXTsgLy8gVE9ETzogQWRkIGxpbmsgdG8gYXJ0aWNsZSB0aGF0IGV4cGxhaW5zIGluIGRldGFpbCBob3cgdG8gYXZvaWRcbiAgICAgIC8vIGxvYWRpbmcgMiBkaWZmZXJlbnQgYnVpbGRzLlxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgYXJlIGxvYWRpbmcgdGhlIFwiICsgc2Vjb25kYXJ5QnVpbGROYW1lICsgXCIgYnVpbGQgb2YgUmVhY3QgUm91dGVyIFwiICsgKFwib24gYSBwYWdlIHRoYXQgaXMgYWxyZWFkeSBydW5uaW5nIHRoZSBcIiArIGluaXRpYWxCdWlsZE5hbWUgKyBcIiBcIikgKyBcImJ1aWxkLCBzbyB0aGluZ3Mgd29uJ3Qgd29yayByaWdodC5cIik7XG4gICAgfVxuXG4gICAgZ2xvYmFsW2tleV0gPSBcImVzbVwiO1xuICB9XG59XG5cbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgUHJvbXB0LCBSZWRpcmVjdCwgUm91dGUsIFJvdXRlciwgU3RhdGljUm91dGVyLCBTd2l0Y2gsIGhpc3RvcnlDb250ZXh0IGFzIF9fSGlzdG9yeUNvbnRleHQsIGNvbnRleHQgYXMgX19Sb3V0ZXJDb250ZXh0LCBnZW5lcmF0ZVBhdGgsIG1hdGNoUGF0aCwgdXNlSGlzdG9yeSwgdXNlTG9jYXRpb24sIHVzZVBhcmFtcywgdXNlUm91dGVNYXRjaCwgd2l0aFJvdXRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3Qtcm91dGVyLmpzLm1hcFxuIiwiaW1wb3J0IHsgUm91dGVyLCBfX1JvdXRlckNvbnRleHQsIG1hdGNoUGF0aCB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5leHBvcnQgeyBNZW1vcnlSb3V0ZXIsIFByb21wdCwgUmVkaXJlY3QsIFJvdXRlLCBSb3V0ZXIsIFN0YXRpY1JvdXRlciwgU3dpdGNoLCBnZW5lcmF0ZVBhdGgsIG1hdGNoUGF0aCwgdXNlSGlzdG9yeSwgdXNlTG9jYXRpb24sIHVzZVBhcmFtcywgdXNlUm91dGVNYXRjaCwgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgSFRNTDUgaGlzdG9yeS5cbiAqL1xuXG52YXIgQnJvd3NlclJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShCcm93c2VyUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBCcm93c2VyUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVCcm93c2VySGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBCcm93c2VyUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEJyb3dzZXJSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBmb3JjZVJlZnJlc2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlclxuICB9O1xuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgd2luZG93LmxvY2F0aW9uLmhhc2guXG4gKi9cblxudmFyIEhhc2hSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSGFzaFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSGFzaFJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGFzaEhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBIYXNoUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gSGFzaFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBIYXNoUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGFzaFR5cGU6IFByb3BUeXBlcy5vbmVPZihbXCJoYXNoYmFuZ1wiLCBcIm5vc2xhc2hcIiwgXCJzbGFzaFwiXSlcbiAgfTtcblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEhhc2hSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciByZXNvbHZlVG9Mb2NhdGlvbiA9IGZ1bmN0aW9uIHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJmdW5jdGlvblwiID8gdG8oY3VycmVudExvY2F0aW9uKSA6IHRvO1xufTtcbnZhciBub3JtYWxpemVUb0xvY2F0aW9uID0gZnVuY3Rpb24gbm9ybWFsaXplVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBjcmVhdGVMb2NhdGlvbih0bywgbnVsbCwgbnVsbCwgY3VycmVudExvY2F0aW9uKSA6IHRvO1xufTtcblxudmFyIGZvcndhcmRSZWZTaGltID0gZnVuY3Rpb24gZm9yd2FyZFJlZlNoaW0oQykge1xuICByZXR1cm4gQztcbn07XG5cbnZhciBmb3J3YXJkUmVmID0gUmVhY3QuZm9yd2FyZFJlZjtcblxuaWYgKHR5cGVvZiBmb3J3YXJkUmVmID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYgPSBmb3J3YXJkUmVmU2hpbTtcbn1cblxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn1cblxudmFyIExpbmtBbmNob3IgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIGlubmVyUmVmID0gX3JlZi5pbm5lclJlZixcbiAgICAgIG5hdmlnYXRlID0gX3JlZi5uYXZpZ2F0ZSxcbiAgICAgIF9vbkNsaWNrID0gX3JlZi5vbkNsaWNrLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImlubmVyUmVmXCIsIFwibmF2aWdhdGVcIiwgXCJvbkNsaWNrXCJdKTtcblxuICB2YXIgdGFyZ2V0ID0gcmVzdC50YXJnZXQ7XG5cbiAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoX29uQ2xpY2spIF9vbkNsaWNrKGV2ZW50KTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRocm93IGV4O1xuICAgICAgfVxuXG4gICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgLy8gb25DbGljayBwcmV2ZW50ZWQgZGVmYXVsdFxuICAgICAgZXZlbnQuYnV0dG9uID09PSAwICYmICggLy8gaWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzXG4gICAgICAhdGFyZ2V0IHx8IHRhcmdldCA9PT0gXCJfc2VsZlwiKSAmJiAvLyBsZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gaWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgICAgICkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgbmF2aWdhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgfSk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICB9IGVsc2Uge1xuICAgIHByb3BzLnJlZiA9IGlubmVyUmVmO1xuICB9XG4gIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9hbmNob3ItaGFzLWNvbnRlbnQgKi9cblxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCBwcm9wcyk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBMaW5rQW5jaG9yLmRpc3BsYXlOYW1lID0gXCJMaW5rQW5jaG9yXCI7XG59XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuXG5cbnZhciBMaW5rID0gZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZjIsIGZvcndhcmRlZFJlZikge1xuICB2YXIgX3JlZjIkY29tcG9uZW50ID0gX3JlZjIuY29tcG9uZW50LFxuICAgICAgY29tcG9uZW50ID0gX3JlZjIkY29tcG9uZW50ID09PSB2b2lkIDAgPyBMaW5rQW5jaG9yIDogX3JlZjIkY29tcG9uZW50LFxuICAgICAgcmVwbGFjZSA9IF9yZWYyLnJlcGxhY2UsXG4gICAgICB0byA9IF9yZWYyLnRvLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmMi5pbm5lclJlZixcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiY29tcG9uZW50XCIsIFwicmVwbGFjZVwiLCBcInRvXCIsIFwiaW5uZXJSZWZcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3Rvcnk7XG4gICAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplVG9Mb2NhdGlvbihyZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbiksIGNvbnRleHQubG9jYXRpb24pO1xuICAgIHZhciBocmVmID0gbG9jYXRpb24gPyBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pIDogXCJcIjtcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBocmVmOiBocmVmLFxuICAgICAgbmF2aWdhdGU6IGZ1bmN0aW9uIG5hdmlnYXRlKCkge1xuICAgICAgICB2YXIgbG9jYXRpb24gPSByZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbik7XG4gICAgICAgIHZhciBtZXRob2QgPSByZXBsYWNlID8gaGlzdG9yeS5yZXBsYWNlIDogaGlzdG9yeS5wdXNoO1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfVxuICAgIH0pOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcyk7XG4gIH0pO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIHRvVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSk7XG4gIHZhciByZWZUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogUHJvcFR5cGVzLmFueVxuICB9KV0pO1xuICBMaW5rLmRpc3BsYXlOYW1lID0gXCJMaW5rXCI7XG4gIExpbmsucHJvcFR5cGVzID0ge1xuICAgIGlubmVyUmVmOiByZWZUeXBlLFxuICAgIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIHJlcGxhY2U6IFByb3BUeXBlcy5ib29sLFxuICAgIHRhcmdldDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogdG9UeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGZvcndhcmRSZWZTaGltJDEgPSBmdW5jdGlvbiBmb3J3YXJkUmVmU2hpbShDKSB7XG4gIHJldHVybiBDO1xufTtcblxudmFyIGZvcndhcmRSZWYkMSA9IFJlYWN0LmZvcndhcmRSZWY7XG5cbmlmICh0eXBlb2YgZm9yd2FyZFJlZiQxID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYkMSA9IGZvcndhcmRSZWZTaGltJDE7XG59XG5cbmZ1bmN0aW9uIGpvaW5DbGFzc25hbWVzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgY2xhc3NuYW1lcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBjbGFzc25hbWVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGNsYXNzbmFtZXMuZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgcmV0dXJuIGk7XG4gIH0pLmpvaW4oXCIgXCIpO1xufVxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xuXG5cbnZhciBOYXZMaW5rID0gZm9yd2FyZFJlZiQxKGZ1bmN0aW9uIChfcmVmLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIF9yZWYkYXJpYUN1cnJlbnQgPSBfcmVmW1wiYXJpYS1jdXJyZW50XCJdLFxuICAgICAgYXJpYUN1cnJlbnQgPSBfcmVmJGFyaWFDdXJyZW50ID09PSB2b2lkIDAgPyBcInBhZ2VcIiA6IF9yZWYkYXJpYUN1cnJlbnQsXG4gICAgICBfcmVmJGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYuYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3JlZiRhY3RpdmVDbGFzc05hbWUgPT09IHZvaWQgMCA/IFwiYWN0aXZlXCIgOiBfcmVmJGFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZVN0eWxlID0gX3JlZi5hY3RpdmVTdHlsZSxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgIGlzQWN0aXZlUHJvcCA9IF9yZWYuaXNBY3RpdmUsXG4gICAgICBsb2NhdGlvblByb3AgPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgc2Vuc2l0aXZlID0gX3JlZi5zZW5zaXRpdmUsXG4gICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgIHN0eWxlUHJvcCA9IF9yZWYuc3R5bGUsXG4gICAgICB0byA9IF9yZWYudG8sXG4gICAgICBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYXJpYS1jdXJyZW50XCIsIFwiYWN0aXZlQ2xhc3NOYW1lXCIsIFwiYWN0aXZlU3R5bGVcIiwgXCJjbGFzc05hbWVcIiwgXCJleGFjdFwiLCBcImlzQWN0aXZlXCIsIFwibG9jYXRpb25cIiwgXCJzZW5zaXRpdmVcIiwgXCJzdHJpY3RcIiwgXCJzdHlsZVwiLCBcInRvXCIsIFwiaW5uZXJSZWZcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPE5hdkxpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGN1cnJlbnRMb2NhdGlvbiA9IGxvY2F0aW9uUHJvcCB8fCBjb250ZXh0LmxvY2F0aW9uO1xuICAgIHZhciB0b0xvY2F0aW9uID0gbm9ybWFsaXplVG9Mb2NhdGlvbihyZXNvbHZlVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSwgY3VycmVudExvY2F0aW9uKTtcbiAgICB2YXIgcGF0aCA9IHRvTG9jYXRpb24ucGF0aG5hbWU7IC8vIFJlZ2V4IHRha2VuIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9waWxsYXJqcy9wYXRoLXRvLXJlZ2V4cC9ibG9iL21hc3Rlci9pbmRleC5qcyNMMjAyXG5cbiAgICB2YXIgZXNjYXBlZFBhdGggPSBwYXRoICYmIHBhdGgucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXwvXFxcXF0pL2csIFwiXFxcXCQxXCIpO1xuICAgIHZhciBtYXRjaCA9IGVzY2FwZWRQYXRoID8gbWF0Y2hQYXRoKGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSwge1xuICAgICAgcGF0aDogZXNjYXBlZFBhdGgsXG4gICAgICBleGFjdDogZXhhY3QsXG4gICAgICBzZW5zaXRpdmU6IHNlbnNpdGl2ZSxcbiAgICAgIHN0cmljdDogc3RyaWN0XG4gICAgfSkgOiBudWxsO1xuICAgIHZhciBpc0FjdGl2ZSA9ICEhKGlzQWN0aXZlUHJvcCA/IGlzQWN0aXZlUHJvcChtYXRjaCwgY3VycmVudExvY2F0aW9uKSA6IG1hdGNoKTtcbiAgICB2YXIgY2xhc3NOYW1lID0gaXNBY3RpdmUgPyBqb2luQ2xhc3NuYW1lcyhjbGFzc05hbWVQcm9wLCBhY3RpdmVDbGFzc05hbWUpIDogY2xhc3NOYW1lUHJvcDtcbiAgICB2YXIgc3R5bGUgPSBpc0FjdGl2ZSA/IF9leHRlbmRzKHt9LCBzdHlsZVByb3AsIHt9LCBhY3RpdmVTdHlsZSkgOiBzdHlsZVByb3A7XG5cbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICBcImFyaWEtY3VycmVudFwiOiBpc0FjdGl2ZSAmJiBhcmlhQ3VycmVudCB8fCBudWxsLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICB0bzogdG9Mb2NhdGlvblxuICAgIH0sIHJlc3QpOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltJDEgIT09IGZvcndhcmRSZWYkMSkge1xuICAgICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcy5pbm5lclJlZiA9IGlubmVyUmVmO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIHByb3BzKTtcbiAgfSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZMaW5rLmRpc3BsYXlOYW1lID0gXCJOYXZMaW5rXCI7XG4gIHZhciBhcmlhQ3VycmVudFR5cGUgPSBQcm9wVHlwZXMub25lT2YoW1wicGFnZVwiLCBcInN0ZXBcIiwgXCJsb2NhdGlvblwiLCBcImRhdGVcIiwgXCJ0aW1lXCIsIFwidHJ1ZVwiXSk7XG4gIE5hdkxpbmsucHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIExpbmsucHJvcFR5cGVzLCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRUeXBlLFxuICAgIGFjdGl2ZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhY3RpdmVTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzQWN0aXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3RcbiAgfSk7XG59XG5cbmV4cG9ydCB7IEJyb3dzZXJSb3V0ZXIsIEhhc2hSb3V0ZXIsIExpbmssIE5hdkxpbmsgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXJvdXRlci1kb20uanMubWFwXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IGRlZmF1bHQgUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTsiLCJpbXBvcnQgeyBDaGlsZHJlbiwgY2xvbmVFbGVtZW50LCBpc1ZhbGlkRWxlbWVudCB9IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogR2l2ZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gLCByZXR1cm4gYW4gb2JqZWN0IG1hcHBpbmcga2V5IHRvIGNoaWxkLlxuICpcbiAqIEBwYXJhbSB7Kn0gY2hpbGRyZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gXG4gKiBAcmV0dXJuIHtvYmplY3R9IE1hcHBpbmcgb2Yga2V5IHRvIGNoaWxkXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENoaWxkTWFwcGluZyhjaGlsZHJlbiwgbWFwRm4pIHtcbiAgdmFyIG1hcHBlciA9IGZ1bmN0aW9uIG1hcHBlcihjaGlsZCkge1xuICAgIHJldHVybiBtYXBGbiAmJiBpc1ZhbGlkRWxlbWVudChjaGlsZCkgPyBtYXBGbihjaGlsZCkgOiBjaGlsZDtcbiAgfTtcblxuICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaWYgKGNoaWxkcmVuKSBDaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGM7XG4gIH0pLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgLy8gcnVuIHRoZSBtYXAgZnVuY3Rpb24gaGVyZSBpbnN0ZWFkIHNvIHRoYXQgdGhlIGtleSBpcyB0aGUgY29tcHV0ZWQgb25lXG4gICAgcmVzdWx0W2NoaWxkLmtleV0gPSBtYXBwZXIoY2hpbGQpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogV2hlbiB5b3UncmUgYWRkaW5nIG9yIHJlbW92aW5nIGNoaWxkcmVuIHNvbWUgbWF5IGJlIGFkZGVkIG9yIHJlbW92ZWQgaW4gdGhlXG4gKiBzYW1lIHJlbmRlciBwYXNzLiBXZSB3YW50IHRvIHNob3cgKmJvdGgqIHNpbmNlIHdlIHdhbnQgdG8gc2ltdWx0YW5lb3VzbHlcbiAqIGFuaW1hdGUgZWxlbWVudHMgaW4gYW5kIG91dC4gVGhpcyBmdW5jdGlvbiB0YWtlcyBhIHByZXZpb3VzIHNldCBvZiBrZXlzXG4gKiBhbmQgYSBuZXcgc2V0IG9mIGtleXMgYW5kIG1lcmdlcyB0aGVtIHdpdGggaXRzIGJlc3QgZ3Vlc3Mgb2YgdGhlIGNvcnJlY3RcbiAqIG9yZGVyaW5nLiBJbiB0aGUgZnV0dXJlIHdlIG1heSBleHBvc2Ugc29tZSBvZiB0aGUgdXRpbGl0aWVzIGluXG4gKiBSZWFjdE11bHRpQ2hpbGQgdG8gbWFrZSB0aGlzIGVhc3ksIGJ1dCBmb3Igbm93IFJlYWN0IGl0c2VsZiBkb2VzIG5vdFxuICogZGlyZWN0bHkgaGF2ZSB0aGlzIGNvbmNlcHQgb2YgdGhlIHVuaW9uIG9mIHByZXZDaGlsZHJlbiBhbmQgbmV4dENoaWxkcmVuXG4gKiBzbyB3ZSBpbXBsZW1lbnQgaXQgaGVyZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcHJldiBwcmV2IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICogQHBhcmFtIHtvYmplY3R9IG5leHQgbmV4dCBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAqIEByZXR1cm4ge29iamVjdH0gYSBrZXkgc2V0IHRoYXQgY29udGFpbnMgYWxsIGtleXMgaW4gYHByZXZgIGFuZCBhbGwga2V5c1xuICogaW4gYG5leHRgIGluIGEgcmVhc29uYWJsZSBvcmRlci5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VDaGlsZE1hcHBpbmdzKHByZXYsIG5leHQpIHtcbiAgcHJldiA9IHByZXYgfHwge307XG4gIG5leHQgPSBuZXh0IHx8IHt9O1xuXG4gIGZ1bmN0aW9uIGdldFZhbHVlRm9yS2V5KGtleSkge1xuICAgIHJldHVybiBrZXkgaW4gbmV4dCA/IG5leHRba2V5XSA6IHByZXZba2V5XTtcbiAgfSAvLyBGb3IgZWFjaCBrZXkgb2YgYG5leHRgLCB0aGUgbGlzdCBvZiBrZXlzIHRvIGluc2VydCBiZWZvcmUgdGhhdCBrZXkgaW5cbiAgLy8gdGhlIGNvbWJpbmVkIGxpc3RcblxuXG4gIHZhciBuZXh0S2V5c1BlbmRpbmcgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgcGVuZGluZ0tleXMgPSBbXTtcblxuICBmb3IgKHZhciBwcmV2S2V5IGluIHByZXYpIHtcbiAgICBpZiAocHJldktleSBpbiBuZXh0KSB7XG4gICAgICBpZiAocGVuZGluZ0tleXMubGVuZ3RoKSB7XG4gICAgICAgIG5leHRLZXlzUGVuZGluZ1twcmV2S2V5XSA9IHBlbmRpbmdLZXlzO1xuICAgICAgICBwZW5kaW5nS2V5cyA9IFtdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZW5kaW5nS2V5cy5wdXNoKHByZXZLZXkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpO1xuICB2YXIgY2hpbGRNYXBwaW5nID0ge307XG5cbiAgZm9yICh2YXIgbmV4dEtleSBpbiBuZXh0KSB7XG4gICAgaWYgKG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGVuZGluZ05leHRLZXkgPSBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV07XG4gICAgICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ05leHRLZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5XSA9IGdldFZhbHVlRm9yS2V5KG5leHRLZXkpO1xuICB9IC8vIEZpbmFsbHksIGFkZCB0aGUga2V5cyB3aGljaCBkaWRuJ3QgYXBwZWFyIGJlZm9yZSBhbnkga2V5IGluIGBuZXh0YFxuXG5cbiAgZm9yIChpID0gMDsgaSA8IHBlbmRpbmdLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2hpbGRNYXBwaW5nW3BlbmRpbmdLZXlzW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdLZXlzW2ldKTtcbiAgfVxuXG4gIHJldHVybiBjaGlsZE1hcHBpbmc7XG59XG5cbmZ1bmN0aW9uIGdldFByb3AoY2hpbGQsIHByb3AsIHByb3BzKSB7XG4gIHJldHVybiBwcm9wc1twcm9wXSAhPSBudWxsID8gcHJvcHNbcHJvcF0gOiBjaGlsZC5wcm9wc1twcm9wXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEluaXRpYWxDaGlsZE1hcHBpbmcocHJvcHMsIG9uRXhpdGVkKSB7XG4gIHJldHVybiBnZXRDaGlsZE1hcHBpbmcocHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJldHVybiBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgIGluOiB0cnVlLFxuICAgICAgYXBwZWFyOiBnZXRQcm9wKGNoaWxkLCAnYXBwZWFyJywgcHJvcHMpLFxuICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIHByb3BzKSxcbiAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgcHJvcHMpXG4gICAgfSk7XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE5leHRDaGlsZE1hcHBpbmcobmV4dFByb3BzLCBwcmV2Q2hpbGRNYXBwaW5nLCBvbkV4aXRlZCkge1xuICB2YXIgbmV4dENoaWxkTWFwcGluZyA9IGdldENoaWxkTWFwcGluZyhuZXh0UHJvcHMuY2hpbGRyZW4pO1xuICB2YXIgY2hpbGRyZW4gPSBtZXJnZUNoaWxkTWFwcGluZ3MocHJldkNoaWxkTWFwcGluZywgbmV4dENoaWxkTWFwcGluZyk7XG4gIE9iamVjdC5rZXlzKGNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltrZXldO1xuICAgIGlmICghaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSByZXR1cm47XG4gICAgdmFyIGhhc1ByZXYgPSAoa2V5IGluIHByZXZDaGlsZE1hcHBpbmcpO1xuICAgIHZhciBoYXNOZXh0ID0gKGtleSBpbiBuZXh0Q2hpbGRNYXBwaW5nKTtcbiAgICB2YXIgcHJldkNoaWxkID0gcHJldkNoaWxkTWFwcGluZ1trZXldO1xuICAgIHZhciBpc0xlYXZpbmcgPSBpc1ZhbGlkRWxlbWVudChwcmV2Q2hpbGQpICYmICFwcmV2Q2hpbGQucHJvcHMuaW47IC8vIGl0ZW0gaXMgbmV3IChlbnRlcmluZylcblxuICAgIGlmIChoYXNOZXh0ICYmICghaGFzUHJldiB8fCBpc0xlYXZpbmcpKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZygnZW50ZXJpbmcnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgICAgaW46IHRydWUsXG4gICAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgbmV4dFByb3BzKSxcbiAgICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIG5leHRQcm9wcylcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoIWhhc05leHQgJiYgaGFzUHJldiAmJiAhaXNMZWF2aW5nKSB7XG4gICAgICAvLyBpdGVtIGlzIG9sZCAoZXhpdGluZylcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdsZWF2aW5nJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9IGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBpbjogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaGFzTmV4dCAmJiBoYXNQcmV2ICYmIGlzVmFsaWRFbGVtZW50KHByZXZDaGlsZCkpIHtcbiAgICAgIC8vIGl0ZW0gaGFzbid0IGNoYW5nZWQgdHJhbnNpdGlvbiBzdGF0ZXNcbiAgICAgIC8vIGNvcHkgb3ZlciB0aGUgbGFzdCB0cmFuc2l0aW9uIHByb3BzO1xuICAgICAgLy8gY29uc29sZS5sb2coJ3VuY2hhbmdlZCcsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgICBpbjogcHJldkNoaWxkLnByb3BzLmluLFxuICAgICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIG5leHRQcm9wcyksXG4gICAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBuZXh0UHJvcHMpXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY2hpbGRyZW47XG59IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVHJhbnNpdGlvbkdyb3VwQ29udGV4dCBmcm9tICcuL1RyYW5zaXRpb25Hcm91cENvbnRleHQnO1xuaW1wb3J0IHsgZ2V0Q2hpbGRNYXBwaW5nLCBnZXRJbml0aWFsQ2hpbGRNYXBwaW5nLCBnZXROZXh0Q2hpbGRNYXBwaW5nIH0gZnJvbSAnLi91dGlscy9DaGlsZE1hcHBpbmcnO1xuXG52YXIgdmFsdWVzID0gT2JqZWN0LnZhbHVlcyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbiAoaykge1xuICAgIHJldHVybiBvYmpba107XG4gIH0pO1xufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50OiAnZGl2JyxcbiAgY2hpbGRGYWN0b3J5OiBmdW5jdGlvbiBjaGlsZEZhY3RvcnkoY2hpbGQpIHtcbiAgICByZXR1cm4gY2hpbGQ7XG4gIH1cbn07XG4vKipcbiAqIFRoZSBgPFRyYW5zaXRpb25Hcm91cD5gIGNvbXBvbmVudCBtYW5hZ2VzIGEgc2V0IG9mIHRyYW5zaXRpb24gY29tcG9uZW50c1xuICogKGA8VHJhbnNpdGlvbj5gIGFuZCBgPENTU1RyYW5zaXRpb24+YCkgaW4gYSBsaXN0LiBMaWtlIHdpdGggdGhlIHRyYW5zaXRpb25cbiAqIGNvbXBvbmVudHMsIGA8VHJhbnNpdGlvbkdyb3VwPmAgaXMgYSBzdGF0ZSBtYWNoaW5lIGZvciBtYW5hZ2luZyB0aGUgbW91bnRpbmdcbiAqIGFuZCB1bm1vdW50aW5nIG9mIGNvbXBvbmVudHMgb3ZlciB0aW1lLlxuICpcbiAqIENvbnNpZGVyIHRoZSBleGFtcGxlIGJlbG93LiBBcyBpdGVtcyBhcmUgcmVtb3ZlZCBvciBhZGRlZCB0byB0aGUgVG9kb0xpc3QgdGhlXG4gKiBgaW5gIHByb3AgaXMgdG9nZ2xlZCBhdXRvbWF0aWNhbGx5IGJ5IHRoZSBgPFRyYW5zaXRpb25Hcm91cD5gLlxuICpcbiAqIE5vdGUgdGhhdCBgPFRyYW5zaXRpb25Hcm91cD5gICBkb2VzIG5vdCBkZWZpbmUgYW55IGFuaW1hdGlvbiBiZWhhdmlvciFcbiAqIEV4YWN0bHkgX2hvd18gYSBsaXN0IGl0ZW0gYW5pbWF0ZXMgaXMgdXAgdG8gdGhlIGluZGl2aWR1YWwgdHJhbnNpdGlvblxuICogY29tcG9uZW50LiBUaGlzIG1lYW5zIHlvdSBjYW4gbWl4IGFuZCBtYXRjaCBhbmltYXRpb25zIGFjcm9zcyBkaWZmZXJlbnQgbGlzdFxuICogaXRlbXMuXG4gKi9cblxudmFyIFRyYW5zaXRpb25Hcm91cCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUcmFuc2l0aW9uR3JvdXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb25Hcm91cChwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSB8fCB0aGlzO1xuXG4gICAgdmFyIGhhbmRsZUV4aXRlZCA9IF90aGlzLmhhbmRsZUV4aXRlZC5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTsgLy8gSW5pdGlhbCBjaGlsZHJlbiBzaG91bGQgYWxsIGJlIGVudGVyaW5nLCBkZXBlbmRlbnQgb24gYXBwZWFyXG5cblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgY29udGV4dFZhbHVlOiB7XG4gICAgICAgIGlzTW91bnRpbmc6IHRydWVcbiAgICAgIH0sXG4gICAgICBoYW5kbGVFeGl0ZWQ6IGhhbmRsZUV4aXRlZCxcbiAgICAgIGZpcnN0UmVuZGVyOiB0cnVlXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVHJhbnNpdGlvbkdyb3VwLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLm1vdW50ZWQgPSB0cnVlO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY29udGV4dFZhbHVlOiB7XG4gICAgICAgIGlzTW91bnRpbmc6IGZhbHNlXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5tb3VudGVkID0gZmFsc2U7XG4gIH07XG5cbiAgVHJhbnNpdGlvbkdyb3VwLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIF9yZWYpIHtcbiAgICB2YXIgcHJldkNoaWxkTWFwcGluZyA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICAgIGhhbmRsZUV4aXRlZCA9IF9yZWYuaGFuZGxlRXhpdGVkLFxuICAgICAgICBmaXJzdFJlbmRlciA9IF9yZWYuZmlyc3RSZW5kZXI7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNoaWxkcmVuOiBmaXJzdFJlbmRlciA/IGdldEluaXRpYWxDaGlsZE1hcHBpbmcobmV4dFByb3BzLCBoYW5kbGVFeGl0ZWQpIDogZ2V0TmV4dENoaWxkTWFwcGluZyhuZXh0UHJvcHMsIHByZXZDaGlsZE1hcHBpbmcsIGhhbmRsZUV4aXRlZCksXG4gICAgICBmaXJzdFJlbmRlcjogZmFsc2VcbiAgICB9O1xuICB9IC8vIG5vZGUgaXMgYHVuZGVmaW5lZGAgd2hlbiB1c2VyIHByb3ZpZGVkIGBub2RlUmVmYCBwcm9wXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlRXhpdGVkID0gZnVuY3Rpb24gaGFuZGxlRXhpdGVkKGNoaWxkLCBub2RlKSB7XG4gICAgdmFyIGN1cnJlbnRDaGlsZE1hcHBpbmcgPSBnZXRDaGlsZE1hcHBpbmcodGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgaWYgKGNoaWxkLmtleSBpbiBjdXJyZW50Q2hpbGRNYXBwaW5nKSByZXR1cm47XG5cbiAgICBpZiAoY2hpbGQucHJvcHMub25FeGl0ZWQpIHtcbiAgICAgIGNoaWxkLnByb3BzLm9uRXhpdGVkKG5vZGUpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm1vdW50ZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IF9leHRlbmRzKHt9LCBzdGF0ZS5jaGlsZHJlbik7XG5cbiAgICAgICAgZGVsZXRlIGNoaWxkcmVuW2NoaWxkLmtleV07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnQsXG4gICAgICAgIGNoaWxkRmFjdG9yeSA9IF90aGlzJHByb3BzLmNoaWxkRmFjdG9yeSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY29tcG9uZW50XCIsIFwiY2hpbGRGYWN0b3J5XCJdKTtcblxuICAgIHZhciBjb250ZXh0VmFsdWUgPSB0aGlzLnN0YXRlLmNvbnRleHRWYWx1ZTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2YWx1ZXModGhpcy5zdGF0ZS5jaGlsZHJlbikubWFwKGNoaWxkRmFjdG9yeSk7XG4gICAgZGVsZXRlIHByb3BzLmFwcGVhcjtcbiAgICBkZWxldGUgcHJvcHMuZW50ZXI7XG4gICAgZGVsZXRlIHByb3BzLmV4aXQ7XG5cbiAgICBpZiAoQ29tcG9uZW50ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gICAgICB9LCBjaGlsZHJlbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Hcm91cENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBjb250ZXh0VmFsdWVcbiAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIHByb3BzLCBjaGlsZHJlbikpO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uR3JvdXA7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRyYW5zaXRpb25Hcm91cC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBgPFRyYW5zaXRpb25Hcm91cD5gIHJlbmRlcnMgYSBgPGRpdj5gIGJ5IGRlZmF1bHQuIFlvdSBjYW4gY2hhbmdlIHRoaXNcbiAgICogYmVoYXZpb3IgYnkgcHJvdmlkaW5nIGEgYGNvbXBvbmVudGAgcHJvcC5cbiAgICogSWYgeW91IHVzZSBSZWFjdCB2MTYrIGFuZCB3b3VsZCBsaWtlIHRvIGF2b2lkIGEgd3JhcHBpbmcgYDxkaXY+YCBlbGVtZW50XG4gICAqIHlvdSBjYW4gcGFzcyBpbiBgY29tcG9uZW50PXtudWxsfWAuIFRoaXMgaXMgdXNlZnVsIGlmIHRoZSB3cmFwcGluZyBkaXZcbiAgICogYm9ya3MgeW91ciBjc3Mgc3R5bGVzLlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBBIHNldCBvZiBgPFRyYW5zaXRpb24+YCBjb21wb25lbnRzLCB0aGF0IGFyZSB0b2dnbGVkIGBpbmAgYW5kIG91dCBhcyB0aGV5XG4gICAqIGxlYXZlLiB0aGUgYDxUcmFuc2l0aW9uR3JvdXA+YCB3aWxsIGluamVjdCBzcGVjaWZpYyB0cmFuc2l0aW9uIHByb3BzLCBzb1xuICAgKiByZW1lbWJlciB0byBzcHJlYWQgdGhlbSB0aHJvdWdoIGlmIHlvdSBhcmUgd3JhcHBpbmcgdGhlIGA8VHJhbnNpdGlvbj5gIGFzXG4gICAqIHdpdGggb3VyIGA8RmFkZT5gIGV4YW1wbGUuXG4gICAqXG4gICAqIFdoaWxlIHRoaXMgY29tcG9uZW50IGlzIG1lYW50IGZvciBtdWx0aXBsZSBgVHJhbnNpdGlvbmAgb3IgYENTU1RyYW5zaXRpb25gXG4gICAqIGNoaWxkcmVuLCBzb21ldGltZXMgeW91IG1heSB3YW50IHRvIGhhdmUgYSBzaW5nbGUgdHJhbnNpdGlvbiBjaGlsZCB3aXRoXG4gICAqIGNvbnRlbnQgdGhhdCB5b3Ugd2FudCB0byBiZSB0cmFuc2l0aW9uZWQgb3V0IGFuZCBpbiB3aGVuIHlvdSBjaGFuZ2UgaXRcbiAgICogKGUuZy4gcm91dGVzLCBpbWFnZXMgZXRjLikgSW4gdGhhdCBjYXNlIHlvdSBjYW4gY2hhbmdlIHRoZSBga2V5YCBwcm9wIG9mXG4gICAqIHRoZSB0cmFuc2l0aW9uIGNoaWxkIGFzIHlvdSBjaGFuZ2UgaXRzIGNvbnRlbnQsIHRoaXMgd2lsbCBjYXVzZVxuICAgKiBgVHJhbnNpdGlvbkdyb3VwYCB0byB0cmFuc2l0aW9uIHRoZSBjaGlsZCBvdXQgYW5kIGJhY2sgaW4uXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgYXBwZWFyIGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGFwcGVhcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgZW50ZXIgYW5pbWF0aW9uc1xuICAgKiBmb3IgYWxsIGNoaWxkcmVuLiBOb3RlIHRoYXQgc3BlY2lmeWluZyB0aGlzIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHRzIHNldFxuICAgKiBvbiBpbmRpdmlkdWFsIGNoaWxkcmVuIFRyYW5zaXRpb25zLlxuICAgKi9cbiAgZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGV4aXQgYW5pbWF0aW9uc1xuICAgKiBmb3IgYWxsIGNoaWxkcmVuLiBOb3RlIHRoYXQgc3BlY2lmeWluZyB0aGlzIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHRzIHNldFxuICAgKiBvbiBpbmRpdmlkdWFsIGNoaWxkcmVuIFRyYW5zaXRpb25zLlxuICAgKi9cbiAgZXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFlvdSBtYXkgbmVlZCB0byBhcHBseSByZWFjdGl2ZSB1cGRhdGVzIHRvIGEgY2hpbGQgYXMgaXQgaXMgZXhpdGluZy5cbiAgICogVGhpcyBpcyBnZW5lcmFsbHkgZG9uZSBieSB1c2luZyBgY2xvbmVFbGVtZW50YCBob3dldmVyIGluIHRoZSBjYXNlIG9mIGFuIGV4aXRpbmdcbiAgICogY2hpbGQgdGhlIGVsZW1lbnQgaGFzIGFscmVhZHkgYmVlbiByZW1vdmVkIGFuZCBub3QgYWNjZXNzaWJsZSB0byB0aGUgY29uc3VtZXIuXG4gICAqXG4gICAqIElmIHlvdSBkbyBuZWVkIHRvIHVwZGF0ZSBhIGNoaWxkIGFzIGl0IGxlYXZlcyB5b3UgY2FuIHByb3ZpZGUgYSBgY2hpbGRGYWN0b3J5YFxuICAgKiB0byB3cmFwIGV2ZXJ5IGNoaWxkLCBldmVuIHRoZSBvbmVzIHRoYXQgYXJlIGxlYXZpbmcuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKGNoaWxkOiBSZWFjdEVsZW1lbnQpIC0+IFJlYWN0RWxlbWVudFxuICAgKi9cbiAgY2hpbGRGYWN0b3J5OiBQcm9wVHlwZXMuZnVuY1xufSA6IHt9O1xuVHJhbnNpdGlvbkdyb3VwLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IFRyYW5zaXRpb25Hcm91cDsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufSIsImZ1bmN0aW9uIHJlcGxhY2VDbGFzc05hbWUob3JpZ0NsYXNzLCBjbGFzc1RvUmVtb3ZlKSB7XG4gIHJldHVybiBvcmlnQ2xhc3MucmVwbGFjZShuZXcgUmVnRXhwKFwiKF58XFxcXHMpXCIgKyBjbGFzc1RvUmVtb3ZlICsgXCIoPzpcXFxcc3wkKVwiLCAnZycpLCAnJDEnKS5yZXBsYWNlKC9cXHMrL2csICcgJykucmVwbGFjZSgvXlxccyp8XFxzKiQvZywgJycpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW1vdmVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSB7XG4gICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVsZW1lbnQuY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xuICAgIDtcbiAgICBlbGVtZW50LmNsYXNzTmFtZSA9IHJlcGxhY2VDbGFzc05hbWUoZWxlbWVudC5jbGFzc05hbWUsIGNsYXNzTmFtZSk7XG4gIH0gZWxzZSB7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgcmVwbGFjZUNsYXNzTmFtZShlbGVtZW50LmNsYXNzTmFtZSAmJiBlbGVtZW50LmNsYXNzTmFtZS5iYXNlVmFsIHx8ICcnLCBjbGFzc05hbWUpKTtcbiAgfVxufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGNvbmZpZyBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyB0aW1lb3V0c1NoYXBlIH0gZnJvbSAnLi91dGlscy9Qcm9wVHlwZXMnO1xuaW1wb3J0IFRyYW5zaXRpb25Hcm91cENvbnRleHQgZnJvbSAnLi9UcmFuc2l0aW9uR3JvdXBDb250ZXh0JztcbmV4cG9ydCB2YXIgVU5NT1VOVEVEID0gJ3VubW91bnRlZCc7XG5leHBvcnQgdmFyIEVYSVRFRCA9ICdleGl0ZWQnO1xuZXhwb3J0IHZhciBFTlRFUklORyA9ICdlbnRlcmluZyc7XG5leHBvcnQgdmFyIEVOVEVSRUQgPSAnZW50ZXJlZCc7XG5leHBvcnQgdmFyIEVYSVRJTkcgPSAnZXhpdGluZyc7XG4vKipcbiAqIFRoZSBUcmFuc2l0aW9uIGNvbXBvbmVudCBsZXRzIHlvdSBkZXNjcmliZSBhIHRyYW5zaXRpb24gZnJvbSBvbmUgY29tcG9uZW50XG4gKiBzdGF0ZSB0byBhbm90aGVyIF9vdmVyIHRpbWVfIHdpdGggYSBzaW1wbGUgZGVjbGFyYXRpdmUgQVBJLiBNb3N0IGNvbW1vbmx5XG4gKiBpdCdzIHVzZWQgdG8gYW5pbWF0ZSB0aGUgbW91bnRpbmcgYW5kIHVubW91bnRpbmcgb2YgYSBjb21wb25lbnQsIGJ1dCBjYW4gYWxzb1xuICogYmUgdXNlZCB0byBkZXNjcmliZSBpbi1wbGFjZSB0cmFuc2l0aW9uIHN0YXRlcyBhcyB3ZWxsLlxuICpcbiAqIC0tLVxuICpcbiAqICoqTm90ZSoqOiBgVHJhbnNpdGlvbmAgaXMgYSBwbGF0Zm9ybS1hZ25vc3RpYyBiYXNlIGNvbXBvbmVudC4gSWYgeW91J3JlIHVzaW5nXG4gKiB0cmFuc2l0aW9ucyBpbiBDU1MsIHlvdSdsbCBwcm9iYWJseSB3YW50IHRvIHVzZVxuICogW2BDU1NUcmFuc2l0aW9uYF0oaHR0cHM6Ly9yZWFjdGNvbW11bml0eS5vcmcvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9jc3MtdHJhbnNpdGlvbilcbiAqIGluc3RlYWQuIEl0IGluaGVyaXRzIGFsbCB0aGUgZmVhdHVyZXMgb2YgYFRyYW5zaXRpb25gLCBidXQgY29udGFpbnNcbiAqIGFkZGl0aW9uYWwgZmVhdHVyZXMgbmVjZXNzYXJ5IHRvIHBsYXkgbmljZSB3aXRoIENTUyB0cmFuc2l0aW9ucyAoaGVuY2UgdGhlXG4gKiBuYW1lIG9mIHRoZSBjb21wb25lbnQpLlxuICpcbiAqIC0tLVxuICpcbiAqIEJ5IGRlZmF1bHQgdGhlIGBUcmFuc2l0aW9uYCBjb21wb25lbnQgZG9lcyBub3QgYWx0ZXIgdGhlIGJlaGF2aW9yIG9mIHRoZVxuICogY29tcG9uZW50IGl0IHJlbmRlcnMsIGl0IG9ubHkgdHJhY2tzIFwiZW50ZXJcIiBhbmQgXCJleGl0XCIgc3RhdGVzIGZvciB0aGVcbiAqIGNvbXBvbmVudHMuIEl0J3MgdXAgdG8geW91IHRvIGdpdmUgbWVhbmluZyBhbmQgZWZmZWN0IHRvIHRob3NlIHN0YXRlcy4gRm9yXG4gKiBleGFtcGxlIHdlIGNhbiBhZGQgc3R5bGVzIHRvIGEgY29tcG9uZW50IHdoZW4gaXQgZW50ZXJzIG9yIGV4aXRzOlxuICpcbiAqIGBgYGpzeFxuICogaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuICpcbiAqIGNvbnN0IGR1cmF0aW9uID0gMzAwO1xuICpcbiAqIGNvbnN0IGRlZmF1bHRTdHlsZSA9IHtcbiAqICAgdHJhbnNpdGlvbjogYG9wYWNpdHkgJHtkdXJhdGlvbn1tcyBlYXNlLWluLW91dGAsXG4gKiAgIG9wYWNpdHk6IDAsXG4gKiB9XG4gKlxuICogY29uc3QgdHJhbnNpdGlvblN0eWxlcyA9IHtcbiAqICAgZW50ZXJpbmc6IHsgb3BhY2l0eTogMSB9LFxuICogICBlbnRlcmVkOiAgeyBvcGFjaXR5OiAxIH0sXG4gKiAgIGV4aXRpbmc6ICB7IG9wYWNpdHk6IDAgfSxcbiAqICAgZXhpdGVkOiAgeyBvcGFjaXR5OiAwIH0sXG4gKiB9O1xuICpcbiAqIGNvbnN0IEZhZGUgPSAoeyBpbjogaW5Qcm9wIH0pID0+IChcbiAqICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17ZHVyYXRpb259PlxuICogICAgIHtzdGF0ZSA9PiAoXG4gKiAgICAgICA8ZGl2IHN0eWxlPXt7XG4gKiAgICAgICAgIC4uLmRlZmF1bHRTdHlsZSxcbiAqICAgICAgICAgLi4udHJhbnNpdGlvblN0eWxlc1tzdGF0ZV1cbiAqICAgICAgIH19PlxuICogICAgICAgICBJJ20gYSBmYWRlIFRyYW5zaXRpb24hXG4gKiAgICAgICA8L2Rpdj5cbiAqICAgICApfVxuICogICA8L1RyYW5zaXRpb24+XG4gKiApO1xuICogYGBgXG4gKlxuICogVGhlcmUgYXJlIDQgbWFpbiBzdGF0ZXMgYSBUcmFuc2l0aW9uIGNhbiBiZSBpbjpcbiAqICAtIGAnZW50ZXJpbmcnYFxuICogIC0gYCdlbnRlcmVkJ2BcbiAqICAtIGAnZXhpdGluZydgXG4gKiAgLSBgJ2V4aXRlZCdgXG4gKlxuICogVHJhbnNpdGlvbiBzdGF0ZSBpcyB0b2dnbGVkIHZpYSB0aGUgYGluYCBwcm9wLiBXaGVuIGB0cnVlYCB0aGUgY29tcG9uZW50XG4gKiBiZWdpbnMgdGhlIFwiRW50ZXJcIiBzdGFnZS4gRHVyaW5nIHRoaXMgc3RhZ2UsIHRoZSBjb21wb25lbnQgd2lsbCBzaGlmdCBmcm9tXG4gKiBpdHMgY3VycmVudCB0cmFuc2l0aW9uIHN0YXRlLCB0byBgJ2VudGVyaW5nJ2AgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGVcbiAqIHRyYW5zaXRpb24gYW5kIHRoZW4gdG8gdGhlIGAnZW50ZXJlZCdgIHN0YWdlIG9uY2UgaXQncyBjb21wbGV0ZS4gTGV0J3MgdGFrZVxuICogdGhlIGZvbGxvd2luZyBleGFtcGxlICh3ZSdsbCB1c2UgdGhlXG4gKiBbdXNlU3RhdGVdKGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9ob29rcy1yZWZlcmVuY2UuaHRtbCN1c2VzdGF0ZSkgaG9vayk6XG4gKlxuICogYGBganN4XG4gKiBmdW5jdGlvbiBBcHAoKSB7XG4gKiAgIGNvbnN0IFtpblByb3AsIHNldEluUHJvcF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gKiAgIHJldHVybiAoXG4gKiAgICAgPGRpdj5cbiAqICAgICAgIDxUcmFuc2l0aW9uIGluPXtpblByb3B9IHRpbWVvdXQ9ezUwMH0+XG4gKiAgICAgICAgIHtzdGF0ZSA9PiAoXG4gKiAgICAgICAgICAgLy8gLi4uXG4gKiAgICAgICAgICl9XG4gKiAgICAgICA8L1RyYW5zaXRpb24+XG4gKiAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHNldEluUHJvcCh0cnVlKX0+XG4gKiAgICAgICAgIENsaWNrIHRvIEVudGVyXG4gKiAgICAgICA8L2J1dHRvbj5cbiAqICAgICA8L2Rpdj5cbiAqICAgKTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkIHRoZSBjb21wb25lbnQgd2lsbCBzaGlmdCB0byB0aGUgYCdlbnRlcmluZydgIHN0YXRlXG4gKiBhbmQgc3RheSB0aGVyZSBmb3IgNTAwbXMgKHRoZSB2YWx1ZSBvZiBgdGltZW91dGApIGJlZm9yZSBpdCBmaW5hbGx5IHN3aXRjaGVzXG4gKiB0byBgJ2VudGVyZWQnYC5cbiAqXG4gKiBXaGVuIGBpbmAgaXMgYGZhbHNlYCB0aGUgc2FtZSB0aGluZyBoYXBwZW5zIGV4Y2VwdCB0aGUgc3RhdGUgbW92ZXMgZnJvbVxuICogYCdleGl0aW5nJ2AgdG8gYCdleGl0ZWQnYC5cbiAqL1xuXG52YXIgVHJhbnNpdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUcmFuc2l0aW9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgdmFyIHBhcmVudEdyb3VwID0gY29udGV4dDsgLy8gSW4gdGhlIGNvbnRleHQgb2YgYSBUcmFuc2l0aW9uR3JvdXAgYWxsIGVudGVycyBhcmUgcmVhbGx5IGFwcGVhcnNcblxuICAgIHZhciBhcHBlYXIgPSBwYXJlbnRHcm91cCAmJiAhcGFyZW50R3JvdXAuaXNNb3VudGluZyA/IHByb3BzLmVudGVyIDogcHJvcHMuYXBwZWFyO1xuICAgIHZhciBpbml0aWFsU3RhdHVzO1xuICAgIF90aGlzLmFwcGVhclN0YXR1cyA9IG51bGw7XG5cbiAgICBpZiAocHJvcHMuaW4pIHtcbiAgICAgIGlmIChhcHBlYXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVYSVRFRDtcbiAgICAgICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gRU5URVJJTkc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRU5URVJFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb3BzLnVubW91bnRPbkV4aXQgfHwgcHJvcHMubW91bnRPbkVudGVyKSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBVTk1PVU5URUQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgfVxuICAgIH1cblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgc3RhdHVzOiBpbml0aWFsU3RhdHVzXG4gICAgfTtcbiAgICBfdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFRyYW5zaXRpb24uZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKF9yZWYsIHByZXZTdGF0ZSkge1xuICAgIHZhciBuZXh0SW4gPSBfcmVmLmluO1xuXG4gICAgaWYgKG5leHRJbiAmJiBwcmV2U3RhdGUuc3RhdHVzID09PSBVTk1PVU5URUQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9IC8vIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHByZXZQcm9wcykge1xuICAvLyAgIGxldCBuZXh0U3RhdHVzID0gbnVsbFxuICAvLyAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgLy8gICAgIGNvbnN0IHsgc3RhdHVzIH0gPSB0aGlzLnN0YXRlXG4gIC8vICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAvLyAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfSBlbHNlIHtcbiAgLy8gICAgICAgaWYgKHN0YXR1cyA9PT0gRU5URVJJTkcgfHwgc3RhdHVzID09PSBFTlRFUkVEKSB7XG4gIC8vICAgICAgICAgbmV4dFN0YXR1cyA9IEVYSVRJTkdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfVxuICAvLyAgIH1cbiAgLy8gICByZXR1cm4geyBuZXh0U3RhdHVzIH1cbiAgLy8gfVxuICA7XG5cbiAgdmFyIF9wcm90byA9IFRyYW5zaXRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMudXBkYXRlU3RhdHVzKHRydWUsIHRoaXMuYXBwZWFyU3RhdHVzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIHZhciBuZXh0U3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgICAgaWYgKHRoaXMucHJvcHMuaW4pIHtcbiAgICAgICAgaWYgKHN0YXR1cyAhPT0gRU5URVJJTkcgJiYgc3RhdHVzICE9PSBFTlRFUkVEKSB7XG4gICAgICAgICAgbmV4dFN0YXR1cyA9IEVOVEVSSU5HO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElORztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudXBkYXRlU3RhdHVzKGZhbHNlLCBuZXh0U3RhdHVzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuICB9O1xuXG4gIF9wcm90by5nZXRUaW1lb3V0cyA9IGZ1bmN0aW9uIGdldFRpbWVvdXRzKCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpcy5wcm9wcy50aW1lb3V0O1xuICAgIHZhciBleGl0LCBlbnRlciwgYXBwZWFyO1xuICAgIGV4aXQgPSBlbnRlciA9IGFwcGVhciA9IHRpbWVvdXQ7XG5cbiAgICBpZiAodGltZW91dCAhPSBudWxsICYmIHR5cGVvZiB0aW1lb3V0ICE9PSAnbnVtYmVyJykge1xuICAgICAgZXhpdCA9IHRpbWVvdXQuZXhpdDtcbiAgICAgIGVudGVyID0gdGltZW91dC5lbnRlcjsgLy8gVE9ETzogcmVtb3ZlIGZhbGxiYWNrIGZvciBuZXh0IG1ham9yXG5cbiAgICAgIGFwcGVhciA9IHRpbWVvdXQuYXBwZWFyICE9PSB1bmRlZmluZWQgPyB0aW1lb3V0LmFwcGVhciA6IGVudGVyO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBleGl0OiBleGl0LFxuICAgICAgZW50ZXI6IGVudGVyLFxuICAgICAgYXBwZWFyOiBhcHBlYXJcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by51cGRhdGVTdGF0dXMgPSBmdW5jdGlvbiB1cGRhdGVTdGF0dXMobW91bnRpbmcsIG5leHRTdGF0dXMpIHtcbiAgICBpZiAobW91bnRpbmcgPT09IHZvaWQgMCkge1xuICAgICAgbW91bnRpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAobmV4dFN0YXR1cyAhPT0gbnVsbCkge1xuICAgICAgLy8gbmV4dFN0YXR1cyB3aWxsIGFsd2F5cyBiZSBFTlRFUklORyBvciBFWElUSU5HLlxuICAgICAgdGhpcy5jYW5jZWxOZXh0Q2FsbGJhY2soKTtcblxuICAgICAgaWYgKG5leHRTdGF0dXMgPT09IEVOVEVSSU5HKSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUVudGVyKG1vdW50aW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUV4aXQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMudW5tb3VudE9uRXhpdCAmJiB0aGlzLnN0YXRlLnN0YXR1cyA9PT0gRVhJVEVEKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBVTk1PVU5URURcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUVudGVyID0gZnVuY3Rpb24gcGVyZm9ybUVudGVyKG1vdW50aW5nKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgZW50ZXIgPSB0aGlzLnByb3BzLmVudGVyO1xuICAgIHZhciBhcHBlYXJpbmcgPSB0aGlzLmNvbnRleHQgPyB0aGlzLmNvbnRleHQuaXNNb3VudGluZyA6IG1vdW50aW5nO1xuXG4gICAgdmFyIF9yZWYyID0gdGhpcy5wcm9wcy5ub2RlUmVmID8gW2FwcGVhcmluZ10gOiBbUmVhY3RET00uZmluZERPTU5vZGUodGhpcyksIGFwcGVhcmluZ10sXG4gICAgICAgIG1heWJlTm9kZSA9IF9yZWYyWzBdLFxuICAgICAgICBtYXliZUFwcGVhcmluZyA9IF9yZWYyWzFdO1xuXG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuICAgIHZhciBlbnRlclRpbWVvdXQgPSBhcHBlYXJpbmcgPyB0aW1lb3V0cy5hcHBlYXIgOiB0aW1lb3V0cy5lbnRlcjsgLy8gbm8gZW50ZXIgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRU5URVJFRFxuICAgIC8vIGlmIHdlIGFyZSBtb3VudGluZyBhbmQgcnVubmluZyB0aGlzIGl0IG1lYW5zIGFwcGVhciBfbXVzdF8gYmUgc2V0XG5cbiAgICBpZiAoIW1vdW50aW5nICYmICFlbnRlciB8fCBjb25maWcuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyZWQobWF5YmVOb2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25FbnRlcihtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcbiAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IEVOVEVSSU5HXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJpbmcobWF5YmVOb2RlLCBtYXliZUFwcGVhcmluZyk7XG5cbiAgICAgIF90aGlzMi5vblRyYW5zaXRpb25FbmQoZW50ZXJUaW1lb3V0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRU5URVJFRFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUV4aXQgPSBmdW5jdGlvbiBwZXJmb3JtRXhpdCgpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBleGl0ID0gdGhpcy5wcm9wcy5leGl0O1xuICAgIHZhciB0aW1lb3V0cyA9IHRoaXMuZ2V0VGltZW91dHMoKTtcbiAgICB2YXIgbWF5YmVOb2RlID0gdGhpcy5wcm9wcy5ub2RlUmVmID8gdW5kZWZpbmVkIDogUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7IC8vIG5vIGV4aXQgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRVhJVEVEXG5cbiAgICBpZiAoIWV4aXQgfHwgY29uZmlnLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRlZChtYXliZU5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkV4aXQobWF5YmVOb2RlKTtcbiAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IEVYSVRJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczMucHJvcHMub25FeGl0aW5nKG1heWJlTm9kZSk7XG5cbiAgICAgIF90aGlzMy5vblRyYW5zaXRpb25FbmQodGltZW91dHMuZXhpdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG1heWJlTm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNhbmNlbE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIGNhbmNlbE5leHRDYWxsYmFjaygpIHtcbiAgICBpZiAodGhpcy5uZXh0Q2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCgpO1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2FmZVNldFN0YXRlID0gZnVuY3Rpb24gc2FmZVNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAvLyBUaGlzIHNob3VsZG4ndCBiZSBuZWNlc3NhcnksIGJ1dCB0aGVyZSBhcmUgd2VpcmQgcmFjZSBjb25kaXRpb25zIHdpdGhcbiAgICAvLyBzZXRTdGF0ZSBjYWxsYmFja3MgYW5kIHVubW91bnRpbmcgaW4gdGVzdGluZywgc28gYWx3YXlzIG1ha2Ugc3VyZSB0aGF0XG4gICAgLy8gd2UgY2FuIGNhbmNlbCBhbnkgcGVuZGluZyBzZXRTdGF0ZSBjYWxsYmFja3MgYWZ0ZXIgd2UgdW5tb3VudC5cbiAgICBjYWxsYmFjayA9IHRoaXMuc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKTtcbiAgICB0aGlzLnNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spO1xuICB9O1xuXG4gIF9wcm90by5zZXROZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiBzZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBhY3RpdmUgPSB0cnVlO1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIF90aGlzNC5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgICAgICBjYWxsYmFjayhldmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5uZXh0Q2FsbGJhY2s7XG4gIH07XG5cbiAgX3Byb3RvLm9uVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZCh0aW1lb3V0LCBoYW5kbGVyKSB7XG4gICAgdGhpcy5zZXROZXh0Q2FsbGJhY2soaGFuZGxlcik7XG4gICAgdmFyIG5vZGUgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyB0aGlzLnByb3BzLm5vZGVSZWYuY3VycmVudCA6IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpO1xuICAgIHZhciBkb2VzTm90SGF2ZVRpbWVvdXRPckxpc3RlbmVyID0gdGltZW91dCA9PSBudWxsICYmICF0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyO1xuXG4gICAgaWYgKCFub2RlIHx8IGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIDApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKSB7XG4gICAgICB2YXIgX3JlZjMgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyBbdGhpcy5uZXh0Q2FsbGJhY2tdIDogW25vZGUsIHRoaXMubmV4dENhbGxiYWNrXSxcbiAgICAgICAgICBtYXliZU5vZGUgPSBfcmVmM1swXSxcbiAgICAgICAgICBtYXliZU5leHRDYWxsYmFjayA9IF9yZWYzWzFdO1xuXG4gICAgICB0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKG1heWJlTm9kZSwgbWF5YmVOZXh0Q2FsbGJhY2spO1xuICAgIH1cblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIHRpbWVvdXQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgIGlmIChzdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgX2luID0gX3RoaXMkcHJvcHMuaW4sXG4gICAgICAgIF9tb3VudE9uRW50ZXIgPSBfdGhpcyRwcm9wcy5tb3VudE9uRW50ZXIsXG4gICAgICAgIF91bm1vdW50T25FeGl0ID0gX3RoaXMkcHJvcHMudW5tb3VudE9uRXhpdCxcbiAgICAgICAgX2FwcGVhciA9IF90aGlzJHByb3BzLmFwcGVhcixcbiAgICAgICAgX2VudGVyID0gX3RoaXMkcHJvcHMuZW50ZXIsXG4gICAgICAgIF9leGl0ID0gX3RoaXMkcHJvcHMuZXhpdCxcbiAgICAgICAgX3RpbWVvdXQgPSBfdGhpcyRwcm9wcy50aW1lb3V0LFxuICAgICAgICBfYWRkRW5kTGlzdGVuZXIgPSBfdGhpcyRwcm9wcy5hZGRFbmRMaXN0ZW5lcixcbiAgICAgICAgX29uRW50ZXIgPSBfdGhpcyRwcm9wcy5vbkVudGVyLFxuICAgICAgICBfb25FbnRlcmluZyA9IF90aGlzJHByb3BzLm9uRW50ZXJpbmcsXG4gICAgICAgIF9vbkVudGVyZWQgPSBfdGhpcyRwcm9wcy5vbkVudGVyZWQsXG4gICAgICAgIF9vbkV4aXQgPSBfdGhpcyRwcm9wcy5vbkV4aXQsXG4gICAgICAgIF9vbkV4aXRpbmcgPSBfdGhpcyRwcm9wcy5vbkV4aXRpbmcsXG4gICAgICAgIF9vbkV4aXRlZCA9IF90aGlzJHByb3BzLm9uRXhpdGVkLFxuICAgICAgICBfbm9kZVJlZiA9IF90aGlzJHByb3BzLm5vZGVSZWYsXG4gICAgICAgIGNoaWxkUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJpblwiLCBcIm1vdW50T25FbnRlclwiLCBcInVubW91bnRPbkV4aXRcIiwgXCJhcHBlYXJcIiwgXCJlbnRlclwiLCBcImV4aXRcIiwgXCJ0aW1lb3V0XCIsIFwiYWRkRW5kTGlzdGVuZXJcIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRW50ZXJlZFwiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGluZ1wiLCBcIm9uRXhpdGVkXCIsIFwibm9kZVJlZlwiXSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgLyojX19QVVJFX18qL1xuICAgICAgLy8gYWxsb3dzIGZvciBuZXN0ZWQgVHJhbnNpdGlvbnNcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogbnVsbFxuICAgICAgfSwgdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gY2hpbGRyZW4oc3RhdHVzLCBjaGlsZFByb3BzKSA6IFJlYWN0LmNsb25lRWxlbWVudChSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSwgY2hpbGRQcm9wcykpXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVHJhbnNpdGlvbi5jb250ZXh0VHlwZSA9IFRyYW5zaXRpb25Hcm91cENvbnRleHQ7XG5UcmFuc2l0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIEEgUmVhY3QgcmVmZXJlbmNlIHRvIERPTSBlbGVtZW50IHRoYXQgbmVlZCB0byB0cmFuc2l0aW9uOlxuICAgKiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTExMjcxMzAvNDY3MTkzMlxuICAgKlxuICAgKiAgIC0gV2hlbiBgbm9kZVJlZmAgcHJvcCBpcyB1c2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZCB0byBjYWxsYmFjayBmdW5jdGlvbnNcbiAgICogICAgICAoZS5nLiBgb25FbnRlcmApIGJlY2F1c2UgdXNlciBhbHJlYWR5IGhhcyBkaXJlY3QgYWNjZXNzIHRvIHRoZSBub2RlLlxuICAgKiAgIC0gV2hlbiBjaGFuZ2luZyBga2V5YCBwcm9wIG9mIGBUcmFuc2l0aW9uYCBpbiBhIGBUcmFuc2l0aW9uR3JvdXBgIGEgbmV3XG4gICAqICAgICBgbm9kZVJlZmAgbmVlZCB0byBiZSBwcm92aWRlZCB0byBgVHJhbnNpdGlvbmAgd2l0aCBjaGFuZ2VkIGBrZXlgIHByb3BcbiAgICogICAgIChzZWVcbiAgICogICAgIFt0ZXN0L0NTU1RyYW5zaXRpb24tdGVzdC5qc10oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9ibG9iLzEzNDM1Zjg5N2IzYWI3MWY2ZTE5ZDcyNGYxNDU1OTZmNTkxMDU4MWMvdGVzdC9DU1NUcmFuc2l0aW9uLXRlc3QuanMjTDM2Mi1MNDM3KSkuXG4gICAqL1xuICBub2RlUmVmOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IHR5cGVvZiBFbGVtZW50ID09PSAndW5kZWZpbmVkJyA/IFByb3BUeXBlcy5hbnkgOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihFbGVtZW50KVxuICB9KSxcblxuICAvKipcbiAgICogQSBgZnVuY3Rpb25gIGNoaWxkIGNhbiBiZSB1c2VkIGluc3RlYWQgb2YgYSBSZWFjdCBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uIGlzXG4gICAqIGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IHRyYW5zaXRpb24gc3RhdHVzIChgJ2VudGVyaW5nJ2AsIGAnZW50ZXJlZCdgLFxuICAgKiBgJ2V4aXRpbmcnYCwgYCdleGl0ZWQnYCksIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGFwcGx5IGNvbnRleHRcbiAgICogc3BlY2lmaWMgcHJvcHMgdG8gYSBjb21wb25lbnQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiA8VHJhbnNpdGlvbiBpbj17dGhpcy5zdGF0ZS5pbn0gdGltZW91dD17MTUwfT5cbiAgICogICB7c3RhdGUgPT4gKFxuICAgKiAgICAgPE15Q29tcG9uZW50IGNsYXNzTmFtZT17YGZhZGUgZmFkZS0ke3N0YXRlfWB9IC8+XG4gICAqICAgKX1cbiAgICogPC9UcmFuc2l0aW9uPlxuICAgKiBgYGBcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLCBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkXSkuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogU2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBzdGF0ZXNcbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGlzIG1vdW50ZWQgaW1tZWRpYXRlbHkgYWxvbmcgd2l0aFxuICAgKiB0aGUgcGFyZW50IGBUcmFuc2l0aW9uYCBjb21wb25lbnQuIElmIHlvdSB3YW50IHRvIFwibGF6eSBtb3VudFwiIHRoZSBjb21wb25lbnQgb24gdGhlXG4gICAqIGZpcnN0IGBpbj17dHJ1ZX1gIHlvdSBjYW4gc2V0IGBtb3VudE9uRW50ZXJgLiBBZnRlciB0aGUgZmlyc3QgZW50ZXIgdHJhbnNpdGlvbiB0aGUgY29tcG9uZW50IHdpbGwgc3RheVxuICAgKiBtb3VudGVkLCBldmVuIG9uIFwiZXhpdGVkXCIsIHVubGVzcyB5b3UgYWxzbyBzcGVjaWZ5IGB1bm1vdW50T25FeGl0YC5cbiAgICovXG4gIG1vdW50T25FbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBzdGF5cyBtb3VudGVkIGFmdGVyIGl0IHJlYWNoZXMgdGhlIGAnZXhpdGVkJ2Agc3RhdGUuXG4gICAqIFNldCBgdW5tb3VudE9uRXhpdGAgaWYgeW91J2QgcHJlZmVyIHRvIHVubW91bnQgdGhlIGNvbXBvbmVudCBhZnRlciBpdCBmaW5pc2hlcyBleGl0aW5nLlxuICAgKi9cbiAgdW5tb3VudE9uRXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBkb2VzIG5vdCBwZXJmb3JtIHRoZSBlbnRlciB0cmFuc2l0aW9uIHdoZW5cbiAgICogaXQgZmlyc3QgbW91bnRzLCByZWdhcmRsZXNzIG9mIHRoZSB2YWx1ZSBvZiBgaW5gLiBJZiB5b3Ugd2FudCB0aGlzXG4gICAqIGJlaGF2aW9yLCBzZXQgYm90aCBgYXBwZWFyYCBhbmQgYGluYCB0byBgdHJ1ZWAuXG4gICAqXG4gICAqID4gKipOb3RlKio6IHRoZXJlIGFyZSBubyBzcGVjaWFsIGFwcGVhciBzdGF0ZXMgbGlrZSBgYXBwZWFyaW5nYC9gYXBwZWFyZWRgLCB0aGlzIHByb3BcbiAgICogPiBvbmx5IGFkZHMgYW4gYWRkaXRpb25hbCBlbnRlciB0cmFuc2l0aW9uLiBIb3dldmVyLCBpbiB0aGVcbiAgICogPiBgPENTU1RyYW5zaXRpb24+YCBjb21wb25lbnQgdGhhdCBmaXJzdCBlbnRlciB0cmFuc2l0aW9uIGRvZXMgcmVzdWx0IGluXG4gICAqID4gYWRkaXRpb25hbCBgLmFwcGVhci0qYCBjbGFzc2VzLCB0aGF0IHdheSB5b3UgY2FuIGNob29zZSB0byBzdHlsZSBpdFxuICAgKiA+IGRpZmZlcmVudGx5LlxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZW50ZXIgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIGV4aXQgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBleGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFJlcXVpcmVkIHVubGVzcyBgYWRkRW5kTGlzdGVuZXJgIGlzIHByb3ZpZGVkLlxuICAgKlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zOlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogdGltZW91dD17NTAwfVxuICAgKiBgYGBcbiAgICpcbiAgICogb3IgaW5kaXZpZHVhbGx5OlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogdGltZW91dD17e1xuICAgKiAgYXBwZWFyOiA1MDAsXG4gICAqICBlbnRlcjogMzAwLFxuICAgKiAgZXhpdDogNTAwLFxuICAgKiB9fVxuICAgKiBgYGBcbiAgICpcbiAgICogLSBgYXBwZWFyYCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgb2YgYGVudGVyYFxuICAgKiAtIGBlbnRlcmAgZGVmYXVsdHMgdG8gYDBgXG4gICAqIC0gYGV4aXRgIGRlZmF1bHRzIHRvIGAwYFxuICAgKlxuICAgKiBAdHlwZSB7bnVtYmVyIHwgeyBlbnRlcj86IG51bWJlciwgZXhpdD86IG51bWJlciwgYXBwZWFyPzogbnVtYmVyIH19XG4gICAqL1xuICB0aW1lb3V0OiBmdW5jdGlvbiB0aW1lb3V0KHByb3BzKSB7XG4gICAgdmFyIHB0ID0gdGltZW91dHNTaGFwZTtcbiAgICBpZiAoIXByb3BzLmFkZEVuZExpc3RlbmVyKSBwdCA9IHB0LmlzUmVxdWlyZWQ7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHQuYXBwbHkodm9pZCAwLCBbcHJvcHNdLmNvbmNhdChhcmdzKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSB0cmFuc2l0aW9uIGVuZCB0cmlnZ2VyLiBDYWxsZWQgd2l0aCB0aGUgdHJhbnNpdGlvbmluZ1xuICAgKiBET00gbm9kZSBhbmQgYSBgZG9uZWAgY2FsbGJhY2suIEFsbG93cyBmb3IgbW9yZSBmaW5lIGdyYWluZWQgdHJhbnNpdGlvbiBlbmRcbiAgICogbG9naWMuIFRpbWVvdXRzIGFyZSBzdGlsbCB1c2VkIGFzIGEgZmFsbGJhY2sgaWYgcHJvdmlkZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiBhZGRFbmRMaXN0ZW5lcj17KG5vZGUsIGRvbmUpID0+IHtcbiAgICogICAvLyB1c2UgdGhlIGNzcyB0cmFuc2l0aW9uZW5kIGV2ZW50IHRvIG1hcmsgdGhlIGZpbmlzaCBvZiBhIHRyYW5zaXRpb25cbiAgICogICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBkb25lLCBmYWxzZSk7XG4gICAqIH19XG4gICAqIGBgYFxuICAgKi9cbiAgYWRkRW5kTGlzdGVuZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIFwiZW50ZXJpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbClcbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJlbnRlcmVkXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKSAtPiB2b2lkXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIFwiZXhpdGluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZXhpdGluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZXhpdGVkXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuY1xufSA6IHt9OyAvLyBOYW1lIHRoZSBmdW5jdGlvbiBzbyBpdCBpcyBjbGVhcmVyIGluIHRoZSBkb2N1bWVudGF0aW9uXG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5UcmFuc2l0aW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgaW46IGZhbHNlLFxuICBtb3VudE9uRW50ZXI6IGZhbHNlLFxuICB1bm1vdW50T25FeGl0OiBmYWxzZSxcbiAgYXBwZWFyOiBmYWxzZSxcbiAgZW50ZXI6IHRydWUsXG4gIGV4aXQ6IHRydWUsXG4gIG9uRW50ZXI6IG5vb3AsXG4gIG9uRW50ZXJpbmc6IG5vb3AsXG4gIG9uRW50ZXJlZDogbm9vcCxcbiAgb25FeGl0OiBub29wLFxuICBvbkV4aXRpbmc6IG5vb3AsXG4gIG9uRXhpdGVkOiBub29wXG59O1xuVHJhbnNpdGlvbi5VTk1PVU5URUQgPSBVTk1PVU5URUQ7XG5UcmFuc2l0aW9uLkVYSVRFRCA9IEVYSVRFRDtcblRyYW5zaXRpb24uRU5URVJJTkcgPSBFTlRFUklORztcblRyYW5zaXRpb24uRU5URVJFRCA9IEVOVEVSRUQ7XG5UcmFuc2l0aW9uLkVYSVRJTkcgPSBFWElUSU5HO1xuZXhwb3J0IGRlZmF1bHQgVHJhbnNpdGlvbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGFkZE9uZUNsYXNzIGZyb20gJ2RvbS1oZWxwZXJzL2FkZENsYXNzJztcbmltcG9ydCByZW1vdmVPbmVDbGFzcyBmcm9tICdkb20taGVscGVycy9yZW1vdmVDbGFzcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRyYW5zaXRpb24gZnJvbSAnLi9UcmFuc2l0aW9uJztcbmltcG9ydCB7IGNsYXNzTmFtZXNTaGFwZSB9IGZyb20gJy4vdXRpbHMvUHJvcFR5cGVzJztcblxudmFyIF9hZGRDbGFzcyA9IGZ1bmN0aW9uIGFkZENsYXNzKG5vZGUsIGNsYXNzZXMpIHtcbiAgcmV0dXJuIG5vZGUgJiYgY2xhc3NlcyAmJiBjbGFzc2VzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBhZGRPbmVDbGFzcyhub2RlLCBjKTtcbiAgfSk7XG59O1xuXG52YXIgcmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbiByZW1vdmVDbGFzcyhub2RlLCBjbGFzc2VzKSB7XG4gIHJldHVybiBub2RlICYmIGNsYXNzZXMgJiYgY2xhc3Nlcy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gcmVtb3ZlT25lQ2xhc3Mobm9kZSwgYyk7XG4gIH0pO1xufTtcbi8qKlxuICogQSB0cmFuc2l0aW9uIGNvbXBvbmVudCBpbnNwaXJlZCBieSB0aGUgZXhjZWxsZW50XG4gKiBbbmctYW5pbWF0ZV0oaHR0cHM6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvYXBpL25nQW5pbWF0ZSkgbGlicmFyeSwgeW91IHNob3VsZFxuICogdXNlIGl0IGlmIHlvdSdyZSB1c2luZyBDU1MgdHJhbnNpdGlvbnMgb3IgYW5pbWF0aW9ucy4gSXQncyBidWlsdCB1cG9uIHRoZVxuICogW2BUcmFuc2l0aW9uYF0oaHR0cHM6Ly9yZWFjdGNvbW11bml0eS5vcmcvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC90cmFuc2l0aW9uKVxuICogY29tcG9uZW50LCBzbyBpdCBpbmhlcml0cyBhbGwgb2YgaXRzIHByb3BzLlxuICpcbiAqIGBDU1NUcmFuc2l0aW9uYCBhcHBsaWVzIGEgcGFpciBvZiBjbGFzcyBuYW1lcyBkdXJpbmcgdGhlIGBhcHBlYXJgLCBgZW50ZXJgLFxuICogYW5kIGBleGl0YCBzdGF0ZXMgb2YgdGhlIHRyYW5zaXRpb24uIFRoZSBmaXJzdCBjbGFzcyBpcyBhcHBsaWVkIGFuZCB0aGVuIGFcbiAqIHNlY29uZCBgKi1hY3RpdmVgIGNsYXNzIGluIG9yZGVyIHRvIGFjdGl2YXRlIHRoZSBDU1MgdHJhbnNpdGlvbi4gQWZ0ZXIgdGhlXG4gKiB0cmFuc2l0aW9uLCBtYXRjaGluZyBgKi1kb25lYCBjbGFzcyBuYW1lcyBhcmUgYXBwbGllZCB0byBwZXJzaXN0IHRoZVxuICogdHJhbnNpdGlvbiBzdGF0ZS5cbiAqXG4gKiBgYGBqc3hcbiAqIGZ1bmN0aW9uIEFwcCgpIHtcbiAqICAgY29uc3QgW2luUHJvcCwgc2V0SW5Qcm9wXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPENTU1RyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17MjAwfSBjbGFzc05hbWVzPVwibXktbm9kZVwiPlxuICogICAgICAgICA8ZGl2PlxuICogICAgICAgICAgIHtcIkknbGwgcmVjZWl2ZSBteS1ub2RlLSogY2xhc3Nlc1wifVxuICogICAgICAgICA8L2Rpdj5cbiAqICAgICAgIDwvQ1NTVHJhbnNpdGlvbj5cbiAqICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIG9uQ2xpY2s9eygpID0+IHNldEluUHJvcCh0cnVlKX0+XG4gKiAgICAgICAgIENsaWNrIHRvIEVudGVyXG4gKiAgICAgICA8L2J1dHRvbj5cbiAqICAgICA8L2Rpdj5cbiAqICAgKTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFdoZW4gdGhlIGBpbmAgcHJvcCBpcyBzZXQgdG8gYHRydWVgLCB0aGUgY2hpbGQgY29tcG9uZW50IHdpbGwgZmlyc3QgcmVjZWl2ZVxuICogdGhlIGNsYXNzIGBleGFtcGxlLWVudGVyYCwgdGhlbiB0aGUgYGV4YW1wbGUtZW50ZXItYWN0aXZlYCB3aWxsIGJlIGFkZGVkIGluXG4gKiB0aGUgbmV4dCB0aWNrLiBgQ1NTVHJhbnNpdGlvbmAgW2ZvcmNlcyBhXG4gKiByZWZsb3ddKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvYmxvYi81MDA3MzAzZTcyOWE3NGJlNjZhMjFjM2UyMjA1ZTQ5MTY4MjE1MjRiL3NyYy9DU1NUcmFuc2l0aW9uLmpzI0wyMDgtTDIxNSlcbiAqIGJldHdlZW4gYmVmb3JlIGFkZGluZyB0aGUgYGV4YW1wbGUtZW50ZXItYWN0aXZlYC4gVGhpcyBpcyBhbiBpbXBvcnRhbnQgdHJpY2tcbiAqIGJlY2F1c2UgaXQgYWxsb3dzIHVzIHRvIHRyYW5zaXRpb24gYmV0d2VlbiBgZXhhbXBsZS1lbnRlcmAgYW5kXG4gKiBgZXhhbXBsZS1lbnRlci1hY3RpdmVgIGV2ZW4gdGhvdWdoIHRoZXkgd2VyZSBhZGRlZCBpbW1lZGlhdGVseSBvbmUgYWZ0ZXJcbiAqIGFub3RoZXIuIE1vc3Qgbm90YWJseSwgdGhpcyBpcyB3aGF0IG1ha2VzIGl0IHBvc3NpYmxlIGZvciB1cyB0byBhbmltYXRlXG4gKiBfYXBwZWFyYW5jZV8uXG4gKlxuICogYGBgY3NzXG4gKiAubXktbm9kZS1lbnRlciB7XG4gKiAgIG9wYWNpdHk6IDA7XG4gKiB9XG4gKiAubXktbm9kZS1lbnRlci1hY3RpdmUge1xuICogICBvcGFjaXR5OiAxO1xuICogICB0cmFuc2l0aW9uOiBvcGFjaXR5IDIwMG1zO1xuICogfVxuICogLm15LW5vZGUtZXhpdCB7XG4gKiAgIG9wYWNpdHk6IDE7XG4gKiB9XG4gKiAubXktbm9kZS1leGl0LWFjdGl2ZSB7XG4gKiAgIG9wYWNpdHk6IDA7XG4gKiAgIHRyYW5zaXRpb246IG9wYWNpdHkgMjAwbXM7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBgKi1hY3RpdmVgIGNsYXNzZXMgcmVwcmVzZW50IHdoaWNoIHN0eWxlcyB5b3Ugd2FudCB0byBhbmltYXRlICoqdG8qKiwgc28gaXQnc1xuICogaW1wb3J0YW50IHRvIGFkZCBgdHJhbnNpdGlvbmAgZGVjbGFyYXRpb24gb25seSB0byB0aGVtLCBvdGhlcndpc2UgdHJhbnNpdGlvbnNcbiAqIG1pZ2h0IG5vdCBiZWhhdmUgYXMgaW50ZW5kZWQhIFRoaXMgbWlnaHQgbm90IGJlIG9idmlvdXMgd2hlbiB0aGUgdHJhbnNpdGlvbnNcbiAqIGFyZSBzeW1tZXRyaWNhbCwgaS5lLiB3aGVuIGAqLWVudGVyLWFjdGl2ZWAgaXMgdGhlIHNhbWUgYXMgYCotZXhpdGAsIGxpa2UgaW5cbiAqIHRoZSBleGFtcGxlIGFib3ZlIChtaW51cyBgdHJhbnNpdGlvbmApLCBidXQgaXQgYmVjb21lcyBhcHBhcmVudCBpbiBtb3JlXG4gKiBjb21wbGV4IHRyYW5zaXRpb25zLlxuICpcbiAqICoqTm90ZSoqOiBJZiB5b3UncmUgdXNpbmcgdGhlXG4gKiBbYGFwcGVhcmBdKGh0dHA6Ly9yZWFjdGNvbW11bml0eS5vcmcvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC90cmFuc2l0aW9uI1RyYW5zaXRpb24tcHJvcC1hcHBlYXIpXG4gKiBwcm9wLCBtYWtlIHN1cmUgdG8gZGVmaW5lIHN0eWxlcyBmb3IgYC5hcHBlYXItKmAgY2xhc3NlcyBhcyB3ZWxsLlxuICovXG5cblxudmFyIENTU1RyYW5zaXRpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQ1NTVHJhbnNpdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ1NTVHJhbnNpdGlvbigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5hcHBsaWVkQ2xhc3NlcyA9IHtcbiAgICAgIGFwcGVhcjoge30sXG4gICAgICBlbnRlcjoge30sXG4gICAgICBleGl0OiB7fVxuICAgIH07XG5cbiAgICBfdGhpcy5vbkVudGVyID0gZnVuY3Rpb24gKG1heWJlTm9kZSwgbWF5YmVBcHBlYXJpbmcpIHtcbiAgICAgIHZhciBfdGhpcyRyZXNvbHZlQXJndW1lbnQgPSBfdGhpcy5yZXNvbHZlQXJndW1lbnRzKG1heWJlTm9kZSwgbWF5YmVBcHBlYXJpbmcpLFxuICAgICAgICAgIG5vZGUgPSBfdGhpcyRyZXNvbHZlQXJndW1lbnRbMF0sXG4gICAgICAgICAgYXBwZWFyaW5nID0gX3RoaXMkcmVzb2x2ZUFyZ3VtZW50WzFdO1xuXG4gICAgICBfdGhpcy5yZW1vdmVDbGFzc2VzKG5vZGUsICdleGl0Jyk7XG5cbiAgICAgIF90aGlzLmFkZENsYXNzKG5vZGUsIGFwcGVhcmluZyA/ICdhcHBlYXInIDogJ2VudGVyJywgJ2Jhc2UnKTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRW50ZXIpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25FbnRlcihtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMub25FbnRlcmluZyA9IGZ1bmN0aW9uIChtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKSB7XG4gICAgICB2YXIgX3RoaXMkcmVzb2x2ZUFyZ3VtZW50MiA9IF90aGlzLnJlc29sdmVBcmd1bWVudHMobWF5YmVOb2RlLCBtYXliZUFwcGVhcmluZyksXG4gICAgICAgICAgbm9kZSA9IF90aGlzJHJlc29sdmVBcmd1bWVudDJbMF0sXG4gICAgICAgICAgYXBwZWFyaW5nID0gX3RoaXMkcmVzb2x2ZUFyZ3VtZW50MlsxXTtcblxuICAgICAgdmFyIHR5cGUgPSBhcHBlYXJpbmcgPyAnYXBwZWFyJyA6ICdlbnRlcic7XG5cbiAgICAgIF90aGlzLmFkZENsYXNzKG5vZGUsIHR5cGUsICdhY3RpdmUnKTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRW50ZXJpbmcpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25FbnRlcmluZyhtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMub25FbnRlcmVkID0gZnVuY3Rpb24gKG1heWJlTm9kZSwgbWF5YmVBcHBlYXJpbmcpIHtcbiAgICAgIHZhciBfdGhpcyRyZXNvbHZlQXJndW1lbnQzID0gX3RoaXMucmVzb2x2ZUFyZ3VtZW50cyhtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKSxcbiAgICAgICAgICBub2RlID0gX3RoaXMkcmVzb2x2ZUFyZ3VtZW50M1swXSxcbiAgICAgICAgICBhcHBlYXJpbmcgPSBfdGhpcyRyZXNvbHZlQXJndW1lbnQzWzFdO1xuXG4gICAgICB2YXIgdHlwZSA9IGFwcGVhcmluZyA/ICdhcHBlYXInIDogJ2VudGVyJztcblxuICAgICAgX3RoaXMucmVtb3ZlQ2xhc3Nlcyhub2RlLCB0eXBlKTtcblxuICAgICAgX3RoaXMuYWRkQ2xhc3Mobm9kZSwgdHlwZSwgJ2RvbmUnKTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRW50ZXJlZCkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkVudGVyZWQobWF5YmVOb2RlLCBtYXliZUFwcGVhcmluZyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLm9uRXhpdCA9IGZ1bmN0aW9uIChtYXliZU5vZGUpIHtcbiAgICAgIHZhciBfdGhpcyRyZXNvbHZlQXJndW1lbnQ0ID0gX3RoaXMucmVzb2x2ZUFyZ3VtZW50cyhtYXliZU5vZGUpLFxuICAgICAgICAgIG5vZGUgPSBfdGhpcyRyZXNvbHZlQXJndW1lbnQ0WzBdO1xuXG4gICAgICBfdGhpcy5yZW1vdmVDbGFzc2VzKG5vZGUsICdhcHBlYXInKTtcblxuICAgICAgX3RoaXMucmVtb3ZlQ2xhc3Nlcyhub2RlLCAnZW50ZXInKTtcblxuICAgICAgX3RoaXMuYWRkQ2xhc3Mobm9kZSwgJ2V4aXQnLCAnYmFzZScpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FeGl0KSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRXhpdChtYXliZU5vZGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5vbkV4aXRpbmcgPSBmdW5jdGlvbiAobWF5YmVOb2RlKSB7XG4gICAgICB2YXIgX3RoaXMkcmVzb2x2ZUFyZ3VtZW50NSA9IF90aGlzLnJlc29sdmVBcmd1bWVudHMobWF5YmVOb2RlKSxcbiAgICAgICAgICBub2RlID0gX3RoaXMkcmVzb2x2ZUFyZ3VtZW50NVswXTtcblxuICAgICAgX3RoaXMuYWRkQ2xhc3Mobm9kZSwgJ2V4aXQnLCAnYWN0aXZlJyk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkV4aXRpbmcpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25FeGl0aW5nKG1heWJlTm9kZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLm9uRXhpdGVkID0gZnVuY3Rpb24gKG1heWJlTm9kZSkge1xuICAgICAgdmFyIF90aGlzJHJlc29sdmVBcmd1bWVudDYgPSBfdGhpcy5yZXNvbHZlQXJndW1lbnRzKG1heWJlTm9kZSksXG4gICAgICAgICAgbm9kZSA9IF90aGlzJHJlc29sdmVBcmd1bWVudDZbMF07XG5cbiAgICAgIF90aGlzLnJlbW92ZUNsYXNzZXMobm9kZSwgJ2V4aXQnKTtcblxuICAgICAgX3RoaXMuYWRkQ2xhc3Mobm9kZSwgJ2V4aXQnLCAnZG9uZScpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FeGl0ZWQpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25FeGl0ZWQobWF5YmVOb2RlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMucmVzb2x2ZUFyZ3VtZW50cyA9IGZ1bmN0aW9uIChtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKSB7XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMubm9kZVJlZiA/IFtfdGhpcy5wcm9wcy5ub2RlUmVmLmN1cnJlbnQsIG1heWJlTm9kZV0gLy8gaGVyZSBgbWF5YmVOb2RlYCBpcyBhY3R1YWxseSBgYXBwZWFyaW5nYFxuICAgICAgOiBbbWF5YmVOb2RlLCBtYXliZUFwcGVhcmluZ107XG4gICAgfTtcblxuICAgIF90aGlzLmdldENsYXNzTmFtZXMgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgdmFyIGNsYXNzTmFtZXMgPSBfdGhpcy5wcm9wcy5jbGFzc05hbWVzO1xuICAgICAgdmFyIGlzU3RyaW5nQ2xhc3NOYW1lcyA9IHR5cGVvZiBjbGFzc05hbWVzID09PSAnc3RyaW5nJztcbiAgICAgIHZhciBwcmVmaXggPSBpc1N0cmluZ0NsYXNzTmFtZXMgJiYgY2xhc3NOYW1lcyA/IGNsYXNzTmFtZXMgKyBcIi1cIiA6ICcnO1xuICAgICAgdmFyIGJhc2VDbGFzc05hbWUgPSBpc1N0cmluZ0NsYXNzTmFtZXMgPyBcIlwiICsgcHJlZml4ICsgdHlwZSA6IGNsYXNzTmFtZXNbdHlwZV07XG4gICAgICB2YXIgYWN0aXZlQ2xhc3NOYW1lID0gaXNTdHJpbmdDbGFzc05hbWVzID8gYmFzZUNsYXNzTmFtZSArIFwiLWFjdGl2ZVwiIDogY2xhc3NOYW1lc1t0eXBlICsgXCJBY3RpdmVcIl07XG4gICAgICB2YXIgZG9uZUNsYXNzTmFtZSA9IGlzU3RyaW5nQ2xhc3NOYW1lcyA/IGJhc2VDbGFzc05hbWUgKyBcIi1kb25lXCIgOiBjbGFzc05hbWVzW3R5cGUgKyBcIkRvbmVcIl07XG4gICAgICByZXR1cm4ge1xuICAgICAgICBiYXNlQ2xhc3NOYW1lOiBiYXNlQ2xhc3NOYW1lLFxuICAgICAgICBhY3RpdmVDbGFzc05hbWU6IGFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgICAgZG9uZUNsYXNzTmFtZTogZG9uZUNsYXNzTmFtZVxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IENTU1RyYW5zaXRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGRDbGFzcyA9IGZ1bmN0aW9uIGFkZENsYXNzKG5vZGUsIHR5cGUsIHBoYXNlKSB7XG4gICAgdmFyIGNsYXNzTmFtZSA9IHRoaXMuZ2V0Q2xhc3NOYW1lcyh0eXBlKVtwaGFzZSArIFwiQ2xhc3NOYW1lXCJdO1xuXG4gICAgdmFyIF90aGlzJGdldENsYXNzTmFtZXMgPSB0aGlzLmdldENsYXNzTmFtZXMoJ2VudGVyJyksXG4gICAgICAgIGRvbmVDbGFzc05hbWUgPSBfdGhpcyRnZXRDbGFzc05hbWVzLmRvbmVDbGFzc05hbWU7XG5cbiAgICBpZiAodHlwZSA9PT0gJ2FwcGVhcicgJiYgcGhhc2UgPT09ICdkb25lJyAmJiBkb25lQ2xhc3NOYW1lKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgXCIgKyBkb25lQ2xhc3NOYW1lO1xuICAgIH0gLy8gVGhpcyBpcyBmb3IgdG8gZm9yY2UgYSByZXBhaW50LFxuICAgIC8vIHdoaWNoIGlzIG5lY2Vzc2FyeSBpbiBvcmRlciB0byB0cmFuc2l0aW9uIHN0eWxlcyB3aGVuIGFkZGluZyBhIGNsYXNzIG5hbWUuXG5cblxuICAgIGlmIChwaGFzZSA9PT0gJ2FjdGl2ZScpIHtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuICAgICAgbm9kZSAmJiBub2RlLnNjcm9sbFRvcDtcbiAgICB9XG5cbiAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICB0aGlzLmFwcGxpZWRDbGFzc2VzW3R5cGVdW3BoYXNlXSA9IGNsYXNzTmFtZTtcblxuICAgICAgX2FkZENsYXNzKG5vZGUsIGNsYXNzTmFtZSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW1vdmVDbGFzc2VzID0gZnVuY3Rpb24gcmVtb3ZlQ2xhc3Nlcyhub2RlLCB0eXBlKSB7XG4gICAgdmFyIF90aGlzJGFwcGxpZWRDbGFzc2VzJCA9IHRoaXMuYXBwbGllZENsYXNzZXNbdHlwZV0sXG4gICAgICAgIGJhc2VDbGFzc05hbWUgPSBfdGhpcyRhcHBsaWVkQ2xhc3NlcyQuYmFzZSxcbiAgICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3RoaXMkYXBwbGllZENsYXNzZXMkLmFjdGl2ZSxcbiAgICAgICAgZG9uZUNsYXNzTmFtZSA9IF90aGlzJGFwcGxpZWRDbGFzc2VzJC5kb25lO1xuICAgIHRoaXMuYXBwbGllZENsYXNzZXNbdHlwZV0gPSB7fTtcblxuICAgIGlmIChiYXNlQ2xhc3NOYW1lKSB7XG4gICAgICByZW1vdmVDbGFzcyhub2RlLCBiYXNlQ2xhc3NOYW1lKTtcbiAgICB9XG5cbiAgICBpZiAoYWN0aXZlQ2xhc3NOYW1lKSB7XG4gICAgICByZW1vdmVDbGFzcyhub2RlLCBhY3RpdmVDbGFzc05hbWUpO1xuICAgIH1cblxuICAgIGlmIChkb25lQ2xhc3NOYW1lKSB7XG4gICAgICByZW1vdmVDbGFzcyhub2RlLCBkb25lQ2xhc3NOYW1lKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBfID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lcyxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2xhc3NOYW1lc1wiXSk7XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBvbkVudGVyOiB0aGlzLm9uRW50ZXIsXG4gICAgICBvbkVudGVyZWQ6IHRoaXMub25FbnRlcmVkLFxuICAgICAgb25FbnRlcmluZzogdGhpcy5vbkVudGVyaW5nLFxuICAgICAgb25FeGl0OiB0aGlzLm9uRXhpdCxcbiAgICAgIG9uRXhpdGluZzogdGhpcy5vbkV4aXRpbmcsXG4gICAgICBvbkV4aXRlZDogdGhpcy5vbkV4aXRlZFxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gQ1NTVHJhbnNpdGlvbjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQ1NTVHJhbnNpdGlvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGNsYXNzTmFtZXM6ICcnXG59O1xuQ1NTVHJhbnNpdGlvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBfZXh0ZW5kcyh7fSwgVHJhbnNpdGlvbi5wcm9wVHlwZXMsIHtcbiAgLyoqXG4gICAqIFRoZSBhbmltYXRpb24gY2xhc3NOYW1lcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQgYXMgaXQgYXBwZWFycywgZW50ZXJzLFxuICAgKiBleGl0cyBvciBoYXMgZmluaXNoZWQgdGhlIHRyYW5zaXRpb24uIEEgc2luZ2xlIG5hbWUgY2FuIGJlIHByb3ZpZGVkLCB3aGljaFxuICAgKiB3aWxsIGJlIHN1ZmZpeGVkIGZvciBlYWNoIHN0YWdlLCBlLmcuIGBjbGFzc05hbWVzPVwiZmFkZVwiYCBhcHBsaWVzOlxuICAgKlxuICAgKiAtIGBmYWRlLWFwcGVhcmAsIGBmYWRlLWFwcGVhci1hY3RpdmVgLCBgZmFkZS1hcHBlYXItZG9uZWBcbiAgICogLSBgZmFkZS1lbnRlcmAsIGBmYWRlLWVudGVyLWFjdGl2ZWAsIGBmYWRlLWVudGVyLWRvbmVgXG4gICAqIC0gYGZhZGUtZXhpdGAsIGBmYWRlLWV4aXQtYWN0aXZlYCwgYGZhZGUtZXhpdC1kb25lYFxuICAgKlxuICAgKiBBIGZldyBkZXRhaWxzIHRvIG5vdGUgYWJvdXQgaG93IHRoZXNlIGNsYXNzZXMgYXJlIGFwcGxpZWQ6XG4gICAqXG4gICAqIDEuIFRoZXkgYXJlIF9qb2luZWRfIHdpdGggdGhlIG9uZXMgdGhhdCBhcmUgYWxyZWFkeSBkZWZpbmVkIG9uIHRoZSBjaGlsZFxuICAgKiAgICBjb21wb25lbnQsIHNvIGlmIHlvdSB3YW50IHRvIGFkZCBzb21lIGJhc2Ugc3R5bGVzLCB5b3UgY2FuIHVzZVxuICAgKiAgICBgY2xhc3NOYW1lYCB3aXRob3V0IHdvcnJ5aW5nIHRoYXQgaXQgd2lsbCBiZSBvdmVycmlkZGVuLlxuICAgKlxuICAgKiAyLiBJZiB0aGUgdHJhbnNpdGlvbiBjb21wb25lbnQgbW91bnRzIHdpdGggYGluPXtmYWxzZX1gLCBubyBjbGFzc2VzIGFyZVxuICAgKiAgICBhcHBsaWVkIHlldC4gWW91IG1pZ2h0IGJlIGV4cGVjdGluZyBgKi1leGl0LWRvbmVgLCBidXQgaWYgeW91IHRoaW5rXG4gICAqICAgIGFib3V0IGl0LCBhIGNvbXBvbmVudCBjYW5ub3QgZmluaXNoIGV4aXRpbmcgaWYgaXQgaGFzbid0IGVudGVyZWQgeWV0LlxuICAgKlxuICAgKiAyLiBgZmFkZS1hcHBlYXItZG9uZWAgYW5kIGBmYWRlLWVudGVyLWRvbmVgIHdpbGwgX2JvdGhfIGJlIGFwcGxpZWQuIFRoaXNcbiAgICogICAgYWxsb3dzIHlvdSB0byBkZWZpbmUgZGlmZmVyZW50IGJlaGF2aW9yIGZvciB3aGVuIGFwcGVhcmluZyBpcyBkb25lIGFuZFxuICAgKiAgICB3aGVuIHJlZ3VsYXIgZW50ZXJpbmcgaXMgZG9uZSwgdXNpbmcgc2VsZWN0b3JzIGxpa2VcbiAgICogICAgYC5mYWRlLWVudGVyLWRvbmU6bm90KC5mYWRlLWFwcGVhci1kb25lKWAuIEZvciBleGFtcGxlLCB5b3UgY291bGQgYXBwbHlcbiAgICogICAgYW4gZXBpYyBlbnRyYW5jZSBhbmltYXRpb24gd2hlbiBlbGVtZW50IGZpcnN0IGFwcGVhcnMgaW4gdGhlIERPTSB1c2luZ1xuICAgKiAgICBbQW5pbWF0ZS5jc3NdKGh0dHBzOi8vZGFuZWRlbi5naXRodWIuaW8vYW5pbWF0ZS5jc3MvKS4gT3RoZXJ3aXNlIHlvdSBjYW5cbiAgICogICAgc2ltcGx5IHVzZSBgZmFkZS1lbnRlci1kb25lYCBmb3IgZGVmaW5pbmcgYm90aCBjYXNlcy5cbiAgICpcbiAgICogRWFjaCBpbmRpdmlkdWFsIGNsYXNzTmFtZXMgY2FuIGFsc28gYmUgc3BlY2lmaWVkIGluZGVwZW5kZW50bHkgbGlrZTpcbiAgICpcbiAgICogYGBganNcbiAgICogY2xhc3NOYW1lcz17e1xuICAgKiAgYXBwZWFyOiAnbXktYXBwZWFyJyxcbiAgICogIGFwcGVhckFjdGl2ZTogJ215LWFjdGl2ZS1hcHBlYXInLFxuICAgKiAgYXBwZWFyRG9uZTogJ215LWRvbmUtYXBwZWFyJyxcbiAgICogIGVudGVyOiAnbXktZW50ZXInLFxuICAgKiAgZW50ZXJBY3RpdmU6ICdteS1hY3RpdmUtZW50ZXInLFxuICAgKiAgZW50ZXJEb25lOiAnbXktZG9uZS1lbnRlcicsXG4gICAqICBleGl0OiAnbXktZXhpdCcsXG4gICAqICBleGl0QWN0aXZlOiAnbXktYWN0aXZlLWV4aXQnLFxuICAgKiAgZXhpdERvbmU6ICdteS1kb25lLWV4aXQnLFxuICAgKiB9fVxuICAgKiBgYGBcbiAgICpcbiAgICogSWYgeW91IHdhbnQgdG8gc2V0IHRoZXNlIGNsYXNzZXMgdXNpbmcgQ1NTIE1vZHVsZXM6XG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMuY3NzJztcbiAgICogYGBgXG4gICAqXG4gICAqIHlvdSBtaWdodCB3YW50IHRvIHVzZSBjYW1lbENhc2UgaW4geW91ciBDU1MgZmlsZSwgdGhhdCB3YXkgY291bGQgc2ltcGx5XG4gICAqIHNwcmVhZCB0aGVtIGluc3RlYWQgb2YgbGlzdGluZyB0aGVtIG9uZSBieSBvbmU6XG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGNsYXNzTmFtZXM9e3sgLi4uc3R5bGVzIH19XG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7c3RyaW5nIHwge1xuICAgKiAgYXBwZWFyPzogc3RyaW5nLFxuICAgKiAgYXBwZWFyQWN0aXZlPzogc3RyaW5nLFxuICAgKiAgYXBwZWFyRG9uZT86IHN0cmluZyxcbiAgICogIGVudGVyPzogc3RyaW5nLFxuICAgKiAgZW50ZXJBY3RpdmU/OiBzdHJpbmcsXG4gICAqICBlbnRlckRvbmU/OiBzdHJpbmcsXG4gICAqICBleGl0Pzogc3RyaW5nLFxuICAgKiAgZXhpdEFjdGl2ZT86IHN0cmluZyxcbiAgICogIGV4aXREb25lPzogc3RyaW5nLFxuICAgKiB9fVxuICAgKi9cbiAgY2xhc3NOYW1lczogY2xhc3NOYW1lc1NoYXBlLFxuXG4gIC8qKlxuICAgKiBBIGA8VHJhbnNpdGlvbj5gIGNhbGxiYWNrIGZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSAnZW50ZXInIG9yICdhcHBlYXInIGNsYXNzIGlzXG4gICAqIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbClcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBBIGA8VHJhbnNpdGlvbj5gIGNhbGxiYWNrIGZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSAnZW50ZXItYWN0aXZlJyBvclxuICAgKiAnYXBwZWFyLWFjdGl2ZScgY2xhc3MgaXMgYXBwbGllZC5cbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgYDxUcmFuc2l0aW9uPmAgY2FsbGJhY2sgZmlyZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlICdlbnRlcicgb3JcbiAgICogJ2FwcGVhcicgY2xhc3NlcyBhcmUgKipyZW1vdmVkKiogYW5kIHRoZSBgZG9uZWAgY2xhc3MgaXMgYWRkZWQgdG8gdGhlIERPTSBub2RlLlxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBBIGA8VHJhbnNpdGlvbj5gIGNhbGxiYWNrIGZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSAnZXhpdCcgY2xhc3MgaXNcbiAgICogYXBwbGllZC5cbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudClcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgYDxUcmFuc2l0aW9uPmAgY2FsbGJhY2sgZmlyZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlICdleGl0LWFjdGl2ZScgaXMgYXBwbGllZC5cbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudClcbiAgICovXG4gIG9uRXhpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgYDxUcmFuc2l0aW9uPmAgY2FsbGJhY2sgZmlyZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlICdleGl0JyBjbGFzc2VzXG4gICAqIGFyZSAqKnJlbW92ZWQqKiBhbmQgdGhlIGBleGl0LWRvbmVgIGNsYXNzIGlzIGFkZGVkIHRvIHRoZSBET00gbm9kZS5cbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudClcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuY1xufSkgOiB7fTtcbmV4cG9ydCBkZWZhdWx0IENTU1RyYW5zaXRpb247IiwiaW1wb3J0IGhhc0NsYXNzIGZyb20gJy4vaGFzQ2xhc3MnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gIGlmIChlbGVtZW50LmNsYXNzTGlzdCkgZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7ZWxzZSBpZiAoIWhhc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkpIGlmICh0eXBlb2YgZWxlbWVudC5jbGFzc05hbWUgPT09ICdzdHJpbmcnKSBlbGVtZW50LmNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lICsgXCIgXCIgKyBjbGFzc05hbWU7ZWxzZSBlbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoZWxlbWVudC5jbGFzc05hbWUgJiYgZWxlbWVudC5jbGFzc05hbWUuYmFzZVZhbCB8fCAnJykgKyBcIiBcIiArIGNsYXNzTmFtZSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFzQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gIGlmIChlbGVtZW50LmNsYXNzTGlzdCkgcmV0dXJuICEhY2xhc3NOYW1lICYmIGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7XG4gIHJldHVybiAoXCIgXCIgKyAoZWxlbWVudC5jbGFzc05hbWUuYmFzZVZhbCB8fCBlbGVtZW50LmNsYXNzTmFtZSkgKyBcIiBcIikuaW5kZXhPZihcIiBcIiArIGNsYXNzTmFtZSArIFwiIFwiKSAhPT0gLTE7XG59IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzFdIS4vdHJhbnNpdGlvbi1yb3V0ZS5jc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbkdyb3VwLCBDU1NUcmFuc2l0aW9uLCBUcmFuc2l0aW9ufSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbmltcG9ydCB7IFJvdXRlIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi90cmFuc2l0aW9uLXJvdXRlLmNzcyc7XG5cbmNvbnN0IGZpcnN0Q2hpbGQgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IGNoaWxkcmVuQXJyYXkgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KHByb3BzLmNoaWxkcmVuKTtcbiAgcmV0dXJuIGNoaWxkcmVuQXJyYXlbMF0gfHwgbnVsbDtcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJhbnNpdGlvblJvdXRlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblxuICByZW5kZXIgKCkge1xuICAgIGNvbnN0IFBhZ2VDb21wb25lbnQgPSB0aGlzLnByb3BzLmNvbXBvbmVudDsgXG5cbiAgICByZXR1cm4gKFxuICAgICAgPFJvdXRlXG4gICAgICAgIHBhdGg9e3RoaXMucHJvcHMucGF0aH1cbiAgICAgICAgZXhhY3Q9e3RoaXMucHJvcHMuZXhhY3R9XG4gICAgICAgIGNoaWxkcmVuPXsoIHByb3BzICkgPT4oXG4gICAgICAgICAgPFRyYW5zaXRpb25Hcm91cCBcbiAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5jb250YWluZXJ9IFxuICAgICAgICAgIGNvbXBvbmVudD17Zmlyc3RDaGlsZH0+XG4gICAgICAgICAge1xuICAgICAgICAgICAgcHJvcHMubWF0Y2ggJiZcbiAgICAgICAgICAgICAgPENTU1RyYW5zaXRpb25cbiAgICAgICAgICAgICAgICBjbGFzc05hbWVzPVwicGFnZVwiXG4gICAgICAgICAgICAgICAgdGltZW91dD17NDAwfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICA8UGFnZUNvbXBvbmVudCB7Li4udGhpcy5wcm9wc30gey4uLnByb3BzfS8+IFxuICAgICAgICAgICAgICA8L0NTU1RyYW5zaXRpb24+XG4gICAgICAgICAgfSBcbiAgICAgICAgICA8L1RyYW5zaXRpb25Hcm91cD5cbiAgICAgICAgKX1cbiAgICAgIC8+XG5cbiAgICApXG4gIH1cbn1cbiIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuL3N0eWxlLmNzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuL2FwcC5jc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCIvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jcmVhdGVCaW5kaW5nKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgb1trMl0gPSBtW2tdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIHJlc3VsdFtrXSA9IG1vZFtrXTtcclxuICAgIHJlc3VsdC5kZWZhdWx0ID0gbW9kO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwKSB7XHJcbiAgICBpZiAoIXByaXZhdGVNYXAuaGFzKHJlY2VpdmVyKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gZ2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByaXZhdGVNYXAuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHByaXZhdGVNYXAsIHZhbHVlKSB7XHJcbiAgICBpZiAoIXByaXZhdGVNYXAuaGFzKHJlY2VpdmVyKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gc2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZU1hcC5zZXQocmVjZWl2ZXIsIHZhbHVlKTtcclxuICAgIHJldHVybiB2YWx1ZTtcclxufVxyXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNGdW5jdGlvbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbnZhciBfZW5hYmxlX3N1cGVyX2dyb3NzX21vZGVfdGhhdF93aWxsX2NhdXNlX2JhZF90aGluZ3MgPSBmYWxzZTtcbmV4cG9ydCB2YXIgY29uZmlnID0ge1xuICAgIFByb21pc2U6IHVuZGVmaW5lZCxcbiAgICBzZXQgdXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBlcnJvciA9IC8qQF9fUFVSRV9fKi8gbmV3IEVycm9yKCk7XG4gICAgICAgICAgICAvKkBfX1BVUkVfXyovIGNvbnNvbGUud2FybignREVQUkVDQVRFRCEgUnhKUyB3YXMgc2V0IHRvIHVzZSBkZXByZWNhdGVkIHN5bmNocm9ub3VzIGVycm9yIGhhbmRsaW5nIGJlaGF2aW9yIGJ5IGNvZGUgYXQ6IFxcbicgKyBlcnJvci5zdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoX2VuYWJsZV9zdXBlcl9ncm9zc19tb2RlX3RoYXRfd2lsbF9jYXVzZV9iYWRfdGhpbmdzKSB7XG4gICAgICAgICAgICAvKkBfX1BVUkVfXyovIGNvbnNvbGUubG9nKCdSeEpTOiBCYWNrIHRvIGEgYmV0dGVyIGVycm9yIGJlaGF2aW9yLiBUaGFuayB5b3UuIDwzJyk7XG4gICAgICAgIH1cbiAgICAgICAgX2VuYWJsZV9zdXBlcl9ncm9zc19tb2RlX3RoYXRfd2lsbF9jYXVzZV9iYWRfdGhpbmdzID0gdmFsdWU7XG4gICAgfSxcbiAgICBnZXQgdXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZygpIHtcbiAgICAgICAgcmV0dXJuIF9lbmFibGVfc3VwZXJfZ3Jvc3NfbW9kZV90aGF0X3dpbGxfY2F1c2VfYmFkX3RoaW5ncztcbiAgICB9LFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmZpZy5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmV4cG9ydCBmdW5jdGlvbiBob3N0UmVwb3J0RXJyb3IoZXJyKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHRocm93IGVycjsgfSwgMCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ob3N0UmVwb3J0RXJyb3IuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9jb25maWcsX3V0aWxfaG9zdFJlcG9ydEVycm9yIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IGhvc3RSZXBvcnRFcnJvciB9IGZyb20gJy4vdXRpbC9ob3N0UmVwb3J0RXJyb3InO1xuZXhwb3J0IHZhciBlbXB0eSA9IHtcbiAgICBjbG9zZWQ6IHRydWUsXG4gICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7IH0sXG4gICAgZXJyb3I6IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBob3N0UmVwb3J0RXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHsgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9ic2VydmVyLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IHZhciBpc0FycmF5ID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkgeyByZXR1cm4gQXJyYXkuaXNBcnJheSB8fCAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHggJiYgdHlwZW9mIHgubGVuZ3RoID09PSAnbnVtYmVyJzsgfSk7IH0pKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FycmF5LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0KHgpIHtcbiAgICByZXR1cm4geCAhPT0gbnVsbCAmJiB0eXBlb2YgeCA9PT0gJ29iamVjdCc7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc09iamVjdC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbnZhciBVbnN1YnNjcmlwdGlvbkVycm9ySW1wbCA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBVbnN1YnNjcmlwdGlvbkVycm9ySW1wbChlcnJvcnMpIHtcbiAgICAgICAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gZXJyb3JzID9cbiAgICAgICAgICAgIGVycm9ycy5sZW5ndGggKyBcIiBlcnJvcnMgb2NjdXJyZWQgZHVyaW5nIHVuc3Vic2NyaXB0aW9uOlxcblwiICsgZXJyb3JzLm1hcChmdW5jdGlvbiAoZXJyLCBpKSB7IHJldHVybiBpICsgMSArIFwiKSBcIiArIGVyci50b1N0cmluZygpOyB9KS5qb2luKCdcXG4gICcpIDogJyc7XG4gICAgICAgIHRoaXMubmFtZSA9ICdVbnN1YnNjcmlwdGlvbkVycm9yJztcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBVbnN1YnNjcmlwdGlvbkVycm9ySW1wbC5wcm90b3R5cGUgPSAvKkBfX1BVUkVfXyovIE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbiAgICByZXR1cm4gVW5zdWJzY3JpcHRpb25FcnJvckltcGw7XG59KSgpO1xuZXhwb3J0IHZhciBVbnN1YnNjcmlwdGlvbkVycm9yID0gVW5zdWJzY3JpcHRpb25FcnJvckltcGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1VbnN1YnNjcmlwdGlvbkVycm9yLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfdXRpbF9pc0FycmF5LF91dGlsX2lzT2JqZWN0LF91dGlsX2lzRnVuY3Rpb24sX3V0aWxfVW5zdWJzY3JpcHRpb25FcnJvciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi91dGlsL2lzQXJyYXknO1xuaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tICcuL3V0aWwvaXNPYmplY3QnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IFVuc3Vic2NyaXB0aW9uRXJyb3IgfSBmcm9tICcuL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvcic7XG52YXIgU3Vic2NyaXB0aW9uID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbih1bnN1YnNjcmliZSkge1xuICAgICAgICB0aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wYXJlbnRPclBhcmVudHMgPSBudWxsO1xuICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25zID0gbnVsbDtcbiAgICAgICAgaWYgKHVuc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICB0aGlzLl9jdG9yVW5zdWJzY3JpYmUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fdW5zdWJzY3JpYmUgPSB1bnN1YnNjcmliZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZXJyb3JzO1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2EgPSB0aGlzLCBfcGFyZW50T3JQYXJlbnRzID0gX2EuX3BhcmVudE9yUGFyZW50cywgX2N0b3JVbnN1YnNjcmliZSA9IF9hLl9jdG9yVW5zdWJzY3JpYmUsIF91bnN1YnNjcmliZSA9IF9hLl91bnN1YnNjcmliZSwgX3N1YnNjcmlwdGlvbnMgPSBfYS5fc3Vic2NyaXB0aW9ucztcbiAgICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9wYXJlbnRPclBhcmVudHMgPSBudWxsO1xuICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25zID0gbnVsbDtcbiAgICAgICAgaWYgKF9wYXJlbnRPclBhcmVudHMgaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIF9wYXJlbnRPclBhcmVudHMucmVtb3ZlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKF9wYXJlbnRPclBhcmVudHMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBfcGFyZW50T3JQYXJlbnRzLmxlbmd0aDsgKytpbmRleCkge1xuICAgICAgICAgICAgICAgIHZhciBwYXJlbnRfMSA9IF9wYXJlbnRPclBhcmVudHNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIHBhcmVudF8xLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNGdW5jdGlvbihfdW5zdWJzY3JpYmUpKSB7XG4gICAgICAgICAgICBpZiAoX2N0b3JVbnN1YnNjcmliZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBfdW5zdWJzY3JpYmUuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JzID0gZSBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3IgPyBmbGF0dGVuVW5zdWJzY3JpcHRpb25FcnJvcnMoZS5lcnJvcnMpIDogW2VdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5KF9zdWJzY3JpcHRpb25zKSkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgICAgICB2YXIgbGVuID0gX3N1YnNjcmlwdGlvbnMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgICAgICB2YXIgc3ViID0gX3N1YnNjcmlwdGlvbnNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmIChpc09iamVjdChzdWIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzIHx8IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzLmNvbmNhdChmbGF0dGVuVW5zdWJzY3JpcHRpb25FcnJvcnMoZS5lcnJvcnMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvcnMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBVbnN1YnNjcmlwdGlvbkVycm9yKGVycm9ycyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0ZWFyZG93bjtcbiAgICAgICAgaWYgKCF0ZWFyZG93bikge1xuICAgICAgICAgICAgcmV0dXJuIFN1YnNjcmlwdGlvbi5FTVBUWTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHR5cGVvZiB0ZWFyZG93bikge1xuICAgICAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24odGVhcmRvd24pO1xuICAgICAgICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uID09PSB0aGlzIHx8IHN1YnNjcmlwdGlvbi5jbG9zZWQgfHwgdHlwZW9mIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIShzdWJzY3JpcHRpb24gaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0bXAgPSBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLl9zdWJzY3JpcHRpb25zID0gW3RtcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5yZWNvZ25pemVkIHRlYXJkb3duICcgKyB0ZWFyZG93biArICcgYWRkZWQgdG8gU3Vic2NyaXB0aW9uLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBfcGFyZW50T3JQYXJlbnRzID0gc3Vic2NyaXB0aW9uLl9wYXJlbnRPclBhcmVudHM7XG4gICAgICAgIGlmIChfcGFyZW50T3JQYXJlbnRzID09PSBudWxsKSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24uX3BhcmVudE9yUGFyZW50cyA9IHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoX3BhcmVudE9yUGFyZW50cyBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgaWYgKF9wYXJlbnRPclBhcmVudHMgPT09IHRoaXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLl9wYXJlbnRPclBhcmVudHMgPSBbX3BhcmVudE9yUGFyZW50cywgdGhpc107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoX3BhcmVudE9yUGFyZW50cy5pbmRleE9mKHRoaXMpID09PSAtMSkge1xuICAgICAgICAgICAgX3BhcmVudE9yUGFyZW50cy5wdXNoKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IHRoaXMuX3N1YnNjcmlwdGlvbnM7XG4gICAgICAgIGlmIChzdWJzY3JpcHRpb25zID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25zID0gW3N1YnNjcmlwdGlvbl07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zLnB1c2goc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb25zID0gdGhpcy5fc3Vic2NyaXB0aW9ucztcbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb25JbmRleCA9IHN1YnNjcmlwdGlvbnMuaW5kZXhPZihzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgaWYgKHN1YnNjcmlwdGlvbkluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMuc3BsaWNlKHN1YnNjcmlwdGlvbkluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLkVNUFRZID0gKGZ1bmN0aW9uIChlbXB0eSkge1xuICAgICAgICBlbXB0eS5jbG9zZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZW1wdHk7XG4gICAgfShuZXcgU3Vic2NyaXB0aW9uKCkpKTtcbiAgICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpKTtcbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiB9O1xuZnVuY3Rpb24gZmxhdHRlblVuc3Vic2NyaXB0aW9uRXJyb3JzKGVycm9ycykge1xuICAgIHJldHVybiBlcnJvcnMucmVkdWNlKGZ1bmN0aW9uIChlcnJzLCBlcnIpIHsgcmV0dXJuIGVycnMuY29uY2F0KChlcnIgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yKSA/IGVyci5lcnJvcnMgOiBlcnIpOyB9LCBbXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpcHRpb24uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgdmFyIHJ4U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IC8qQF9fUFVSRV9fKi8gU3ltYm9sKCdyeFN1YnNjcmliZXInKVxuICAgICAgICA6ICdAQHJ4U3Vic2NyaWJlcl8nICsgLypAX19QVVJFX18qLyBNYXRoLnJhbmRvbSgpO1xufSkoKTtcbmV4cG9ydCB2YXIgJCRyeFN1YnNjcmliZXIgPSByeFN1YnNjcmliZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yeFN1YnNjcmliZXIuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF91dGlsX2lzRnVuY3Rpb24sX09ic2VydmVyLF9TdWJzY3JpcHRpb24sX2ludGVybmFsX3N5bWJvbF9yeFN1YnNjcmliZXIsX2NvbmZpZyxfdXRpbF9ob3N0UmVwb3J0RXJyb3IgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBlbXB0eSBhcyBlbXB0eU9ic2VydmVyIH0gZnJvbSAnLi9PYnNlcnZlcic7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyByeFN1YnNjcmliZXIgYXMgcnhTdWJzY3JpYmVyU3ltYm9sIH0gZnJvbSAnLi4vaW50ZXJuYWwvc3ltYm9sL3J4U3Vic2NyaWJlcic7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyBob3N0UmVwb3J0RXJyb3IgfSBmcm9tICcuL3V0aWwvaG9zdFJlcG9ydEVycm9yJztcbnZhciBTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3Vic2NyaWJlcihkZXN0aW5hdGlvbk9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnN5bmNFcnJvclZhbHVlID0gbnVsbDtcbiAgICAgICAgX3RoaXMuc3luY0Vycm9yVGhyb3duID0gZmFsc2U7XG4gICAgICAgIF90aGlzLnN5bmNFcnJvclRocm93YWJsZSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBlbXB0eU9ic2VydmVyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGlmICghZGVzdGluYXRpb25Pck5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBlbXB0eU9ic2VydmVyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkZXN0aW5hdGlvbk9yTmV4dCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlc3RpbmF0aW9uT3JOZXh0IGluc3RhbmNlb2YgU3Vic2NyaWJlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc3luY0Vycm9yVGhyb3dhYmxlID0gZGVzdGluYXRpb25Pck5leHQuc3luY0Vycm9yVGhyb3dhYmxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbk9yTmV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uT3JOZXh0LmFkZChfdGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5zeW5jRXJyb3JUaHJvd2FibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBuZXcgU2FmZVN1YnNjcmliZXIoX3RoaXMsIGRlc3RpbmF0aW9uT3JOZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIF90aGlzLnN5bmNFcnJvclRocm93YWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBuZXcgU2FmZVN1YnNjcmliZXIoX3RoaXMsIGRlc3RpbmF0aW9uT3JOZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGVbcnhTdWJzY3JpYmVyU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG4gICAgU3Vic2NyaWJlci5jcmVhdGUgPSBmdW5jdGlvbiAobmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBzdWJzY3JpYmVyID0gbmV3IFN1YnNjcmliZXIobmV4dCwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICAgICAgc3Vic2NyaWJlci5zeW5jRXJyb3JUaHJvd2FibGUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZXI7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX25leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUudW5zdWJzY3JpYmUuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZUFuZFJlY3ljbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfcGFyZW50T3JQYXJlbnRzID0gdGhpcy5fcGFyZW50T3JQYXJlbnRzO1xuICAgICAgICB0aGlzLl9wYXJlbnRPclBhcmVudHMgPSBudWxsO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BhcmVudE9yUGFyZW50cyA9IF9wYXJlbnRPclBhcmVudHM7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIFN1YnNjcmliZXI7XG59KFN1YnNjcmlwdGlvbikpO1xuZXhwb3J0IHsgU3Vic2NyaWJlciB9O1xudmFyIFNhZmVTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFNhZmVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNhZmVTdWJzY3JpYmVyKF9wYXJlbnRTdWJzY3JpYmVyLCBvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9wYXJlbnRTdWJzY3JpYmVyID0gX3BhcmVudFN1YnNjcmliZXI7XG4gICAgICAgIHZhciBuZXh0O1xuICAgICAgICB2YXIgY29udGV4dCA9IF90aGlzO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihvYnNlcnZlck9yTmV4dCkpIHtcbiAgICAgICAgICAgIG5leHQgPSBvYnNlcnZlck9yTmV4dDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvYnNlcnZlck9yTmV4dCkge1xuICAgICAgICAgICAgbmV4dCA9IG9ic2VydmVyT3JOZXh0Lm5leHQ7XG4gICAgICAgICAgICBlcnJvciA9IG9ic2VydmVyT3JOZXh0LmVycm9yO1xuICAgICAgICAgICAgY29tcGxldGUgPSBvYnNlcnZlck9yTmV4dC5jb21wbGV0ZTtcbiAgICAgICAgICAgIGlmIChvYnNlcnZlck9yTmV4dCAhPT0gZW1wdHlPYnNlcnZlcikge1xuICAgICAgICAgICAgICAgIGNvbnRleHQgPSBPYmplY3QuY3JlYXRlKG9ic2VydmVyT3JOZXh0KTtcbiAgICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihjb250ZXh0LnVuc3Vic2NyaWJlKSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5hZGQoY29udGV4dC51bnN1YnNjcmliZS5iaW5kKGNvbnRleHQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGV4dC51bnN1YnNjcmliZSA9IF90aGlzLnVuc3Vic2NyaWJlLmJpbmQoX3RoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIF90aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgX3RoaXMuX25leHQgPSBuZXh0O1xuICAgICAgICBfdGhpcy5fZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgX3RoaXMuX2NvbXBsZXRlID0gY29tcGxldGU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU2FmZVN1YnNjcmliZXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCAmJiB0aGlzLl9uZXh0KSB7XG4gICAgICAgICAgICB2YXIgX3BhcmVudFN1YnNjcmliZXIgPSB0aGlzLl9wYXJlbnRTdWJzY3JpYmVyO1xuICAgICAgICAgICAgaWYgKCFjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyB8fCAhX3BhcmVudFN1YnNjcmliZXIuc3luY0Vycm9yVGhyb3dhYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fX3RyeU9yVW5zdWIodGhpcy5fbmV4dCwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fX3RyeU9yU2V0RXJyb3IoX3BhcmVudFN1YnNjcmliZXIsIHRoaXMuX25leHQsIHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU2FmZVN1YnNjcmliZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB2YXIgX3BhcmVudFN1YnNjcmliZXIgPSB0aGlzLl9wYXJlbnRTdWJzY3JpYmVyO1xuICAgICAgICAgICAgdmFyIHVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcgPSBjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZztcbiAgICAgICAgICAgIGlmICh0aGlzLl9lcnJvcikge1xuICAgICAgICAgICAgICAgIGlmICghdXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyB8fCAhX3BhcmVudFN1YnNjcmliZXIuc3luY0Vycm9yVGhyb3dhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX190cnlPclVuc3ViKHRoaXMuX2Vycm9yLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fdHJ5T3JTZXRFcnJvcihfcGFyZW50U3Vic2NyaWJlciwgdGhpcy5fZXJyb3IsIGVycik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghX3BhcmVudFN1YnNjcmliZXIuc3luY0Vycm9yVGhyb3dhYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIGlmICh1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaG9zdFJlcG9ydEVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgICAgICAgICBfcGFyZW50U3Vic2NyaWJlci5zeW5jRXJyb3JWYWx1ZSA9IGVycjtcbiAgICAgICAgICAgICAgICAgICAgX3BhcmVudFN1YnNjcmliZXIuc3luY0Vycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGhvc3RSZXBvcnRFcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNhZmVTdWJzY3JpYmVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdmFyIF9wYXJlbnRTdWJzY3JpYmVyID0gdGhpcy5fcGFyZW50U3Vic2NyaWJlcjtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIHZhciB3cmFwcGVkQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fY29tcGxldGUuY2FsbChfdGhpcy5fY29udGV4dCk7IH07XG4gICAgICAgICAgICAgICAgaWYgKCFjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyB8fCAhX3BhcmVudFN1YnNjcmliZXIuc3luY0Vycm9yVGhyb3dhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX190cnlPclVuc3ViKHdyYXBwZWRDb21wbGV0ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX190cnlPclNldEVycm9yKF9wYXJlbnRTdWJzY3JpYmVyLCB3cmFwcGVkQ29tcGxldGUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUuX190cnlPclVuc3ViID0gZnVuY3Rpb24gKGZuLCB2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm4uY2FsbCh0aGlzLl9jb250ZXh0LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaG9zdFJlcG9ydEVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNhZmVTdWJzY3JpYmVyLnByb3RvdHlwZS5fX3RyeU9yU2V0RXJyb3IgPSBmdW5jdGlvbiAocGFyZW50LCBmbiwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCFjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdiYWQgY2FsbCcpO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmbi5jYWxsKHRoaXMuX2NvbnRleHQsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnQuc3luY0Vycm9yVmFsdWUgPSBlcnI7XG4gICAgICAgICAgICAgICAgcGFyZW50LnN5bmNFcnJvclRocm93biA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBob3N0UmVwb3J0RXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3BhcmVudFN1YnNjcmliZXIgPSB0aGlzLl9wYXJlbnRTdWJzY3JpYmVyO1xuICAgICAgICB0aGlzLl9jb250ZXh0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcGFyZW50U3Vic2NyaWJlciA9IG51bGw7XG4gICAgICAgIF9wYXJlbnRTdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gU2FmZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IFNhZmVTdWJzY3JpYmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpYmVyLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IHZhciBvYnNlcnZhYmxlID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wub2JzZXJ2YWJsZSB8fCAnQEBvYnNlcnZhYmxlJzsgfSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmFibGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuICAgIHJldHVybiB4O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWRlbnRpdHkuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9pZGVudGl0eSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4vaWRlbnRpdHknO1xuZXhwb3J0IGZ1bmN0aW9uIHBpcGUoKSB7XG4gICAgdmFyIGZucyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGZuc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gcGlwZUZyb21BcnJheShmbnMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBpcGVGcm9tQXJyYXkoZm5zKSB7XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgIH1cbiAgICBpZiAoZm5zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gZm5zWzBdO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gcGlwZWQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGZucy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGZuKSB7IHJldHVybiBmbihwcmV2KTsgfSwgaW5wdXQpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waXBlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfdXRpbF9jYW5SZXBvcnRFcnJvcixfdXRpbF90b1N1YnNjcmliZXIsX3N5bWJvbF9vYnNlcnZhYmxlLF91dGlsX3BpcGUsX2NvbmZpZyBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBjYW5SZXBvcnRFcnJvciB9IGZyb20gJy4vdXRpbC9jYW5SZXBvcnRFcnJvcic7XG5pbXBvcnQgeyB0b1N1YnNjcmliZXIgfSBmcm9tICcuL3V0aWwvdG9TdWJzY3JpYmVyJztcbmltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuL3N5bWJvbC9vYnNlcnZhYmxlJztcbmltcG9ydCB7IHBpcGVGcm9tQXJyYXkgfSBmcm9tICcuL3V0aWwvcGlwZSc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG52YXIgT2JzZXJ2YWJsZSA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZSkge1xuICAgICAgICB0aGlzLl9pc1NjYWxhciA9IGZhbHNlO1xuICAgICAgICBpZiAoc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUubGlmdCA9IGZ1bmN0aW9uIChvcGVyYXRvcikge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcbiAgICAgICAgb2JzZXJ2YWJsZS5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBvcGVyYXRvciA9IHRoaXMub3BlcmF0b3I7XG4gICAgICAgIHZhciBzaW5rID0gdG9TdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgICAgICBpZiAob3BlcmF0b3IpIHtcbiAgICAgICAgICAgIHNpbmsuYWRkKG9wZXJhdG9yLmNhbGwoc2luaywgdGhpcy5zb3VyY2UpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNpbmsuYWRkKHRoaXMuc291cmNlIHx8IChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyAmJiAhc2luay5zeW5jRXJyb3JUaHJvd2FibGUpID9cbiAgICAgICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmUoc2luaykgOlxuICAgICAgICAgICAgICAgIHRoaXMuX3RyeVN1YnNjcmliZShzaW5rKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICBpZiAoc2luay5zeW5jRXJyb3JUaHJvd2FibGUpIHtcbiAgICAgICAgICAgICAgICBzaW5rLnN5bmNFcnJvclRocm93YWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChzaW5rLnN5bmNFcnJvclRocm93bikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBzaW5rLnN5bmNFcnJvclZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2luaztcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl90cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc2luaykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N1YnNjcmliZShzaW5rKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgICAgICAgICBzaW5rLnN5bmNFcnJvclRocm93biA9IHRydWU7XG4gICAgICAgICAgICAgICAgc2luay5zeW5jRXJyb3JWYWx1ZSA9IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYW5SZXBvcnRFcnJvcihzaW5rKSkge1xuICAgICAgICAgICAgICAgIHNpbmsuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKG5leHQsIHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVqZWN0LCByZXNvbHZlKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHRoaXMuc291cmNlO1xuICAgICAgICByZXR1cm4gc291cmNlICYmIHNvdXJjZS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZVtTeW1ib2xfb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9wZXJhdGlvbnMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3BlcmF0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwaXBlRnJvbUFycmF5KG9wZXJhdGlvbnMpKHRoaXMpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUudG9Qcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAoeCkgeyByZXR1cm4gdmFsdWUgPSB4OyB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiByZWplY3QoZXJyKTsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZSh2YWx1ZSk7IH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKHN1YnNjcmliZSkge1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoc3Vic2NyaWJlKTtcbiAgICB9O1xuICAgIHJldHVybiBPYnNlcnZhYmxlO1xufSgpKTtcbmV4cG9ydCB7IE9ic2VydmFibGUgfTtcbmZ1bmN0aW9uIGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKSB7XG4gICAgaWYgKCFwcm9taXNlQ3Rvcikge1xuICAgICAgICBwcm9taXNlQ3RvciA9IGNvbmZpZy5Qcm9taXNlIHx8IFByb21pc2U7XG4gICAgfVxuICAgIGlmICghcHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdubyBQcm9taXNlIGltcGwgZm91bmQnKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2VDdG9yO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JzZXJ2YWJsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX1N1YnNjcmliZXIsX3N5bWJvbF9yeFN1YnNjcmliZXIsX09ic2VydmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IHJ4U3Vic2NyaWJlciBhcyByeFN1YnNjcmliZXJTeW1ib2wgfSBmcm9tICcuLi9zeW1ib2wvcnhTdWJzY3JpYmVyJztcbmltcG9ydCB7IGVtcHR5IGFzIGVtcHR5T2JzZXJ2ZXIgfSBmcm9tICcuLi9PYnNlcnZlcic7XG5leHBvcnQgZnVuY3Rpb24gdG9TdWJzY3JpYmVyKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGUpIHtcbiAgICBpZiAobmV4dE9yT2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKG5leHRPck9ic2VydmVyIGluc3RhbmNlb2YgU3Vic2NyaWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG5leHRPck9ic2VydmVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZXh0T3JPYnNlcnZlcltyeFN1YnNjcmliZXJTeW1ib2xdKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dE9yT2JzZXJ2ZXJbcnhTdWJzY3JpYmVyU3ltYm9sXSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghbmV4dE9yT2JzZXJ2ZXIgJiYgIWVycm9yICYmICFjb21wbGV0ZSkge1xuICAgICAgICByZXR1cm4gbmV3IFN1YnNjcmliZXIoZW1wdHlPYnNlcnZlcik7XG4gICAgfVxuICAgIHJldHVybiBuZXcgU3Vic2NyaWJlcihuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvU3Vic2NyaWJlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGNhblJlcG9ydEVycm9yKG9ic2VydmVyKSB7XG4gICAgd2hpbGUgKG9ic2VydmVyKSB7XG4gICAgICAgIHZhciBfYSA9IG9ic2VydmVyLCBjbG9zZWRfMSA9IF9hLmNsb3NlZCwgZGVzdGluYXRpb24gPSBfYS5kZXN0aW5hdGlvbiwgaXNTdG9wcGVkID0gX2EuaXNTdG9wcGVkO1xuICAgICAgICBpZiAoY2xvc2VkXzEgfHwgaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGVzdGluYXRpb24gJiYgZGVzdGluYXRpb24gaW5zdGFuY2VvZiBTdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICBvYnNlcnZlciA9IGRlc3RpbmF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JzZXJ2ZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FuUmVwb3J0RXJyb3IuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3ltYm9sSXRlcmF0b3IoKSB7XG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicgfHwgIVN5bWJvbC5pdGVyYXRvcikge1xuICAgICAgICByZXR1cm4gJ0BAaXRlcmF0b3InO1xuICAgIH1cbiAgICByZXR1cm4gU3ltYm9sLml0ZXJhdG9yO1xufVxuZXhwb3J0IHZhciBpdGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gZ2V0U3ltYm9sSXRlcmF0b3IoKTtcbmV4cG9ydCB2YXIgJCRpdGVyYXRvciA9IGl0ZXJhdG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXRlcmF0b3IuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgdmFyIGlzQXJyYXlMaWtlID0gKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ICYmIHR5cGVvZiB4Lmxlbmd0aCA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHggIT09ICdmdW5jdGlvbic7IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBcnJheUxpa2UuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgZnVuY3Rpb24gaXNQcm9taXNlKHZhbHVlKSB7XG4gICAgcmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlLnN1YnNjcmliZSAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzUHJvbWlzZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX3V0aWxfc3Vic2NyaWJlVG8sX3NjaGVkdWxlZF9zY2hlZHVsZWQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG8gfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvJztcbmltcG9ydCB7IHNjaGVkdWxlZCB9IGZyb20gJy4uL3NjaGVkdWxlZC9zY2hlZHVsZWQnO1xuZXhwb3J0IGZ1bmN0aW9uIGZyb20oaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIGlmICghc2NoZWR1bGVyKSB7XG4gICAgICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIE9ic2VydmFibGUpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoc3Vic2NyaWJlVG8oaW5wdXQpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZWQoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3NjaGVkdWxlT2JzZXJ2YWJsZSxfc2NoZWR1bGVQcm9taXNlLF9zY2hlZHVsZUFycmF5LF9zY2hlZHVsZUl0ZXJhYmxlLF91dGlsX2lzSW50ZXJvcE9ic2VydmFibGUsX3V0aWxfaXNQcm9taXNlLF91dGlsX2lzQXJyYXlMaWtlLF91dGlsX2lzSXRlcmFibGUgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgc2NoZWR1bGVPYnNlcnZhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZU9ic2VydmFibGUnO1xuaW1wb3J0IHsgc2NoZWR1bGVQcm9taXNlIH0gZnJvbSAnLi9zY2hlZHVsZVByb21pc2UnO1xuaW1wb3J0IHsgc2NoZWR1bGVBcnJheSB9IGZyb20gJy4vc2NoZWR1bGVBcnJheSc7XG5pbXBvcnQgeyBzY2hlZHVsZUl0ZXJhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZUl0ZXJhYmxlJztcbmltcG9ydCB7IGlzSW50ZXJvcE9ic2VydmFibGUgfSBmcm9tICcuLi91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi4vdXRpbC9pc1Byb21pc2UnO1xuaW1wb3J0IHsgaXNBcnJheUxpa2UgfSBmcm9tICcuLi91dGlsL2lzQXJyYXlMaWtlJztcbmltcG9ydCB7IGlzSXRlcmFibGUgfSBmcm9tICcuLi91dGlsL2lzSXRlcmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlZChpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVPYnNlcnZhYmxlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUHJvbWlzZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZVByb21pc2UoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNBcnJheUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVBcnJheShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc0l0ZXJhYmxlKGlucHV0KSB8fCB0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVJdGVyYWJsZShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKChpbnB1dCAhPT0gbnVsbCAmJiB0eXBlb2YgaW5wdXQgfHwgaW5wdXQpICsgJyBpcyBub3Qgb2JzZXJ2YWJsZScpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVkLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfc3ltYm9sX29ic2VydmFibGUgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N5bWJvbC9vYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBpc0ludGVyb3BPYnNlcnZhYmxlKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0ICYmIHR5cGVvZiBpbnB1dFtTeW1ib2xfb2JzZXJ2YWJsZV0gPT09ICdmdW5jdGlvbic7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0ludGVyb3BPYnNlcnZhYmxlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfU3Vic2NyaXB0aW9uLF9zeW1ib2xfb2JzZXJ2YWJsZSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N5bWJvbC9vYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZU9ic2VydmFibGUoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc3ViID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IGlucHV0W1N5bWJvbF9vYnNlcnZhYmxlXSgpO1xuICAgICAgICAgICAgc3ViLmFkZChvYnNlcnZhYmxlLnN1YnNjcmliZSh7XG4gICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7IHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7IH0pKTsgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGVycikgeyBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0pKTsgfSxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkgeyBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH0pKTsgfSxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gc3ViO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVPYnNlcnZhYmxlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfU3Vic2NyaXB0aW9uIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL1N1YnNjcmlwdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVQcm9taXNlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHN1YiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0LnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH0pKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gc3ViO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVQcm9taXNlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfU3Vic2NyaXB0aW9uIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL1N1YnNjcmlwdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVBcnJheShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzdWIgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGkgPT09IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoaW5wdXRbaSsrXSk7XG4gICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgc3ViLmFkZCh0aGlzLnNjaGVkdWxlKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiBzdWI7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZUFycmF5LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfc3ltYm9sX2l0ZXJhdG9yIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGl0ZXJhdG9yIGFzIFN5bWJvbF9pdGVyYXRvciB9IGZyb20gJy4uL3N5bWJvbC9pdGVyYXRvcic7XG5leHBvcnQgZnVuY3Rpb24gaXNJdGVyYWJsZShpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dCAmJiB0eXBlb2YgaW5wdXRbU3ltYm9sX2l0ZXJhdG9yXSA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSXRlcmFibGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlLF9TdWJzY3JpcHRpb24sX3N5bWJvbF9pdGVyYXRvciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgaXRlcmF0b3IgYXMgU3ltYm9sX2l0ZXJhdG9yIH0gZnJvbSAnLi4vc3ltYm9sL2l0ZXJhdG9yJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZUl0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoIWlucHV0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSXRlcmFibGUgY2Fubm90IGJlIG51bGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzdWIgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHZhciBpdGVyYXRvcjtcbiAgICAgICAgc3ViLmFkZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaXRlcmF0b3IgJiYgdHlwZW9mIGl0ZXJhdG9yLnJldHVybiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaXRlcmF0b3IgPSBpbnB1dFtTeW1ib2xfaXRlcmF0b3JdKCk7XG4gICAgICAgICAgICBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciBkb25lO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBkb25lID0gcmVzdWx0LmRvbmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIHN1YjtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlSXRlcmFibGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9zdWJzY3JpYmVUb0FycmF5LF9zdWJzY3JpYmVUb1Byb21pc2UsX3N1YnNjcmliZVRvSXRlcmFibGUsX3N1YnNjcmliZVRvT2JzZXJ2YWJsZSxfaXNBcnJheUxpa2UsX2lzUHJvbWlzZSxfaXNPYmplY3QsX3N5bWJvbF9pdGVyYXRvcixfc3ltYm9sX29ic2VydmFibGUgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9BcnJheSB9IGZyb20gJy4vc3Vic2NyaWJlVG9BcnJheSc7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Byb21pc2UgfSBmcm9tICcuL3N1YnNjcmliZVRvUHJvbWlzZSc7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb0l0ZXJhYmxlIH0gZnJvbSAnLi9zdWJzY3JpYmVUb0l0ZXJhYmxlJztcbmltcG9ydCB7IHN1YnNjcmliZVRvT2JzZXJ2YWJsZSB9IGZyb20gJy4vc3Vic2NyaWJlVG9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzQXJyYXlMaWtlIH0gZnJvbSAnLi9pc0FycmF5TGlrZSc7XG5pbXBvcnQgeyBpc1Byb21pc2UgfSBmcm9tICcuL2lzUHJvbWlzZSc7XG5pbXBvcnQgeyBpc09iamVjdCB9IGZyb20gJy4vaXNPYmplY3QnO1xuaW1wb3J0IHsgaXRlcmF0b3IgYXMgU3ltYm9sX2l0ZXJhdG9yIH0gZnJvbSAnLi4vc3ltYm9sL2l0ZXJhdG9yJztcbmltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5leHBvcnQgdmFyIHN1YnNjcmliZVRvID0gZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgIGlmICghIXJlc3VsdCAmJiB0eXBlb2YgcmVzdWx0W1N5bWJvbF9vYnNlcnZhYmxlXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gc3Vic2NyaWJlVG9PYnNlcnZhYmxlKHJlc3VsdCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzQXJyYXlMaWtlKHJlc3VsdCkpIHtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZVRvQXJyYXkocmVzdWx0KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZVRvUHJvbWlzZShyZXN1bHQpO1xuICAgIH1cbiAgICBlbHNlIGlmICghIXJlc3VsdCAmJiB0eXBlb2YgcmVzdWx0W1N5bWJvbF9pdGVyYXRvcl0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZVRvSXRlcmFibGUocmVzdWx0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGlzT2JqZWN0KHJlc3VsdCkgPyAnYW4gaW52YWxpZCBvYmplY3QnIDogXCInXCIgKyByZXN1bHQgKyBcIidcIjtcbiAgICAgICAgdmFyIG1zZyA9IFwiWW91IHByb3ZpZGVkIFwiICsgdmFsdWUgKyBcIiB3aGVyZSBhIHN0cmVhbSB3YXMgZXhwZWN0ZWQuXCJcbiAgICAgICAgICAgICsgJyBZb3UgY2FuIHByb3ZpZGUgYW4gT2JzZXJ2YWJsZSwgUHJvbWlzZSwgQXJyYXksIG9yIEl0ZXJhYmxlLic7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IobXNnKTtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Vic2NyaWJlVG8uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9zeW1ib2xfb2JzZXJ2YWJsZSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi4vc3ltYm9sL29ic2VydmFibGUnO1xuZXhwb3J0IHZhciBzdWJzY3JpYmVUb09ic2VydmFibGUgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBvYnMgPSBvYmpbU3ltYm9sX29ic2VydmFibGVdKCk7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzLnN1YnNjcmliZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvdmlkZWQgb2JqZWN0IGRvZXMgbm90IGNvcnJlY3RseSBpbXBsZW1lbnQgU3ltYm9sLm9ic2VydmFibGUnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBvYnMuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJzY3JpYmVUb09ic2VydmFibGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgdmFyIHN1YnNjcmliZVRvQXJyYXkgPSBmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbiAmJiAhc3Vic2NyaWJlci5jbG9zZWQ7IGkrKykge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGFycmF5W2ldKTtcbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJzY3JpYmVUb0FycmF5LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfaG9zdFJlcG9ydEVycm9yIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGhvc3RSZXBvcnRFcnJvciB9IGZyb20gJy4vaG9zdFJlcG9ydEVycm9yJztcbmV4cG9ydCB2YXIgc3Vic2NyaWJlVG9Qcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0pXG4gICAgICAgICAgICAudGhlbihudWxsLCBob3N0UmVwb3J0RXJyb3IpO1xuICAgICAgICByZXR1cm4gc3Vic2NyaWJlcjtcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZVRvUHJvbWlzZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3N5bWJvbF9pdGVyYXRvciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBpdGVyYXRvciBhcyBTeW1ib2xfaXRlcmF0b3IgfSBmcm9tICcuLi9zeW1ib2wvaXRlcmF0b3InO1xuZXhwb3J0IHZhciBzdWJzY3JpYmVUb0l0ZXJhYmxlID0gZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhYmxlW1N5bWJvbF9pdGVyYXRvcl0oKTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSB2b2lkIDA7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGl0ZW0gPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdWJzY3JpYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGl0ZW0uZG9uZSkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChpdGVtLnZhbHVlKTtcbiAgICAgICAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlICh0cnVlKTtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVyYXRvci5yZXR1cm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVyO1xuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Vic2NyaWJlVG9JdGVyYWJsZS5qcy5tYXBcbiIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuL2Nha2UtbGlzdC5jb21wb25lbnQuY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzFdIS4veXVtLXJhdGluZy5jb21wb25lbnQuY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IFJlYWN0LCB7Q29tcG9uZW50fSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4veXVtLXJhdGluZy5jb21wb25lbnQuY3NzJztcblxuY29uc3QgSGVhcnQgPSAoaXRlbSwgaW5kZXgpID0+ICg8ZGl2IGtleT17aW5kZXh9IGNsYXNzTmFtZT17c3R5bGVzLmhlYXJ0Q29udGFpbmVyfT48ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmhlYXJ0fT48L2Rpdj48L2Rpdj4pO1xuXG5leHBvcnQgZGVmYXVsdCAoe3JhdGluZywgZm9udFNpemV9KSA9PiB7XG4gIGxldCBhcnJheSA9IFtdO1xuICBmb3IobGV0IGk9MDsgaSA8IHJhdGluZzsgaSsrKSB7XG4gICAgYXJyYXlbaV0gPSB0cnVlO1xuICB9XG4gIHJldHVybiAoXG4gICAgPGRpdiBzdHlsZT17e2ZvbnRTaXplOiBmb250U2l6ZX19IGNsYXNzTmFtZT17c3R5bGVzLmNvbnRhaW5lcn0+XG4gICAgICA8c3BhbiBjbGFzc05hbWU9e3N0eWxlcy5yYXRpbmd9Pll1bSBSYXRpbmc6PC9zcGFuPlxuICAgICAge2FycmF5Lm1hcChIZWFydCl9IFxuICAgIDwvZGl2PlxuICApXG59O1xuICBcblxuXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtmcm9tfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFRyYW5zaXRpb25Hcm91cCwgQ1NTVHJhbnNpdGlvbiwgVHJhbnNpdGlvbn0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vY2FrZS1saXN0LmNvbXBvbmVudC5jc3MnO1xuaW1wb3J0IFl1bVJhdGluZyBmcm9tICcuL3l1bS1yYXRpbmcuY29tcG9uZW50JztcblxuY29uc3QgZ29vZERhdGEgPSAoY2FrZSkgPT4ge1xuICByZXR1cm4gY2FrZS5uYW1lICYmIGNha2UuY29tbWVudCAmJiBjYWtlLmltYWdlVXJsO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FrZUxpc3RDb21wb25lbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpOyAgXG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgY2FrZXM6IFtdLFxuICAgICAgbG9hZGVkOiBmYWxzZVxuICAgIH07IFxuXG4gICAgdGhpcy5hZGRDYWtlID0gdGhpcy5hZGRDYWtlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVJbWFnZUNsaWNrID0gdGhpcy5oYW5kbGVJbWFnZUNsaWNrLmJpbmQodGhpcyk7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IGZyb20odGhpcy5wcm9wcy5jYWtlc1NlcnZpY2UuZ2V0Q2FrZUxpc3QoKSlcbiAgICAgIC5zdWJzY3JpYmUoY2FrZXMgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBjYWtlczogY2FrZXMuZmlsdGVyKGdvb2REYXRhKSxcbiAgICAgICAgICBsb2FkZWQ6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9KTsgXG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIGFkZENha2UoKSB7XG4gICAgdGhpcy5wcm9wcy5oaXN0b3J5LnB1c2goJy9hZGQteW91ci1vd24tY2FrZScpOyAgICAgIFxuICB9XG5cbiAgaGFuZGxlSW1hZ2VDbGljayhldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBjb25zdCBocmVmID0gZXZlbnQuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcbiAgICB0aGlzLnByb3BzLmhpc3RvcnkucHVzaChocmVmKVxuICB9XG5cbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCByZW5kZXJDYWtlID0gKGNha2UsIGluZGV4KSA9PiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8Q1NTVHJhbnNpdGlvbiB0aW1lb3V0PXs0MDB9IGtleT17Y2FrZS5pZH0gY2xhc3NOYW1lcz1cImxpc3RpdGVtXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5jYXJkfSA+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLm5hbWV9PntjYWtlLm5hbWV9PC9kaXY+IFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5pbWFnZUNvbnRhaW5lcn0+XG4gICAgICAgICAgICA8YSBvbkNsaWNrPXt0aGlzLmhhbmRsZUltYWdlQ2xpY2t9IGhyZWY9e2AvY2FrZXMvJHtjYWtlLmlkfWB9PlxuICAgICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT17c3R5bGVzLmltYWdlfSBzcmM9e2Nha2UuaW1hZ2VVcmx9Lz5cbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5jb21tZW50fT57Y2FrZS5jb21tZW50fTwvZGl2PlxuICAgICAgICAgICAgPFl1bVJhdGluZyBmb250U2l6ZT1cIjEycHhcIiByYXRpbmc9e2Nha2UueXVtRmFjdG9yfS8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvQ1NTVHJhbnNpdGlvbj5cbiAgICAgICk7IFxuICAgIH1cblxuICAgIGNvbnN0IHNob3dMb2FkaW5nTWVzc2FnZSA9ICgpID0+IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubG9hZGluZ01lc3NhZ2V9PlxuICAgICAgICAgIDxoMj5QbGVhc2Ugd2FpdCBhcyB3ZSBwcmVwYXJlIHlvdXIgZGVsaWNpb3VzIGNha2VzITwvaDI+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY29udGFpbmVyfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5oZWFkZXJ9PlxuICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5hZGRDYWtlfT5BZGQgeW91ciBvd24gZmF2b3VyaXRlIGNha2U8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubGlzdENvbnRhaW5lcn0+XG4gICAgICAgICAgeyF0aGlzLnN0YXRlLmxvYWRlZCAmJiBzaG93TG9hZGluZ01lc3NhZ2UoKX1cbiAgICAgICAgICA8VHJhbnNpdGlvbkdyb3VwIGNvbXBvbmVudD1cImRpdlwiIGNsYXNzTmFtZT17c3R5bGVzLml0ZW1zfT5cbiAgICAgICAgICAgIHt0aGlzLnN0YXRlLmNha2VzLm1hcChyZW5kZXJDYWtlKX1cbiAgICAgICAgICA8L1RyYW5zaXRpb25Hcm91cD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbiIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuL2hvbWUuY29tcG9uZW50LmNzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vaG9tZS5jb21wb25lbnQuY3NzJztcbmltcG9ydCB7IFxuICBOYXZMaW5rIFxuICB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYWtlTGlzdENvbXBvbmVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY29udGFpbmVyfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5pbm5lckNvbnRhaW5lcn0+XG4gICAgICAgICAgPE5hdkxpbmsgY2xhc3NOYW1lPXtzdHlsZXMubGlua310bz1cIi9jYWtlcy1saXN0XCIgYWN0aXZlQ2xhc3NOYW1lPVwiYWN0aXZlXCI+XG4gICAgICAgICAgICBDbGljayBoZXJlIHRvIHNlZSBzb21lIGRlbGljaW91cyBjYWtlcyEgXG4gICAgICAgICAgPC9OYXZMaW5rPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7IFxuICB9XG59XG5cbiIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuL2FkZC1jYWtlLmNvbXBvbmVudC5jc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL2FkZC1jYWtlLmNvbXBvbmVudC5jc3MnO1xuXG5sZXQgY3VycmVudElkID0gMDtcblxuZnVuY3Rpb24gY3JlYXRlSWQoKSB7XG4gIHJldHVybiBjdXJyZW50SWQrKztcbn1cblxuY29uc3QgaW1hZ2VzID0gW1xuICAnY2FrZS0xLmpwZycsXG4gICdjYWtlLTIuanBnJyxcbiAgJ2Nha2UtMy5qcGcnLFxuICAnY2FrZS00LmpwZycsXG4gICdjYWtlLTUuanBnJ1xuXTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWRkQ2FrZUNvbXBvbmVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG5hbWU6ICcnLFxuICAgICAgY29tbWVudDogJycsXG4gICAgICB5dW1GYWN0b3I6ICczJyAsXG4gICAgICBpbWFnZVVybDogJydcbiAgICB9XG5cbiAgICB0aGlzLmhhbmRsZU5hbWVDaGFuZ2UgPSB0aGlzLmhhbmRsZU5hbWVDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZUNvbW1lbnRDaGFuZ2UgPSB0aGlzLmhhbmRsZUNvbW1lbnRDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZU9wdGlvbkNoYW5nZSA9IHRoaXMuaGFuZGxlT3B0aW9uQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblN1Ym1pdCA9IHRoaXMub25TdWJtaXQuYmluZCh0aGlzKTtcbiAgICB0aGlzLmNhbmNlbCA9IHRoaXMuY2FuY2VsLmJpbmQodGhpcyk7XG4gIH1cblxuICBoYW5kbGVOYW1lQ2hhbmdlKGV2ZW50KSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBuYW1lOiBldmVudC50YXJnZXQudmFsdWVcbiAgICB9KTtcbiAgfVxuXG4gIGhhbmRsZUNvbW1lbnRDaGFuZ2UoZXZlbnQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGNvbW1lbnQ6IGV2ZW50LnRhcmdldC52YWx1ZVxuICAgIH0pO1xuICB9XG5cbiAgaGFuZGxlT3B0aW9uQ2hhbmdlKGV2ZW50KSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICB5dW1GYWN0b3I6IGV2ZW50LnRhcmdldC52YWx1ZSBcbiAgICB9KTtcbiAgfVxuXG4gIGhhbmRsZUltYWdlQ2xpY2soaW1hZ2VVcmwpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGltYWdlVXJsXG4gICAgfSk7XG4gIH1cblxuICBvblN1Ym1pdCgpIHtcbiAgICBsZXQgZGF0YSA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuc3RhdGUpO1xuICAgIGRhdGEuaWQgPSBjcmVhdGVJZCgpO1xuICAgIHRoaXMucHJvcHMuY2FrZXNTZXJ2aWNlLmFkZENha2UoZGF0YSk7IFxuICAgIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKCcvY2FrZXMtbGlzdCcpOyAgICAgIFxuICB9XG5cbiAgY2FuY2VsICgpIHtcbiAgICB0aGlzLnByb3BzLmhpc3RvcnkucHVzaCgnL2Nha2VzLWxpc3QnKTsgXG4gIH1cblxuICByZW5kZXIoKSB7XG5cbiAgICBjb25zdCByZW5kZXJJbWFnZSA9IChpbWFnZSwgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IHBhdGggPSAnaHR0cDovL3JpY2hhcmRodW50ZXIuY28udWsvY2FrZS1pbWFnZXMnO1xuXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmltYWdlQ29udGFpbmVyfSBrZXk9e2luZGV4fT5cbiAgICAgICAgICA8aW1nIG9uQ2xpY2s9e3RoaXMuaGFuZGxlSW1hZ2VDbGljay5iaW5kKHRoaXMsIGAke3BhdGh9LyR7aW1hZ2V9YCl9IHNyYz17YCR7cGF0aH0vJHtpbWFnZX1gfS8+IFxuICAgICAgICA8L2Rpdj5cbiAgICAgIClcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5jb250YWluZXJ9PlxuICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPXtzdHlsZXMubGFiZWx9Pm5hbWU6PGlucHV0IGNsYXNzTmFtZT17c3R5bGVzLmlucHV0fSBvbkNoYW5nZT17dGhpcy5oYW5kbGVOYW1lQ2hhbmdlfSB2YWx1ZT17dGhpcy5zdGF0ZS5uYW1lfS8+PC9sYWJlbD4gXG4gICAgICAgIDxsYWJlbCBjbGFzc05hbWU9e3N0eWxlcy5sYWJlbH0+Y29tbWVudDo8dGV4dGFyZWEgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ29tbWVudENoYW5nZX0gdmFsdWU9e3RoaXMuc3RhdGUuY29tbWVudH0vPjwvbGFiZWw+XG5cbiAgICAgICAgPGRpdj5ZdW0gZmFjdG9yOjwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMueXVtRmFjdG9yQ29udGFpbmVyfT5cbiAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgb25DaGFuZ2U9e3RoaXMuaGFuZGxlT3B0aW9uQ2hhbmdlfSB0eXBlPVwicmFkaW9cIiB2YWx1ZT1cIjFcIiBjaGVja2VkPXt0aGlzLnN0YXRlLnl1bUZhY3RvciA9PT0gJzEnfSAvPlxuICAgICAgICAgICAgMVxuICAgICAgICAgIDwvbGFiZWw+XG5cbiAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgb25DaGFuZ2U9e3RoaXMuaGFuZGxlT3B0aW9uQ2hhbmdlfSB0eXBlPVwicmFkaW9cIiB2YWx1ZT1cIjJcIiBjaGVja2VkPXt0aGlzLnN0YXRlLnl1bUZhY3RvciA9PT0gJzInfSAvPlxuICAgICAgICAgICAgMlxuICAgICAgICAgIDwvbGFiZWw+XG5cbiAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgb25DaGFuZ2U9e3RoaXMuaGFuZGxlT3B0aW9uQ2hhbmdlfSB0eXBlPVwicmFkaW9cIiB2YWx1ZT1cIjNcIiBjaGVja2VkPXt0aGlzLnN0YXRlLnl1bUZhY3RvciA9PT0gJzMnfSAvPlxuICAgICAgICAgICAgM1xuICAgICAgICAgIDwvbGFiZWw+XG5cbiAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgb25DaGFuZ2U9e3RoaXMuaGFuZGxlT3B0aW9uQ2hhbmdlfSB0eXBlPVwicmFkaW9cIiB2YWx1ZT1cIjRcIiBjaGVja2VkPXt0aGlzLnN0YXRlLnl1bUZhY3RvciA9PT0gJzQnfSAvPlxuICAgICAgICAgICAgNFxuICAgICAgICAgIDwvbGFiZWw+XG5cbiAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgb25DaGFuZ2U9e3RoaXMuaGFuZGxlT3B0aW9uQ2hhbmdlfSB0eXBlPVwicmFkaW9cIiB2YWx1ZT1cIjVcIiBjaGVja2VkPXt0aGlzLnN0YXRlLnl1bUZhY3RvciA9PT0gJzUnfSAvPlxuICAgICAgICAgICAgNVxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuaW1hZ2VzfT5cbiAgICAgICAgICA8aDI+Q2hvb3NlIGFuIEltYWdlPC9oMj5cblxuICAgICAgICAgIHtpbWFnZXMubWFwKHJlbmRlckltYWdlKX1cblxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY2hvc2VuSW1hZ2V9PlxuICAgICAgICAgICAgeyB0aGlzLnN0YXRlLmltYWdlVXJsICYmIDxpbWcgc3JjPXt0aGlzLnN0YXRlLmltYWdlVXJsfS8+IH1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5idXR0b25Db250YWluZXJ9PlxuICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5vblN1Ym1pdH0+U3VibWl0IChhbmQgc2VlIHlvdXIgY2FrZSBpbiB0aGUgbGlzdCBvZiBjYWtlcyk8L2J1dHRvbj5cbiAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMuY2FuY2VsfT5DYW5jZWwgKGFuZCBnbyBiYWNrIHRvIGxpc3Qgb2YgY2FrZXMpPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTsgXG4gIH1cbn1cblxuIiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzFdIS4vY2FrZS1kZXRhaWwuY29tcG9uZW50LmNzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsImltcG9ydCBSZWFjdCwge0NvbXBvbmVudH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtmcm9tfSBmcm9tICdyeGpzJztcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9jYWtlLWRldGFpbC5jb21wb25lbnQuY3NzJztcbmltcG9ydCBZdW1SYXRpbmcgZnJvbSAnLi95dW0tcmF0aW5nLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENha2VEZXRhaWxDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpOyAgXG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgY2FrZToge30sIFxuICAgICAgbG9hZGVkOiBmYWxzZVxuICAgIH07IFxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgXG4gICAgY29uc3QgaWQgPSB0aGlzLnByb3BzLm1hdGNoLnBhcmFtcy5pZDtcblxuICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gZnJvbSh0aGlzLnByb3BzLmNha2VzU2VydmljZS5nZXRDYWtlRGV0YWlsKGlkKSlcbiAgICAgIC5zdWJzY3JpYmUoY2FrZSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGNha2UsXG4gICAgICAgICAgbG9hZGVkOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSk7IFxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQgKCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY29udGFpbmVyfT5cbiAgICAgICAgPGgyIGNsYXNzTmFtZT17c3R5bGVzLmhlYWRlcn0+e3RoaXMuc3RhdGUuY2FrZS5uYW1lfTwvaDI+IFxuICAgICAgICA8aW1nIGNsYXNzTmFtZT17c3R5bGVzLmltYWdlfSBzcmM9e3RoaXMuc3RhdGUuY2FrZS5pbWFnZVVybH0vPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmNvbW1lbnR9Pnt0aGlzLnN0YXRlLmNha2UuY29tbWVudH08L2Rpdj5cbiAgICAgICAgPFl1bVJhdGluZyBmb250U2l6ZT1cIjE4cHhcIiByYXRpbmc9e3RoaXMuc3RhdGUuY2FrZS55dW1GYWN0b3J9Lz5cbiAgICAgIDwvZGl2PiBcbiAgICApO1xuICB9XG5cbn1cbiIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuL2FwcC5jb21wb25lbnQuY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFxuICBCcm93c2VyUm91dGVyLCBcbiAgUmVkaXJlY3QsIFxuICBOYXZMaW5rLCBcbiAgUm91dGUgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IFRyYW5zaXRpb25Hcm91cCwgQ1NTVHJhbnNpdGlvbiwgVHJhbnNpdGlvbn0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5pbXBvcnQgVHJhbnNpdGlvblJvdXRlIGZyb20gJy4vdHJhbnNpdGlvbi1yb3V0ZSc7XG5pbXBvcnQgJy4vc3R5bGUuY3NzJztcbmltcG9ydCAnLi9hcHAuY3NzJztcbmltcG9ydCBDYWtlTGlzdENvbXBvbmVudCBmcm9tICcuL2Nha2UtbGlzdC5jb21wb25lbnQuanMnO1xuaW1wb3J0IEhvbWVDb21wb25lbnQgZnJvbSAnLi9ob21lLmNvbXBvbmVudC5qcyc7XG5pbXBvcnQgQWRkQ2FrZUNvbXBvbmVudCBmcm9tICcuL2FkZC1jYWtlLmNvbXBvbmVudC5qcyc7XG5pbXBvcnQgQ2FrZURldGFpbENvbXBvbmVudCBmcm9tICcuL2Nha2UtZGV0YWlsLmNvbXBvbmVudC5qcyc7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vYXBwLmNvbXBvbmVudC5jc3MnO1xuaW1wb3J0IENha2VzU2VydmljZSBmcm9tICcuL2Nha2VzLnNlcnZpY2UnO1xuXG5jb25zdCBjYWtlc1NlcnZpY2UgPSBuZXcgQ2FrZXNTZXJ2aWNlKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcigpOyBcblxuICAgIHRoaXMuc3RhdGUgPSB7fTtcbiAgfVxuXG4gIHJlbmRlciAoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxCcm93c2VyUm91dGVyIGJhc2VuYW1lPXtwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/ICcnIDogJy9jYWtlcyd9PlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmNvbnRhaW5lcn0+XG4gICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPFRyYW5zaXRpb25Sb3V0ZSBcbiAgICAgICAgICAgICAgICAgIGNha2VzU2VydmljZT17Y2FrZXNTZXJ2aWNlfVxuICAgICAgICAgICAgICAgICAgY29tcG9uZW50PXtBZGRDYWtlQ29tcG9uZW50fSAgICAgXG4gICAgICAgICAgICAgICAgICBwYXRoPVwiL2FkZC15b3VyLW93bi1jYWtlXCIgIC8+XG4gICAgICAgICAgICAgICAgPFRyYW5zaXRpb25Sb3V0ZSBcbiAgICAgICAgICAgICAgICAgIGNvbXBvbmVudD17SG9tZUNvbXBvbmVudH0gICAgIFxuICAgICAgICAgICAgICAgICAgZXhhY3RcbiAgICAgICAgICAgICAgICAgIHBhdGg9XCIvXCIgIC8+XG4gICAgICAgICAgICAgICAgPFRyYW5zaXRpb25Sb3V0ZSBcbiAgICAgICAgICAgICAgICAgIGNha2VzU2VydmljZT17Y2FrZXNTZXJ2aWNlfVxuICAgICAgICAgICAgICAgICAgY29tcG9uZW50PXtDYWtlTGlzdENvbXBvbmVudH0gICAgIFxuICAgICAgICAgICAgICAgICAgZXhhY3RcbiAgICAgICAgICAgICAgICAgIHBhdGg9XCIvY2FrZXMtbGlzdFwiICAvPlxuICAgICAgICAgICAgICAgIDxUcmFuc2l0aW9uUm91dGUgXG4gICAgICAgICAgICAgICAgICBjYWtlc1NlcnZpY2U9e2Nha2VzU2VydmljZX1cbiAgICAgICAgICAgICAgICAgIGNvbXBvbmVudD17Q2FrZURldGFpbENvbXBvbmVudH0gICAgIFxuICAgICAgICAgICAgICAgICAgcGF0aD1cIi9jYWtlcy86aWRcIiAgLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9Ccm93c2VyUm91dGVyPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJ1xuaW1wb3J0ICcuL3Jlc2V0LmNzcyc7XG5pbXBvcnQgQXBwIGZyb20gJy4vYXBwLmNvbXBvbmVudCdcblxuY29uc3QgcmVuZGVyID0gQ29tcG9uZW50ID0+IHtcbiAgUmVhY3RET00ucmVuZGVyKFxuICAgIDxDb21wb25lbnQgLz4sXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcCcpXG4gIClcbn1cblxuaWYgKCdzZXJ2aWNlV29ya2VyJyBpbiBuYXZpZ2F0b3IpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcbiAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKCcuL3N3LmpzJykudGhlbihyZWdpc3RyYXRpb24gPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnU1cgcmVnaXN0ZXJlZDogJywgcmVnaXN0cmF0aW9uKTtcbiAgICAgIH0pLmNhdGNoKHJlZ2lzdHJhdGlvbkVycm9yID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ1NXIHJlZ2lzdHJhdGlvbiBmYWlsZWQ6ICcsIHJlZ2lzdHJhdGlvbkVycm9yKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5yZW5kZXIoQXBwKVxuXG4iLCJjb25zdCB1cmwgPSAnL2FwaSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENha2VzU2VydmljZSB7XG5cbiAgZ2V0Q2FrZUxpc3QoKSB7XG4gICAgcmV0dXJuIGZldGNoKHVybCArICcvZ2V0LWFsbC1jYWtlcycpXG4gICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpIFxuICB9XG5cbiAgZ2V0Q2FrZURldGFpbChpZCkge1xuXG4gICAgcmV0dXJuIGZldGNoKHVybCArICcvZ2V0LWNha2UvJyArIGlkLCB7XG4gICAgICBtZXRob2Q6ICdHRVQnXG4gICAgfSkudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgIH0pO1xuICB9XG5cbiAgYWRkQ2FrZShjYWtlKSB7XG4gICAgY29uc29sZS5sb2coJ2FkZCBjYWtlJywgY2FrZSk7XG5cbiAgICByZXR1cm4gZmV0Y2godXJsICsgJy9wdXQtY2FrZS8nICsgY2FrZS5pZCwge1xuICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGNha2UpXG4gICAgfSkudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygncmVzcG9uc2UnLCByZXNwb25zZSk7IFxuICAgIH0pO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9